_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  9.36M|{
 3803|  9.36M|    if constexpr (sizeof(U) == 1) {
 3804|  9.36M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  9.36M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  9.36M|{
 3767|  9.36M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  9.36M|    SCN_GCC_COMPAT_PUSH
 3770|  9.36M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  9.36M|    constexpr char lengths[] =
 3772|  9.36M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  9.36M|        "\1\1\1\1\1\1\1\1"
 3774|  9.36M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  9.36M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  9.36M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  9.36M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  9.36M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  9.36M|    SCN_GCC_COMPAT_POP
 3781|  9.36M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  8.63M|{
 4009|  8.63M|    if constexpr (sizeof(CharT) == 1) {
 4010|  8.63M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  8.63M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  8.63M|{
 3822|  8.63M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  8.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  8.63M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  8.63M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  8.63M|    };
 3827|       |
 3828|  8.63M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 7.71M, False: 919k]
  ------------------
 3829|  7.71M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 132, False: 7.71M]
  ------------------
 3830|    132|            SCN_UNLIKELY_ATTR
 3831|    132|            return invalid_code_point;
 3832|    132|        }
 3833|  7.71M|        return static_cast<char32_t>(input[0]);
 3834|  7.71M|    }
 3835|       |
 3836|   919k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 841k, False: 77.4k]
  ------------------
 3837|   841k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 24, False: 841k]
  ------------------
 3838|     24|            SCN_UNLIKELY_ATTR
 3839|     24|            return invalid_code_point;
 3840|     24|        }
 3841|   841k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 24.9k, False: 816k]
  ------------------
 3842|  24.9k|            SCN_UNLIKELY_ATTR
 3843|  24.9k|            return invalid_code_point;
 3844|  24.9k|        }
 3845|       |
 3846|   816k|        char32_t cp{};
 3847|   816k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   816k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   816k|        return cp;
 3850|   841k|    }
 3851|       |
 3852|  77.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 58.7k, False: 18.7k]
  ------------------
 3853|  58.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 18, False: 58.7k]
  ------------------
 3854|     18|            SCN_UNLIKELY_ATTR
 3855|     18|            return invalid_code_point;
 3856|     18|        }
 3857|  58.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 10.1k, False: 48.5k]
  ------------------
 3858|  58.7k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 480, False: 48.1k]
  ------------------
 3859|  10.5k|            SCN_UNLIKELY_ATTR
 3860|  10.5k|            return invalid_code_point;
 3861|  10.5k|        }
 3862|       |
 3863|  48.1k|        char32_t cp{};
 3864|  48.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  48.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  48.1k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  48.1k|        return cp;
 3868|  58.7k|    }
 3869|       |
 3870|  18.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 18.7k, False: 0]
  ------------------
 3871|  18.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 18.7k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  18.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 1.41k, False: 17.2k]
  ------------------
 3876|  1.41k|            SCN_UNLIKELY_ATTR
 3877|  1.41k|            return invalid_code_point;
 3878|  1.41k|        }
 3879|  17.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 11.1k, False: 6.13k]
  ------------------
 3880|  17.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 468, False: 5.67k]
  ------------------
 3881|  17.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 434, False: 5.23k]
  ------------------
 3882|  12.0k|            SCN_UNLIKELY_ATTR
 3883|  12.0k|            return invalid_code_point;
 3884|  12.0k|        }
 3885|       |
 3886|  5.23k|        char32_t cp{};
 3887|  5.23k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  5.23k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  5.23k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  5.23k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  5.23k|        return cp;
 3892|  17.2k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   978k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   978k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   978k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  4.50M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  4.50M|    else {
 3701|  4.50M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  4.50M|                                       to_address(first), to_address(last)))};
 3703|  4.50M|    }
 3704|  4.50M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  13.5M|{
  326|  13.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  13.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  13.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  13.6M|{
  304|  13.6M|    return p;
  305|  13.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  3.38M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  3.38M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  3.38M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  3.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  3.38M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  3.38M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5144|  21.3k|{
 5145|  21.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  21.3k|                  "Scan argument types must be default constructible");
 5147|  21.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  21.3k|                  "Scan argument types must be Destructible");
 5149|  21.3k|    static_assert(
 5150|  21.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  21.3k|        "Scan argument types must not be references");
 5152|  21.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4997|  21.3k|    {
 4998|       |        if constexpr (std::is_same_v<char_type, char> &&
 4999|  21.3k|                      !is_type_disabled<char_type>) {
 5000|  21.3k|            return val;
 5001|       |        }
 5002|       |        else if constexpr (is_type_disabled<char_type>) {
 5003|       |            return unscannable_disabled{val};
 5004|       |        }
 5005|       |        else {
 5006|       |            SCN_UNUSED(val);
 5007|       |            return unscannable_char{};
 5008|       |        }
 5009|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5098|  21.3k|{
 5099|  21.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  21.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  21.3k|    constexpr bool scannable_char =
 5103|  21.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  21.3k|    static_assert(scannable_char,
 5105|  21.3k|                  "Cannot scan an argument of an unsupported character "
 5106|  21.3k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  21.3k|    constexpr bool scannable_const =
 5109|  21.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  21.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  21.3k|    constexpr bool scannable_disabled =
 5113|  21.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  21.3k|    static_assert(scannable_disabled,
 5115|  21.3k|                  "Cannot scan an argument that has been disabled by "
 5116|  21.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  21.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  21.3k|    static_assert(
 5120|  21.3k|        scannable,
 5121|  21.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  21.3k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  21.3k|    return arg_value{arg};
 5125|  21.3k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4909|  21.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  21.3k|    {
 4911|  21.3k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|  96.0k|{
 8664|  96.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|  96.0k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8600|  96.0k|{
 8601|  96.0k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|  96.0k|    auto result = vscan_impl(buffer, format, args);
 8604|  96.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.8k, False: 2.17k]
  |  |  ------------------
  ------------------
 8605|  93.8k|        return unexpected(result.error());
 8606|  93.8k|    }
 8607|  2.17k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|  96.0k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4728|   192k|{
 4729|   192k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   192k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   192k|                  "\n"
 4733|   192k|                  "Unsupported range type given as input to a scanning "
 4734|   192k|                  "function.\n"
 4735|   192k|                  "A range needs to have a character type (value type) "
 4736|   192k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   192k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   192k|                  "to be included.\n"
 4739|   192k|                  "See the scnlib documentation for more details.");
 4740|   192k|    static_assert(
 4741|   192k|        !std::is_same_v<T, custom_char_traits>,
 4742|   192k|        "\n"
 4743|   192k|        "Unsupported range type given as input to a scanning "
 4744|   192k|        "function.\n"
 4745|   192k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   192k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   192k|        "not supported.");
 4748|   192k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   192k|                  "\n"
 4750|   192k|                  "Unsupported range type given as input to a scanning "
 4751|   192k|                  "function.\n"
 4752|   192k|                  "file_marker_found cannot be used as an "
 4753|   192k|                  "source range type to scn::scan.\n"
 4754|   192k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   192k|                  "and do not provide an explicit source range, "
 4756|   192k|                  "or use scn::scan with a FILE* directly.");
 4757|   192k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   192k|                  "\n"
 4759|   192k|                  "Unsupported range type given as input to a scanning "
 4760|   192k|                  "function.\n"
 4761|   192k|                  "In order to be scannable, a range needs to satisfy "
 4762|   192k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   192k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   192k|                  "\n"
 4765|   192k|                  "Unsupported range type given as input to a scanning "
 4766|   192k|                  "function.\n"
 4767|   192k|                  "A range needs to model forward_range and have a valid "
 4768|   192k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   192k|                  "Examples of scannable ranges are std::string, "
 4770|   192k|                  "std::string_view, "
 4771|   192k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   192k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   192k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   192k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   192k|{
 4621|   192k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   192k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   192k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   580k|    {
 1598|   580k|        return has_value();
 1599|   580k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.16M|    {
  485|  1.16M|        return m_has_value;
  486|  1.16M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   573k|    {
 1604|   573k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   573k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   573k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   573k|        return this->get_unexpected().error();
 1606|   573k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   573k|    {
  468|   573k|        return m_unexpected;
  469|   573k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  3.48M|    {
  361|  3.48M|        return m_unexpected;
  362|  3.48M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  1.96M|        : m_unexpected(std::forward<Err>(e))
  346|  1.96M|    {
  347|  1.96M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.96M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.96M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   187k|        : base(unexpect, std::move(e.error())),
 1474|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   187k|    {
 1476|   187k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   187k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   187k|          m_has_value(false)
  446|   187k|    {
  447|   187k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  2.02M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.02M|    {
  356|  2.02M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.02M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   192k|    {
 1177|   192k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  4.35k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  4.35k|                      ranges::iterator_t<SourceRange>>) {
 5935|  4.35k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  4.35k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.35k|    {
 2724|  4.35k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.35k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.35k|    {
 2705|  4.35k|        return decay_copy(t.begin());
 2706|  4.35k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  77.2k|{
 1949|  77.2k|    return SCN_FWD(t);
  ------------------
  |  |  930|  77.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  77.2k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5919|  4.35k|{
 5920|  4.35k|    return ranges::end(source);
 5921|  4.35k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.35k|    {
 2781|  4.35k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.35k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.35k|    {
 2763|  4.35k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.35k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.14M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.14M|    static_cast<    \
  |  |  929|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.14M|    static_cast<    \
  |  |  929|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.14M|    {
 3312|  1.14M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.17k|    {
 1653|  6.17k|        return value();
 1654|  6.17k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  6.17k|    {
 1627|  6.17k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.17k|        return this->get_value();
 1629|  6.17k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  6.17k|    {
  451|  6.17k|        return m_value;
  452|  6.17k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  4.35k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.35k|    {
 1430|  4.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  4.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.35k|    {
  437|  4.35k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   192k|        : m_desc(desc), m_builtin_values(data)
 5487|   192k|    {
 5488|   192k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.1k, False: 216]
  |  |  ------------------
  ------------------
 8831|  21.1k|        return unexpected(result.error());
 8832|  21.1k|    }
 8833|    216|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   192k|    {
 1598|   192k|        return has_value();
 1599|   192k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   384k|    {
  485|   384k|        return m_has_value;
  486|   384k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   187k|    {
 1604|   187k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   187k|        return this->get_unexpected().error();
 1606|   187k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   187k|    {
  468|   187k|        return m_unexpected;
  469|   187k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  21.1k|        : base(unexpect, std::move(e.error())),
 1474|  21.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.1k|    {
 1476|  21.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  21.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.1k|          m_has_value(false)
  446|  21.1k|    {
  447|  21.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  4.35k|    {
 1653|  4.35k|        return value();
 1654|  4.35k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  4.35k|    {
 1627|  4.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.35k|        return this->get_value();
 1629|  4.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.35k|    {
  451|  4.35k|        return m_value;
  452|  4.35k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5838|    216|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    216|    {
 5840|    216|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|  4.35k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  4.35k|    static_cast<    \
  |  |  929|  4.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  4.35k|    {
 5691|  4.35k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5624|    216|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    216|    {
 5626|    216|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    216|        : base(std::in_place, std::forward<U>(val)),
 1428|    216|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    216|    {
 1430|    216|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    216|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    216|    {
  437|    216|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7700|   192k|{
 7701|   192k|    return s;
 7702|   192k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7677|   192k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|  96.0k|{
 8682|  96.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|  96.0k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8616|  96.0k|{
 8617|  96.0k|#if !SCN_DISABLE_LOCALE
 8618|  96.0k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|  96.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|  96.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|  96.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|  96.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.8k, False: 2.17k]
  |  |  ------------------
  ------------------
 8625|  93.8k|        return unexpected(result.error());
 8626|  93.8k|    }
 8627|  2.17k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|  96.0k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 0]
  |  |  ------------------
  ------------------
 8831|  21.3k|        return unexpected(result.error());
 8832|  21.3k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  21.3k|        : base(unexpect, std::move(e.error())),
 1474|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.3k|    {
 1476|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.3k|          m_has_value(false)
  446|  21.3k|    {
  447|  21.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 0]
  |  |  ------------------
  ------------------
 8831|  21.3k|        return unexpected(result.error());
 8832|  21.3k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  21.3k|        : base(unexpect, std::move(e.error())),
 1474|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.3k|    {
 1476|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.3k|          m_has_value(false)
  446|  21.3k|    {
  447|  21.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 0]
  |  |  ------------------
  ------------------
 8831|  21.3k|        return unexpected(result.error());
 8832|  21.3k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  21.3k|        : base(unexpect, std::move(e.error())),
 1474|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.3k|    {
 1476|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.3k|          m_has_value(false)
  446|  21.3k|    {
  447|  21.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 0]
  |  |  ------------------
  ------------------
 8831|  21.3k|        return unexpected(result.error());
 8832|  21.3k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  21.3k|        : base(unexpect, std::move(e.error())),
 1474|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.3k|    {
 1476|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.3k|          m_has_value(false)
  446|  21.3k|    {
  447|  21.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 0]
  |  |  ------------------
  ------------------
 8831|  21.3k|        return unexpected(result.error());
 8832|  21.3k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  21.3k|        : base(unexpect, std::move(e.error())),
 1474|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.3k|    {
 1476|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.3k|          m_has_value(false)
  446|  21.3k|    {
  447|  21.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 1.37k]
  |  |  ------------------
  ------------------
 8831|  19.9k|        return unexpected(result.error());
 8832|  19.9k|    }
 8833|  1.37k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  19.9k|        : base(unexpect, std::move(e.error())),
 1474|  19.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.9k|    {
 1476|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  19.9k|        : m_has_value(false)
  625|  19.9k|    {
  626|  19.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.9k|    {
  689|  19.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.9k|                                  std::forward<Args>(args)...);
  691|  19.9k|        m_has_value = false;
  692|  19.9k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   124k|{
  392|   124k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   124k|        T(std::forward<Args>(args)...);
  394|   124k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.9k|    {
  718|  39.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  1.37k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.37k|    {
 5840|  1.37k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.95k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.95k|    static_cast<    \
  |  |  929|  1.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.95k|    {
 5626|  1.95k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.37k|        : m_has_value(true)
  615|  1.37k|    {
  616|  1.37k|        construct(std::forward<Args>(args)...);
  617|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.37k|    {
  682|  1.37k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.37k|        m_has_value = true;
  684|  1.37k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.37k|{
  392|  1.37k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.37k|        T(std::forward<Args>(args)...);
  394|  1.37k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|  1.37k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.75k|    {
  706|  2.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.75k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|  2.75k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  21.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  21.3k|    {
  631|  21.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.37k, False: 19.9k]
  ------------------
  632|  1.37k|            destroy_value();
  633|  1.37k|        }
  634|  19.9k|        else {
  635|  19.9k|            destroy_unexpected();
  636|  19.9k|        }
  637|  21.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  21.3k|    {
  675|  21.3k|        return m_has_value;
  676|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.37k|    {
  696|  1.37k|        scn::detail::destroy_at(value_ptr());
  697|  1.37k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.37k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.37k|    else {
  404|  1.37k|        p->~T();
  405|  1.37k|    }
  406|  1.37k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.9k|    {
  700|  19.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.9k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   124k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   124k|    else {
  404|   124k|        p->~T();
  405|   124k|    }
  406|   124k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  64.0k|{
 5145|  64.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  64.0k|                  "Scan argument types must be default constructible");
 5147|  64.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  64.0k|                  "Scan argument types must be Destructible");
 5149|  64.0k|    static_assert(
 5150|  64.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  64.0k|        "Scan argument types must not be references");
 5152|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  64.0k|{
 5099|  64.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  64.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  64.0k|    constexpr bool scannable_char =
 5103|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  64.0k|    static_assert(scannable_char,
 5105|  64.0k|                  "Cannot scan an argument of an unsupported character "
 5106|  64.0k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  64.0k|    constexpr bool scannable_const =
 5109|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  64.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  64.0k|    constexpr bool scannable_disabled =
 5113|  64.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  64.0k|    static_assert(scannable_disabled,
 5115|  64.0k|                  "Cannot scan an argument that has been disabled by "
 5116|  64.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  64.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  64.0k|    static_assert(
 5120|  64.0k|        scannable,
 5121|  64.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  64.0k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  64.0k|    return arg_value{arg};
 5125|  64.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  64.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  64.0k|    {
 4911|  64.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 1.37k]
  |  |  ------------------
  ------------------
 8831|  19.9k|        return unexpected(result.error());
 8832|  19.9k|    }
 8833|  1.37k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  19.9k|        : base(unexpect, std::move(e.error())),
 1474|  19.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.9k|    {
 1476|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  19.9k|        : m_has_value(false)
  625|  19.9k|    {
  626|  19.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.9k|    {
  689|  19.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.9k|                                  std::forward<Args>(args)...);
  691|  19.9k|        m_has_value = false;
  692|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.9k|    {
  718|  39.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  1.37k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.37k|    {
 5840|  1.37k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.95k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.95k|    static_cast<    \
  |  |  929|  1.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.95k|    {
 5626|  1.95k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.37k|        : m_has_value(true)
  615|  1.37k|    {
  616|  1.37k|        construct(std::forward<Args>(args)...);
  617|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.37k|    {
  682|  1.37k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.37k|        m_has_value = true;
  684|  1.37k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.37k|{
  392|  1.37k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.37k|        T(std::forward<Args>(args)...);
  394|  1.37k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|  1.37k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.75k|    {
  706|  2.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.75k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  2.75k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  21.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  21.3k|    {
  631|  21.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.37k, False: 19.9k]
  ------------------
  632|  1.37k|            destroy_value();
  633|  1.37k|        }
  634|  19.9k|        else {
  635|  19.9k|            destroy_unexpected();
  636|  19.9k|        }
  637|  21.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  21.3k|    {
  675|  21.3k|        return m_has_value;
  676|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.37k|    {
  696|  1.37k|        scn::detail::destroy_at(value_ptr());
  697|  1.37k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.37k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.37k|    else {
  404|  1.37k|        p->~T();
  405|  1.37k|    }
  406|  1.37k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.9k|    {
  700|  19.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.9k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  10.6k|{
 8877|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  10.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|  21.3k|{
 5406|  21.3k|    detail::check_scan_arg_types<Args...>();
 5407|  21.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  21.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|  21.3k|{
 5145|  21.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  21.3k|                  "Scan argument types must be default constructible");
 5147|  21.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  21.3k|                  "Scan argument types must be Destructible");
 5149|  21.3k|    static_assert(
 5150|  21.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  21.3k|        "Scan argument types must not be references");
 5152|  21.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|  21.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  21.3k|    {
 5359|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  21.3k|    {
 5370|  21.3k|        return {detail::make_arg<
 5371|  21.3k|            kind, Context,
 5372|  21.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  21.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  21.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|  21.3k|{
 5180|  21.3k|    return make_value<Context>(value).ref_value;
 5181|  21.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|  21.3k|{
 5130|  21.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  21.3k|                                  needs_context_tag>) {
 5134|  21.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  21.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|  21.3k|    {                                                                        \
 4969|  21.3k|        return val;                                                          \
 4970|  21.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|  21.3k|{
 5099|  21.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  21.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  21.3k|    constexpr bool scannable_char =
 5103|  21.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  21.3k|    static_assert(scannable_char,
 5105|  21.3k|                  "Cannot scan an argument of an unsupported character "
 5106|  21.3k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  21.3k|    constexpr bool scannable_const =
 5109|  21.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  21.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  21.3k|    constexpr bool scannable_disabled =
 5113|  21.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  21.3k|    static_assert(scannable_disabled,
 5115|  21.3k|                  "Cannot scan an argument that has been disabled by "
 5116|  21.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  21.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  21.3k|    static_assert(
 5120|  21.3k|        scannable,
 5121|  21.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  21.3k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  21.3k|    return arg_value{arg};
 5125|  21.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|  21.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  21.3k|    {
 4911|  21.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7984|  21.3k|    {
 7985|  21.3k|        return m_str;
 7986|  21.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  21.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  21.3k|    {
 5436|  21.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|  21.3k|    {
 5389|  21.3k|        return m_argptrs;
 5390|  21.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|  21.3k|{
 8830|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 1.37k]
  |  |  ------------------
  ------------------
 8831|  19.9k|        return unexpected(result.error());
 8832|  19.9k|    }
 8833|  1.37k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  21.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  19.9k|        : base(unexpect, std::move(e.error())),
 1474|  19.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.9k|    {
 1476|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  19.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  19.9k|          m_has_value(false)
  446|  19.9k|    {
  447|  19.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|  1.37k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.37k|    {
 5840|  1.37k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|  1.37k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.37k|    {
 5626|  1.37k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  1.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  1.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.37k|    {
  437|  1.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|  21.3k|    {
 5384|  21.3k|        return m_args;
 5385|  21.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  21.3k|        : m_str(r.str)
 7980|  21.3k|    {
 7981|  21.3k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  10.6k|{
 8944|  10.6k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  10.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  10.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.6k|    static_cast<    \
  |  |  929|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  10.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5144|  42.6k|{
 5145|  42.6k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  42.6k|                  "Scan argument types must be default constructible");
 5147|  42.6k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  42.6k|                  "Scan argument types must be Destructible");
 5149|  42.6k|    static_assert(
 5150|  42.6k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  42.6k|        "Scan argument types must not be references");
 5152|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5098|  42.6k|{
 5099|  42.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  42.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  42.6k|    constexpr bool scannable_char =
 5103|  42.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  42.6k|    static_assert(scannable_char,
 5105|  42.6k|                  "Cannot scan an argument of an unsupported character "
 5106|  42.6k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  42.6k|    constexpr bool scannable_const =
 5109|  42.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  42.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  42.6k|    constexpr bool scannable_disabled =
 5113|  42.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  42.6k|    static_assert(scannable_disabled,
 5115|  42.6k|                  "Cannot scan an argument that has been disabled by "
 5116|  42.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  42.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  42.6k|    static_assert(
 5120|  42.6k|        scannable,
 5121|  42.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  42.6k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  42.6k|    return arg_value{arg};
 5125|  42.6k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4909|  42.6k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  42.6k|    {
 4911|  42.6k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8600|   192k|{
 8601|   192k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   192k|    auto result = vscan_impl(buffer, format, args);
 8604|   192k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 191k, False: 912]
  |  |  ------------------
  ------------------
 8605|   191k|        return unexpected(result.error());
 8606|   191k|    }
 8607|    912|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    912|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   192k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4728|   384k|{
 4729|   384k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   384k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   384k|                  "\n"
 4733|   384k|                  "Unsupported range type given as input to a scanning "
 4734|   384k|                  "function.\n"
 4735|   384k|                  "A range needs to have a character type (value type) "
 4736|   384k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   384k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   384k|                  "to be included.\n"
 4739|   384k|                  "See the scnlib documentation for more details.");
 4740|   384k|    static_assert(
 4741|   384k|        !std::is_same_v<T, custom_char_traits>,
 4742|   384k|        "\n"
 4743|   384k|        "Unsupported range type given as input to a scanning "
 4744|   384k|        "function.\n"
 4745|   384k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   384k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   384k|        "not supported.");
 4748|   384k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   384k|                  "\n"
 4750|   384k|                  "Unsupported range type given as input to a scanning "
 4751|   384k|                  "function.\n"
 4752|   384k|                  "file_marker_found cannot be used as an "
 4753|   384k|                  "source range type to scn::scan.\n"
 4754|   384k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   384k|                  "and do not provide an explicit source range, "
 4756|   384k|                  "or use scn::scan with a FILE* directly.");
 4757|   384k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   384k|                  "\n"
 4759|   384k|                  "Unsupported range type given as input to a scanning "
 4760|   384k|                  "function.\n"
 4761|   384k|                  "In order to be scannable, a range needs to satisfy "
 4762|   384k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   384k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   384k|                  "\n"
 4765|   384k|                  "Unsupported range type given as input to a scanning "
 4766|   384k|                  "function.\n"
 4767|   384k|                  "A range needs to model forward_range and have a valid "
 4768|   384k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   384k|                  "Examples of scannable ranges are std::string, "
 4770|   384k|                  "std::string_view, "
 4771|   384k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   384k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   384k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   384k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   384k|{
 4621|   384k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   384k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   384k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   382k|        : base(unexpect, std::move(e.error())),
 1474|   382k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   382k|    {
 1476|   382k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   382k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   382k|          m_has_value(false)
  446|   382k|    {
  447|   382k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   384k|    {
 1177|   384k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  1.82k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.82k|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.82k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.82k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.82k|    {
 2724|  1.82k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.82k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.82k|    {
 2705|  1.82k|        return decay_copy(t.begin());
 2706|  1.82k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  39.2k|{
 1949|  39.2k|    return SCN_FWD(t);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  39.2k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5919|  1.82k|{
 5920|  1.82k|    return ranges::end(source);
 5921|  1.82k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.82k|    {
 2781|  1.82k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.82k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.82k|    {
 2763|  1.82k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.82k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   591k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   591k|    static_cast<    \
  |  |  929|   591k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   591k|    static_cast<    \
  |  |  929|   591k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   591k|    {
 3312|   591k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.82k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.82k|    {
 1430|  1.82k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.82k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.82k|    {
  437|  1.82k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   384k|        : m_desc(desc), m_builtin_values(data)
 5487|   384k|    {
 5488|   384k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.5k, False: 96]
  |  |  ------------------
  ------------------
 8831|  42.5k|        return unexpected(result.error());
 8832|  42.5k|    }
 8833|     96|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   384k|    {
 1598|   384k|        return has_value();
 1599|   384k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   768k|    {
  485|   768k|        return m_has_value;
  486|   768k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   382k|    {
 1604|   382k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   382k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   382k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   382k|        return this->get_unexpected().error();
 1606|   382k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   382k|    {
  468|   382k|        return m_unexpected;
  469|   382k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.82k|    {
 1653|  1.82k|        return value();
 1654|  1.82k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.82k|    {
 1627|  1.82k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.82k|        return this->get_value();
 1629|  1.82k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.82k|    {
  451|  1.82k|        return m_value;
  452|  1.82k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5838|     96|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|     96|    {
 5840|     96|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.82k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.82k|    static_cast<    \
  |  |  929|  1.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.82k|    {
 5691|  1.82k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5624|     96|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|     96|    {
 5626|     96|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|     96|        : base(std::in_place, std::forward<U>(val)),
 1428|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     96|    {
 1430|     96|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|     96|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     96|    {
  437|     96|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7705|   384k|{
 7706|   384k|    return s;
 7707|   384k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7677|   384k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8616|   192k|{
 8617|   192k|#if !SCN_DISABLE_LOCALE
 8618|   192k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   192k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   192k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   192k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   192k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 191k, False: 912]
  |  |  ------------------
  ------------------
 8625|   191k|        return unexpected(result.error());
 8626|   191k|    }
 8627|    912|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    912|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   192k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
 8831|  42.6k|        return unexpected(result.error());
 8832|  42.6k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.6k|        : base(unexpect, std::move(e.error())),
 1474|  42.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.6k|    {
 1476|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.6k|          m_has_value(false)
  446|  42.6k|    {
  447|  42.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
 8831|  42.6k|        return unexpected(result.error());
 8832|  42.6k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.6k|        : base(unexpect, std::move(e.error())),
 1474|  42.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.6k|    {
 1476|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.6k|          m_has_value(false)
  446|  42.6k|    {
  447|  42.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
 8831|  42.6k|        return unexpected(result.error());
 8832|  42.6k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.6k|        : base(unexpect, std::move(e.error())),
 1474|  42.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.6k|    {
 1476|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.6k|          m_has_value(false)
  446|  42.6k|    {
  447|  42.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
 8831|  42.6k|        return unexpected(result.error());
 8832|  42.6k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.6k|        : base(unexpect, std::move(e.error())),
 1474|  42.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.6k|    {
 1476|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.6k|          m_has_value(false)
  446|  42.6k|    {
  447|  42.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
 8831|  42.6k|        return unexpected(result.error());
 8832|  42.6k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  42.6k|        : base(unexpect, std::move(e.error())),
 1474|  42.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.6k|    {
 1476|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  42.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.6k|          m_has_value(false)
  446|  42.6k|    {
  447|  42.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.1k, False: 576]
  |  |  ------------------
  ------------------
 8831|  42.1k|        return unexpected(result.error());
 8832|  42.1k|    }
 8833|    576|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  42.1k|        : base(unexpect, std::move(e.error())),
 1474|  42.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.1k|    {
 1476|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  42.1k|        : m_has_value(false)
  625|  42.1k|    {
  626|  42.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  42.1k|    {
  689|  42.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  42.1k|                                  std::forward<Args>(args)...);
  691|  42.1k|        m_has_value = false;
  692|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  84.2k|    {
  718|  84.2k|        return reinterpret_cast<unexpected<E>*>(
  719|  84.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  84.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  84.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    576|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    576|    {
 5840|    576|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    576|        : base(std::in_place, std::forward<U>(val)),
 1428|    576|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    576|    {
 1430|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    576|        : m_has_value(true)
  615|    576|    {
  616|    576|        construct(std::forward<Args>(args)...);
  617|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    576|    {
  682|    576|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    576|        m_has_value = true;
  684|    576|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    576|{
  392|    576|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    576|        T(std::forward<Args>(args)...);
  394|    576|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|    576|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.15k|    {
  706|  1.15k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.15k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.15k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|  1.15k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  42.6k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  42.6k|    {
  631|  42.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 576, False: 42.1k]
  ------------------
  632|    576|            destroy_value();
  633|    576|        }
  634|  42.1k|        else {
  635|  42.1k|            destroy_unexpected();
  636|  42.1k|        }
  637|  42.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  42.6k|    {
  675|  42.6k|        return m_has_value;
  676|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    576|    {
  696|    576|        scn::detail::destroy_at(value_ptr());
  697|    576|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    576|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    576|    else {
  404|    576|        p->~T();
  405|    576|    }
  406|    576|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  42.1k|    {
  700|  42.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  42.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.1k, False: 576]
  |  |  ------------------
  ------------------
 8831|  42.1k|        return unexpected(result.error());
 8832|  42.1k|    }
 8833|    576|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  42.1k|        : base(unexpect, std::move(e.error())),
 1474|  42.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.1k|    {
 1476|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  42.1k|        : m_has_value(false)
  625|  42.1k|    {
  626|  42.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  42.1k|    {
  689|  42.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  42.1k|                                  std::forward<Args>(args)...);
  691|  42.1k|        m_has_value = false;
  692|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  84.2k|    {
  718|  84.2k|        return reinterpret_cast<unexpected<E>*>(
  719|  84.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  84.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  84.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    576|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    576|    {
 5840|    576|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    576|        : base(std::in_place, std::forward<U>(val)),
 1428|    576|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    576|    {
 1430|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    576|        : m_has_value(true)
  615|    576|    {
  616|    576|        construct(std::forward<Args>(args)...);
  617|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    576|    {
  682|    576|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    576|        m_has_value = true;
  684|    576|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    576|{
  392|    576|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    576|        T(std::forward<Args>(args)...);
  394|    576|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|    576|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.15k|    {
  706|  1.15k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.15k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.15k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.15k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  42.6k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  42.6k|    {
  631|  42.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 576, False: 42.1k]
  ------------------
  632|    576|            destroy_value();
  633|    576|        }
  634|  42.1k|        else {
  635|  42.1k|            destroy_unexpected();
  636|  42.1k|        }
  637|  42.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  42.6k|    {
  675|  42.6k|        return m_has_value;
  676|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    576|    {
  696|    576|        scn::detail::destroy_at(value_ptr());
  697|    576|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    576|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    576|    else {
  404|    576|        p->~T();
  405|    576|    }
  406|    576|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  42.1k|    {
  700|  42.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  42.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|  42.6k|{
 5406|  42.6k|    detail::check_scan_arg_types<Args...>();
 5407|  42.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  42.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|  42.6k|{
 5145|  42.6k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  42.6k|                  "Scan argument types must be default constructible");
 5147|  42.6k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  42.6k|                  "Scan argument types must be Destructible");
 5149|  42.6k|    static_assert(
 5150|  42.6k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  42.6k|        "Scan argument types must not be references");
 5152|  42.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|  42.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  42.6k|    {
 5359|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  42.6k|    {
 5370|  42.6k|        return {detail::make_arg<
 5371|  42.6k|            kind, Context,
 5372|  42.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  42.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  42.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|  42.6k|{
 5180|  42.6k|    return make_value<Context>(value).ref_value;
 5181|  42.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|  42.6k|{
 5130|  42.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  42.6k|                                  needs_context_tag>) {
 5134|  42.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  42.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|  42.6k|    {                                                                        \
 4969|  42.6k|        return val;                                                          \
 4970|  42.6k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|  42.6k|{
 5099|  42.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  42.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  42.6k|    constexpr bool scannable_char =
 5103|  42.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  42.6k|    static_assert(scannable_char,
 5105|  42.6k|                  "Cannot scan an argument of an unsupported character "
 5106|  42.6k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  42.6k|    constexpr bool scannable_const =
 5109|  42.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  42.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  42.6k|    constexpr bool scannable_disabled =
 5113|  42.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  42.6k|    static_assert(scannable_disabled,
 5115|  42.6k|                  "Cannot scan an argument that has been disabled by "
 5116|  42.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  42.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  42.6k|    static_assert(
 5120|  42.6k|        scannable,
 5121|  42.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  42.6k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  42.6k|    return arg_value{arg};
 5125|  42.6k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|  42.6k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  42.6k|    {
 4911|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7984|  42.6k|    {
 7985|  42.6k|        return m_str;
 7986|  42.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  42.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  42.6k|    {
 5436|  42.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|  42.6k|    {
 5389|  42.6k|        return m_argptrs;
 5390|  42.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|  42.6k|{
 8830|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.1k, False: 576]
  |  |  ------------------
  ------------------
 8831|  42.1k|        return unexpected(result.error());
 8832|  42.1k|    }
 8833|    576|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  42.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  42.1k|        : base(unexpect, std::move(e.error())),
 1474|  42.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.1k|    {
 1476|  42.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  42.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.1k|          m_has_value(false)
  446|  42.1k|    {
  447|  42.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.6k|    {
 1177|  42.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|    576|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    576|    {
 5840|    576|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|    576|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    576|    {
 5626|    576|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    576|        : base(std::in_place, std::forward<U>(val)),
 1428|    576|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    576|    {
 1430|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|    576|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    576|    {
  437|    576|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|  42.6k|    {
 5384|  42.6k|        return m_args;
 5385|  42.6k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  42.6k|        : m_str(r.str)
 7980|  42.6k|    {
 7981|  42.6k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  1.24M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  1.24M|    {
 3564|  1.24M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  1.24M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  5.31M|    {
 3570|  5.31M|        return m_code == good;
 3571|  5.31M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   167k|    {
 3581|   167k|        return m_code;
 3582|   167k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6190|  7.28k|    {
 6191|  7.28k|        return m_size;
 6192|  7.28k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|  4.75k|    {
 6232|  4.75k|        SCN_GCC_COMPAT_PUSH
 6233|  4.75k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|  4.75k|        switch (type) {
 6235|  2.09k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 2.09k, False: 2.66k]
  ------------------
 6236|  2.09k|                return 10;
 6237|     74|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 74, False: 4.67k]
  ------------------
 6238|     74|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 4.75k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 38, False: 4.71k]
  ------------------
 6243|     38|                return 2;
 6244|    126|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 126, False: 4.62k]
  ------------------
 6245|    126|                return 8;
 6246|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 40, False: 4.71k]
  ------------------
 6247|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 44, False: 4.70k]
  ------------------
 6248|     84|                return 10;
 6249|  2.33k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 2.33k, False: 2.41k]
  ------------------
 6250|  2.33k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 4.75k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|  4.75k|        }
 6256|  4.75k|        SCN_GCC_COMPAT_POP
 6257|  4.75k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|   178k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6272|  18.8k|    {
 6273|  18.8k|        m_specs.align = align;
 6274|  18.8k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6281|    624|    {
 6282|    624|        if constexpr (!SCN_DISABLE_LOCALE) {
 6283|    624|            m_specs.localized = true;
 6284|       |        }
 6285|       |        else {
 6286|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6287|       |        }
 6288|    624|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6291|  27.4k|    {
 6292|  27.4k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6292:13): [True: 0, False: 27.4k]
  |  Branch (6292:39): [True: 0, False: 0]
  ------------------
 6293|       |            // clang-format off
 6294|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|      0|        }
 6297|       |
 6298|  27.4k|        m_specs.width = width;
 6299|  27.4k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6301|  15.4k|    {
 6302|  15.4k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6302:13): [True: 68, False: 15.4k]
  ------------------
 6303|       |            // clang-format off
 6304|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6305|       |            // clang-format on
 6306|     68|        }
 6307|       |
 6308|  15.4k|        m_specs.precision = prec;
 6309|  15.4k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6312|   285k|    {
 6313|   285k|        m_specs.type = type;
 6314|   285k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6317|  2.76M|    {
 6318|  2.76M|        const auto cp_value = static_cast<unsigned>(cp);
 6319|  2.76M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  2.76M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 414k]
  |  |  ------------------
  ------------------
 6320|  2.35M|            m_specs.charset_literals[cp_value / 8] |=
 6321|  2.35M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6322|  2.35M|        }
 6323|   414k|        else {
 6324|   414k|            m_specs.charset_has_nonascii = true;
 6325|   414k|        }
 6326|  2.76M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6329|  16.5k|    {
 6330|  16.5k|        const auto begin_value = static_cast<unsigned>(begin);
 6331|  16.5k|        const auto end_value = static_cast<unsigned>(end);
 6332|  16.5k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6333|       |
 6334|  16.5k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.34k, False: 7.15k]
  |  |  ------------------
  ------------------
 6335|       |            // No need to bit-twiddle with a mask, because with the
 6336|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6337|  9.34k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  9.34k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6338|   580k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6338:40): [True: 571k, False: 9.34k]
  ------------------
 6339|   571k|                m_specs.charset_literals[v / 8] |=
 6340|   571k|                    static_cast<unsigned char>(1ul << (v % 8));
 6341|   571k|            }
 6342|  9.34k|        }
 6343|  7.15k|        else {
 6344|  7.15k|            m_specs.charset_has_nonascii = true;
 6345|  7.15k|        }
 6346|  16.5k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6349|  3.38k|    {
 6350|  3.38k|        m_specs.charset_is_inverted = true;
 6351|  3.38k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6368|   138k|    {
 6369|   138k|        m_specs.regexp_flags = flags;
 6370|   138k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6374|  11.9k|    {
 6375|  11.9k|        SCN_UNLIKELY_ATTR
 6376|  11.9k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6377|  11.9k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6385|  2.97M|    {
 6386|  2.97M|        return static_cast<bool>(m_error);
 6387|  2.97M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   167k|{
 3605|   167k|    return a.code() == b;
 3606|   167k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   167k|{
 3609|   167k|    return !(a == b);
 3610|   167k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|   269k|{
 3904|   269k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|   269k|    const auto is_trailing_code_unit = [](char ch) {
 3907|   269k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|   269k|    };
 3909|       |
 3910|   269k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 233k, False: 35.8k]
  ------------------
 3911|   233k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|   233k|        return static_cast<char32_t>(input[0]);
 3913|   233k|    }
 3914|       |
 3915|  35.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 33.1k, False: 2.72k]
  ------------------
 3916|  33.1k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  33.1k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  33.1k|        char32_t cp{};
 3920|  33.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  33.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  33.1k|        return cp;
 3923|  33.1k|    }
 3924|       |
 3925|  2.72k|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 2.50k, False: 222]
  ------------------
 3926|  2.50k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|  2.50k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|  2.50k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|  2.50k|        char32_t cp{};
 3931|  2.50k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|  2.50k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|  2.50k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|  2.50k|        return cp;
 3935|  2.50k|    }
 3936|       |
 3937|    222|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 222, False: 0]
  ------------------
 3938|    222|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    222|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    222|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    222|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    222|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    222|        char32_t cp{};
 3945|    222|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    222|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    222|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    222|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    222|        return cp;
 3950|    222|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|   787M|{
 4043|       |    // Pattern_White_Space property
 4044|   787M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 918k, False: 787M]
  |  Branch (4044:27): [True: 19.5k, False: 898k]
  ------------------
 4045|   787M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 6.49k, False: 787M]
  ------------------
 4046|   787M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 13.3k, False: 787M]
  ------------------
 4047|   787M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 2.68k, False: 787M]
  ------------------
 4048|   787M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 5.43k, False: 787M]
  ------------------
 4049|   787M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 1.35k, False: 787M]
  ------------------
 4050|   787M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 132, False: 787M]
  ------------------
 4051|   787M|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6120|   204k|{
 6121|   204k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6122|   204k|                                    static_cast<unsigned>(b));
 6123|   204k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6125|  26.3k|{
 6126|  26.3k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6127|  26.3k|                                    static_cast<unsigned>(b));
 6128|  26.3k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6140|  26.3k|{
 6141|  26.3k|    return a = a | b;
 6142|  26.3k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7072|  1.52k|{
 7073|  1.52k|    switch (type) {
 7074|    118|        case arg_type::none_type:
  ------------------
  |  Branch (7074:9): [True: 118, False: 1.40k]
  ------------------
 7075|    118|            return arg_type_category::none;
 7076|       |
 7077|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.52k]
  ------------------
 7078|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.52k]
  ------------------
 7079|    156|        case arg_type::int_type:
  ------------------
  |  Branch (7079:9): [True: 156, False: 1.36k]
  ------------------
 7080|    156|        case arg_type::long_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 1.52k]
  ------------------
 7081|    156|        case arg_type::llong_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.52k]
  ------------------
 7082|    156|            return arg_type_category::integer;
 7083|       |
 7084|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7084:9): [True: 0, False: 1.52k]
  ------------------
 7085|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.52k]
  ------------------
 7086|    156|        case arg_type::uint_type:
  ------------------
  |  Branch (7086:9): [True: 156, False: 1.36k]
  ------------------
 7087|    156|        case arg_type::ulong_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.52k]
  ------------------
 7088|    156|        case arg_type::ullong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 1.52k]
  ------------------
 7089|    156|            return arg_type_category::unsigned_integer;
 7090|       |
 7091|    156|        case arg_type::pointer_type:
  ------------------
  |  Branch (7091:9): [True: 156, False: 1.36k]
  ------------------
 7092|    156|            return arg_type_category::pointer;
 7093|    156|        case arg_type::bool_type:
  ------------------
  |  Branch (7093:9): [True: 156, False: 1.36k]
  ------------------
 7094|    156|            return arg_type_category::boolean;
 7095|     90|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7095:9): [True: 90, False: 1.43k]
  ------------------
 7096|    156|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7096:9): [True: 66, False: 1.45k]
  ------------------
 7097|    156|        case arg_type::code_point_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.52k]
  ------------------
 7098|    156|            return arg_type_category::character;
 7099|       |
 7100|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7100:9): [True: 0, False: 1.52k]
  ------------------
 7101|    156|        case arg_type::double_type:
  ------------------
  |  Branch (7101:9): [True: 156, False: 1.36k]
  ------------------
 7102|    156|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 1.52k]
  ------------------
 7103|    156|            return arg_type_category::floating;
 7104|       |
 7105|     90|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7105:9): [True: 90, False: 1.43k]
  ------------------
 7106|    246|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7106:9): [True: 156, False: 1.36k]
  ------------------
 7107|    312|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7107:9): [True: 66, False: 1.45k]
  ------------------
 7108|    468|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7108:9): [True: 156, False: 1.36k]
  ------------------
 7109|    468|            return arg_type_category::string;
 7110|       |
 7111|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7111:9): [True: 0, False: 1.52k]
  ------------------
 7112|      0|            return arg_type_category::custom;
 7113|       |
 7114|      0|            SCN_CLANG_PUSH
 7115|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7116|      0|        default:
  ------------------
  |  Branch (7116:9): [True: 0, False: 1.52k]
  ------------------
 7117|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7118|  1.52k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7119|  1.52k|            SCN_CLANG_POP
 7120|  1.52k|    }
 7121|       |
 7122|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7123|  1.52k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  1.49k|{
 3650|  1.49k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.49k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7158|  38.0k|{
 7159|  38.0k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.6k, False: 2.45k]
  |  |  ------------------
  ------------------
 7160|  35.6k|        return handler.on_error("Invalid type specifier for integer type");
 7161|  35.6k|    }
 7162|  2.45k|    if (specs.localized) {
  ------------------
  |  Branch (7162:9): [True: 204, False: 2.25k]
  ------------------
 7163|    204|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 196]
  |  |  ------------------
  ------------------
 7164|       |            // clang-format off
 7165|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7166|       |            // clang-format on
 7167|      8|            return;
 7168|      8|        }
 7169|    196|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 196]
  |  |  ------------------
  ------------------
 7170|       |            // clang-format off
 7171|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7172|       |            // clang-format on
 7173|      0|        }
 7174|    196|    }
 7175|  2.45k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  3.19k|{
 3650|  3.19k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.19k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7202|  19.0k|{
 7203|  19.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7203:9): [True: 17.9k, False: 1.06k]
  ------------------
 7204|  19.0k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7204:10): [True: 160, False: 17.8k]
  ------------------
 7205|  17.9k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7205:10): [True: 17.7k, False: 102]
  ------------------
 7206|  17.8k|        SCN_UNLIKELY_ATTR
 7207|  17.8k|        return handler.on_error("Invalid type specifier for float type");
 7208|  17.8k|    }
 7209|  19.0k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.2k|    {
  485|  89.2k|        return m_has_value;
  486|  89.2k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  44.6k|    {
 1598|  44.6k|        return has_value();
 1599|  44.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  44.6k|    {
  451|  44.6k|        return m_value;
  452|  44.6k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  44.6k|    {
 1627|  44.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  44.6k|        return this->get_value();
 1629|  44.6k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  44.6k|    {
 1663|  44.6k|        return std::move(value());
 1664|  44.6k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  24.2k|{
 3650|  24.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  24.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  13.1k|{
 3650|  13.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  13.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    582|{
 3650|    582|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    582|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|  1.63k|{
 3650|  1.63k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.63k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  1.59k|{
 3650|  1.59k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.59k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7214|  56.7k|{
 7215|  56.7k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7215:9): [True: 3.09k, False: 53.6k]
  ------------------
 7216|  56.7k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7216:9): [True: 828, False: 52.7k]
  ------------------
 7217|  56.7k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7217:9): [True: 5.77k, False: 47.0k]
  ------------------
 7218|  56.7k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7218:9): [True: 40.7k, False: 6.29k]
  ------------------
 7219|  56.7k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7219:9): [True: 5.53k, False: 756]
  ------------------
 7220|  55.9k|        return;
 7221|  55.9k|    }
 7222|    756|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7222:9): [True: 156, False: 600]
  ------------------
 7223|    156|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 144]
  |  |  ------------------
  ------------------
 7224|       |            // clang-format off
 7225|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7226|       |            // clang-format on
 7227|     12|        }
 7228|    144|        return;
 7229|    156|    }
 7230|    600|    SCN_UNLIKELY_ATTR
 7231|    600|    handler.on_error("Invalid type specifier for string");
 7232|    600|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  4.98k|{
 3650|  4.98k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.98k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     70|{
 3650|     70|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     70|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7248|  19.0k|{
 7249|  19.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7249:9): [True: 17.9k, False: 1.06k]
  ------------------
 7250|  19.0k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7250:9): [True: 17.6k, False: 308]
  ------------------
 7251|  19.0k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7251:9): [True: 17.6k, False: 30]
  ------------------
 7252|  19.0k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7252:9): [True: 17.6k, False: 24]
  ------------------
 7253|  19.0k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7253:9): [True: 17.5k, False: 18]
  ------------------
 7254|  19.0k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7254:9): [True: 17.5k, False: 16]
  ------------------
 7255|  19.0k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7255:9): [True: 17.5k, False: 56]
  ------------------
 7256|  19.0k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7256:9): [True: 17.5k, False: 16]
  ------------------
 7257|  17.5k|        SCN_UNLIKELY_ATTR
 7258|  17.5k|        return handler.on_error("Invalid type specifier for boolean");
 7259|  17.5k|    }
 7260|  19.0k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7180|  18.9k|{
 7181|  18.9k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7181:9): [True: 17.7k, False: 1.12k]
  ------------------
 7182|  18.9k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7182:9): [True: 0, False: 1.12k]
  ------------------
 7183|  17.7k|        SCN_UNLIKELY_ATTR
 7184|  17.7k|        return handler.on_error("Invalid type specifier for character type");
 7185|  17.7k|    }
 7186|  18.9k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7237|  18.9k|{
 7238|  18.9k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7238:9): [True: 17.8k, False: 1.03k]
  ------------------
 7239|  18.9k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7239:9): [True: 17.8k, False: 10]
  ------------------
 7240|  17.8k|        SCN_UNLIKELY_ATTR
 7241|  17.8k|        return handler.on_error("Invalid type specifier for pointer");
 7242|  17.8k|    }
 7243|  18.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3649|     88|{
 3650|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   185k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   185k|    else {
 3716|   185k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   185k|    }
 3718|   185k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   787M|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   787M|    else {
 3716|   787M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   787M|    }
 3718|   787M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  2.57M|    {
 3326|  2.57M|        return m_iterator;
 3327|  2.57M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  2.71M|    {
 3330|  2.71M|        return m_sentinel;
 3331|  2.71M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   842k|    {
 3326|   842k|        return m_iterator;
 3327|   842k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  1.57G|    {
 3330|  1.57G|        return m_sentinel;
 3331|  1.57G|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8000|   296k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.20k|    {
  361|  2.20k|        return m_unexpected;
  362|  2.20k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.67k|{
 3650|  5.67k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.67k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  58.5k|        : m_unexpected(std::forward<Err>(e))
  346|  58.5k|    {
  347|  58.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  58.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  58.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   213k|        : base(unexpect, std::move(e.error())),
 1474|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   213k|    {
 1476|   213k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   214k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   214k|          m_has_value(false)
  446|   214k|    {
  447|   214k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   255k|    {
 1177|   255k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  37.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  37.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  37.9k|    {
 1430|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  37.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  37.9k|    {
  437|  37.9k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   256k|    {
 1598|   256k|        return has_value();
 1599|   256k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   510k|    {
  485|   510k|        return m_has_value;
  486|   510k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   213k|    {
 1604|   213k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   213k|        return this->get_unexpected().error();
 1606|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   213k|    {
  468|   213k|        return m_unexpected;
  469|   213k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  27.2k|    {
 1663|  27.2k|        return std::move(value());
 1664|  27.2k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  40.1k|    {
 1627|  40.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  40.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  40.1k|        return this->get_value();
 1629|  40.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  40.1k|    {
  451|  40.1k|        return m_value;
  452|  40.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  87.6k|        : base(unexpect, std::move(e.error())),
 1474|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.6k|    {
 1476|  87.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  88.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  88.6k|          m_has_value(false)
  446|  88.6k|    {
  447|  88.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   118k|    {
 1177|   118k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  29.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  29.0k|    {
 1430|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  29.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  29.0k|    {
  437|  29.0k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   119k|    {
 1598|   119k|        return has_value();
 1599|   119k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   235k|    {
  485|   235k|        return m_has_value;
  486|   235k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  87.6k|    {
 1604|  87.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  87.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  87.6k|        return this->get_unexpected().error();
 1606|  87.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  87.6k|    {
  468|  87.6k|        return m_unexpected;
  469|  87.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  23.7k|    {
 1663|  23.7k|        return std::move(value());
 1664|  23.7k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  28.4k|    {
 1627|  28.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  28.4k|        return this->get_value();
 1629|  28.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  28.4k|    {
  451|  28.4k|        return m_value;
  452|  28.4k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.75k|    {
 1837|  8.75k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.75k|                                            std::forward<F>(f));
 1839|  8.75k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  8.75k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  8.75k|    else {
 1333|  8.75k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.75k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.75k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.75k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.75k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.75k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.75k|    }
 1340|  8.75k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  78.5k|    {
  485|  78.5k|        return m_has_value;
  486|  78.5k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  10.7k|    {
 1663|  10.7k|        return std::move(value());
 1664|  10.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  36.1k|    {
 1627|  36.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  36.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  36.1k|        return this->get_value();
 1629|  36.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  36.1k|    {
  451|  36.1k|        return m_value;
  452|  36.1k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    970|        : base(unexpect, std::forward<Args>(args)...),
 1484|    970|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    970|    {
 1486|    970|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   849k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6196|  5.52k|    {
 6197|  5.52k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  5.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|  5.52k|        CharT r{};
 6199|  5.52k|        std::memcpy(&r, m_data, m_size);
 6200|  5.52k|        return r;
 6201|  5.52k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  1.13k|        : m_unexpected(std::forward<Err>(e))
  346|  1.13k|    {
  347|  1.13k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.13k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.13k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  1.31k|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.31k|    {
  356|  1.31k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.31k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6205|    832|    {
 6206|    832|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6207|    832|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|    174|        : m_unexpected(std::forward<Err>(e))
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|      8|        : m_unexpected(std::forward<Err>(e))
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  20.1k|    {
  361|  20.1k|        return m_unexpected;
  362|  20.1k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.83k|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.83k|    {
  356|  3.83k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.83k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  31.1k|        : m_unexpected(std::forward<Err>(e))
  346|  31.1k|    {
  347|  31.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  31.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  31.1k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  31.1k|    {
  361|  31.1k|        return m_unexpected;
  362|  31.1k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  31.1k|        : m_unexpected(std::forward<Args>(args)...)
  355|  31.1k|    {
  356|  31.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  31.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  31.1k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    718|{
 1211|    718|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    718|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  3.11k|        : m_unexpected(std::forward<Err>(e))
  346|  3.11k|    {
  347|  3.11k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.11k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.39k|{
 1211|  1.39k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.39k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  81.8k|{
  326|  81.8k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  81.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  81.8k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  80.3k|    {
 3342|  80.3k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  80.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    440|        : base(unexpect, std::move(e.error())),
 1474|    440|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    440|    {
 1476|    440|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    440|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    440|          m_has_value(false)
  446|    440|    {
  447|    440|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  42.2k|    {
 1177|  42.2k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  41.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  41.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  41.8k|    {
 1430|  41.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  41.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  41.8k|    {
  437|  41.8k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  31.4k|    {
 1598|  31.4k|        return has_value();
 1599|  31.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  25.3k|    {
 1653|  25.3k|        return value();
 1654|  25.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  6.82k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.82k|    {
 1430|  6.82k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  6.82k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.82k|    {
  437|  6.82k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.16k|    {
 1177|  7.16k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    348|        : base(unexpect, std::move(e.error())),
 1474|    348|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    348|    {
 1476|    348|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    348|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    348|          m_has_value(false)
  446|    348|    {
  447|    348|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.42k|    {
 1598|  4.42k|        return has_value();
 1599|  4.42k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  12.6k|    {
  485|  12.6k|        return m_has_value;
  486|  12.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|  2.74k|    {
 1653|  2.74k|        return value();
 1654|  2.74k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  5.16k|    {
 1627|  5.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.16k|        return this->get_value();
 1629|  5.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  5.16k|    {
  451|  5.16k|        return m_value;
  452|  5.16k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    174|        : base(unexpect, std::move(e.error())),
 1474|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.54k|    {
 1177|  5.54k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  5.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.37k|    {
 1430|  5.37k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  5.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.37k|    {
  437|  5.37k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    812|    {
 1837|    812|        return detail::transform_error_impl(std::move(*this),
 1838|    812|                                            std::forward<F>(f));
 1839|    812|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    812|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    812|    else {
 1333|    812|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    812|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    812|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 812, False: 0]
  |  |  ------------------
  ------------------
 1335|    812|                   ? result(*std::forward<Exp>(exp))
 1336|    812|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    812|    }
 1340|    812|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.42k|    {
 1663|  2.42k|        return std::move(value());
 1664|  2.42k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  2.31k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.31k|    {
 1430|  2.31k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.31k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.31k|    {
  437|  2.31k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.1k|    {
 1177|  11.1k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    320|    {
 1614|    320|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    320|        return std::move(this->get_unexpected().error());
 1616|    320|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    320|    {
  468|    320|        return m_unexpected;
  469|    320|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.45k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.45k|    {
 1486|  1.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  8.11k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.11k|          m_has_value(false)
  446|  8.11k|    {
  447|  8.11k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.78k|    {
 2724|  1.78k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.78k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.78k|    {
 2705|  1.78k|        return decay_copy(t.begin());
 2706|  1.78k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.85k|{
 1949|  3.85k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.85k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.78k|    {
 3326|  1.78k|        return m_iterator;
 3327|  1.78k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.78k|    {
 2781|  1.78k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.78k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.78k|    {
 2763|  1.78k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.78k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.78k|    {
 3330|  1.78k|        return m_sentinel;
 3331|  1.78k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|  1.78k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.78k|    static_cast<    \
  |  |  929|  1.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.78k|    static_cast<    \
  |  |  929|  1.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.78k|    {
 3312|  1.78k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  5.54k|    {
 1598|  5.54k|        return has_value();
 1599|  5.54k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  11.0k|    {
  485|  11.0k|        return m_has_value;
  486|  11.0k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  5.37k|    {
 1663|  5.37k|        return std::move(value());
 1664|  5.37k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  5.37k|    {
 1627|  5.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.37k|        return this->get_value();
 1629|  5.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.37k|    {
  451|  5.37k|        return m_value;
  452|  5.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.0k|    {
 1177|  46.0k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  46.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  46.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  46.0k|    {
 1430|  46.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  46.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  46.0k|    {
  437|  46.0k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  46.0k|    {
 1598|  46.0k|        return has_value();
 1599|  46.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  92.0k|    {
  485|  92.0k|        return m_has_value;
  486|  92.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  46.0k|    {
 1663|  46.0k|        return std::move(value());
 1664|  46.0k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  46.0k|    {
 1627|  46.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  46.0k|        return this->get_value();
 1629|  46.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  46.0k|    {
  451|  46.0k|        return m_value;
  452|  46.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  6.66k|        : base(unexpect, std::move(e.error())),
 1474|  6.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.66k|    {
 1476|  6.66k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    612|        : base(unexpect, std::move(e.error())),
 1474|    612|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    612|    {
 1476|    612|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    932|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    932|          m_has_value(false)
  446|    932|    {
  447|    932|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.14k|    {
 1177|  7.14k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  4.60k|        : base(unexpect, std::move(e.error())),
 1474|  4.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.60k|    {
 1476|  4.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.60k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.60k|          m_has_value(false)
  446|  4.60k|    {
  447|  4.60k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.57k|    {
 1598|  6.57k|        return has_value();
 1599|  6.57k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  12.8k|    {
  485|  12.8k|        return m_has_value;
  486|  12.8k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.37k|    {
 1604|  2.37k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.37k|        return this->get_unexpected().error();
 1606|  2.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.24k|    {
  468|  3.24k|        return m_unexpected;
  469|  3.24k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|  1.18k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.18k|    {
 1430|  1.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|  1.18k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.18k|    {
  437|  1.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.18k|    {
 1177|  1.18k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.60k|    {
 1627|  1.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.60k|        return this->get_value();
 1629|  1.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.60k|    {
  451|  1.60k|        return m_value;
  452|  1.60k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    888|    {
 1598|    888|        return has_value();
 1599|    888|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.36k|    {
  485|  2.36k|        return m_has_value;
  486|  2.36k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    888|    {
 1177|    888|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|  1.18k|    {
 1663|  1.18k|        return std::move(value());
 1664|  1.18k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  1.18k|    {
 1627|  1.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.18k|        return this->get_value();
 1629|  1.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.18k|    {
  451|  1.18k|        return m_value;
  452|  1.18k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|   110k|    {
 3330|   110k|        return m_sentinel;
 3331|   110k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.92k|    {
 1837|  1.92k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.92k|                                            std::forward<F>(f));
 1839|  1.92k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.92k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.92k|    else {
 1333|  1.92k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.92k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.60k, False: 320]
  |  |  ------------------
  ------------------
 1335|  1.92k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.92k|                   : result(unexpect,
 1337|    320|                            trivial_invoke(std::forward<F>(f),
 1338|    320|                                           std::forward<Exp>(exp).error()));
 1339|  1.92k|    }
 1340|  1.92k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.60k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.60k|    {
 1430|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.60k|    {
  437|  1.60k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    320|        : base(unexpect, std::forward<Args>(args)...),
 1484|    320|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    320|    {
 1486|    320|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.60k|    {
 1663|  1.60k|        return std::move(value());
 1664|  1.60k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|   156k|    {
 3326|   156k|        return m_iterator;
 3327|   156k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    888|        : base(std::in_place, std::forward<U>(val)),
 1428|    888|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    888|    {
 1430|    888|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    888|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    888|    {
  437|    888|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    888|    {
 1837|    888|        return detail::transform_error_impl(std::move(*this),
 1838|    888|                                            std::forward<F>(f));
 1839|    888|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    888|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    888|    else {
 1333|    888|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    888|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    888|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 888, False: 0]
  |  |  ------------------
  ------------------
 1335|    888|                   ? result(*std::forward<Exp>(exp))
 1336|    888|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    888|    }
 1340|    888|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.77k|    {
  485|  1.77k|        return m_has_value;
  486|  1.77k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    888|    {
 1663|    888|        return std::move(value());
 1664|    888|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    888|    {
 1627|    888|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    888|        return this->get_value();
 1629|    888|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    888|    {
  451|    888|        return m_value;
  452|    888|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    888|        : base(std::in_place, std::forward<U>(val)),
 1428|    888|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    888|    {
 1430|    888|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    888|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    888|    {
  437|    888|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    888|    {
 1177|    888|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    888|    {
 1598|    888|        return has_value();
 1599|    888|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.77k|    {
  485|  1.77k|        return m_has_value;
  486|  1.77k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    888|    {
 1663|    888|        return std::move(value());
 1664|    888|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    888|    {
 1627|    888|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    888|        return this->get_value();
 1629|    888|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    888|    {
  451|    888|        return m_value;
  452|    888|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    868|    {
 1837|    868|        return detail::transform_error_impl(std::move(*this),
 1838|    868|                                            std::forward<F>(f));
 1839|    868|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    868|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    868|    else {
 1333|    868|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    868|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    868|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 868]
  |  |  ------------------
  ------------------
 1335|    868|                   ? result(*std::forward<Exp>(exp))
 1336|    868|                   : result(unexpect,
 1337|    868|                            trivial_invoke(std::forward<F>(f),
 1338|    868|                                           std::forward<Exp>(exp).error()));
 1339|    868|    }
 1340|    868|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    868|    {
 1614|    868|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    868|        return std::move(this->get_unexpected().error());
 1616|    868|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|  1.45k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.45k|    static_cast<    \
  |  |  929|  1.45k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.45k|    {
 3644|  1.45k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  62.0k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  62.0k|    static_cast<    \
  |  |  929|  62.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  62.0k|    static_cast<    \
  |  |  929|  62.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  62.0k|    {
 3312|  62.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|     20|        : base(unexpect, std::move(e.error())),
 1474|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|     20|        : m_has_value(false)
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  11.4k|    {
 1598|  11.4k|        return has_value();
 1599|  11.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  22.3k|    {
  485|  22.3k|        return m_has_value;
  486|  22.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  7.82k|    {
 1604|  7.82k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.82k|        return this->get_unexpected().error();
 1606|  7.82k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  7.82k|    {
  468|  7.82k|        return m_unexpected;
  469|  7.82k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.31k|    {
 1663|  2.31k|        return std::move(value());
 1664|  2.31k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.04k|    {
 1627|  3.04k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.04k|        return this->get_value();
 1629|  3.04k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.04k|    {
  451|  3.04k|        return m_value;
  452|  3.04k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.05k|        : base(unexpect, std::move(e.error())),
 1474|  1.05k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.05k|    {
 1476|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.15k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.15k|          m_has_value(false)
  446|  1.15k|    {
  447|  1.15k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.9k|    {
 1177|  14.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.8k|        : base(unexpect, std::move(e.error())),
 1474|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.8k|    {
 1476|  11.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.8k|          m_has_value(false)
  446|  11.8k|    {
  447|  11.8k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  15.9k|    {
 1598|  15.9k|        return has_value();
 1599|  15.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.7k|    {
  485|  24.7k|        return m_has_value;
  486|  24.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.82k|    {
 1604|  5.82k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.82k|        return this->get_unexpected().error();
 1606|  5.82k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.82k|    {
  468|  5.82k|        return m_unexpected;
  469|  5.82k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.81k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.81k|    {
 1430|  3.81k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.81k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.81k|    {
  437|  3.81k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.81k|    {
 1177|  3.81k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.99k|    {
 1627|  1.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.99k|        return this->get_value();
 1629|  1.99k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.99k|    {
  451|  1.99k|        return m_value;
  452|  1.99k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.86k|    {
 1598|  2.86k|        return has_value();
 1599|  2.86k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.62k|    {
  485|  7.62k|        return m_has_value;
  486|  7.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.86k|    {
 1177|  2.86k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.81k|    {
 1663|  3.81k|        return std::move(value());
 1664|  3.81k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.81k|    {
 1627|  3.81k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.81k|        return this->get_value();
 1629|  3.81k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.81k|    {
  451|  3.81k|        return m_value;
  452|  3.81k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  68.5k|    {
 3221|  68.5k|        return detail::to_address(ranges::begin(derived()));
 3222|  68.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  68.5k|    {
 2724|  68.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  68.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  68.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  68.5k|    {
 2705|  68.5k|        return decay_copy(t.begin());
 2706|  68.5k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  68.5k|    {
 3180|  68.5k|        return static_cast<D&>(*this);
 3181|  68.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.99k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.99k|    {
 1430|  1.99k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.99k|    {
  437|  1.99k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.86k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.86k|    {
 1430|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.86k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.86k|    {
  437|  2.86k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.86k|    {
 1837|  2.86k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.86k|                                            std::forward<F>(f));
 1839|  2.86k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.86k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.86k|    else {
 1333|  2.86k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.86k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.86k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.86k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.86k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.86k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.86k|    }
 1340|  2.86k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.73k|    {
  485|  5.73k|        return m_has_value;
  486|  5.73k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.86k|    {
 1663|  2.86k|        return std::move(value());
 1664|  2.86k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.86k|    {
 1627|  2.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.86k|        return this->get_value();
 1629|  2.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.86k|    {
  451|  2.86k|        return m_value;
  452|  2.86k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.86k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.86k|    {
 1430|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.86k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.86k|    {
  437|  2.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.86k|    {
 1177|  2.86k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.86k|    {
 1598|  2.86k|        return has_value();
 1599|  2.86k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.73k|    {
  485|  5.73k|        return m_has_value;
  486|  5.73k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.86k|    {
 1663|  2.86k|        return std::move(value());
 1664|  2.86k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.86k|    {
 1627|  2.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.86k|        return this->get_value();
 1629|  2.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.86k|    {
  451|  2.86k|        return m_value;
  452|  2.86k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|     84|        : base(unexpect, std::move(e.error())),
 1474|     84|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     84|    {
 1476|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|     84|        : m_has_value(false)
  625|     84|    {
  626|     84|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     84|    {
  689|     84|        scn::detail::construct_at(unexpected_ptr(),
  690|     84|                                  std::forward<Args>(args)...);
  691|     84|        m_has_value = false;
  692|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    252|    {
  718|    252|        return reinterpret_cast<unexpected<E>*>(
  719|    252|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    252|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    252|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     84|    {
 1177|     84|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     84|    {
 1598|     84|        return has_value();
 1599|     84|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    252|    {
  675|    252|        return m_has_value;
  676|    252|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     84|    {
 1604|     84|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     84|        return this->get_unexpected().error();
 1606|     84|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     84|    {
  658|     84|        return *unexpected_ptr();
  659|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     84|    {
  631|     84|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 84]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     84|        else {
  635|     84|            destroy_unexpected();
  636|     84|        }
  637|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     84|    {
  700|     84|        scn::detail::destroy_at(unexpected_ptr());
  701|     84|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  36.8k|    {
 2855|  36.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  36.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  36.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  36.8k|    {
 2836|  36.8k|        return t.data();
 2837|  36.8k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   573k|        : base(unexpect, std::move(e.error())),
 1474|   573k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   573k|    {
 1476|   573k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   573k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   573k|          m_has_value(false)
  446|   573k|    {
  447|   573k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   580k|    {
 1177|   580k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  6.17k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.17k|    {
 1430|  6.17k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  6.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.17k|    {
  437|  6.17k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.89k|{
 1211|  2.89k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.89k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    292|    {
 1837|    292|        return detail::transform_error_impl(std::move(*this),
 1838|    292|                                            std::forward<F>(f));
 1839|    292|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    292|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    292|    else {
 1333|    292|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    292|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    292|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 292, False: 0]
  |  |  ------------------
  ------------------
 1335|    292|                   ? result(*std::forward<Exp>(exp))
 1336|    292|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    292|    }
 1340|    292|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    292|        : base(std::in_place, std::forward<U>(val)),
 1428|    292|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    292|    {
 1430|    292|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    292|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    292|    {
  437|    292|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    292|    {
 1177|    292|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    292|    {
 1598|    292|        return has_value();
 1599|    292|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    584|    {
  485|    584|        return m_has_value;
  486|    584|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    292|    {
 1663|    292|        return std::move(value());
 1664|    292|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    292|    {
 1627|    292|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    292|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    292|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    292|        return this->get_value();
 1629|    292|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    292|    {
  451|    292|        return m_value;
  452|    292|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    584|    {
 1823|    584|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    584|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1322|    584|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    584|    else {
 1333|    584|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    584|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    584|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 584]
  |  |  ------------------
  ------------------
 1335|    584|                   ? result(*std::forward<Exp>(exp))
 1336|    584|                   : result(unexpect,
 1337|    584|                            trivial_invoke(std::forward<F>(f),
 1338|    584|                                           std::forward<Exp>(exp).error()));
 1339|    584|    }
 1340|    584|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    732|    {
 1653|    732|        return value();
 1654|    732|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    288|    {
 2724|    288|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    288|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    288|    {
 2705|    288|        return decay_copy(t.begin());
 2706|    288|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    944|    {
 1837|    944|        return detail::transform_error_impl(std::move(*this),
 1838|    944|                                            std::forward<F>(f));
 1839|    944|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    944|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    944|    else {
 1333|    944|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    944|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    944|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 944, False: 0]
  |  |  ------------------
  ------------------
 1335|    944|                   ? result(*std::forward<Exp>(exp))
 1336|    944|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    944|    }
 1340|    944|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    944|        : base(std::in_place, std::forward<U>(val)),
 1428|    944|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    944|    {
 1430|    944|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    944|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    944|    {
  437|    944|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    944|    {
 1177|    944|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    944|    {
 1598|    944|        return has_value();
 1599|    944|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.88k|    {
  485|  1.88k|        return m_has_value;
  486|  1.88k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    944|    {
 1663|    944|        return std::move(value());
 1664|    944|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    944|    {
 1627|    944|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    944|        return this->get_value();
 1629|    944|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    944|    {
  451|    944|        return m_value;
  452|    944|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    970|    {
 1823|    970|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    970|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|    970|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    970|    else {
 1333|    970|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    970|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    970|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 970]
  |  |  ------------------
  ------------------
 1335|    970|                   ? result(*std::forward<Exp>(exp))
 1336|    970|                   : result(unexpect,
 1337|    970|                            trivial_invoke(std::forward<F>(f),
 1338|    970|                                           std::forward<Exp>(exp).error()));
 1339|    970|    }
 1340|    970|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    970|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    970|    static_cast<    \
  |  |  929|    970|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    970|    {
 3644|    970|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  12.9k|    {
 1653|  12.9k|        return value();
 1654|  12.9k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6706|  4.45k|{
 6707|  4.45k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  4.45k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  4.45k|    auto start = begin;
 6711|  4.45k|    ++begin;
 6712|       |
 6713|  4.45k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.45k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  4.45k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 390, False: 4.06k]
  ------------------
 6720|    390|        handler.on_charset_inverted();
 6721|    390|        ++begin;
 6722|    390|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|    390|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 6, False: 384]
  ------------------
 6729|      6|            handler.on_charset_single(char32_t{']'});
 6730|      6|            ++begin;
 6731|      6|        }
 6732|    390|    }
 6733|  4.06k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 4.06k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|   924k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 924k, False: 0]
  ------------------
 6738|   924k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   924k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 924k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|   924k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 4.45k, False: 920k]
  ------------------
 6743|  4.45k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  4.45k|        }
 6745|       |
 6746|   920k|        parse_presentation_set_literal(begin, end, handler);
 6747|   920k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  4.45k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6670|   920k|{
 6671|   920k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   920k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   920k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|   920k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|   920k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   920k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 920k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|   920k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 920k, False: 0]
  |  Branch (6678:25): [True: 4.90k, False: 915k]
  |  Branch (6678:49): [True: 4.90k, False: 0]
  ------------------
 6679|   920k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 4.77k, False: 132]
  ------------------
 6680|  4.77k|        ++begin;
 6681|       |
 6682|  4.77k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  4.77k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.77k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  4.77k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.77k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  4.77k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  4.77k|        return;
 6696|  4.77k|    }
 6697|       |
 6698|   915k|    handler.on_charset_single(cp_first);
 6699|   915k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6646|   925k|{
 6647|   925k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   925k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   925k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|   925k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|   925k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 925k]
  |  |  |  Branch (859:45): [True: 0, False: 925k]
  |  |  |  Branch (859:45): [True: 0, False: 925k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|   925k|    const auto cp =
 6656|   925k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|   925k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   925k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 925k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|   925k|    begin += len;
 6663|   925k|    return cp;
 6664|   925k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  44.6k|    {
 1177|  44.6k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1427|  44.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  44.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  44.6k|    {
 1430|  44.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  435|  44.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  44.6k|    {
  437|  44.6k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  37.7k|    {
 6262|  37.7k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  37.7k|                charset_string_size};
 6264|  37.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    732|        : base(std::in_place, std::forward<U>(val)),
 1428|    732|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    732|    {
 1430|    732|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    732|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    732|    {
  437|    732|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  3.10k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.10k|    {
 1430|  3.10k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.10k|    {
  437|  3.10k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|   269k|{
 4029|   269k|    if constexpr (sizeof(CharT) == 1) {
 4030|   269k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|       |    }
 4032|       |    else if constexpr (sizeof(CharT) == 2) {
 4033|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4034|       |    }
 4035|       |    else {
 4036|       |        SCN_EXPECT(input.size() == 1);
 4037|       |        return static_cast<char32_t>(input.front());
 4038|       |    }
 4039|   269k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  38.8k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  38.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  38.8k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6196|    928|    {
 6197|    928|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|    928|        CharT r{};
 6199|    928|        std::memcpy(&r, m_data, m_size);
 6200|    928|        return r;
 6201|    928|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   787M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   787M|    else {
 3810|       |        // utf-32
 3811|   787M|        static_assert(sizeof(U) == 4);
 3812|   787M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   787M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   787M|        return 1;
 3814|   787M|    }
 3815|   787M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   787M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   787M|    else {
 4016|   787M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   787M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   787M|        auto cp = static_cast<char32_t>(input.front());
 4018|   787M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   787M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165k, False: 787M]
  |  |  ------------------
  ------------------
 4019|   165k|            return invalid_code_point;
 4020|   165k|        }
 4021|   787M|        return cp;
 4022|   787M|    }
 4023|   787M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  74.7k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  74.7k|    else {
 3701|  74.7k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  74.7k|                                       to_address(first), to_address(last)))};
 3703|  74.7k|    }
 3704|  74.7k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   236k|{
  326|   236k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   236k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   273k|{
  304|   273k|    return p;
  305|   273k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  8.27k|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  8.27k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  8.27k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  8.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  8.27k|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  8.27k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  37.1k|{
  326|  37.1k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  37.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  37.1k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  30.3k|    {
 3342|  30.3k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  30.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    134|        : base(unexpect, std::move(e.error())),
 1474|    134|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    134|    {
 1476|    134|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    134|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    134|          m_has_value(false)
  446|    134|    {
  447|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  22.3k|    {
 1177|  22.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  22.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  22.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  22.1k|    {
 1430|  22.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  22.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  22.1k|    {
  437|  22.1k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  5.92k|    {
 1598|  5.92k|        return has_value();
 1599|  5.92k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  38.7k|    {
  485|  38.7k|        return m_has_value;
  486|  38.7k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  16.2k|    {
 1627|  16.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.2k|        return this->get_value();
 1629|  16.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  16.2k|    {
  451|  16.2k|        return m_value;
  452|  16.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  2.65k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.65k|    {
 1430|  2.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.65k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.65k|    {
  437|  2.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.81k|    {
 1177|  2.81k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    162|        : base(unexpect, std::move(e.error())),
 1474|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    162|    {
 1476|    162|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    162|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    162|          m_has_value(false)
  446|    162|    {
  447|    162|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.18k|    {
 1598|  1.18k|        return has_value();
 1599|  1.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.45k|    {
  485|  4.45k|        return m_has_value;
  486|  4.45k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.47k|    {
 1627|  1.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.47k|        return this->get_value();
 1629|  1.47k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.47k|    {
  451|  1.47k|        return m_value;
  452|  1.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.06k|    {
 1177|  2.06k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  2.06k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.06k|    {
 1430|  2.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  2.06k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.06k|    {
  437|  2.06k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    458|    {
 1837|    458|        return detail::transform_error_impl(std::move(*this),
 1838|    458|                                            std::forward<F>(f));
 1839|    458|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    458|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    458|    else {
 1333|    458|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    458|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    458|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 458, False: 0]
  |  |  ------------------
  ------------------
 1335|    458|                   ? result(*std::forward<Exp>(exp))
 1336|    458|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    458|    }
 1340|    458|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.47k|    {
 1663|  1.47k|        return std::move(value());
 1664|  1.47k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  1.13k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.13k|    {
 1430|  1.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.13k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.13k|    {
  437|  1.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.41k|    {
 1177|  4.41k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    162|    {
 1614|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    162|        return std::move(this->get_unexpected().error());
 1616|    162|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    162|    {
  468|    162|        return m_unexpected;
  469|    162|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    890|        : base(unexpect, std::forward<Args>(args)...),
 1484|    890|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    890|    {
 1486|    890|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  3.02k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.02k|          m_has_value(false)
  446|  3.02k|    {
  447|  3.02k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    570|    {
 2724|    570|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    570|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    570|    {
 2705|    570|        return decay_copy(t.begin());
 2706|    570|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.31k|{
 1949|  1.31k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.31k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    570|    {
 3326|    570|        return m_iterator;
 3327|    570|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    570|    {
 2781|    570|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    570|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    570|    {
 2763|    570|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    570|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    570|    {
 3330|    570|        return m_sentinel;
 3331|    570|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|    570|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    570|    static_cast<    \
  |  |  929|    570|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    570|    static_cast<    \
  |  |  929|    570|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|    570|    {
 3312|    570|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.06k|    {
 1598|  2.06k|        return has_value();
 1599|  2.06k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.12k|    {
  485|  4.12k|        return m_has_value;
  486|  4.12k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  2.06k|    {
 1663|  2.06k|        return std::move(value());
 1664|  2.06k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  2.06k|    {
 1627|  2.06k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.06k|        return this->get_value();
 1629|  2.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.06k|    {
  451|  2.06k|        return m_value;
  452|  2.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  20.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  20.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  20.2k|    {
 1430|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  20.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  20.2k|    {
  437|  20.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  10.4k|    {
 1837|  10.4k|        return detail::transform_error_impl(std::move(*this),
 1838|  10.4k|                                            std::forward<F>(f));
 1839|  10.4k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  10.4k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  10.4k|    else {
 1333|  10.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  10.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  10.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.4k, False: 0]
  |  |  ------------------
  ------------------
 1335|  10.4k|                   ? result(*std::forward<Exp>(exp))
 1336|  10.4k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  10.4k|    }
 1340|  10.4k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  16.2k|    {
 1663|  16.2k|        return std::move(value());
 1664|  16.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    134|    {
 1614|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    134|        return std::move(this->get_unexpected().error());
 1616|    134|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    984|        : base(unexpect, std::forward<Args>(args)...),
 1484|    984|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    984|    {
 1486|    984|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  20.2k|    {
 1598|  20.2k|        return has_value();
 1599|  20.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  40.4k|    {
  485|  40.4k|        return m_has_value;
  486|  40.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  20.2k|    {
 1663|  20.2k|        return std::move(value());
 1664|  20.2k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  20.2k|    {
 1627|  20.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  20.2k|        return this->get_value();
 1629|  20.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  20.2k|    {
  451|  20.2k|        return m_value;
  452|  20.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.13k|        : base(unexpect, std::move(e.error())),
 1474|  2.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.13k|    {
 1476|  2.13k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    342|        : base(unexpect, std::move(e.error())),
 1474|    342|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    342|    {
 1476|    342|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    504|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    504|          m_has_value(false)
  446|    504|    {
  447|    504|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.46k|    {
 1177|  4.46k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  2.94k|        : base(unexpect, std::move(e.error())),
 1474|  2.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.94k|    {
 1476|  2.94k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.94k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.94k|          m_has_value(false)
  446|  2.94k|    {
  447|  2.94k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  4.11k|    {
 1598|  4.11k|        return has_value();
 1599|  4.11k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  8.00k|    {
  485|  8.00k|        return m_has_value;
  486|  8.00k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.45k|    {
 1604|  1.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.45k|        return this->get_unexpected().error();
 1606|  1.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.98k|    {
  468|  1.98k|        return m_unexpected;
  469|  1.98k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|    750|        : base(std::in_place, std::forward<U>(val)),
 1428|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    750|    {
 1430|    750|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    750|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    750|    {
  437|    750|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    750|    {
 1177|    750|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.01k|    {
 1627|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01k|        return this->get_value();
 1629|  1.01k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.01k|    {
  451|  1.01k|        return m_value;
  452|  1.01k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    570|    {
 1598|    570|        return has_value();
 1599|    570|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.50k|    {
  485|  1.50k|        return m_has_value;
  486|  1.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    570|    {
 1177|    570|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    750|    {
 1663|    750|        return std::move(value());
 1664|    750|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    750|    {
 1627|    750|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    750|        return this->get_value();
 1629|    750|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    750|    {
  451|    750|        return m_value;
  452|    750|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  49.8k|    {
 3330|  49.8k|        return m_sentinel;
 3331|  49.8k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.18k|    {
 1837|  1.18k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.18k|                                            std::forward<F>(f));
 1839|  1.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.18k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.18k|    else {
 1333|  1.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.01k, False: 162]
  |  |  ------------------
  ------------------
 1335|  1.18k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.18k|                   : result(unexpect,
 1337|    162|                            trivial_invoke(std::forward<F>(f),
 1338|    162|                                           std::forward<Exp>(exp).error()));
 1339|  1.18k|    }
 1340|  1.18k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.01k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.01k|    {
 1430|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.01k|    {
  437|  1.01k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    162|        : base(unexpect, std::forward<Args>(args)...),
 1484|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    162|    {
 1486|    162|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.01k|    {
 1663|  1.01k|        return std::move(value());
 1664|  1.01k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  54.0k|    {
 3326|  54.0k|        return m_iterator;
 3327|  54.0k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    570|        : base(std::in_place, std::forward<U>(val)),
 1428|    570|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    570|    {
 1430|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    570|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    570|    {
  437|    570|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    570|    {
 1837|    570|        return detail::transform_error_impl(std::move(*this),
 1838|    570|                                            std::forward<F>(f));
 1839|    570|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    570|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    570|    else {
 1333|    570|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    570|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    570|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 570, False: 0]
  |  |  ------------------
  ------------------
 1335|    570|                   ? result(*std::forward<Exp>(exp))
 1336|    570|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    570|    }
 1340|    570|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.14k|    {
  485|  1.14k|        return m_has_value;
  486|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    570|    {
 1663|    570|        return std::move(value());
 1664|    570|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    570|    {
 1627|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    570|        return this->get_value();
 1629|    570|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    570|    {
  451|    570|        return m_value;
  452|    570|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    570|        : base(std::in_place, std::forward<U>(val)),
 1428|    570|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    570|    {
 1430|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    570|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    570|    {
  437|    570|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    570|    {
 1177|    570|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    570|    {
 1598|    570|        return has_value();
 1599|    570|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.14k|    {
  485|  1.14k|        return m_has_value;
  486|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    570|    {
 1663|    570|        return std::move(value());
 1664|    570|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    570|    {
 1627|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    570|        return this->get_value();
 1629|    570|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    570|    {
  451|    570|        return m_value;
  452|    570|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    530|    {
 1837|    530|        return detail::transform_error_impl(std::move(*this),
 1838|    530|                                            std::forward<F>(f));
 1839|    530|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1322|    530|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    530|    else {
 1333|    530|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    530|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    530|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 530]
  |  |  ------------------
  ------------------
 1335|    530|                   ? result(*std::forward<Exp>(exp))
 1336|    530|                   : result(unexpect,
 1337|    530|                            trivial_invoke(std::forward<F>(f),
 1338|    530|                                           std::forward<Exp>(exp).error()));
 1339|    530|    }
 1340|    530|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    530|    {
 1614|    530|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    530|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    530|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    530|        return std::move(this->get_unexpected().error());
 1616|    530|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|    890|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    890|    static_cast<    \
  |  |  929|    890|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    890|    {
 3644|    890|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  18.4k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  18.4k|    static_cast<    \
  |  |  929|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  18.4k|    static_cast<    \
  |  |  929|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  18.4k|    {
 3312|  18.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1473|     40|        : base(unexpect, std::move(e.error())),
 1474|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  624|     40|        : m_has_value(false)
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.59k|    {
 1598|  4.59k|        return has_value();
 1599|  4.59k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.82k|    {
  485|  8.82k|        return m_has_value;
  486|  8.82k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.84k|    {
 1604|  2.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.84k|        return this->get_unexpected().error();
 1606|  2.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.84k|    {
  468|  2.84k|        return m_unexpected;
  469|  2.84k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.13k|    {
 1663|  1.13k|        return std::move(value());
 1664|  1.13k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.38k|    {
 1627|  1.38k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.38k|        return this->get_value();
 1629|  1.38k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.38k|    {
  451|  1.38k|        return m_value;
  452|  1.38k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.11k|        : base(unexpect, std::move(e.error())),
 1474|  1.11k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.11k|    {
 1476|  1.11k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.24k|          m_has_value(false)
  446|  1.24k|    {
  447|  1.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.7k|        : base(unexpect, std::move(e.error())),
 1474|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.7k|          m_has_value(false)
  446|  11.7k|    {
  447|  11.7k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  19.8k|    {
 1598|  19.8k|        return has_value();
 1599|  19.8k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  32.6k|    {
  485|  32.6k|        return m_has_value;
  486|  32.6k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  6.01k|    {
 1604|  6.01k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.01k|        return this->get_unexpected().error();
 1606|  6.01k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.01k|    {
  468|  6.01k|        return m_unexpected;
  469|  6.01k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.91k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.91k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.91k|    {
 1430|  3.91k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.91k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.91k|    {
  437|  3.91k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.91k|    {
 1177|  3.91k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  5.84k|    {
 1627|  5.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.84k|        return this->get_value();
 1629|  5.84k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  5.84k|    {
  451|  5.84k|        return m_value;
  452|  5.84k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.94k|    {
 1598|  2.94k|        return has_value();
 1599|  2.94k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.83k|    {
  485|  7.83k|        return m_has_value;
  486|  7.83k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.94k|    {
 1177|  2.94k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.91k|    {
 1663|  3.91k|        return std::move(value());
 1664|  3.91k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.91k|    {
 1627|  3.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.91k|        return this->get_value();
 1629|  3.91k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.91k|    {
  451|  3.91k|        return m_value;
  452|  3.91k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.97k|    {
 1837|  5.97k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.97k|                                            std::forward<F>(f));
 1839|  5.97k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  5.97k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  5.97k|    else {
 1333|  5.97k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.97k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.84k, False: 134]
  |  |  ------------------
  ------------------
 1335|  5.97k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.97k|                   : result(unexpect,
 1337|    134|                            trivial_invoke(std::forward<F>(f),
 1338|    134|                                           std::forward<Exp>(exp).error()));
 1339|  5.97k|    }
 1340|  5.97k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  5.84k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.84k|    {
 1430|  5.84k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.84k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.84k|    {
  437|  5.84k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    134|        : base(unexpect, std::forward<Args>(args)...),
 1484|    134|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    134|    {
 1486|    134|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  5.84k|    {
 1663|  5.84k|        return std::move(value());
 1664|  5.84k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.94k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94k|    {
 1430|  2.94k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.94k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.94k|    {
  437|  2.94k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.94k|    {
 1837|  2.94k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.94k|                                            std::forward<F>(f));
 1839|  2.94k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.94k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.94k|    else {
 1333|  2.94k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.94k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.94k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.94k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.94k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.94k|    }
 1340|  2.94k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.88k|    {
  485|  5.88k|        return m_has_value;
  486|  5.88k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.94k|    {
 1663|  2.94k|        return std::move(value());
 1664|  2.94k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.94k|    {
 1627|  2.94k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94k|        return this->get_value();
 1629|  2.94k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.94k|    {
  451|  2.94k|        return m_value;
  452|  2.94k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.94k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94k|    {
 1430|  2.94k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.94k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.94k|    {
  437|  2.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.94k|    {
 1177|  2.94k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.94k|    {
 1598|  2.94k|        return has_value();
 1599|  2.94k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.88k|    {
  485|  5.88k|        return m_has_value;
  486|  5.88k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.94k|    {
 1663|  2.94k|        return std::move(value());
 1664|  2.94k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.94k|    {
 1627|  2.94k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94k|        return this->get_value();
 1629|  2.94k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.94k|    {
  451|  2.94k|        return m_value;
  452|  2.94k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|     52|        : base(unexpect, std::move(e.error())),
 1474|     52|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     52|    {
 1476|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|     52|        : m_has_value(false)
  625|     52|    {
  626|     52|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     52|    {
  689|     52|        scn::detail::construct_at(unexpected_ptr(),
  690|     52|                                  std::forward<Args>(args)...);
  691|     52|        m_has_value = false;
  692|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    156|    {
  718|    156|        return reinterpret_cast<unexpected<E>*>(
  719|    156|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    156|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    156|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     52|    {
 1177|     52|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     52|    {
 1598|     52|        return has_value();
 1599|     52|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    156|    {
  675|    156|        return m_has_value;
  676|    156|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     52|    {
 1604|     52|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     52|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     52|        return this->get_unexpected().error();
 1606|     52|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     52|    {
  658|     52|        return *unexpected_ptr();
  659|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     52|    {
  631|     52|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 52]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     52|        else {
  635|     52|            destroy_unexpected();
  636|     52|        }
  637|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     52|    {
  700|     52|        scn::detail::destroy_at(unexpected_ptr());
  701|     52|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  15.9k|    {
 2855|  15.9k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  15.9k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  15.9k|    {
 2836|  15.9k|        return t.data();
 2837|  15.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  35.5k|    {
 3221|  35.5k|        return detail::to_address(ranges::begin(derived()));
 3222|  35.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  35.6k|    {
 2724|  35.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  35.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  35.6k|    {
 2705|  35.6k|        return decay_copy(t.begin());
 2706|  35.6k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  35.5k|    {
 3180|  35.5k|        return static_cast<D&>(*this);
 3181|  35.5k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    180|    {
 1837|    180|        return detail::transform_error_impl(std::move(*this),
 1838|    180|                                            std::forward<F>(f));
 1839|    180|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    180|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    180|    else {
 1333|    180|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    180|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    180|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 180, False: 0]
  |  |  ------------------
  ------------------
 1335|    180|                   ? result(*std::forward<Exp>(exp))
 1336|    180|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    180|    }
 1340|    180|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    180|        : base(std::in_place, std::forward<U>(val)),
 1428|    180|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    180|    {
 1430|    180|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    180|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    180|    {
  437|    180|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    180|    {
 1177|    180|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    180|    {
 1598|    180|        return has_value();
 1599|    180|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    360|    {
  485|    360|        return m_has_value;
  486|    360|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    180|    {
 1663|    180|        return std::move(value());
 1664|    180|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    180|    {
 1627|    180|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    180|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    180|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    180|        return this->get_value();
 1629|    180|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    180|    {
  451|    180|        return m_value;
  452|    180|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    360|    {
 1823|    360|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    360|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1322|    360|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    360|    else {
 1333|    360|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    360|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    360|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 360]
  |  |  ------------------
  ------------------
 1335|    360|                   ? result(*std::forward<Exp>(exp))
 1336|    360|                   : result(unexpect,
 1337|    360|                            trivial_invoke(std::forward<F>(f),
 1338|    360|                                           std::forward<Exp>(exp).error()));
 1339|    360|    }
 1340|    360|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    252|    {
 1653|    252|        return value();
 1654|    252|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    174|    {
 2724|    174|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    174|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    174|    {
 2705|    174|        return decay_copy(t.begin());
 2706|    174|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    166|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    976|    {
 1837|    976|        return detail::transform_error_impl(std::move(*this),
 1838|    976|                                            std::forward<F>(f));
 1839|    976|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    976|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    976|    else {
 1333|    976|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    976|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    976|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 976, False: 0]
  |  |  ------------------
  ------------------
 1335|    976|                   ? result(*std::forward<Exp>(exp))
 1336|    976|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    976|    }
 1340|    976|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    976|        : base(std::in_place, std::forward<U>(val)),
 1428|    976|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    976|    {
 1430|    976|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    976|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    976|    {
  437|    976|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    976|    {
 1177|    976|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    976|    {
 1598|    976|        return has_value();
 1599|    976|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.95k|    {
  485|  1.95k|        return m_has_value;
  486|  1.95k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    976|    {
 1663|    976|        return std::move(value());
 1664|    976|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    976|    {
 1627|    976|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    976|        return this->get_value();
 1629|    976|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    976|    {
  451|    976|        return m_value;
  452|    976|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    984|    {
 1823|    984|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    984|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|    984|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    984|    else {
 1333|    984|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    984|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    984|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 984]
  |  |  ------------------
  ------------------
 1335|    984|                   ? result(*std::forward<Exp>(exp))
 1336|    984|                   : result(unexpect,
 1337|    984|                            trivial_invoke(std::forward<F>(f),
 1338|    984|                                           std::forward<Exp>(exp).error()));
 1339|    984|    }
 1340|    984|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    984|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    984|    static_cast<    \
  |  |  929|    984|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    984|    {
 3644|    984|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  4.75k|    {
 1653|  4.75k|        return value();
 1654|  4.75k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6706|    522|{
 6707|    522|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|    522|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|    522|    auto start = begin;
 6711|    522|    ++begin;
 6712|       |
 6713|    522|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 522]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|    522|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 276, False: 246]
  ------------------
 6720|    276|        handler.on_charset_inverted();
 6721|    276|        ++begin;
 6722|    276|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|    276|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 6, False: 270]
  ------------------
 6729|      6|            handler.on_charset_single(char32_t{']'});
 6730|      6|            ++begin;
 6731|      6|        }
 6732|    276|    }
 6733|    246|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 246]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  5.58k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 5.58k, False: 0]
  ------------------
 6738|  5.58k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  5.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.58k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  5.58k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 522, False: 5.06k]
  ------------------
 6743|    522|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|    522|        }
 6745|       |
 6746|  5.06k|        parse_presentation_set_literal(begin, end, handler);
 6747|  5.06k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|    522|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6670|  5.06k|{
 6671|  5.06k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  5.06k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  5.06k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.06k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  5.06k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 5.06k, False: 0]
  |  Branch (6678:25): [True: 258, False: 4.80k]
  |  Branch (6678:49): [True: 258, False: 0]
  ------------------
 6679|  5.06k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 252, False: 6]
  ------------------
 6680|    252|        ++begin;
 6681|       |
 6682|    252|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|    252|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|    252|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|    252|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|    252|        return;
 6696|    252|    }
 6697|       |
 6698|  4.81k|    handler.on_charset_single(cp_first);
 6699|  4.81k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6646|  5.31k|{
 6647|  5.31k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  5.31k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  5.31k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.31k]
  |  |  |  Branch (859:45): [True: 0, False: 5.31k]
  |  |  |  Branch (859:45): [True: 0, False: 5.31k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  5.31k|    const auto cp =
 6656|  5.31k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  5.31k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.31k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  5.31k|    begin += len;
 6663|  5.31k|    return cp;
 6664|  5.31k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  13.5k|    {
 6262|  13.5k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  13.5k|                charset_string_size};
 6264|  13.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    252|        : base(std::in_place, std::forward<U>(val)),
 1428|    252|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    252|    {
 1430|    252|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    252|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    252|    {
  437|    252|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    378|        : base(std::in_place, std::forward<U>(val)),
 1428|    378|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    378|    {
 1430|    378|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    378|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    378|    {
  437|    378|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.88k|{
 3650|  1.88k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.88k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  8.09k|    {
 2855|  8.09k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  8.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  8.09k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  8.09k|    {
 2836|  8.09k|        return t.data();
 2837|  8.09k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   192k|    {
 5476|   192k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 192k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   192k|        return static_cast<std::size_t>(m_desc &
 5481|   192k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   192k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   325k|    {
 5501|   325k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   325k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   133k|    {
 5444|   133k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   133k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 133k]
  |  |  ------------------
  ------------------
 5452|    230|            return {};
 5453|    230|        }
 5454|       |
 5455|   133k|        const auto t = type(id);
 5456|   133k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.46k, False: 131k]
  |  |  ------------------
  ------------------
 5457|  1.46k|            return {};
 5458|  1.46k|        }
 5459|       |
 5460|   131k|        basic_scan_arg<Context> arg;
 5461|   131k|        arg.m_type = t;
 5462|   131k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 131k, False: 0]
  ------------------
 5463|   131k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   131k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   131k|        return arg;
 5469|   133k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   133k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|   190k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   133k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   133k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   133k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   133k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   133k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   131k|    {
 5505|   131k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   131k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   262k|    {
 5257|   262k|        return m_type != detail::arg_type::none_type;
 5258|   262k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  5.88k|{
 8427|  5.88k|#define SCN_VISIT(Type)                                         \
 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  5.88k|    }                                                           \
 8431|  5.88k|    else {                                                      \
 8432|  5.88k|        return vis(monostate_val);                              \
 8433|  5.88k|    }
 8434|       |
 8435|  5.88k|    monostate monostate_val{};
 8436|       |
 8437|  5.88k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.88k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.88k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|    654|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 654, False: 5.23k]
  ------------------
 8443|    654|            SCN_VISIT(int);
  ------------------
  |  | 8428|    654|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    654|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    654|    }                                                           \
  |  | 8431|    654|    else {                                                      \
  |  | 8432|    654|        return vis(monostate_val);                              \
  |  | 8433|    654|    }
  ------------------
 8444|    654|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.88k]
  ------------------
 8445|    654|            SCN_VISIT(long);
  ------------------
  |  | 8428|    654|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    654|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    654|    }                                                           \
  |  | 8431|    654|    else {                                                      \
  |  | 8432|    654|        return vis(monostate_val);                              \
  |  | 8433|    654|    }
  ------------------
 8446|    654|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.88k]
  ------------------
 8447|    654|            SCN_VISIT(long long);
  ------------------
  |  | 8428|    654|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    654|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    654|    }                                                           \
  |  | 8431|    654|    else {                                                      \
  |  | 8432|    654|        return vis(monostate_val);                              \
  |  | 8433|    654|    }
  ------------------
 8448|    654|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 5.88k]
  ------------------
 8449|    654|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|    654|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    654|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    654|    }                                                           \
  |  | 8431|    654|    else {                                                      \
  |  | 8432|    654|        return vis(monostate_val);                              \
  |  | 8433|    654|    }
  ------------------
 8450|    654|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.88k]
  ------------------
 8451|    654|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|    654|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    654|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    654|    }                                                           \
  |  | 8431|    654|    else {                                                      \
  |  | 8432|    654|        return vis(monostate_val);                              \
  |  | 8433|    654|    }
  ------------------
 8452|  1.30k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 654, False: 5.23k]
  ------------------
 8453|  1.30k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  1.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.30k|    }                                                           \
  |  | 8431|  1.30k|    else {                                                      \
  |  | 8432|  1.30k|        return vis(monostate_val);                              \
  |  | 8433|  1.30k|    }
  ------------------
 8454|  1.30k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.88k]
  ------------------
 8455|  1.30k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  1.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.30k|    }                                                           \
  |  | 8431|  1.30k|    else {                                                      \
  |  | 8432|  1.30k|        return vis(monostate_val);                              \
  |  | 8433|  1.30k|    }
  ------------------
 8456|  1.30k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.88k]
  ------------------
 8457|  1.30k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  1.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.30k|    }                                                           \
  |  | 8431|  1.30k|    else {                                                      \
  |  | 8432|  1.30k|        return vis(monostate_val);                              \
  |  | 8433|  1.30k|    }
  ------------------
 8458|  1.96k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 654, False: 5.23k]
  ------------------
 8459|  1.96k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  1.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.96k|    }                                                           \
  |  | 8431|  1.96k|    else {                                                      \
  |  | 8432|  1.96k|        return vis(monostate_val);                              \
  |  | 8433|  1.96k|    }
  ------------------
 8460|  2.61k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 654, False: 5.23k]
  ------------------
 8461|  2.61k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  2.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.61k|    }                                                           \
  |  | 8431|  2.61k|    else {                                                      \
  |  | 8432|  2.61k|        return vis(monostate_val);                              \
  |  | 8433|  2.61k|    }
  ------------------
 8462|  3.27k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 654, False: 5.23k]
  ------------------
 8463|  3.27k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  3.27k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.27k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.27k|    }                                                           \
  |  | 8431|  3.27k|    else {                                                      \
  |  | 8432|  3.27k|        return vis(monostate_val);                              \
  |  | 8433|  3.27k|    }
  ------------------
 8464|  3.27k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.88k]
  ------------------
 8465|  3.27k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  3.27k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.27k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.27k|    }                                                           \
  |  | 8431|  3.27k|    else {                                                      \
  |  | 8432|  3.27k|        return vis(monostate_val);                              \
  |  | 8433|  3.27k|    }
  ------------------
 8466|  3.27k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 5.88k]
  ------------------
 8467|  3.27k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  3.27k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.27k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.27k|    }                                                           \
  |  | 8431|  3.27k|    else {                                                      \
  |  | 8432|  3.27k|        return vis(monostate_val);                              \
  |  | 8433|  3.27k|    }
  ------------------
 8468|  3.27k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.88k]
  ------------------
 8469|  3.27k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  3.27k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.27k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.27k|    }                                                           \
  |  | 8431|  3.27k|    else {                                                      \
  |  | 8432|  3.27k|        return vis(monostate_val);                              \
  |  | 8433|  3.27k|    }
  ------------------
 8470|  3.92k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 654, False: 5.23k]
  ------------------
 8471|  3.92k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  3.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.92k|    }                                                           \
  |  | 8431|  3.92k|    else {                                                      \
  |  | 8432|  3.92k|        return vis(monostate_val);                              \
  |  | 8433|  3.92k|    }
  ------------------
 8472|  3.92k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.88k]
  ------------------
 8473|  3.92k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  3.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.92k|    }                                                           \
  |  | 8431|  3.92k|    else {                                                      \
  |  | 8432|  3.92k|        return vis(monostate_val);                              \
  |  | 8433|  3.92k|    }
  ------------------
 8474|  4.57k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 654, False: 5.23k]
  ------------------
 8475|  4.57k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  4.57k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  4.57k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  4.57k|    }                                                           \
  |  | 8431|  4.57k|    else {                                                      \
  |  | 8432|  4.57k|        return vis(monostate_val);                              \
  |  | 8433|  4.57k|    }
  ------------------
 8476|  5.23k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 654, False: 5.23k]
  ------------------
 8477|  5.23k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  5.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.23k|    }                                                           \
  |  | 8431|  5.23k|    else {                                                      \
  |  | 8432|  5.23k|        return vis(monostate_val);                              \
  |  | 8433|  5.23k|    }
  ------------------
 8478|  5.23k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 5.88k]
  ------------------
 8479|  5.23k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  5.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.23k|    }                                                           \
  |  | 8431|  5.23k|    else {                                                      \
  |  | 8432|  5.23k|        return vis(monostate_val);                              \
  |  | 8433|  5.23k|    }
  ------------------
 8480|  5.88k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 654, False: 5.23k]
  ------------------
 8481|  5.88k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8482|  5.88k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 5.88k]
  ------------------
 8483|  5.88k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8484|  5.88k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 5.88k]
  ------------------
 8485|  5.88k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8486|       |
 8487|  5.88k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 5.88k]
  ------------------
 8488|  5.88k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  5.88k|            return vis(
 8490|  5.88k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 5.88k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 5.88k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  5.88k|            SCN_CLANG_POP
 8505|  5.88k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.10k|    {
 1837|  2.10k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.10k|                                            std::forward<F>(f));
 1839|  2.10k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.10k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.10k|    else {
 1333|  2.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.99k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.10k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.10k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.10k|    }
 1340|  2.10k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    102|        : base(unexpect, std::forward<Args>(args)...),
 1484|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.99k|    {
 1663|  1.99k|        return std::move(value());
 1664|  1.99k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   192k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   192k|    {
 5555|   192k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8064|   192k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|   192k|    {
 8066|   192k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   192k|{
 7054|   192k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   192k|    handler.check_args_exhausted();
 7056|   192k|    return handler.get_error();
 7057|   192k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   192k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   192k|    auto begin = format.data();
 7023|   192k|    auto it = begin;
 7024|   192k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   406k|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 397k, False: 9.57k]
  ------------------
 7027|   397k|        const auto ch = *it++;
 7028|   397k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 196k, False: 201k]
  ------------------
 7029|   196k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   196k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   196k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 180k, False: 15.4k]
  ------------------
 7033|   180k|                return;
 7034|   180k|            }
 7035|   196k|        }
 7036|   201k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 3.71k, False: 197k]
  ------------------
 7037|  3.71k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  7.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 1.85k]
  |  |  |  Branch (859:45): [True: 348, False: 3.36k]
  |  |  |  Branch (859:45): [True: 1.51k, False: 1.85k]
  |  |  ------------------
  ------------------
 7038|  1.86k|                handler.on_error("Unmatched '}' in format string");
 7039|  1.86k|                return;
 7040|  1.86k|            }
 7041|       |
 7042|  1.85k|            handler.on_literal_text(begin, it);
 7043|  1.85k|            begin = ++it;
 7044|  1.85k|        }
 7045|   397k|    }
 7046|       |
 7047|  9.57k|    handler.on_literal_text(begin, end);
 7048|  9.57k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6951|   196k|{
 6952|   196k|    struct id_adapter {
 6953|   196k|        constexpr void operator()()
 6954|   196k|        {
 6955|   196k|            arg_id = handler.on_arg_id();
 6956|   196k|        }
 6957|   196k|        constexpr void operator()(std::size_t id)
 6958|   196k|        {
 6959|   196k|            arg_id = handler.on_arg_id(id);
 6960|   196k|        }
 6961|       |
 6962|   196k|        constexpr void on_error(const char* msg)
 6963|   196k|        {
 6964|   196k|            SCN_UNLIKELY_ATTR
 6965|   196k|            handler.on_error(msg);
 6966|   196k|        }
 6967|       |
 6968|   196k|        Handler& handler;
 6969|   196k|        std::size_t arg_id;
 6970|   196k|    };
 6971|       |
 6972|   196k|    ++begin;
 6973|   196k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 195k]
  |  |  ------------------
  ------------------
 6974|    128|        handler.on_error("Unexpected end of replacement field");
 6975|    128|        return begin;
 6976|    128|    }
 6977|       |
 6978|   195k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 5.87k, False: 190k]
  ------------------
 6979|  5.87k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|  5.87k|    }
 6981|   190k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 5.78k, False: 184k]
  ------------------
 6982|  5.78k|        handler.on_literal_text(begin, begin + 1);
 6983|  5.78k|    }
 6984|   184k|    else {
 6985|   184k|        auto adapter = id_adapter{handler, 0};
 6986|   184k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   184k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 184k]
  |  |  ------------------
  ------------------
 6989|    110|            handler.on_error("Missing '}' in format string");
 6990|    110|            return begin;
 6991|    110|        }
 6992|       |
 6993|   184k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 302, False: 183k]
  ------------------
 6994|    302|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|    302|        }
 6996|   183k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 127k, False: 56.3k]
  ------------------
 6997|   127k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 127k]
  |  |  ------------------
  ------------------
 6998|     74|                handler.on_error("Unexpected end of replacement field");
 6999|     74|                return begin;
 7000|     74|            }
 7001|   127k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   127k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.75k, False: 123k]
  |  |  |  Branch (859:45): [True: 0, False: 127k]
  |  |  |  Branch (859:45): [True: 3.75k, False: 123k]
  |  |  ------------------
  ------------------
 7003|  3.75k|                handler.on_error("Unknown format specifier");
 7004|  3.75k|                return begin;
 7005|  3.75k|            }
 7006|   127k|        }
 7007|  56.3k|        else {
 7008|  56.3k|            SCN_UNLIKELY_ATTR
 7009|  56.3k|            handler.on_error("Missing '}' in format string");
 7010|  56.3k|            return begin;
 7011|  56.3k|        }
 7012|   184k|    }
 7013|   135k|    return begin + 1;
 7014|   195k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8048|   133k|    {
 8049|   133k|        return m_args.get(id);
 8050|   133k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8053|  6.17k|    {
 8054|  6.17k|        return m_args;
 8055|  6.17k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8058|   129k|    {
 8059|   129k|        return m_locale;
 8060|   129k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   125k|    {
 5576|   125k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 125k]
  |  |  ------------------
  ------------------
 5577|     42|            on_error(
 5578|     42|                "Cannot switch from manual to automatic argument indexing");
 5579|     42|            return 0;
 5580|     42|        }
 5581|       |
 5582|   125k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   125k|        do_check_arg_id(id);
 5584|   125k|        return id;
 5585|   125k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5599|    112|    {
 5600|    112|        return detail::handle_error(
 5601|    112|            scan_error{scan_error::invalid_format_string, msg});
 5602|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   133k|{
 6064|   133k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   133k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   133k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   184k|{
 6453|   184k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   184k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 184k, False: 0]
  |  Branch (6454:26): [True: 64.5k, False: 119k]
  ------------------
 6455|  64.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  64.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|  64.5k|    }
 6457|       |
 6458|   119k|    handler();
 6459|   119k|    return begin;
 6460|   184k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6422|  64.5k|{
 6423|  64.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  64.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6424|       |
 6425|  64.5k|    CharT c = *begin;
 6426|  64.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6426:9): [True: 55.8k, False: 8.66k]
  |  Branch (6426:27): [True: 100, False: 8.56k]
  ------------------
 6427|  55.9k|        handler.on_error("Invalid argument ID");
 6428|  55.9k|        return begin;
 6429|  55.9k|    }
 6430|       |
 6431|  8.56k|    int idx = 0;
 6432|  8.56k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6432:9): [True: 552, False: 8.01k]
  ------------------
 6433|    552|        idx = parse_simple_int(begin, end);
 6434|    552|    }
 6435|  8.01k|    else {
 6436|  8.01k|        ++begin;
 6437|  8.01k|    }
 6438|       |
 6439|  8.56k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6439:9): [True: 110, False: 8.45k]
  |  Branch (6439:26): [True: 8.15k, False: 302]
  |  Branch (6439:50): [True: 354, False: 7.79k]
  ------------------
 6440|    464|        handler.on_error("Invalid argument ID");
 6441|    464|        return begin;
 6442|    464|    }
 6443|  8.09k|    handler(idx);
 6444|       |
 6445|  8.09k|    return begin;
 6446|  8.56k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6963|  56.4k|        {
 6964|  56.4k|            SCN_UNLIKELY_ATTR
 6965|  56.4k|            handler.on_error(msg);
 6966|  56.4k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6401|  17.4k|{
 6402|  17.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  17.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  17.4k|    unsigned long long value = 0;
 6406|  41.5k|    do {
 6407|  41.5k|        value *= 10;
 6408|  41.5k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|  41.5k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 116, False: 41.4k]
  ------------------
 6410|  41.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|    116|            return -1;
 6412|    116|        }
 6413|  41.4k|        ++begin;
 6414|  41.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 41.1k, False: 294]
  |  Branch (6414:30): [True: 34.2k, False: 6.90k]
  |  Branch (6414:47): [True: 24.1k, False: 10.1k]
  ------------------
 6415|  17.3k|    return static_cast<int>(value);
 6416|  17.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6958|  8.09k|        {
 6959|  8.09k|            arg_id = handler.on_arg_id(id);
 6960|  8.09k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5588|  8.09k|    {
 5589|  8.09k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  8.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 8.02k]
  |  |  ------------------
  ------------------
 5590|     70|            on_error(
 5591|     70|                "Cannot switch from manual to automatic argument indexing");
 5592|     70|            return;
 5593|     70|        }
 5594|  8.02k|        m_next_arg_id = -1;
 5595|  8.02k|        do_check_arg_id(id);
 5596|  8.02k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   119k|        {
 6955|   119k|            arg_id = handler.on_arg_id();
 6956|   119k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   254k|    {
 5262|   254k|        return m_type;
 5263|   254k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   123k|    {
 5571|   123k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   123k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   250k|    {
 5560|   250k|        return m_format.data();
 5561|   250k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|   127k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   127k|    {
 7132|   127k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   127k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6867|   127k|{
 6868|   127k|    auto do_presentation = [&]() -> const CharT* {
 6869|   127k|        if (*begin == CharT{'['}) {
 6870|   127k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   127k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   127k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   127k|                return begin;
 6876|   127k|            }
 6877|   127k|            handler.on_character_set_string(set);
 6878|   127k|            return begin;
 6879|   127k|        }
 6880|   127k|        if (*begin == CharT{'/'}) {
 6881|   127k|            return parse_presentation_regex(begin, end, handler);
 6882|   127k|        }
 6883|   127k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   127k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   127k|            handler.on_error("Invalid type specifier in format string");
 6886|   127k|            return begin;
 6887|   127k|        }
 6888|   127k|        handler.on_type(type);
 6889|   127k|        return begin;
 6890|   127k|    };
 6891|       |
 6892|   127k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 126k, False: 1.07k]
  |  Branch (6892:28): [True: 2.45k, False: 123k]
  ------------------
 6893|   127k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 878, False: 1.57k]
  |  Branch (6893:36): [True: 826, False: 52]
  ------------------
 6894|    826|        return do_presentation();
 6895|    826|    }
 6896|       |
 6897|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   126k|    begin = parse_align(begin, end, handler);
 6903|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 126k]
  |  |  ------------------
  ------------------
 6904|    126|        handler.on_error("Unexpected end of format string");
 6905|    126|        return begin;
 6906|    126|    }
 6907|       |
 6908|   126k|    begin = parse_width(begin, end, handler);
 6909|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 126k]
  |  |  ------------------
  ------------------
 6910|    102|        handler.on_error("Unexpected end of format string");
 6911|    102|        return begin;
 6912|    102|    }
 6913|       |
 6914|   126k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 12.0k, False: 114k]
  ------------------
 6915|  12.0k|        ++begin;
 6916|  12.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 11.9k]
  |  |  ------------------
  ------------------
 6917|     34|            handler.on_error("Unexpected end of format string");
 6918|     34|            return begin;
 6919|     34|        }
 6920|  11.9k|        begin = parse_precision(begin, end, handler);
 6921|  11.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 11.8k]
  |  |  ------------------
  ------------------
 6922|    114|            handler.on_error("Unexpected end of format string");
 6923|    114|            return begin;
 6924|    114|        }
 6925|  11.9k|    }
 6926|       |
 6927|   126k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 860, False: 125k]
  ------------------
 6928|    860|        handler.on_localized();
 6929|    860|        ++begin;
 6930|    860|    }
 6931|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 126k]
  |  |  ------------------
  ------------------
 6932|     52|        handler.on_error("Unexpected end of format string");
 6933|     52|        return begin;
 6934|     52|    }
 6935|       |
 6936|   126k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 126k, False: 0]
  |  Branch (6936:25): [True: 121k, False: 4.98k]
  ------------------
 6937|   121k|        do_presentation();
 6938|   121k|    }
 6939|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08k, False: 124k]
  |  |  ------------------
  ------------------
 6940|  2.08k|        handler.on_error("Unexpected end of format string");
 6941|  2.08k|        return begin;
 6942|  2.08k|    }
 6943|       |
 6944|   124k|    return begin;
 6945|   126k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6516|  2.45k|{
 6517|  2.45k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 824, False: 1.62k]
  |  Branch (6517:33): [True: 772, False: 52]
  ------------------
 6518|  2.45k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 340, False: 1.33k]
  |  Branch (6518:33): [True: 106, False: 234]
  ------------------
 6519|  2.45k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   122k|    auto do_presentation = [&]() -> const CharT* {
 6869|   122k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 16.0k, False: 106k]
  ------------------
 6870|  16.0k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  16.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 816, False: 15.2k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|    816|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|    816|                return begin;
 6876|    816|            }
 6877|  15.2k|            handler.on_character_set_string(set);
 6878|  15.2k|            return begin;
 6879|  16.0k|        }
 6880|   106k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 100k, False: 5.62k]
  ------------------
 6881|   100k|            return parse_presentation_regex(begin, end, handler);
 6882|   100k|        }
 6883|  5.62k|        presentation_type type = parse_presentation_type(*begin++);
 6884|  5.62k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 4.56k]
  |  |  ------------------
  ------------------
 6885|  1.05k|            handler.on_error("Invalid type specifier in format string");
 6886|  1.05k|            return begin;
 6887|  1.05k|        }
 6888|  4.56k|        handler.on_type(type);
 6889|  4.56k|        return begin;
 6890|  5.62k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  16.0k|{
 6707|  16.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  16.0k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  16.0k|    auto start = begin;
 6711|  16.0k|    ++begin;
 6712|       |
 6713|  16.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 15.9k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|     42|        return {};
 6718|     42|    }
 6719|  15.9k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 2.08k, False: 13.9k]
  ------------------
 6720|  2.08k|        handler.on_charset_inverted();
 6721|  2.08k|        ++begin;
 6722|  2.08k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.04k]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|     34|            return {};
 6727|     34|        }
 6728|  2.04k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 52, False: 1.99k]
  ------------------
 6729|     52|            handler.on_charset_single(char32_t{']'});
 6730|     52|            ++begin;
 6731|     52|        }
 6732|  2.04k|    }
 6733|  13.9k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 34, False: 13.8k]
  ------------------
 6734|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|     34|    }
 6736|       |
 6737|  2.78M|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 2.78M, False: 484]
  ------------------
 6738|  2.78M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 222, False: 2.78M]
  |  |  ------------------
  ------------------
 6739|    222|            break;
 6740|    222|        }
 6741|       |
 6742|  2.78M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 15.2k, False: 2.76M]
  ------------------
 6743|  15.2k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  15.2k|        }
 6745|       |
 6746|  2.76M|        parse_presentation_set_literal(begin, end, handler);
 6747|  2.76M|    }
 6748|       |
 6749|    706|    SCN_UNLIKELY_ATTR
 6750|    706|    handler.on_error("Invalid [character set] specifier in format string");
 6751|    706|    return {};
 6752|  15.9k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6670|  2.76M|{
 6671|  2.76M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  2.76M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  2.76M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 2.76M]
  |  |  ------------------
  ------------------
 6675|    100|        return;
 6676|    100|    }
 6677|       |
 6678|  2.76M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 2.76M, False: 188]
  |  Branch (6678:25): [True: 15.9k, False: 2.75M]
  |  Branch (6678:49): [True: 15.9k, False: 34]
  ------------------
 6679|  2.76M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 15.4k, False: 430]
  ------------------
 6680|  15.4k|        ++begin;
 6681|       |
 6682|  15.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  15.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 15.4k]
  |  |  ------------------
  ------------------
 6684|     70|            return;
 6685|     70|        }
 6686|       |
 6687|  15.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 15.3k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|     34|            return;
 6692|     34|        }
 6693|       |
 6694|  15.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  15.3k|        return;
 6696|  15.4k|    }
 6697|       |
 6698|  2.75M|    handler.on_charset_single(cp_first);
 6699|  2.75M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6646|  2.78M|{
 6647|  2.78M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  2.78M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  2.78M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  5.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 2.78M]
  |  |  |  Branch (859:45): [True: 70, False: 2.78M]
  |  |  |  Branch (859:45): [True: 26, False: 2.78M]
  |  |  ------------------
  ------------------
 6651|     96|        handler.on_error("Invalid encoding in format string");
 6652|     96|        return invalid_code_point;
 6653|     96|    }
 6654|       |
 6655|  2.78M|    const auto cp =
 6656|  2.78M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  2.78M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 2.78M]
  |  |  ------------------
  ------------------
 6658|     74|        handler.on_error("Invalid encoding in format string");
 6659|     74|        return invalid_code_point;
 6660|     74|    }
 6661|       |
 6662|  2.78M|    begin += len;
 6663|  2.78M|    return cp;
 6664|  2.78M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  15.2k|    {
 6356|  15.2k|        m_specs.charset_string_data = fmt.data();
 6357|  15.2k|        m_specs.charset_string_size = fmt.size();
 6358|  15.2k|        on_type(presentation_type::string_set);
 6359|  15.2k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6758|   100k|{
 6759|   100k|#if !SCN_DISABLE_REGEX
 6760|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6761|   100k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|       |
 6763|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6764|       |                  std::is_same_v<CharT, wchar_t>) {
 6765|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6766|       |        return begin;
 6767|       |    }
 6768|       |
 6769|   100k|    auto start = begin;
 6770|   100k|    ++begin;
 6771|       |
 6772|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 100k]
  |  |  ------------------
  ------------------
 6773|     34|        handler.on_error("Unexpected end of regex in format string");
 6774|     34|        return begin;
 6775|     34|    }
 6776|       |
 6777|   100k|    handler.on_type(presentation_type::regex);
 6778|  33.7M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6778:12): [True: 33.7M, False: 236]
  ------------------
 6779|  33.7M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6779:13): [True: 208k, False: 33.5M]
  ------------------
 6780|   208k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6780:17): [True: 100k, False: 108k]
  ------------------
 6781|   100k|                break;
 6782|   100k|            }
 6783|   108k|            else {
 6784|   108k|                handler.on_type(presentation_type::regex_escaped);
 6785|   108k|            }
 6786|   208k|        }
 6787|  33.7M|    }
 6788|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236, False: 100k]
  |  |  ------------------
  ------------------
 6789|    236|        handler.on_error("Unexpected end of regex in format string");
 6790|    236|        return begin;
 6791|    236|    }
 6792|       |
 6793|   100k|    auto regex_end = begin;
 6794|   100k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6795|   100k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 100k]
  |  |  ------------------
  ------------------
 6796|     34|        handler.on_error("Invalid (empty) regex in format string");
 6797|     34|        return begin;
 6798|     34|    }
 6799|   100k|    handler.on_regex_pattern(regex_pattern);
 6800|   100k|    ++begin;
 6801|       |
 6802|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 100k]
  |  |  ------------------
  ------------------
 6803|     34|        handler.on_error("Unexpected end of regex in format string");
 6804|     34|        return begin;
 6805|     34|    }
 6806|       |
 6807|   100k|    regex_flags flags{regex_flags::none};
 6808|   100k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6809|   100k|        {{'m', regex_flags::multiline},
 6810|   100k|         {'s', regex_flags::singleline},
 6811|   100k|         {'i', regex_flags::nocase},
 6812|   100k|         {'n', regex_flags::nocapture}}};
 6813|   120k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6813:12): [True: 120k, False: 58]
  ------------------
 6814|   120k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6814:13): [True: 99.8k, False: 20.4k]
  ------------------
 6815|  99.8k|            break;
 6816|  99.8k|        }
 6817|  20.4k|        bool found_flag = false;
 6818|  56.4k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6818:24): [True: 56.4k, False: 170]
  ------------------
 6819|  56.4k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6819:17): [True: 36.1k, False: 20.2k]
  ------------------
 6820|  36.1k|                continue;
 6821|  36.1k|            }
 6822|  20.2k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6822:17): [True: 34, False: 20.2k]
  ------------------
 6823|     34|                handler.on_error("Flag set multiple times in regex");
 6824|     34|                return begin;
 6825|     34|            }
 6826|  20.2k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6827|  20.2k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6827:17): [True: 48, False: 20.1k]
  ------------------
 6828|       |                // clang-format off
 6829|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6830|       |                // clang-format on
 6831|     48|            }
 6832|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6833|       |            if (*begin == CharT{'m'}) {
 6834|       |                // clang-format off
 6835|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6836|       |                // clang-format on
 6837|       |            }
 6838|       |#endif
 6839|  20.2k|#endif
 6840|  20.2k|            flags |= flag.second;
 6841|  20.2k|            found_flag = true;
 6842|  20.2k|            break;
 6843|  20.2k|        }
 6844|  20.3k|        if (!found_flag) {
  ------------------
  |  Branch (6844:13): [True: 170, False: 20.2k]
  ------------------
 6845|    170|            handler.on_error("Invalid flag in regex");
 6846|    170|            return begin;
 6847|    170|        }
 6848|  20.3k|    }
 6849|  99.8k|    handler.on_regex_flags(flags);
 6850|       |
 6851|  99.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  99.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 99.8k]
  |  |  ------------------
  ------------------
 6852|     58|        handler.on_error("Unexpected end of regex in format string");
 6853|     58|        return begin;
 6854|     58|    }
 6855|       |
 6856|  99.8k|    return begin;
 6857|       |#else
 6858|       |    handler.on_error("Regular expression support is disabled");
 6859|       |    return {};
 6860|       |#endif
 6861|  99.8k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6363|   100k|    {
 6364|   100k|        m_specs.charset_string_data = pattern.data();
 6365|   100k|        m_specs.charset_string_size = pattern.size();
 6366|   100k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6464|  5.62k|{
 6465|  5.62k|    switch (type) {
 6466|    106|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 106, False: 5.51k]
  ------------------
 6467|    158|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 52, False: 5.56k]
  ------------------
 6468|    158|            return presentation_type::int_binary;
 6469|    108|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 108, False: 5.51k]
  ------------------
 6470|    108|            return presentation_type::int_decimal;
 6471|    178|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 178, False: 5.44k]
  ------------------
 6472|    178|            return presentation_type::int_generic;
 6473|     70|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 70, False: 5.55k]
  ------------------
 6474|     70|            return presentation_type::int_unsigned_decimal;
 6475|    448|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 448, False: 5.17k]
  ------------------
 6476|    448|            return presentation_type::int_octal;
 6477|    116|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 116, False: 5.50k]
  ------------------
 6478|    168|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 52, False: 5.56k]
  ------------------
 6479|    168|            return presentation_type::int_hex;
 6480|     34|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 34, False: 5.58k]
  ------------------
 6481|     68|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 34, False: 5.58k]
  ------------------
 6482|     68|            return presentation_type::int_arbitrary_base;
 6483|    106|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 106, False: 5.51k]
  ------------------
 6484|    194|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 88, False: 5.53k]
  ------------------
 6485|    194|            return presentation_type::float_hex;
 6486|     70|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 70, False: 5.55k]
  ------------------
 6487|    140|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 70, False: 5.55k]
  ------------------
 6488|    140|            return presentation_type::float_scientific;
 6489|    232|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 232, False: 5.38k]
  ------------------
 6490|    338|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 106, False: 5.51k]
  ------------------
 6491|    338|            return presentation_type::float_fixed;
 6492|    150|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 150, False: 5.47k]
  ------------------
 6493|    208|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 58, False: 5.56k]
  ------------------
 6494|    208|            return presentation_type::float_general;
 6495|  2.03k|        case 's':
  ------------------
  |  Branch (6495:9): [True: 2.03k, False: 3.58k]
  ------------------
 6496|  2.03k|            return presentation_type::string;
 6497|    340|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 340, False: 5.28k]
  ------------------
 6498|    340|            return presentation_type::character;
 6499|     34|        case '?':
  ------------------
  |  Branch (6499:9): [True: 34, False: 5.58k]
  ------------------
 6500|     34|            return presentation_type::escaped_character;
 6501|     78|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 78, False: 5.54k]
  ------------------
 6502|     78|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 5.62k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 5.62k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|  1.05k|        default:
  ------------------
  |  Branch (6509:9): [True: 1.05k, False: 4.56k]
  ------------------
 6510|  1.05k|            return presentation_type::none;
 6511|  5.62k|    }
 6512|  5.62k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6541|   126k|{
 6542|   126k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   126k|    auto check_align = [](wchar_t ch) {
 6545|   126k|        switch (ch) {
 6546|   126k|            case L'<':
 6547|   126k|                return align_type::left;
 6548|   126k|            case L'>':
 6549|   126k|                return align_type::right;
 6550|   126k|            case L'^':
 6551|   126k|                return align_type::center;
 6552|   126k|            default:
 6553|   126k|                return align_type::none;
 6554|   126k|        }
 6555|   126k|    };
 6556|       |
 6557|   126k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   126k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 126k]
  |  |  |  Branch (859:45): [True: 38, False: 126k]
  |  |  |  Branch (859:45): [True: 4, False: 126k]
  |  |  ------------------
  ------------------
 6559|   126k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|     42|        handler.on_error("Invalid encoding in fill character");
 6561|     42|        return begin;
 6562|     42|    }
 6563|       |
 6564|   126k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   126k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   126k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   126k|    const auto begin_before_fill = begin;
 6569|   126k|    begin += potential_fill_len;
 6570|       |
 6571|   126k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 1.03k, False: 125k]
  ------------------
 6572|  1.03k|        return begin_before_fill;
 6573|  1.03k|    }
 6574|       |
 6575|   125k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   125k|    const auto begin_after_fill = begin;
 6577|   125k|    ++begin;
 6578|       |
 6579|   125k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 124k, False: 1.40k]
  ------------------
 6580|   124k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 124k]
  |  |  ------------------
  ------------------
 6581|     60|            handler.on_error("Invalid fill character '{' in format string");
 6582|     60|            return begin;
 6583|     60|        }
 6584|   124k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 12.4k, False: 111k]
  ------------------
 6585|  12.4k|            return begin_before_fill;
 6586|  12.4k|        }
 6587|   124k|    }
 6588|       |
 6589|   113k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 103k, False: 9.62k]
  ------------------
 6590|   103k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 7.00k, False: 96.4k]
  ------------------
 6591|  7.00k|            handler.on_align(potential_align_on_fill);
 6592|  7.00k|            return begin_after_fill;
 6593|  7.00k|        }
 6594|  96.4k|        return begin_before_fill;
 6595|   103k|    }
 6596|       |
 6597|  9.62k|    handler.on_fill(potential_fill);
 6598|  9.62k|    handler.on_align(potential_align_after_fill);
 6599|  9.62k|    return begin;
 6600|   113k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6523|   126k|{
 6524|   126k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|       |    if constexpr (sizeof(CharT) != 1) {
 6526|       |        return 1;
 6527|       |    }
 6528|   126k|    else {
 6529|   126k|        const auto lengths =
 6530|   126k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|   126k|            "\3\4";
 6532|   126k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|   126k|        return len;
 6534|   126k|    }
 6535|   126k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   252k|    auto check_align = [](wchar_t ch) {
 6545|   252k|        switch (ch) {
 6546|  1.50k|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 1.50k, False: 250k]
  ------------------
 6547|  1.50k|                return align_type::left;
 6548|  1.44k|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 1.44k, False: 250k]
  ------------------
 6549|  1.44k|                return align_type::right;
 6550|  14.8k|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 14.8k, False: 237k]
  ------------------
 6551|  14.8k|                return align_type::center;
 6552|   234k|            default:
  ------------------
  |  Branch (6552:13): [True: 234k, False: 17.7k]
  ------------------
 6553|   234k|                return align_type::none;
 6554|   252k|        }
 6555|   252k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|  9.62k|    {
 6278|  9.62k|        m_specs.fill = fill;
 6279|  9.62k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|  9.62k|    {
 6159|  9.62k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  9.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|  9.62k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  9.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|  9.62k|        if constexpr (sizeof(CharT) == 1) {
 6162|  21.4k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6162:32): [True: 11.8k, False: 9.62k]
  ------------------
 6163|  11.8k|                SCN_GCC_PUSH
 6164|  11.8k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|  11.8k|                m_data[i] = s[i];
 6166|  11.8k|                SCN_GCC_POP
 6167|  11.8k|            }
 6168|  9.62k|            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|       |        else {
 6181|       |            const auto front = static_cast<unsigned>(s.front());
 6182|       |            m_data[0] = static_cast<char>(front);
 6183|       |            m_data[1] = static_cast<char>(front >> 8);
 6184|       |            m_data[2] = static_cast<char>(front >> 16);
 6185|       |            m_data[3] = static_cast<char>(front >> 24);
 6186|       |        }
 6187|  9.62k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6606|   126k|{
 6607|   126k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   126k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 20.2k, False: 106k]
  |  Branch (6609:33): [True: 5.08k, False: 15.1k]
  ------------------
 6610|  5.08k|        int width = parse_simple_int(begin, end);
 6611|  5.08k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.04k, False: 34]
  |  |  ------------------
  ------------------
 6612|  5.04k|            handler.on_width(width);
 6613|  5.04k|        }
 6614|     34|        else {
 6615|     34|            handler.on_error("Invalid field width");
 6616|     34|            return begin;
 6617|     34|        }
 6618|  5.08k|    }
 6619|   126k|    return begin;
 6620|   126k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6626|  11.9k|{
 6627|  11.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6628|       |
 6629|  11.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6629:9): [True: 11.8k, False: 106]
  |  Branch (6629:33): [True: 11.8k, False: 52]
  ------------------
 6630|  11.8k|        int prec = parse_simple_int(begin, end);
 6631|  11.8k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  11.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.7k, False: 48]
  |  |  ------------------
  ------------------
 6632|  11.7k|            handler.on_precision(prec);
 6633|  11.7k|        }
 6634|     48|        else {
 6635|     48|            handler.on_error("Invalid field precision");
 6636|     48|            return begin;
 6637|     48|        }
 6638|  11.8k|    }
 6639|  11.9k|    return begin;
 6640|  11.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7136|    860|    {
 7137|    860|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|    860|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 770, False: 90]
  ------------------
 7139|    860|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 680, False: 90]
  ------------------
 7140|    860|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 590, False: 90]
  ------------------
 7141|    860|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 500, False: 90]
  ------------------
 7142|    500|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|    500|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|    500|        }
 7147|       |
 7148|    360|        Handler::on_localized();
 7149|    360|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   123k|{
 8427|   123k|#define SCN_VISIT(Type)                                         \
 8428|   123k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   123k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   123k|    }                                                           \
 8431|   123k|    else {                                                      \
 8432|   123k|        return vis(monostate_val);                              \
 8433|   123k|    }
 8434|       |
 8435|   123k|    monostate monostate_val{};
 8436|       |
 8437|   123k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 123k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 123k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|  13.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 13.7k, False: 109k]
  ------------------
 8443|  13.7k|            SCN_VISIT(int);
  ------------------
  |  | 8428|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  13.7k|    }                                                           \
  |  | 8431|  13.7k|    else {                                                      \
  |  | 8432|  13.7k|        return vis(monostate_val);                              \
  |  | 8433|  13.7k|    }
  ------------------
 8444|  13.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 123k]
  ------------------
 8445|  13.7k|            SCN_VISIT(long);
  ------------------
  |  | 8428|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  13.7k|    }                                                           \
  |  | 8431|  13.7k|    else {                                                      \
  |  | 8432|  13.7k|        return vis(monostate_val);                              \
  |  | 8433|  13.7k|    }
  ------------------
 8446|  13.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 123k]
  ------------------
 8447|  13.7k|            SCN_VISIT(long long);
  ------------------
  |  | 8428|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  13.7k|    }                                                           \
  |  | 8431|  13.7k|    else {                                                      \
  |  | 8432|  13.7k|        return vis(monostate_val);                              \
  |  | 8433|  13.7k|    }
  ------------------
 8448|  13.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 123k]
  ------------------
 8449|  13.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  13.7k|    }                                                           \
  |  | 8431|  13.7k|    else {                                                      \
  |  | 8432|  13.7k|        return vis(monostate_val);                              \
  |  | 8433|  13.7k|    }
  ------------------
 8450|  13.7k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 123k]
  ------------------
 8451|  13.7k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  13.7k|    }                                                           \
  |  | 8431|  13.7k|    else {                                                      \
  |  | 8432|  13.7k|        return vis(monostate_val);                              \
  |  | 8433|  13.7k|    }
  ------------------
 8452|  27.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 13.7k, False: 109k]
  ------------------
 8453|  27.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  27.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  27.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  27.4k|    }                                                           \
  |  | 8431|  27.4k|    else {                                                      \
  |  | 8432|  27.4k|        return vis(monostate_val);                              \
  |  | 8433|  27.4k|    }
  ------------------
 8454|  27.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 123k]
  ------------------
 8455|  27.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  27.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  27.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  27.4k|    }                                                           \
  |  | 8431|  27.4k|    else {                                                      \
  |  | 8432|  27.4k|        return vis(monostate_val);                              \
  |  | 8433|  27.4k|    }
  ------------------
 8456|  27.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 123k]
  ------------------
 8457|  27.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  27.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  27.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  27.4k|    }                                                           \
  |  | 8431|  27.4k|    else {                                                      \
  |  | 8432|  27.4k|        return vis(monostate_val);                              \
  |  | 8433|  27.4k|    }
  ------------------
 8458|  41.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 13.6k, False: 109k]
  ------------------
 8459|  41.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  41.1k|    }                                                           \
  |  | 8431|  41.1k|    else {                                                      \
  |  | 8432|  41.1k|        return vis(monostate_val);                              \
  |  | 8433|  41.1k|    }
  ------------------
 8460|  54.8k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 13.7k, False: 109k]
  ------------------
 8461|  54.8k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  54.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  54.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  54.8k|    }                                                           \
  |  | 8431|  54.8k|    else {                                                      \
  |  | 8432|  54.8k|        return vis(monostate_val);                              \
  |  | 8433|  54.8k|    }
  ------------------
 8462|  68.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 13.6k, False: 109k]
  ------------------
 8463|  68.5k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  68.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  68.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  68.5k|    }                                                           \
  |  | 8431|  68.5k|    else {                                                      \
  |  | 8432|  68.5k|        return vis(monostate_val);                              \
  |  | 8433|  68.5k|    }
  ------------------
 8464|  68.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 123k]
  ------------------
 8465|  68.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  68.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  68.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  68.5k|    }                                                           \
  |  | 8431|  68.5k|    else {                                                      \
  |  | 8432|  68.5k|        return vis(monostate_val);                              \
  |  | 8433|  68.5k|    }
  ------------------
 8466|  68.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 123k]
  ------------------
 8467|  68.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  68.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  68.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  68.5k|    }                                                           \
  |  | 8431|  68.5k|    else {                                                      \
  |  | 8432|  68.5k|        return vis(monostate_val);                              \
  |  | 8433|  68.5k|    }
  ------------------
 8468|  68.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 123k]
  ------------------
 8469|  68.5k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  68.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  68.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  68.5k|    }                                                           \
  |  | 8431|  68.5k|    else {                                                      \
  |  | 8432|  68.5k|        return vis(monostate_val);                              \
  |  | 8433|  68.5k|    }
  ------------------
 8470|  82.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 13.7k, False: 109k]
  ------------------
 8471|  82.2k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  82.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  82.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  82.2k|    }                                                           \
  |  | 8431|  82.2k|    else {                                                      \
  |  | 8432|  82.2k|        return vis(monostate_val);                              \
  |  | 8433|  82.2k|    }
  ------------------
 8472|  82.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 123k]
  ------------------
 8473|  82.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  82.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  82.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  82.2k|    }                                                           \
  |  | 8431|  82.2k|    else {                                                      \
  |  | 8432|  82.2k|        return vis(monostate_val);                              \
  |  | 8433|  82.2k|    }
  ------------------
 8474|  95.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 13.6k, False: 109k]
  ------------------
 8475|  95.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  95.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  95.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  95.9k|    }                                                           \
  |  | 8431|  95.9k|    else {                                                      \
  |  | 8432|  95.9k|        return vis(monostate_val);                              \
  |  | 8433|  95.9k|    }
  ------------------
 8476|   109k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 13.6k, False: 109k]
  ------------------
 8477|   109k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   109k|    }                                                           \
  |  | 8431|   109k|    else {                                                      \
  |  | 8432|   109k|        return vis(monostate_val);                              \
  |  | 8433|   109k|    }
  ------------------
 8478|   109k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 123k]
  ------------------
 8479|   109k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   109k|    }                                                           \
  |  | 8431|   109k|    else {                                                      \
  |  | 8432|   109k|        return vis(monostate_val);                              \
  |  | 8433|   109k|    }
  ------------------
 8480|   123k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 13.6k, False: 109k]
  ------------------
 8481|   123k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   123k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   123k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   123k|    }                                                           \
  |  | 8431|   123k|    else {                                                      \
  |  | 8432|   123k|        return vis(monostate_val);                              \
  |  | 8433|   123k|    }
  ------------------
 8482|   123k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 123k]
  ------------------
 8483|   123k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   123k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   123k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   123k|    }                                                           \
  |  | 8431|   123k|    else {                                                      \
  |  | 8432|   123k|        return vis(monostate_val);                              \
  |  | 8433|   123k|    }
  ------------------
 8484|   123k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 123k]
  ------------------
 8485|   123k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   123k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   123k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   123k|    }                                                           \
  |  | 8431|   123k|    else {                                                      \
  |  | 8432|   123k|        return vis(monostate_val);                              \
  |  | 8433|   123k|    }
  ------------------
 8486|       |
 8487|   123k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 123k]
  ------------------
 8488|   123k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   123k|            return vis(
 8490|   123k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 123k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 123k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   123k|            SCN_CLANG_POP
 8505|   123k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  12.0k|    {
 3326|  12.0k|        return m_iterator;
 3327|  12.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  2.17k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.17k|    {
 1430|  2.17k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  2.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.17k|    {
  437|  2.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.39k|    {
 1177|  2.39k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  6.93k|    {
 3330|  6.93k|        return m_sentinel;
 3331|  6.93k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1473|    226|        : base(unexpect, std::move(e.error())),
 1474|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    226|    {
 1476|    226|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    226|          m_has_value(false)
  446|    226|    {
  447|    226|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  5.60k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.60k|    static_cast<    \
  |  |  929|  5.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.60k|    static_cast<    \
  |  |  929|  5.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.60k|    {
 3312|  5.60k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    262|    {
 1598|    262|        return has_value();
 1599|    262|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.74k|    {
  485|  4.74k|        return m_has_value;
  486|  4.74k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1652|    210|    {
 1653|    210|        return value();
 1654|    210|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  2.17k|    {
 1627|  2.17k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.17k|        return this->get_value();
 1629|  2.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.17k|    {
  451|  2.17k|        return m_value;
  452|  2.17k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  2.13k|    {
 1837|  2.13k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.13k|                                            std::forward<F>(f));
 1839|  2.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  2.13k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.13k|    else {
 1333|  2.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.96k, False: 174]
  |  |  ------------------
  ------------------
 1335|  2.13k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.13k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  2.13k|    }
 1340|  2.13k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.96k|    {
 1663|  1.96k|        return std::move(value());
 1664|  1.96k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.96k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.96k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.96k|    {
 1430|  1.96k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.96k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.96k|    {
  437|  1.96k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13k|    {
 1177|  2.13k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1483|    174|        : base(unexpect, std::forward<Args>(args)...),
 1484|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  2.13k|    {
 1598|  2.13k|        return has_value();
 1599|  2.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.26k|    {
  485|  4.26k|        return m_has_value;
  486|  4.26k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.96k|    {
 1663|  1.96k|        return std::move(value());
 1664|  1.96k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.96k|    {
 1627|  1.96k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.96k|        return this->get_value();
 1629|  1.96k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.96k|    {
  451|  1.96k|        return m_value;
  452|  1.96k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   384k|    {
 5476|   384k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   384k|        return static_cast<std::size_t>(m_desc &
 5481|   384k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   384k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   440k|    {
 5501|   440k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   440k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  56.5k|    {
 5444|  56.5k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 56.5k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  56.5k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 56.4k]
  |  |  ------------------
  ------------------
 5452|     68|            return {};
 5453|     68|        }
 5454|       |
 5455|  56.4k|        const auto t = type(id);
 5456|  56.4k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40k, False: 55.0k]
  |  |  ------------------
  ------------------
 5457|  1.40k|            return {};
 5458|  1.40k|        }
 5459|       |
 5460|  55.0k|        basic_scan_arg<Context> arg;
 5461|  55.0k|        arg.m_type = t;
 5462|  55.0k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 55.0k, False: 0]
  ------------------
 5463|  55.0k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  55.0k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  55.0k|        return arg;
 5469|  56.4k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  56.5k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  56.4k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  56.4k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  56.4k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  56.4k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  56.4k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  55.0k|    {
 5505|  55.0k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  55.0k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|   109k|    {
 5257|   109k|        return m_type != detail::arg_type::none_type;
 5258|   109k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  5.41k|{
 8427|  5.41k|#define SCN_VISIT(Type)                                         \
 8428|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  5.41k|    }                                                           \
 8431|  5.41k|    else {                                                      \
 8432|  5.41k|        return vis(monostate_val);                              \
 8433|  5.41k|    }
 8434|       |
 8435|  5.41k|    monostate monostate_val{};
 8436|       |
 8437|  5.41k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.41k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.41k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|    602|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 602, False: 4.81k]
  ------------------
 8443|    602|            SCN_VISIT(int);
  ------------------
  |  | 8428|    602|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    602|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    602|    }                                                           \
  |  | 8431|    602|    else {                                                      \
  |  | 8432|    602|        return vis(monostate_val);                              \
  |  | 8433|    602|    }
  ------------------
 8444|    602|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.41k]
  ------------------
 8445|    602|            SCN_VISIT(long);
  ------------------
  |  | 8428|    602|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    602|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    602|    }                                                           \
  |  | 8431|    602|    else {                                                      \
  |  | 8432|    602|        return vis(monostate_val);                              \
  |  | 8433|    602|    }
  ------------------
 8446|    602|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.41k]
  ------------------
 8447|    602|            SCN_VISIT(long long);
  ------------------
  |  | 8428|    602|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    602|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    602|    }                                                           \
  |  | 8431|    602|    else {                                                      \
  |  | 8432|    602|        return vis(monostate_val);                              \
  |  | 8433|    602|    }
  ------------------
 8448|    602|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 5.41k]
  ------------------
 8449|    602|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|    602|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    602|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    602|    }                                                           \
  |  | 8431|    602|    else {                                                      \
  |  | 8432|    602|        return vis(monostate_val);                              \
  |  | 8433|    602|    }
  ------------------
 8450|    602|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.41k]
  ------------------
 8451|    602|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|    602|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    602|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    602|    }                                                           \
  |  | 8431|    602|    else {                                                      \
  |  | 8432|    602|        return vis(monostate_val);                              \
  |  | 8433|    602|    }
  ------------------
 8452|  1.20k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 602, False: 4.81k]
  ------------------
 8453|  1.20k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  1.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20k|    }                                                           \
  |  | 8431|  1.20k|    else {                                                      \
  |  | 8432|  1.20k|        return vis(monostate_val);                              \
  |  | 8433|  1.20k|    }
  ------------------
 8454|  1.20k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.41k]
  ------------------
 8455|  1.20k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  1.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20k|    }                                                           \
  |  | 8431|  1.20k|    else {                                                      \
  |  | 8432|  1.20k|        return vis(monostate_val);                              \
  |  | 8433|  1.20k|    }
  ------------------
 8456|  1.20k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.41k]
  ------------------
 8457|  1.20k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  1.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20k|    }                                                           \
  |  | 8431|  1.20k|    else {                                                      \
  |  | 8432|  1.20k|        return vis(monostate_val);                              \
  |  | 8433|  1.20k|    }
  ------------------
 8458|  1.80k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 602, False: 4.81k]
  ------------------
 8459|  1.80k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  1.80k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.80k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.80k|    }                                                           \
  |  | 8431|  1.80k|    else {                                                      \
  |  | 8432|  1.80k|        return vis(monostate_val);                              \
  |  | 8433|  1.80k|    }
  ------------------
 8460|  2.40k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 602, False: 4.81k]
  ------------------
 8461|  2.40k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  2.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.40k|    }                                                           \
  |  | 8431|  2.40k|    else {                                                      \
  |  | 8432|  2.40k|        return vis(monostate_val);                              \
  |  | 8433|  2.40k|    }
  ------------------
 8462|  2.40k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.41k]
  ------------------
 8463|  2.40k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  2.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.40k|    }                                                           \
  |  | 8431|  2.40k|    else {                                                      \
  |  | 8432|  2.40k|        return vis(monostate_val);                              \
  |  | 8433|  2.40k|    }
  ------------------
 8464|  3.01k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 602, False: 4.81k]
  ------------------
 8465|  3.01k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  3.01k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.01k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.01k|    }                                                           \
  |  | 8431|  3.01k|    else {                                                      \
  |  | 8432|  3.01k|        return vis(monostate_val);                              \
  |  | 8433|  3.01k|    }
  ------------------
 8466|  3.01k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 5.41k]
  ------------------
 8467|  3.01k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  3.01k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.01k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.01k|    }                                                           \
  |  | 8431|  3.01k|    else {                                                      \
  |  | 8432|  3.01k|        return vis(monostate_val);                              \
  |  | 8433|  3.01k|    }
  ------------------
 8468|  3.01k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.41k]
  ------------------
 8469|  3.01k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  3.01k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.01k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.01k|    }                                                           \
  |  | 8431|  3.01k|    else {                                                      \
  |  | 8432|  3.01k|        return vis(monostate_val);                              \
  |  | 8433|  3.01k|    }
  ------------------
 8470|  3.61k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 602, False: 4.81k]
  ------------------
 8471|  3.61k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  3.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.61k|    }                                                           \
  |  | 8431|  3.61k|    else {                                                      \
  |  | 8432|  3.61k|        return vis(monostate_val);                              \
  |  | 8433|  3.61k|    }
  ------------------
 8472|  3.61k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.41k]
  ------------------
 8473|  3.61k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  3.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.61k|    }                                                           \
  |  | 8431|  3.61k|    else {                                                      \
  |  | 8432|  3.61k|        return vis(monostate_val);                              \
  |  | 8433|  3.61k|    }
  ------------------
 8474|  3.61k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.41k]
  ------------------
 8475|  3.61k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  3.61k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.61k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.61k|    }                                                           \
  |  | 8431|  3.61k|    else {                                                      \
  |  | 8432|  3.61k|        return vis(monostate_val);                              \
  |  | 8433|  3.61k|    }
  ------------------
 8476|  4.21k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 602, False: 4.81k]
  ------------------
 8477|  4.21k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  4.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  4.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  4.21k|    }                                                           \
  |  | 8431|  4.21k|    else {                                                      \
  |  | 8432|  4.21k|        return vis(monostate_val);                              \
  |  | 8433|  4.21k|    }
  ------------------
 8478|  4.81k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 602, False: 4.81k]
  ------------------
 8479|  4.81k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  4.81k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  4.81k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  4.81k|    }                                                           \
  |  | 8431|  4.81k|    else {                                                      \
  |  | 8432|  4.81k|        return vis(monostate_val);                              \
  |  | 8433|  4.81k|    }
  ------------------
 8480|  5.41k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 602, False: 4.81k]
  ------------------
 8481|  5.41k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.41k|    }                                                           \
  |  | 8431|  5.41k|    else {                                                      \
  |  | 8432|  5.41k|        return vis(monostate_val);                              \
  |  | 8433|  5.41k|    }
  ------------------
 8482|  5.41k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 5.41k]
  ------------------
 8483|  5.41k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.41k|    }                                                           \
  |  | 8431|  5.41k|    else {                                                      \
  |  | 8432|  5.41k|        return vis(monostate_val);                              \
  |  | 8433|  5.41k|    }
  ------------------
 8484|  5.41k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 5.41k]
  ------------------
 8485|  5.41k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.41k|    }                                                           \
  |  | 8431|  5.41k|    else {                                                      \
  |  | 8432|  5.41k|        return vis(monostate_val);                              \
  |  | 8433|  5.41k|    }
  ------------------
 8486|       |
 8487|  5.41k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 5.41k]
  ------------------
 8488|  5.41k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  5.41k|            return vis(
 8490|  5.41k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 5.41k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 5.41k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  5.41k|            SCN_CLANG_POP
 8505|  5.41k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   384k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   384k|    {
 5555|   384k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8064|   384k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|   384k|    {
 8066|   384k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   384k|{
 7054|   384k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   384k|    handler.check_args_exhausted();
 7056|   384k|    return handler.get_error();
 7057|   384k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   384k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   384k|    auto begin = format.data();
 7023|   384k|    auto it = begin;
 7024|   384k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   797M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 797M, False: 137k]
  ------------------
 7027|   797M|        const auto ch = *it++;
 7028|   797M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 249k, False: 796M]
  ------------------
 7029|   249k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   249k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   249k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 245k, False: 4.56k]
  ------------------
 7033|   245k|                return;
 7034|   245k|            }
 7035|   249k|        }
 7036|   796M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 4.87k, False: 796M]
  ------------------
 7037|  4.87k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  9.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 3.46k]
  |  |  |  Branch (859:45): [True: 666, False: 4.21k]
  |  |  |  Branch (859:45): [True: 752, False: 3.46k]
  |  |  ------------------
  ------------------
 7038|  1.41k|                handler.on_error("Unmatched '}' in format string");
 7039|  1.41k|                return;
 7040|  1.41k|            }
 7041|       |
 7042|  3.46k|            handler.on_literal_text(begin, it);
 7043|  3.46k|            begin = ++it;
 7044|  3.46k|        }
 7045|   797M|    }
 7046|       |
 7047|   137k|    handler.on_literal_text(begin, end);
 7048|   137k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6951|   249k|{
 6952|   249k|    struct id_adapter {
 6953|   249k|        constexpr void operator()()
 6954|   249k|        {
 6955|   249k|            arg_id = handler.on_arg_id();
 6956|   249k|        }
 6957|   249k|        constexpr void operator()(std::size_t id)
 6958|   249k|        {
 6959|   249k|            arg_id = handler.on_arg_id(id);
 6960|   249k|        }
 6961|       |
 6962|   249k|        constexpr void on_error(const char* msg)
 6963|   249k|        {
 6964|   249k|            SCN_UNLIKELY_ATTR
 6965|   249k|            handler.on_error(msg);
 6966|   249k|        }
 6967|       |
 6968|   249k|        Handler& handler;
 6969|   249k|        std::size_t arg_id;
 6970|   249k|    };
 6971|       |
 6972|   249k|    ++begin;
 6973|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 249k]
  |  |  ------------------
  ------------------
 6974|     88|        handler.on_error("Unexpected end of replacement field");
 6975|     88|        return begin;
 6976|     88|    }
 6977|       |
 6978|   249k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 5.51k, False: 244k]
  ------------------
 6979|  5.51k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|  5.51k|    }
 6981|   244k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 240, False: 244k]
  ------------------
 6982|    240|        handler.on_literal_text(begin, begin + 1);
 6983|    240|    }
 6984|   244k|    else {
 6985|   244k|        auto adapter = id_adapter{handler, 0};
 6986|   244k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   244k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 243k]
  |  |  ------------------
  ------------------
 6989|    120|            handler.on_error("Missing '}' in format string");
 6990|    120|            return begin;
 6991|    120|        }
 6992|       |
 6993|   243k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 294, False: 243k]
  ------------------
 6994|    294|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|    294|        }
 6996|   243k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 50.7k, False: 192k]
  ------------------
 6997|  50.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 50.7k]
  |  |  ------------------
  ------------------
 6998|     50|                handler.on_error("Unexpected end of replacement field");
 6999|     50|                return begin;
 7000|     50|            }
 7001|  50.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  50.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.75k, False: 47.9k]
  |  |  |  Branch (859:45): [True: 0, False: 50.7k]
  |  |  |  Branch (859:45): [True: 2.75k, False: 47.9k]
  |  |  ------------------
  ------------------
 7003|  2.75k|                handler.on_error("Unknown format specifier");
 7004|  2.75k|                return begin;
 7005|  2.75k|            }
 7006|  50.7k|        }
 7007|   192k|        else {
 7008|   192k|            SCN_UNLIKELY_ATTR
 7009|   192k|            handler.on_error("Missing '}' in format string");
 7010|   192k|            return begin;
 7011|   192k|        }
 7012|   243k|    }
 7013|  54.0k|    return begin + 1;
 7014|   249k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8048|  56.5k|    {
 8049|  56.5k|        return m_args.get(id);
 8050|  56.5k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8053|  5.80k|    {
 8054|  5.80k|        return m_args;
 8055|  5.80k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8058|  53.3k|    {
 8059|  53.3k|        return m_locale;
 8060|  53.3k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  56.0k|    {
 5576|  56.0k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 55.9k]
  |  |  ------------------
  ------------------
 5577|     40|            on_error(
 5578|     40|                "Cannot switch from manual to automatic argument indexing");
 5579|     40|            return 0;
 5580|     40|        }
 5581|       |
 5582|  55.9k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  55.9k|        do_check_arg_id(id);
 5584|  55.9k|        return id;
 5585|  56.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5599|    128|    {
 5600|    128|        return detail::handle_error(
 5601|    128|            scan_error{scan_error::invalid_format_string, msg});
 5602|    128|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  56.4k|{
 6064|  56.4k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  56.4k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  56.4k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   244k|{
 6453|   244k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   244k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   244k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   244k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 244k, False: 0]
  |  Branch (6454:26): [True: 193k, False: 50.4k]
  ------------------
 6455|   193k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|   193k|    }
 6457|       |
 6458|  50.4k|    handler();
 6459|  50.4k|    return begin;
 6460|   244k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6422|   193k|{
 6423|   193k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6424|       |
 6425|   193k|    CharT c = *begin;
 6426|   193k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6426:9): [True: 192k, False: 1.38k]
  |  Branch (6426:27): [True: 594, False: 788]
  ------------------
 6427|   192k|        handler.on_error("Invalid argument ID");
 6428|   192k|        return begin;
 6429|   192k|    }
 6430|       |
 6431|    788|    int idx = 0;
 6432|    788|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6432:9): [True: 450, False: 338]
  ------------------
 6433|    450|        idx = parse_simple_int(begin, end);
 6434|    450|    }
 6435|    338|    else {
 6436|    338|        ++begin;
 6437|    338|    }
 6438|       |
 6439|    788|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6439:9): [True: 120, False: 668]
  |  Branch (6439:26): [True: 374, False: 294]
  |  Branch (6439:50): [True: 76, False: 298]
  ------------------
 6440|    196|        handler.on_error("Invalid argument ID");
 6441|    196|        return begin;
 6442|    196|    }
 6443|    592|    handler(idx);
 6444|       |
 6445|    592|    return begin;
 6446|    788|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6963|   192k|        {
 6964|   192k|            SCN_UNLIKELY_ATTR
 6965|   192k|            handler.on_error(msg);
 6966|   192k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6401|  26.5k|{
 6402|  26.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  26.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  26.5k|    unsigned long long value = 0;
 6406|  29.8k|    do {
 6407|  29.8k|        value *= 10;
 6408|  29.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|  29.8k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 82, False: 29.7k]
  ------------------
 6410|  29.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|     82|            return -1;
 6412|     82|        }
 6413|  29.7k|        ++begin;
 6414|  29.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 29.4k, False: 310]
  |  Branch (6414:30): [True: 9.46k, False: 20.0k]
  |  Branch (6414:47): [True: 3.28k, False: 6.17k]
  ------------------
 6415|  26.4k|    return static_cast<int>(value);
 6416|  26.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6958|    592|        {
 6959|    592|            arg_id = handler.on_arg_id(id);
 6960|    592|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5588|    592|    {
 5589|    592|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 504]
  |  |  ------------------
  ------------------
 5590|     88|            on_error(
 5591|     88|                "Cannot switch from manual to automatic argument indexing");
 5592|     88|            return;
 5593|     88|        }
 5594|    504|        m_next_arg_id = -1;
 5595|    504|        do_check_arg_id(id);
 5596|    504|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  50.4k|        {
 6955|  50.4k|            arg_id = handler.on_arg_id();
 6956|  50.4k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|   101k|    {
 5262|   101k|        return m_type;
 5263|   101k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  47.5k|    {
 5571|  47.5k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  47.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  98.3k|    {
 5560|  98.3k|        return m_format.data();
 5561|  98.3k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|  50.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  50.7k|    {
 7132|  50.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  50.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  50.7k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6867|  50.7k|{
 6868|  50.7k|    auto do_presentation = [&]() -> const CharT* {
 6869|  50.7k|        if (*begin == CharT{'['}) {
 6870|  50.7k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  50.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  50.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  50.7k|                return begin;
 6876|  50.7k|            }
 6877|  50.7k|            handler.on_character_set_string(set);
 6878|  50.7k|            return begin;
 6879|  50.7k|        }
 6880|  50.7k|        if (*begin == CharT{'/'}) {
 6881|  50.7k|            return parse_presentation_regex(begin, end, handler);
 6882|  50.7k|        }
 6883|  50.7k|        presentation_type type = parse_presentation_type(*begin++);
 6884|  50.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  50.7k|            handler.on_error("Invalid type specifier in format string");
 6886|  50.7k|            return begin;
 6887|  50.7k|        }
 6888|  50.7k|        handler.on_type(type);
 6889|  50.7k|        return begin;
 6890|  50.7k|    };
 6891|       |
 6892|  50.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 49.7k, False: 994]
  |  Branch (6892:28): [True: 2.84k, False: 46.9k]
  ------------------
 6893|  50.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 320, False: 2.52k]
  |  Branch (6893:36): [True: 232, False: 88]
  ------------------
 6894|    232|        return do_presentation();
 6895|    232|    }
 6896|       |
 6897|  50.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  50.5k|    begin = parse_align(begin, end, handler);
 6903|  50.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 50.4k]
  |  |  ------------------
  ------------------
 6904|    102|        handler.on_error("Unexpected end of format string");
 6905|    102|        return begin;
 6906|    102|    }
 6907|       |
 6908|  50.4k|    begin = parse_width(begin, end, handler);
 6909|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 50.3k]
  |  |  ------------------
  ------------------
 6910|     98|        handler.on_error("Unexpected end of format string");
 6911|     98|        return begin;
 6912|     98|    }
 6913|       |
 6914|  50.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 3.95k, False: 46.3k]
  ------------------
 6915|  3.95k|        ++begin;
 6916|  3.95k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 3.91k]
  |  |  ------------------
  ------------------
 6917|     34|            handler.on_error("Unexpected end of format string");
 6918|     34|            return begin;
 6919|     34|        }
 6920|  3.91k|        begin = parse_precision(begin, end, handler);
 6921|  3.91k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 3.80k]
  |  |  ------------------
  ------------------
 6922|    118|            handler.on_error("Unexpected end of format string");
 6923|    118|            return begin;
 6924|    118|        }
 6925|  3.91k|    }
 6926|       |
 6927|  50.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 662, False: 49.4k]
  ------------------
 6928|    662|        handler.on_localized();
 6929|    662|        ++begin;
 6930|    662|    }
 6931|  50.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 50.1k]
  |  |  ------------------
  ------------------
 6932|     52|        handler.on_error("Unexpected end of format string");
 6933|     52|        return begin;
 6934|     52|    }
 6935|       |
 6936|  50.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 50.1k, False: 0]
  |  Branch (6936:25): [True: 45.3k, False: 4.80k]
  ------------------
 6937|  45.3k|        do_presentation();
 6938|  45.3k|    }
 6939|  50.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.77k, False: 48.3k]
  |  |  ------------------
  ------------------
 6940|  1.77k|        handler.on_error("Unexpected end of format string");
 6941|  1.77k|        return begin;
 6942|  1.77k|    }
 6943|       |
 6944|  48.3k|    return begin;
 6945|  50.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6516|  2.84k|{
 6517|  2.84k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 230, False: 2.61k]
  |  Branch (6517:33): [True: 196, False: 34]
  ------------------
 6518|  2.84k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 194, False: 2.45k]
  |  Branch (6518:33): [True: 124, False: 70]
  ------------------
 6519|  2.84k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|  45.5k|    auto do_presentation = [&]() -> const CharT* {
 6869|  45.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 2.86k, False: 42.6k]
  ------------------
 6870|  2.86k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  2.86k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 608, False: 2.25k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|    608|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|    608|                return begin;
 6876|    608|            }
 6877|  2.25k|            handler.on_character_set_string(set);
 6878|  2.25k|            return begin;
 6879|  2.86k|        }
 6880|  42.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 39.4k, False: 3.22k]
  ------------------
 6881|  39.4k|            return parse_presentation_regex(begin, end, handler);
 6882|  39.4k|        }
 6883|  3.22k|        presentation_type type = parse_presentation_type(*begin++);
 6884|  3.22k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 672, False: 2.55k]
  |  |  ------------------
  ------------------
 6885|    672|            handler.on_error("Invalid type specifier in format string");
 6886|    672|            return begin;
 6887|    672|        }
 6888|  2.55k|        handler.on_type(type);
 6889|  2.55k|        return begin;
 6890|  3.22k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  2.86k|{
 6707|  2.86k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  2.86k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  2.86k|    auto start = begin;
 6711|  2.86k|    ++begin;
 6712|       |
 6713|  2.86k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.83k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|     34|        return {};
 6718|     34|    }
 6719|  2.83k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 1.29k, False: 1.53k]
  ------------------
 6720|  1.29k|        handler.on_charset_inverted();
 6721|  1.29k|        ++begin;
 6722|  1.29k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.26k]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|     34|            return {};
 6727|     34|        }
 6728|  1.26k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 52, False: 1.21k]
  ------------------
 6729|     52|            handler.on_charset_single(char32_t{']'});
 6730|     52|            ++begin;
 6731|     52|        }
 6732|  1.26k|    }
 6733|  1.53k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 36, False: 1.49k]
  ------------------
 6734|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|     36|    }
 6736|       |
 6737|  22.3k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 21.9k, False: 322]
  ------------------
 6738|  21.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 182, False: 21.8k]
  |  |  ------------------
  ------------------
 6739|    182|            break;
 6740|    182|        }
 6741|       |
 6742|  21.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 2.25k, False: 19.5k]
  ------------------
 6743|  2.25k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  2.25k|        }
 6745|       |
 6746|  19.5k|        parse_presentation_set_literal(begin, end, handler);
 6747|  19.5k|    }
 6748|       |
 6749|    504|    SCN_UNLIKELY_ATTR
 6750|    504|    handler.on_error("Invalid [character set] specifier in format string");
 6751|    504|    return {};
 6752|  2.76k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6670|  19.5k|{
 6671|  19.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  19.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  19.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146, False: 19.4k]
  |  |  ------------------
  ------------------
 6675|    146|        return;
 6676|    146|    }
 6677|       |
 6678|  19.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 19.3k, False: 96]
  |  Branch (6678:25): [True: 1.28k, False: 18.0k]
  |  Branch (6678:49): [True: 1.24k, False: 34]
  ------------------
 6679|  19.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 1.19k, False: 52]
  ------------------
 6680|  1.19k|        ++begin;
 6681|       |
 6682|  1.19k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  1.19k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.16k]
  |  |  ------------------
  ------------------
 6684|     34|            return;
 6685|     34|        }
 6686|       |
 6687|  1.16k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.12k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|     34|            return;
 6692|     34|        }
 6693|       |
 6694|  1.12k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  1.12k|        return;
 6696|  1.16k|    }
 6697|       |
 6698|  18.2k|    handler.on_charset_single(cp_first);
 6699|  18.2k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6646|  20.7k|{
 6647|  20.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  20.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  20.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  20.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.7k]
  |  |  |  Branch (859:45): [True: 0, False: 20.7k]
  |  |  |  Branch (859:45): [True: 0, False: 20.7k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  20.7k|    const auto cp =
 6656|  20.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  20.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 20.5k]
  |  |  ------------------
  ------------------
 6658|    180|        handler.on_error("Invalid encoding in format string");
 6659|    180|        return invalid_code_point;
 6660|    180|    }
 6661|       |
 6662|  20.5k|    begin += len;
 6663|  20.5k|    return cp;
 6664|  20.7k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  2.25k|    {
 6356|  2.25k|        m_specs.charset_string_data = fmt.data();
 6357|  2.25k|        m_specs.charset_string_size = fmt.size();
 6358|  2.25k|        on_type(presentation_type::string_set);
 6359|  2.25k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6758|  39.4k|{
 6759|  39.4k|#if !SCN_DISABLE_REGEX
 6760|  39.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6761|  39.4k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  39.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|       |
 6763|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6764|       |                  std::is_same_v<CharT, wchar_t>) {
 6765|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6766|       |        return begin;
 6767|       |    }
 6768|       |
 6769|  39.4k|    auto start = begin;
 6770|  39.4k|    ++begin;
 6771|       |
 6772|  39.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 39.4k]
  |  |  ------------------
  ------------------
 6773|     34|        handler.on_error("Unexpected end of regex in format string");
 6774|     34|        return begin;
 6775|     34|    }
 6776|       |
 6777|  39.4k|    handler.on_type(presentation_type::regex);
 6778|  3.90M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6778:12): [True: 3.90M, False: 172]
  ------------------
 6779|  3.90M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6779:13): [True: 51.1k, False: 3.84M]
  ------------------
 6780|  51.1k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6780:17): [True: 39.2k, False: 11.8k]
  ------------------
 6781|  39.2k|                break;
 6782|  39.2k|            }
 6783|  11.8k|            else {
 6784|  11.8k|                handler.on_type(presentation_type::regex_escaped);
 6785|  11.8k|            }
 6786|  51.1k|        }
 6787|  3.90M|    }
 6788|  39.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 39.2k]
  |  |  ------------------
  ------------------
 6789|    172|        handler.on_error("Unexpected end of regex in format string");
 6790|    172|        return begin;
 6791|    172|    }
 6792|       |
 6793|  39.2k|    auto regex_end = begin;
 6794|  39.2k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6795|  39.2k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 39.2k]
  |  |  ------------------
  ------------------
 6796|     34|        handler.on_error("Invalid (empty) regex in format string");
 6797|     34|        return begin;
 6798|     34|    }
 6799|  39.2k|    handler.on_regex_pattern(regex_pattern);
 6800|  39.2k|    ++begin;
 6801|       |
 6802|  39.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 39.1k]
  |  |  ------------------
  ------------------
 6803|     34|        handler.on_error("Unexpected end of regex in format string");
 6804|     34|        return begin;
 6805|     34|    }
 6806|       |
 6807|  39.1k|    regex_flags flags{regex_flags::none};
 6808|  39.1k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6809|  39.1k|        {{'m', regex_flags::multiline},
 6810|  39.1k|         {'s', regex_flags::singleline},
 6811|  39.1k|         {'i', regex_flags::nocase},
 6812|  39.1k|         {'n', regex_flags::nocapture}}};
 6813|  45.3k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6813:12): [True: 45.2k, False: 44]
  ------------------
 6814|  45.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6814:13): [True: 39.0k, False: 6.24k]
  ------------------
 6815|  39.0k|            break;
 6816|  39.0k|        }
 6817|  6.24k|        bool found_flag = false;
 6818|  17.3k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6818:24): [True: 17.3k, False: 66]
  ------------------
 6819|  17.3k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6819:17): [True: 11.1k, False: 6.18k]
  ------------------
 6820|  11.1k|                continue;
 6821|  11.1k|            }
 6822|  6.18k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6822:17): [True: 40, False: 6.14k]
  ------------------
 6823|     40|                handler.on_error("Flag set multiple times in regex");
 6824|     40|                return begin;
 6825|     40|            }
 6826|  6.14k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6827|  6.14k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6827:17): [True: 46, False: 6.09k]
  ------------------
 6828|       |                // clang-format off
 6829|     46|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6830|       |                // clang-format on
 6831|     46|            }
 6832|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6833|       |            if (*begin == CharT{'m'}) {
 6834|       |                // clang-format off
 6835|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6836|       |                // clang-format on
 6837|       |            }
 6838|       |#endif
 6839|  6.14k|#endif
 6840|  6.14k|            flags |= flag.second;
 6841|  6.14k|            found_flag = true;
 6842|  6.14k|            break;
 6843|  6.18k|        }
 6844|  6.20k|        if (!found_flag) {
  ------------------
  |  Branch (6844:13): [True: 66, False: 6.14k]
  ------------------
 6845|     66|            handler.on_error("Invalid flag in regex");
 6846|     66|            return begin;
 6847|     66|        }
 6848|  6.20k|    }
 6849|  39.0k|    handler.on_regex_flags(flags);
 6850|       |
 6851|  39.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 39.0k]
  |  |  ------------------
  ------------------
 6852|     44|        handler.on_error("Unexpected end of regex in format string");
 6853|     44|        return begin;
 6854|     44|    }
 6855|       |
 6856|  39.0k|    return begin;
 6857|       |#else
 6858|       |    handler.on_error("Regular expression support is disabled");
 6859|       |    return {};
 6860|       |#endif
 6861|  39.0k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6363|  39.2k|    {
 6364|  39.2k|        m_specs.charset_string_data = pattern.data();
 6365|  39.2k|        m_specs.charset_string_size = pattern.size();
 6366|  39.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6464|  3.22k|{
 6465|  3.22k|    switch (type) {
 6466|     88|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 88, False: 3.13k]
  ------------------
 6467|    122|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 34, False: 3.19k]
  ------------------
 6468|    122|            return presentation_type::int_binary;
 6469|    106|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 106, False: 3.11k]
  ------------------
 6470|    106|            return presentation_type::int_decimal;
 6471|    160|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 160, False: 3.06k]
  ------------------
 6472|    160|            return presentation_type::int_generic;
 6473|    124|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 124, False: 3.10k]
  ------------------
 6474|    124|            return presentation_type::int_unsigned_decimal;
 6475|    124|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 124, False: 3.10k]
  ------------------
 6476|    124|            return presentation_type::int_octal;
 6477|    106|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 106, False: 3.11k]
  ------------------
 6478|    166|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 60, False: 3.16k]
  ------------------
 6479|    166|            return presentation_type::int_hex;
 6480|     34|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 34, False: 3.19k]
  ------------------
 6481|     74|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 40, False: 3.18k]
  ------------------
 6482|     74|            return presentation_type::int_arbitrary_base;
 6483|    150|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 150, False: 3.07k]
  ------------------
 6484|    238|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 88, False: 3.13k]
  ------------------
 6485|    238|            return presentation_type::float_hex;
 6486|     70|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 70, False: 3.15k]
  ------------------
 6487|    104|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 34, False: 3.19k]
  ------------------
 6488|    104|            return presentation_type::float_scientific;
 6489|     52|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 52, False: 3.17k]
  ------------------
 6490|    140|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 88, False: 3.13k]
  ------------------
 6491|    140|            return presentation_type::float_fixed;
 6492|     34|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 34, False: 3.19k]
  ------------------
 6493|    104|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 70, False: 3.15k]
  ------------------
 6494|    104|            return presentation_type::float_general;
 6495|    790|        case 's':
  ------------------
  |  Branch (6495:9): [True: 790, False: 2.43k]
  ------------------
 6496|    790|            return presentation_type::string;
 6497|    196|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 196, False: 3.02k]
  ------------------
 6498|    196|            return presentation_type::character;
 6499|     34|        case '?':
  ------------------
  |  Branch (6499:9): [True: 34, False: 3.19k]
  ------------------
 6500|     34|            return presentation_type::escaped_character;
 6501|     70|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 70, False: 3.15k]
  ------------------
 6502|     70|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 3.22k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 3.22k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|    672|        default:
  ------------------
  |  Branch (6509:9): [True: 672, False: 2.55k]
  ------------------
 6510|    672|            return presentation_type::none;
 6511|  3.22k|    }
 6512|  3.22k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6541|  50.5k|{
 6542|  50.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  50.5k|    auto check_align = [](wchar_t ch) {
 6545|  50.5k|        switch (ch) {
 6546|  50.5k|            case L'<':
 6547|  50.5k|                return align_type::left;
 6548|  50.5k|            case L'>':
 6549|  50.5k|                return align_type::right;
 6550|  50.5k|            case L'^':
 6551|  50.5k|                return align_type::center;
 6552|  50.5k|            default:
 6553|  50.5k|                return align_type::none;
 6554|  50.5k|        }
 6555|  50.5k|    };
 6556|       |
 6557|  50.5k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  50.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  |  Branch (859:45): [True: 0, False: 50.5k]
  |  |  |  Branch (859:45): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6559|  50.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  50.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  50.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  50.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  50.5k|    const auto begin_before_fill = begin;
 6569|  50.5k|    begin += potential_fill_len;
 6570|       |
 6571|  50.5k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 994, False: 49.5k]
  ------------------
 6572|    994|        return begin_before_fill;
 6573|    994|    }
 6574|       |
 6575|  49.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  49.5k|    const auto begin_after_fill = begin;
 6577|  49.5k|    ++begin;
 6578|       |
 6579|  49.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 49.5k, False: 0]
  ------------------
 6580|  49.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 49.4k]
  |  |  ------------------
  ------------------
 6581|     42|            handler.on_error("Invalid fill character '{' in format string");
 6582|     42|            return begin;
 6583|     42|        }
 6584|  49.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 1.66k, False: 47.8k]
  ------------------
 6585|  1.66k|            return begin_before_fill;
 6586|  1.66k|        }
 6587|  49.4k|    }
 6588|       |
 6589|  47.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 46.7k, False: 1.01k]
  ------------------
 6590|  46.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 1.23k, False: 45.5k]
  ------------------
 6591|  1.23k|            handler.on_align(potential_align_on_fill);
 6592|  1.23k|            return begin_after_fill;
 6593|  1.23k|        }
 6594|  45.5k|        return begin_before_fill;
 6595|  46.7k|    }
 6596|       |
 6597|  1.01k|    handler.on_fill(potential_fill);
 6598|  1.01k|    handler.on_align(potential_align_after_fill);
 6599|  1.01k|    return begin;
 6600|  47.8k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6523|  50.5k|{
 6524|  50.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|  50.5k|    if constexpr (sizeof(CharT) != 1) {
 6526|  50.5k|        return 1;
 6527|       |    }
 6528|       |    else {
 6529|       |        const auto lengths =
 6530|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|       |            "\3\4";
 6532|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|       |        return len;
 6534|       |    }
 6535|  50.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   100k|    auto check_align = [](wchar_t ch) {
 6545|   100k|        switch (ch) {
 6546|  1.13k|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 1.13k, False: 98.8k]
  ------------------
 6547|  1.13k|                return align_type::left;
 6548|    230|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 230, False: 99.7k]
  ------------------
 6549|    230|                return align_type::right;
 6550|  1.32k|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 1.32k, False: 98.6k]
  ------------------
 6551|  1.32k|                return align_type::center;
 6552|  97.3k|            default:
  ------------------
  |  Branch (6552:13): [True: 97.3k, False: 2.68k]
  ------------------
 6553|  97.3k|                return align_type::none;
 6554|   100k|        }
 6555|   100k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|  1.01k|    {
 6278|  1.01k|        m_specs.fill = fill;
 6279|  1.01k|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|  1.01k|    {
 6159|  1.01k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|  1.01k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|       |        if constexpr (sizeof(CharT) == 1) {
 6162|       |            for (size_t i = 0; i < s.size(); ++i) {
 6163|       |                SCN_GCC_PUSH
 6164|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|       |                m_data[i] = s[i];
 6166|       |                SCN_GCC_POP
 6167|       |            }
 6168|       |            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|  1.01k|        else {
 6181|  1.01k|            const auto front = static_cast<unsigned>(s.front());
 6182|  1.01k|            m_data[0] = static_cast<char>(front);
 6183|  1.01k|            m_data[1] = static_cast<char>(front >> 8);
 6184|  1.01k|            m_data[2] = static_cast<char>(front >> 16);
 6185|  1.01k|            m_data[3] = static_cast<char>(front >> 24);
 6186|  1.01k|        }
 6187|  1.01k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6606|  50.4k|{
 6607|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  50.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 26.5k, False: 23.8k]
  |  Branch (6609:33): [True: 22.4k, False: 4.12k]
  ------------------
 6610|  22.4k|        int width = parse_simple_int(begin, end);
 6611|  22.4k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  22.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.3k, False: 54]
  |  |  ------------------
  ------------------
 6612|  22.3k|            handler.on_width(width);
 6613|  22.3k|        }
 6614|     54|        else {
 6615|     54|            handler.on_error("Invalid field width");
 6616|     54|            return begin;
 6617|     54|        }
 6618|  22.4k|    }
 6619|  50.3k|    return begin;
 6620|  50.4k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6626|  3.91k|{
 6627|  3.91k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6628|       |
 6629|  3.91k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6629:9): [True: 3.88k, False: 34]
  |  Branch (6629:33): [True: 3.68k, False: 196]
  ------------------
 6630|  3.68k|        int prec = parse_simple_int(begin, end);
 6631|  3.68k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  3.68k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.68k, False: 0]
  |  |  ------------------
  ------------------
 6632|  3.68k|            handler.on_precision(prec);
 6633|  3.68k|        }
 6634|      0|        else {
 6635|      0|            handler.on_error("Invalid field precision");
 6636|      0|            return begin;
 6637|      0|        }
 6638|  3.68k|    }
 6639|  3.91k|    return begin;
 6640|  3.91k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7136|    662|    {
 7137|    662|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|    662|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 596, False: 66]
  ------------------
 7139|    662|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 530, False: 66]
  ------------------
 7140|    662|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 464, False: 66]
  ------------------
 7141|    662|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 398, False: 66]
  ------------------
 7142|    398|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|    398|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|    398|        }
 7147|       |
 7148|    264|        Handler::on_localized();
 7149|    264|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  47.3k|{
 8427|  47.3k|#define SCN_VISIT(Type)                                         \
 8428|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  47.3k|    }                                                           \
 8431|  47.3k|    else {                                                      \
 8432|  47.3k|        return vis(monostate_val);                              \
 8433|  47.3k|    }
 8434|       |
 8435|  47.3k|    monostate monostate_val{};
 8436|       |
 8437|  47.3k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 47.3k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 47.3k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|  5.30k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 5.30k, False: 42.0k]
  ------------------
 8443|  5.30k|            SCN_VISIT(int);
  ------------------
  |  | 8428|  5.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.30k|    }                                                           \
  |  | 8431|  5.30k|    else {                                                      \
  |  | 8432|  5.30k|        return vis(monostate_val);                              \
  |  | 8433|  5.30k|    }
  ------------------
 8444|  5.30k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 47.3k]
  ------------------
 8445|  5.30k|            SCN_VISIT(long);
  ------------------
  |  | 8428|  5.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.30k|    }                                                           \
  |  | 8431|  5.30k|    else {                                                      \
  |  | 8432|  5.30k|        return vis(monostate_val);                              \
  |  | 8433|  5.30k|    }
  ------------------
 8446|  5.30k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 47.3k]
  ------------------
 8447|  5.30k|            SCN_VISIT(long long);
  ------------------
  |  | 8428|  5.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.30k|    }                                                           \
  |  | 8431|  5.30k|    else {                                                      \
  |  | 8432|  5.30k|        return vis(monostate_val);                              \
  |  | 8433|  5.30k|    }
  ------------------
 8448|  5.30k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 47.3k]
  ------------------
 8449|  5.30k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|  5.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.30k|    }                                                           \
  |  | 8431|  5.30k|    else {                                                      \
  |  | 8432|  5.30k|        return vis(monostate_val);                              \
  |  | 8433|  5.30k|    }
  ------------------
 8450|  5.30k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 47.3k]
  ------------------
 8451|  5.30k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|  5.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.30k|    }                                                           \
  |  | 8431|  5.30k|    else {                                                      \
  |  | 8432|  5.30k|        return vis(monostate_val);                              \
  |  | 8433|  5.30k|    }
  ------------------
 8452|  10.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 5.30k, False: 42.0k]
  ------------------
 8453|  10.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  10.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  10.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  10.6k|    }                                                           \
  |  | 8431|  10.6k|    else {                                                      \
  |  | 8432|  10.6k|        return vis(monostate_val);                              \
  |  | 8433|  10.6k|    }
  ------------------
 8454|  10.6k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 47.3k]
  ------------------
 8455|  10.6k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  10.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  10.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  10.6k|    }                                                           \
  |  | 8431|  10.6k|    else {                                                      \
  |  | 8432|  10.6k|        return vis(monostate_val);                              \
  |  | 8433|  10.6k|    }
  ------------------
 8456|  10.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 47.3k]
  ------------------
 8457|  10.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  10.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  10.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  10.6k|    }                                                           \
  |  | 8431|  10.6k|    else {                                                      \
  |  | 8432|  10.6k|        return vis(monostate_val);                              \
  |  | 8433|  10.6k|    }
  ------------------
 8458|  15.8k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 5.23k, False: 42.1k]
  ------------------
 8459|  15.8k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  15.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  15.8k|    }                                                           \
  |  | 8431|  15.8k|    else {                                                      \
  |  | 8432|  15.8k|        return vis(monostate_val);                              \
  |  | 8433|  15.8k|    }
  ------------------
 8460|  21.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 5.30k, False: 42.0k]
  ------------------
 8461|  21.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  21.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  21.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  21.1k|    }                                                           \
  |  | 8431|  21.1k|    else {                                                      \
  |  | 8432|  21.1k|        return vis(monostate_val);                              \
  |  | 8433|  21.1k|    }
  ------------------
 8462|  21.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 47.3k]
  ------------------
 8463|  21.1k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  21.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  21.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  21.1k|    }                                                           \
  |  | 8431|  21.1k|    else {                                                      \
  |  | 8432|  21.1k|        return vis(monostate_val);                              \
  |  | 8433|  21.1k|    }
  ------------------
 8464|  26.3k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 5.23k, False: 42.1k]
  ------------------
 8465|  26.3k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  26.3k|    }                                                           \
  |  | 8431|  26.3k|    else {                                                      \
  |  | 8432|  26.3k|        return vis(monostate_val);                              \
  |  | 8433|  26.3k|    }
  ------------------
 8466|  26.3k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 47.3k]
  ------------------
 8467|  26.3k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  26.3k|    }                                                           \
  |  | 8431|  26.3k|    else {                                                      \
  |  | 8432|  26.3k|        return vis(monostate_val);                              \
  |  | 8433|  26.3k|    }
  ------------------
 8468|  26.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 47.3k]
  ------------------
 8469|  26.3k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  26.3k|    }                                                           \
  |  | 8431|  26.3k|    else {                                                      \
  |  | 8432|  26.3k|        return vis(monostate_val);                              \
  |  | 8433|  26.3k|    }
  ------------------
 8470|  31.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 5.30k, False: 42.0k]
  ------------------
 8471|  31.6k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  31.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  31.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  31.6k|    }                                                           \
  |  | 8431|  31.6k|    else {                                                      \
  |  | 8432|  31.6k|        return vis(monostate_val);                              \
  |  | 8433|  31.6k|    }
  ------------------
 8472|  31.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 47.3k]
  ------------------
 8473|  31.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  31.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  31.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  31.6k|    }                                                           \
  |  | 8431|  31.6k|    else {                                                      \
  |  | 8432|  31.6k|        return vis(monostate_val);                              \
  |  | 8433|  31.6k|    }
  ------------------
 8474|  31.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 47.3k]
  ------------------
 8475|  31.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  31.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  31.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  31.6k|    }                                                           \
  |  | 8431|  31.6k|    else {                                                      \
  |  | 8432|  31.6k|        return vis(monostate_val);                              \
  |  | 8433|  31.6k|    }
  ------------------
 8476|  36.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 5.23k, False: 42.1k]
  ------------------
 8477|  36.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  36.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  36.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  36.9k|    }                                                           \
  |  | 8431|  36.9k|    else {                                                      \
  |  | 8432|  36.9k|        return vis(monostate_val);                              \
  |  | 8433|  36.9k|    }
  ------------------
 8478|  42.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 5.23k, False: 42.1k]
  ------------------
 8479|  42.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  42.1k|    }                                                           \
  |  | 8431|  42.1k|    else {                                                      \
  |  | 8432|  42.1k|        return vis(monostate_val);                              \
  |  | 8433|  42.1k|    }
  ------------------
 8480|  47.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 5.23k, False: 42.1k]
  ------------------
 8481|  47.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  47.3k|    }                                                           \
  |  | 8431|  47.3k|    else {                                                      \
  |  | 8432|  47.3k|        return vis(monostate_val);                              \
  |  | 8433|  47.3k|    }
  ------------------
 8482|  47.3k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 47.3k]
  ------------------
 8483|  47.3k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  47.3k|    }                                                           \
  |  | 8431|  47.3k|    else {                                                      \
  |  | 8432|  47.3k|        return vis(monostate_val);                              \
  |  | 8433|  47.3k|    }
  ------------------
 8484|  47.3k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 47.3k]
  ------------------
 8485|  47.3k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  47.3k|    }                                                           \
  |  | 8431|  47.3k|    else {                                                      \
  |  | 8432|  47.3k|        return vis(monostate_val);                              \
  |  | 8433|  47.3k|    }
  ------------------
 8486|       |
 8487|  47.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 47.3k]
  ------------------
 8488|  47.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  47.3k|            return vis(
 8490|  47.3k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 47.3k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 47.3k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  47.3k|            SCN_CLANG_POP
 8505|  47.3k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  5.08k|    {
 3326|  5.08k|        return m_iterator;
 3327|  5.08k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  1.27k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.27k|    {
 1430|  1.27k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.27k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.27k|    {
  437|  1.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.27k|    {
 1177|  1.27k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  2.54k|    {
 3330|  2.54k|        return m_sentinel;
 3331|  2.54k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  2.54k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.54k|    static_cast<    \
  |  |  929|  2.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.54k|    static_cast<    \
  |  |  929|  2.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.54k|    {
 3312|  2.54k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.54k|    {
  485|  2.54k|        return m_has_value;
  486|  2.54k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.27k|    {
 1627|  1.27k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.27k|        return this->get_value();
 1629|  1.27k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.27k|    {
  451|  1.27k|        return m_value;
  452|  1.27k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.27k|    {
 1837|  1.27k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.27k|                                            std::forward<F>(f));
 1839|  1.27k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  1.27k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.27k|    else {
 1333|  1.27k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.27k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.27k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.27k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.27k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.27k|    }
 1340|  1.27k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.27k|    {
 1663|  1.27k|        return std::move(value());
 1664|  1.27k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.27k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.27k|    {
 1430|  1.27k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.27k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.27k|    {
  437|  1.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.27k|    {
 1177|  1.27k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.27k|    {
 1598|  1.27k|        return has_value();
 1599|  1.27k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.54k|    {
  485|  2.54k|        return m_has_value;
  486|  2.54k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.27k|    {
 1663|  1.27k|        return std::move(value());
 1664|  1.27k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.27k|    {
 1627|  1.27k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.27k|        return this->get_value();
 1629|  1.27k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.27k|    {
  451|  1.27k|        return m_value;
  452|  1.27k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   192k|{
   44|   192k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   192k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   192k|{
   60|   192k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   192k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  21.3k|{
   89|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  21.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  21.3k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  21.3k|{
  127|  21.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  21.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  21.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  21.3k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|   288k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|   288k|{
  653|   288k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   288k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    312|{
  659|    312|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    312|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 156, False: 156]
  ------------------
  661|    312|                    : std::locale{};
  662|    312|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    918|{
 1221|    918|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    918|                                  m_nan_payload_buffer, value);
 1223|    918|    value = this->setsign(value);
 1224|    918|    return n;
 1225|    918|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    968|{
 1221|    968|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    968|                                  m_nan_payload_buffer, value);
 1223|    968|    value = this->setsign(value);
 1224|    968|    return n;
 1225|    968|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    926|{
 1461|    926|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    926|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    926|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    926|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    926|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 926, False: 0]
  ------------------
 1467|    926|        SCN_UNLIKELY_ATTR
 1468|    926|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    926|                                     "Invalid integer value");
 1470|    926|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    982|{
 1461|    982|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    982|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    982|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    982|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    982|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 982, False: 0]
  ------------------
 1467|    982|        SCN_UNLIKELY_ATTR
 1468|    982|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    982|                                     "Invalid integer value");
 1470|    982|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    926|{
 1461|    926|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    926|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    926|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    926|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    926|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 926, False: 0]
  ------------------
 1467|    926|        SCN_UNLIKELY_ATTR
 1468|    926|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    926|                                     "Invalid integer value");
 1470|    926|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    962|{
 1461|    962|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    962|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    962|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    962|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    962|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    962|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    962|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    962|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    962|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    962|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    962|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    962|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    962|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 962, False: 0]
  ------------------
 1467|    962|        SCN_UNLIKELY_ATTR
 1468|    962|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    962|                                     "Invalid integer value");
 1470|    962|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    908|{
 1461|    908|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    908|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    908|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    908|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    908|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 908, False: 0]
  ------------------
 1467|    908|        SCN_UNLIKELY_ATTR
 1468|    908|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    908|                                     "Invalid integer value");
 1470|    908|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    944|{
 1461|    944|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    944|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    944|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    944|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    944|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 944, False: 0]
  ------------------
 1467|    944|        SCN_UNLIKELY_ATTR
 1468|    944|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    944|                                     "Invalid integer value");
 1470|    944|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  96.0k|{
 2184|  96.0k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  96.0k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   192k|{
 2208|   192k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   192k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.71k|{
  194|  3.71k|    return find_classic_impl(
  195|  3.71k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.71k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|  3.71k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  26.0k|{
  202|  26.0k|    return find_classic_impl(
  203|  26.0k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  26.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  26.0k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    240|{
  673|    240|    return e;
  674|    240|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  96.0k|{
 2141|  96.0k|    return vscan_internal(source, format, args);
 2142|  96.0k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   192k|{
 2161|   192k|    return vscan_internal(source, format, args);
 2162|   192k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.71k|{
  118|  3.71k|    auto it = source.begin();
  119|       |
  120|  21.9k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 18.9k, False: 2.97k]
  ------------------
  121|  18.9k|        auto sv =
  122|  18.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  18.9k|                .substr(0, 8);
  124|       |
  125|  18.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 4.53k, False: 14.4k]
  ------------------
  126|  4.53k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  4.53k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  4.53k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 444, False: 4.09k]
  ------------------
  129|    444|                break;
  130|    444|            }
  131|  4.09k|            continue;
  132|  4.53k|        }
  133|       |
  134|  62.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 48.1k, False: 14.1k]
  ------------------
  135|  48.1k|            auto tmp =
  136|  48.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  48.1k|            auto res = get_next_code_point(tmp);
  138|  48.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 300, False: 47.8k]
  ------------------
  139|    300|                return it;
  140|    300|            }
  141|  47.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  47.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  47.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  47.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  47.8k|        }
  145|  14.4k|    }
  146|       |
  147|  3.41k|    return detail::make_string_view_iterator(source, it);
  148|  3.71k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  47.1k|{
  105|  47.1k|    static_assert(sizeof(*source.data()) == 1);
  106|  47.1k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  47.1k|    uint64_t word{};
  108|  47.1k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  47.1k|    return has_byte_greater(word, 127) != 0;
  111|  47.1k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  29.9k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  48.1k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  26.0k|{
  118|  26.0k|    auto it = source.begin();
  119|       |
  120|  35.4k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 28.2k, False: 7.22k]
  ------------------
  121|  28.2k|        auto sv =
  122|  28.2k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  28.2k|                .substr(0, 8);
  124|       |
  125|  28.2k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 13.8k, False: 14.4k]
  ------------------
  126|  13.8k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  13.8k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  13.8k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 11.2k, False: 2.53k]
  ------------------
  129|  11.2k|                break;
  130|  11.2k|            }
  131|  2.53k|            continue;
  132|  13.8k|        }
  133|       |
  134|  35.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 29.1k, False: 6.84k]
  ------------------
  135|  29.1k|            auto tmp =
  136|  29.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  29.1k|            auto res = get_next_code_point(tmp);
  138|  29.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 7.55k, False: 21.5k]
  ------------------
  139|  7.55k|                return it;
  140|  7.55k|            }
  141|  21.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  21.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  21.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  21.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  21.5k|        }
  145|  14.4k|    }
  146|       |
  147|  18.5k|    return detail::make_string_view_iterator(source, it);
  148|  26.0k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  29.2k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  29.1k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    918|{
 1138|    918|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 918]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    918|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 918]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    918|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 918]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    918|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 918]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    918|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    918|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 910]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    910|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
 1191|    910|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    910|                                     "Invalid floating-point digit");
 1193|    910|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    968|{
 1138|    968|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 968]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    968|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 968]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    968|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 968]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    968|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 968]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    968|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    968|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    968|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    968|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 956]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    956|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 956, False: 0]
  |  |  ------------------
  ------------------
 1191|    956|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    956|                                     "Invalid floating-point digit");
 1193|    956|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   192k|{
 1625|   192k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 191k, False: 378]
  ------------------
 1626|   191k|        return false;
 1627|   191k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   192k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   192k|        : format_handler_base{argcount},
 1900|   192k|          parse_ctx{format},
 1901|   192k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   192k|    {
 1903|   192k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|   576k|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|   576k|    {
 1722|   576k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   576k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   192k|        : contiguous_ctx(source, args, loc)
 1852|   192k|    {
 1853|   192k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   192k|{
 2038|   192k|    const auto beg = handler.get_ctx().begin();
 2039|   192k|    detail::parse_format_string<false>(format, handler);
 2040|   192k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 187k, False: 4.34k]
  |  |  ------------------
  ------------------
 2041|   187k|        return unexpected(handler.error);
 2042|   187k|    }
 2043|  4.34k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   192k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   971k|    {
 2022|   971k|        return ctx.get();
 2023|   971k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   971k|    {
 1857|   971k|        return contiguous_ctx;
 1858|   971k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   213k|    {
 1907|   285k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 79.2k, False: 206k]
  ------------------
 1908|  79.2k|            auto it = get_ctx().begin();
 1909|  79.2k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.62k, False: 77.6k]
  ------------------
 1910|  1.62k|                SCN_UNLIKELY_ATTR
 1911|  1.62k|                return on_error("Unexpected end of source");
 1912|  1.62k|            }
 1913|       |
 1914|  77.6k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  77.6k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  77.6k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 3.22k, False: 74.4k]
  ------------------
 1917|  3.22k|                SCN_UNLIKELY_ATTR
 1918|  3.22k|                return on_error("Invalid encoding in format string");
 1919|  3.22k|            }
 1920|  74.4k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 8.09k, False: 66.3k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  8.09k|                get_ctx().advance_to(
 1923|  8.09k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  8.09k|                auto begin_it = impl::read_while_classic_space(
 1926|  8.09k|                    detail::make_string_view_from_pointers(
 1927|  8.09k|                        detail::to_address(after_space_it),
 1928|  8.09k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  8.09k|                begin = detail::to_address(begin_it) - 1;
 1931|  8.09k|                continue;
 1932|  8.09k|            }
 1933|       |
 1934|  66.3k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.88k, False: 64.4k]
  ------------------
 1935|  1.88k|                SCN_UNLIKELY_ATTR
 1936|  1.88k|                return on_error("Unexpected literal character in source");
 1937|  1.88k|            }
 1938|  64.4k|            get_ctx().advance_to(ranges::next(it));
 1939|  64.4k|        }
 1940|   213k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.17k|    {
 1972|  6.17k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.17k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.17k|        on_visit_scan_arg(
 1976|  6.17k|            impl::default_arg_reader<context_type>{
 1977|  6.17k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.17k|            arg);
 1979|  6.17k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   133k|{
 1681|   133k|    auto arg = ctx.arg(id);
 1682|   133k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.69k, False: 131k]
  |  |  ------------------
  ------------------
 1683|  1.69k|        handler.on_error("Failed to find argument with ID");
 1684|  1.69k|    }
 1685|   133k|    return arg;
 1686|   133k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   190k|    {
 1797|   190k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.15k, False: 187k]
  |  |  ------------------
  ------------------
 1798|  3.15k|            on_error("Invalid out-of-range argument ID");
 1799|  3.15k|            return;
 1800|  3.15k|        }
 1801|       |
 1802|   187k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 186k]
  |  |  ------------------
  ------------------
 1803|    114|            return on_error("Argument with this ID has already been scanned");
 1804|    114|        }
 1805|       |
 1806|   186k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   186k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 186k, False: 0]
  |  |  ------------------
  ------------------
 1807|   186k|            visited_args_lower64 |= (1ull << id);
 1808|   186k|            return;
 1809|   186k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   187k|    {
 1782|   187k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   187k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   187k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 187k, False: 0]
  |  |  ------------------
  ------------------
 1788|   187k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   187k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   187k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.17k|    {
 1956|  6.17k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 306, False: 5.86k]
  |  Branch (1956:23): [True: 0, False: 5.86k]
  ------------------
 1957|    306|            SCN_UNLIKELY_ATTR
 1958|    306|            return;
 1959|    306|        }
 1960|       |
 1961|  5.86k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.86k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.04k, False: 1.82k]
  |  |  ------------------
  ------------------
 1963|  4.04k|            on_error(r.error());
 1964|  4.04k|        }
 1965|  1.82k|        else {
 1966|  1.82k|            get_ctx().advance_to(*r);
 1967|  1.82k|        }
 1968|  5.86k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   167k|    {
 1766|   167k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 167k, False: 0]
  |  |  ------------------
  ------------------
 1767|   167k|            error = err;
 1768|   167k|        }
 1769|   167k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   125k|    {
 1944|   125k|        return parse_ctx.next_arg_id();
 1945|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  8.09k|    {
 1948|  8.09k|        parse_ctx.check_arg_id(id);
 1949|  8.09k|        return id;
 1950|  8.09k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   127k|    {
 1985|   127k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   127k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   127k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 127k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   127k|        auto specs = detail::format_specs{};
 1998|   127k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   127k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   127k|            arg.type()};
 2001|       |
 2002|   127k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   127k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.51k, False: 124k]
  |  Branch (2003:29): [True: 1.12k, False: 123k]
  ------------------
 2004|  3.63k|            SCN_UNLIKELY_ATTR
 2005|  3.63k|            on_error("Missing '}' in format string");
 2006|  3.63k|            return parse_ctx.begin();
 2007|  3.63k|        }
 2008|   123k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 450, False: 123k]
  |  |  ------------------
  ------------------
 2009|    450|            return parse_ctx.begin();
 2010|    450|        }
 2011|   123k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   123k|        on_visit_scan_arg(
 2014|   123k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   123k|                                           get_ctx().locale()},
 2016|   123k|            arg);
 2017|   123k|        return parse_ctx.begin();
 2018|   123k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   127k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   127k|    {
 1701|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   123k|    {
 1956|   123k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 114, False: 123k]
  |  Branch (1956:23): [True: 0, False: 123k]
  ------------------
 1957|    114|            SCN_UNLIKELY_ATTR
 1958|    114|            return;
 1959|    114|        }
 1960|       |
 1961|   123k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   123k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115k, False: 8.01k]
  |  |  ------------------
  ------------------
 1963|   115k|            on_error(r.error());
 1964|   115k|        }
 1965|  8.01k|        else {
 1966|  8.01k|            get_ctx().advance_to(*r);
 1967|  8.01k|        }
 1968|   123k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  1.05M|    {
 1761|  1.05M|        SCN_UNLIKELY_ATTR
 1762|  1.05M|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   576k|    {
 1729|   576k|        {
 1730|   576k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 576k]
  ------------------
 1731|   576k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 576k]
  ------------------
 1732|   576k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   576k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   576k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 389k, False: 186k]
  ------------------
 1736|   389k|                return on_error("Argument list not exhausted");
 1737|   389k|            }
 1738|   576k|        }
 1739|       |
 1740|   186k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 186k, False: 0]
  ------------------
 1741|   186k|            return;
 1742|   186k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   576k|    {
 1777|   576k|        return error;
 1778|   576k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  1.20M|    {
 1773|  1.20M|        return static_cast<bool>(error);
 1774|  1.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   192k|{
 2053|   192k|    const auto argcount = args.size();
 2054|   192k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 192k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   192k|    auto handler = format_handler<true, CharT>{
 2060|   192k|        ranges::subrange<const CharT*>{source.data(),
 2061|   192k|                                       source.data() + source.size()},
 2062|   192k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   192k|    return vscan_parse_format_string(format, handler);
 2064|   192k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   384k|{
 2053|   384k|    const auto argcount = args.size();
 2054|   384k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 384k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   384k|    auto handler = format_handler<true, CharT>{
 2060|   384k|        ranges::subrange<const CharT*>{source.data(),
 2061|   384k|                                       source.data() + source.size()},
 2062|   384k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   384k|    return vscan_parse_format_string(format, handler);
 2064|   384k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   384k|{
 1625|   384k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 371k, False: 12.5k]
  ------------------
 1626|   371k|        return false;
 1627|   371k|    }
 1628|  12.5k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 12.4k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   384k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   384k|        : format_handler_base{argcount},
 1900|   384k|          parse_ctx{format},
 1901|   384k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   384k|    {
 1903|   384k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   384k|        : contiguous_ctx(source, args, loc)
 1852|   384k|    {
 1853|   384k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   384k|{
 2038|   384k|    const auto beg = handler.get_ctx().begin();
 2039|   384k|    detail::parse_format_string<false>(format, handler);
 2040|   384k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 382k, False: 1.81k]
  |  |  ------------------
  ------------------
 2041|   382k|        return unexpected(handler.error);
 2042|   382k|    }
 2043|  1.81k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   384k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.36G|    {
 2022|  2.36G|        return ctx.get();
 2023|  2.36G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.36G|    {
 1857|  2.36G|        return contiguous_ctx;
 1858|  2.36G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   391k|    {
 1907|   787M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 787M, False: 252k]
  ------------------
 1908|   787M|            auto it = get_ctx().begin();
 1909|   787M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 492, False: 787M]
  ------------------
 1910|    492|                SCN_UNLIKELY_ATTR
 1911|    492|                return on_error("Unexpected end of source");
 1912|    492|            }
 1913|       |
 1914|   787M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   787M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   787M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 136k, False: 787M]
  ------------------
 1917|   136k|                SCN_UNLIKELY_ATTR
 1918|   136k|                return on_error("Invalid encoding in format string");
 1919|   136k|            }
 1920|   787M|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 4.16k, False: 787M]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  4.16k|                get_ctx().advance_to(
 1923|  4.16k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  4.16k|                auto begin_it = impl::read_while_classic_space(
 1926|  4.16k|                    detail::make_string_view_from_pointers(
 1927|  4.16k|                        detail::to_address(after_space_it),
 1928|  4.16k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  4.16k|                begin = detail::to_address(begin_it) - 1;
 1931|  4.16k|                continue;
 1932|  4.16k|            }
 1933|       |
 1934|   787M|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.54k, False: 787M]
  ------------------
 1935|  1.54k|                SCN_UNLIKELY_ATTR
 1936|  1.54k|                return on_error("Unexpected literal character in source");
 1937|  1.54k|            }
 1938|   787M|            get_ctx().advance_to(ranges::next(it));
 1939|   787M|        }
 1940|   391k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  5.80k|    {
 1972|  5.80k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.80k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.80k|        on_visit_scan_arg(
 1976|  5.80k|            impl::default_arg_reader<context_type>{
 1977|  5.80k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.80k|            arg);
 1979|  5.80k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  56.5k|{
 1681|  56.5k|    auto arg = ctx.arg(id);
 1682|  56.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.46k, False: 55.0k]
  |  |  ------------------
  ------------------
 1683|  1.46k|        handler.on_error("Failed to find argument with ID");
 1684|  1.46k|    }
 1685|  56.5k|    return arg;
 1686|  56.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  5.80k|    {
 1956|  5.80k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 404, False: 5.40k]
  |  Branch (1956:23): [True: 0, False: 5.40k]
  ------------------
 1957|    404|            SCN_UNLIKELY_ATTR
 1958|    404|            return;
 1959|    404|        }
 1960|       |
 1961|  5.40k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.40k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.90k, False: 1.49k]
  |  |  ------------------
  ------------------
 1963|  3.90k|            on_error(r.error());
 1964|  3.90k|        }
 1965|  1.49k|        else {
 1966|  1.49k|            get_ctx().advance_to(*r);
 1967|  1.49k|        }
 1968|  5.40k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  56.0k|    {
 1944|  56.0k|        return parse_ctx.next_arg_id();
 1945|  56.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    592|    {
 1948|    592|        parse_ctx.check_arg_id(id);
 1949|    592|        return id;
 1950|    592|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  50.7k|    {
 1985|  50.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  50.7k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  50.7k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 50.7k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  50.7k|        auto specs = detail::format_specs{};
 1998|  50.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  50.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  50.7k|            arg.type()};
 2001|       |
 2002|  50.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  50.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.17k, False: 48.5k]
  |  Branch (2003:29): [True: 628, False: 47.9k]
  ------------------
 2004|  2.80k|            SCN_UNLIKELY_ATTR
 2005|  2.80k|            on_error("Missing '}' in format string");
 2006|  2.80k|            return parse_ctx.begin();
 2007|  2.80k|        }
 2008|  47.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 364, False: 47.5k]
  |  |  ------------------
  ------------------
 2009|    364|            return parse_ctx.begin();
 2010|    364|        }
 2011|  47.5k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  47.5k|        on_visit_scan_arg(
 2014|  47.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  47.5k|                                           get_ctx().locale()},
 2016|  47.5k|            arg);
 2017|  47.5k|        return parse_ctx.begin();
 2018|  47.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  50.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  50.7k|    {
 1701|  50.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  47.5k|    {
 1956|  47.5k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 172, False: 47.3k]
  |  Branch (1956:23): [True: 0, False: 47.3k]
  ------------------
 1957|    172|            SCN_UNLIKELY_ATTR
 1958|    172|            return;
 1959|    172|        }
 1960|       |
 1961|  47.3k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  47.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.5k, False: 2.88k]
  |  |  ------------------
  ------------------
 1963|  44.5k|            on_error(r.error());
 1964|  44.5k|        }
 1965|  2.88k|        else {
 1966|  2.88k|            get_ctx().advance_to(*r);
 1967|  2.88k|        }
 1968|  47.3k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  10.6k|{
 1351|  10.6k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  10.6k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  10.6k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  10.6k|            return transcode_to_string_impl_to32(src, dest);
 1362|  10.6k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  10.6k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  10.6k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  10.6k|{
 1244|  10.6k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  10.6k|    auto it = src.begin();
 1247|  2.94M|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 2.93M, False: 10.6k]
  ------------------
 1248|  2.93M|        auto res = get_next_code_point(
 1249|  2.93M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  2.93M|                                                                 src.end()));
 1251|  2.93M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104k, False: 2.82M]
  |  |  ------------------
  ------------------
 1252|   104k|            dest.push_back(DestCharT{0xfffd});
 1253|   104k|        }
 1254|  2.82M|        else {
 1255|  2.82M|            dest.push_back(res.value);
 1256|  2.82M|        }
 1257|  2.93M|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  2.93M|    }
 1259|  10.6k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  3.15M|{
 1169|  3.15M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  3.15M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  3.15M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.4k, False: 3.08M]
  |  |  ------------------
  ------------------
 1173|  66.4k|        return {get_start_for_next_code_point(input),
 1174|  66.4k|                detail::invalid_code_point};
 1175|  66.4k|    }
 1176|  3.08M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 3.08M]
  |  |  ------------------
  ------------------
 1177|  1.01k|        return {input.end(), detail::invalid_code_point};
 1178|  1.01k|    }
 1179|       |
 1180|  3.08M|    return {input.begin() + len,
 1181|  3.08M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  3.08M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  66.4k|{
 1155|  66.4k|    auto it = input.begin();
 1156|   280k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 279k, False: 1.68k]
  ------------------
 1157|   279k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 64.7k, False: 214k]
  ------------------
 1158|  64.7k|            break;
 1159|  64.7k|        }
 1160|   279k|    }
 1161|  66.4k|    return it;
 1162|  66.4k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  50.1k|    constexpr parse_error(code c) : m_code(c)
  808|  50.1k|    {
  809|  50.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  50.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  50.1k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  18.2k|    {
  823|  18.2k|        return a.m_code == b.m_code;
  824|  18.2k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|   107k|    {
 2920|   107k|        SCN_UNLIKELY_ATTR
 2921|   107k|        m_msg = msg;
 2922|   107k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|   170k|    {
 2925|   170k|        return m_msg == nullptr;
 2926|   170k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  1.13k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4978|   920k|    {
 4979|   920k|        on_charset_range(cp, cp + 1);
 4980|   920k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4983|   925k|    {
 4984|   925k|        if (end <= 127) {
  ------------------
  |  Branch (4984:13): [True: 522k, False: 402k]
  ------------------
 4985|   522k|            return;
 4986|   522k|        }
 4987|       |
 4988|  70.1M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4988:25): [True: 70.1M, False: 397k]
  ------------------
 4989|       |            // TODO: check for overlap
 4990|  70.1M|            if (elem.first == end) {
  ------------------
  |  Branch (4990:17): [True: 1.26k, False: 70.1M]
  ------------------
 4991|  1.26k|                elem.first = begin;
 4992|  1.26k|                return;
 4993|  1.26k|            }
 4994|       |
 4995|  70.1M|            if (elem.second == begin) {
  ------------------
  |  Branch (4995:17): [True: 4.33k, False: 70.1M]
  ------------------
 4996|  4.33k|                elem.second = end;
 4997|  4.33k|                return;
 4998|  4.33k|            }
 4999|  70.1M|        }
 5000|       |
 5001|   397k|        extra_ranges.push_back(std::make_pair(begin, end));
 5002|   397k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5005|    666|    {
 5006|       |        // no-op
 5007|    666|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5020|   935k|    {
 5021|   935k|        return static_cast<bool>(err);
 5022|   935k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5338|  1.49k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  59.1k|{
  458|  59.1k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  59.1k|        static_cast<unsigned char>(ch))];
  460|  59.1k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   642k|{
  469|   642k|    return static_cast<unsigned char>(ch) <= 127;
  470|   642k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.60k|{
  474|  1.60k|#if WCHAR_MIN < 0
  475|  1.60k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.59k, False: 12]
  |  Branch (475:23): [True: 1.59k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.60k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   724k|{
  483|   724k|    return cp <= 127;
  484|   724k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  47.1k|{
  539|  47.1k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  47.1k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  51.8k|{
  784|  51.8k|    return e != eof_error::good;
  785|  51.8k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    726|{
  845|    726|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    726|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    726|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    726|    return parse_error::eof;
  847|    726|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.29k|{
  854|  4.29k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.29k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.29k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76, False: 4.22k]
  ------------------
  859|     76|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     76|    }
  861|       |
  862|  4.22k|    return scan_error{code, msg};
  863|  4.29k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.29k|{
  868|  4.29k|    return [code, msg](parse_error err) {
  869|  4.29k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.29k|    };
  871|  4.29k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  3.85k|{
 2209|  3.85k|    unsigned char running_diff{0};
 2210|  13.4k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 9.59k, False: 3.85k]
  ------------------
 2211|  9.59k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  9.59k|    }
 2213|  3.85k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 0, False: 3.85k]
  |  Branch (2213:33): [True: 0, False: 3.85k]
  ------------------
 2214|  3.85k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2291|   174k|{
 2292|   174k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2292:9): [True: 32.2k, False: 142k]
  ------------------
 2293|   174k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2293:10): [True: 222, False: 32.0k]
  ------------------
 2294|  32.2k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2294:10): [True: 144, False: 31.9k]
  ------------------
 2295|  32.2k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2295:10): [True: 72, False: 31.8k]
  ------------------
 2296|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2297|  32.2k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2297:11): [True: 20.2k, False: 11.5k]
  |  Branch (2297:27): [True: 1.70k, False: 18.5k]
  |  Branch (2297:43): [True: 868, False: 834]
  ------------------
 2298|  32.2k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2298:11): [True: 18.5k, False: 12.4k]
  |  Branch (2298:27): [True: 304, False: 18.2k]
  ------------------
 2299|  32.2k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2299:11): [True: 18.1k, False: 12.5k]
  |  Branch (2299:27): [True: 118, False: 18.0k]
  ------------------
 2300|  32.2k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2300:11): [True: 18.0k, False: 12.5k]
  |  Branch (2300:27): [True: 1.23k, False: 16.8k]
  ------------------
 2301|  32.2k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2301:11): [True: 16.8k, False: 12.5k]
  |  Branch (2301:27): [True: 214, False: 16.6k]
  ------------------
 2302|  32.2k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2302:11): [True: 16.6k, False: 12.5k]
  |  Branch (2302:27): [True: 206, False: 16.4k]
  ------------------
 2303|  32.2k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2303:11): [True: 16.4k, False: 12.5k]
  |  Branch (2303:27): [True: 80, False: 16.3k]
  ------------------
 2304|  32.2k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2304:11): [True: 16.1k, False: 12.7k]
  |  Branch (2304:28): [True: 222, False: 15.8k]
  ------------------
 2305|  32.2k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2305:11): [True: 15.8k, False: 12.7k]
  |  Branch (2305:28): [True: 468, False: 15.4k]
  ------------------
 2306|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2307|  32.2k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2307:11): [True: 15.5k, False: 12.5k]
  |  Branch (2307:28): [True: 78, False: 15.4k]
  ------------------
 2308|       |         // Supplemental Symbols and Pictographs:
 2309|  32.2k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2309:11): [True: 15.4k, False: 12.5k]
  |  Branch (2309:28): [True: 72, False: 15.4k]
  ------------------
 2310|  4.30k|        return 2;
 2311|  4.30k|    }
 2312|   170k|    return 1;
 2313|   174k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2316|  96.2k|{
 2317|  96.2k|    return calculate_text_width_for_fmt_v10(cp);
 2318|  96.2k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2331|    322|{
 2332|    322|    return calculate_text_width_for_fmt_v10(cp);
 2333|    322|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  16.9k|{
 3112|  16.9k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  16.9k|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  8.17k|{
 3116|  8.17k|#if WCHAR_MIN < 0
 3117|  8.17k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 8.17k, False: 0]
  |  Branch (3117:20): [True: 8.17k, False: 0]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  8.17k|        return char_to_int(static_cast<char>(ch));
 3122|  8.17k|    }
 3123|      0|    return 255;
 3124|  8.17k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4259|  44.6k|{
 4260|  44.6k|    std::regex_constants::syntax_option_type result{};
 4261|  44.6k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4261:9): [True: 1.04k, False: 43.5k]
  ------------------
 4262|  1.04k|#if SCN_HAS_STD_REGEX_MULTILINE
 4263|  1.04k|        result |= std::regex_constants::multiline;
 4264|       |#else
 4265|       |        return unexpected_scan_error(
 4266|       |            scan_error::invalid_format_string,
 4267|       |            "/m flag for regex isn't supported by regex backend");
 4268|       |#endif
 4269|  1.04k|    }
 4270|  44.6k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4270:9): [True: 0, False: 44.6k]
  ------------------
 4271|  44.6k|        detail::regex_flags::none) {
 4272|      0|        return unexpected_scan_error(
 4273|      0|            scan_error::invalid_format_string,
 4274|      0|            "/s flag for regex isn't supported by regex backend");
 4275|      0|    }
 4276|  44.6k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4276:9): [True: 7.59k, False: 37.0k]
  ------------------
 4277|  7.59k|        result |= std::regex_constants::icase;
 4278|  7.59k|    }
 4279|  44.6k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4279:9): [True: 12, False: 44.6k]
  ------------------
 4280|     12|        result |= std::regex_constants::nosubs;
 4281|     12|    }
 4282|  44.6k|    return result;
 4283|  44.6k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4626|  5.16k|{
 4627|  5.16k|    std::string result{pattern};
 4628|  41.3k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4628:24): [True: 36.1k, False: 5.16k]
  ------------------
 4629|  36.1k|        result.replace(n, 2, "/");
 4630|  36.1k|        ++n;
 4631|  36.1k|    }
 4632|  5.16k|    return result;
 4633|  5.16k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4635|    378|{
 4636|    378|    std::wstring result{pattern};
 4637|  4.12k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4637:24): [True: 3.74k, False: 378]
  ------------------
 4638|  3.74k|        result.replace(n, 2, L"/");
 4639|  3.74k|        ++n;
 4640|  3.74k|    }
 4641|    378|    return result;
 4642|    378|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  13.0k|{
 5997|  13.0k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 3.25k, False: 9.78k]
  ------------------
 5998|  3.25k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 2.01k, False: 1.23k]
  ------------------
 5999|  2.01k|            return {scan_error::invalid_scanned_value,
 6000|  2.01k|                    "Scanned value too narrow, width did not exceed what "
 6001|  2.01k|                    "was specified in the format string"};
 6002|  2.01k|        }
 6003|  3.25k|    }
 6004|  11.0k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 2.17k, False: 8.84k]
  ------------------
 6005|  2.17k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 114, False: 2.05k]
  ------------------
 6006|    114|            return {scan_error::invalid_scanned_value,
 6007|    114|                    "Scanned value too wide, width exceeded the specified "
 6008|    114|                    "precision"};
 6009|    114|        }
 6010|  2.17k|    }
 6011|  10.9k|    return {};
 6012|  11.0k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  57.3k|    {
  304|  57.3k|        ranges::advance(x, n);
  305|  57.3k|        return x;
  306|  57.3k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  57.3k|    {
  268|  57.3k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  57.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   153k|    {
  151|   153k|        i += n;
  152|   153k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   108k|    {
  108|   108k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   108k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   108k|    {
   87|   108k|        return s - i;
   88|   108k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  8.70k|    {
  304|  8.70k|        ranges::advance(x, n);
  305|  8.70k|        return x;
  306|  8.70k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  8.70k|    {
  268|  8.70k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.70k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  8.70k|    {
  151|  8.70k|        i += n;
  152|  8.70k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  7.61k|    {
  108|  7.61k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  7.61k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  7.61k|    {
   87|  7.61k|        return s - i;
   88|  7.61k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5612|  13.6k|    {
 5613|  13.6k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  13.6k|        else {
 5618|  13.6k|            detail::check_char_type_specs(specs, eh);
 5619|  13.6k|        }
 5620|  13.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 588]
  |  |  ------------------
  ------------------
 5621|  13.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  13.0k|        }
 5623|    588|        return {};
 5624|  13.6k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  31.3k|    {
  763|  31.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  31.3k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  6.83k|        : m_fptr([](storage fn,
  743|  6.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.83k|              cvref<T> obj = *get<T>(fn);
  745|  6.83k|              if constexpr (std::is_void_v<R>) {
  746|  6.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.83k|              }
  748|  6.83k|              else {
  749|  6.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.83k|              }
  751|  6.83k|          }),
  752|  6.83k|          m_storage(std::addressof(f))
  753|  6.83k|    {
  754|  6.83k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  10.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.7k|              else {
  749|  10.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.7k|              }
  751|  10.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  10.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.7k|        else if constexpr (std::is_object_v<T>) {
  688|  10.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.7k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  6.83k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.83k|        {
  662|  6.83k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.58M|    {
  763|  1.58M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.58M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  25.7k|        : m_fptr([](storage fn,
  743|  25.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.7k|              cvref<T> obj = *get<T>(fn);
  745|  25.7k|              if constexpr (std::is_void_v<R>) {
  746|  25.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.7k|              }
  748|  25.7k|              else {
  749|  25.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.7k|              }
  751|  25.7k|          }),
  752|  25.7k|          m_storage(std::addressof(f))
  753|  25.7k|    {
  754|  25.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   746k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   746k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   746k|              else {
  749|   746k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   746k|              }
  751|   746k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   746k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   746k|        else if constexpr (std::is_object_v<T>) {
  688|   746k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   746k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  25.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.7k|        {
  662|  25.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5607|  1.77k|    {
 5608|  1.77k|        return false;
 5609|  1.77k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.29k|    return [code, msg](parse_error err) {
  869|  4.29k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.29k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|    122|    {
 1768|    122|        auto stdloc = loc.get<std::locale>();
 1769|    122|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|    122|        grouping = numpunct.grouping();
 1771|    122|        thousands_sep =
 1772|    122|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 122]
  ------------------
 1773|    122|        decimal_point = numpunct.decimal_point();
 1774|    122|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|    156|{
 1705|    156|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 156, False: 0]
  ------------------
 1706|    156|        return std::use_facet<Facet>(stdloc);
 1707|    156|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    156|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  29.5k|{
 2338|  29.5k|    size_t count{0};
 2339|  29.5k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  29.5k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  29.5k|    });
 2342|  29.5k|    return count;
 2343|  29.5k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  29.5k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  29.5k|    auto it = input.begin();
 1436|  99.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 69.8k, False: 29.5k]
  ------------------
 1437|  69.8k|        auto res = get_next_code_point(
 1438|  69.8k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  69.8k|        cb(res.value);
 1440|  69.8k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  69.8k|    }
 1442|  29.5k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  78.1k|    {
  763|  78.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  78.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  78.1k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  29.5k|        : m_fptr([](storage fn,
  743|  29.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.5k|              cvref<T> obj = *get<T>(fn);
  745|  29.5k|              if constexpr (std::is_void_v<R>) {
  746|  29.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.5k|              }
  748|  29.5k|              else {
  749|  29.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.5k|              }
  751|  29.5k|          }),
  752|  29.5k|          m_storage(std::addressof(f))
  753|  29.5k|    {
  754|  29.5k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  69.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.8k|              cvref<T> obj = *get<T>(fn);
  745|  69.8k|              if constexpr (std::is_void_v<R>) {
  746|  69.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  69.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  69.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  69.8k|        else if constexpr (std::is_object_v<T>) {
  688|  69.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  69.8k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  69.8k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  69.8k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  69.8k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  29.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  29.5k|        {
  662|  29.5k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  4.02k|    {
 1570|  4.02k|        return m_view;
 1571|  4.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  4.25k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2409|  3.57k|    {
 2410|  3.57k|        return m_multibyte_left;
 2411|  3.57k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2414|   182k|    {
 2415|   182k|        return *m_current;
 2416|   182k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2423|   172k|    {
 2424|   172k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|   172k|        _increment_current();
 2426|   172k|        return *this;
 2427|   172k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2656|   172k|    {
 2657|   172k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 81.0k, False: 91.7k]
  ------------------
 2658|  81.0k|            auto cplen = _get_cp_length_at_current();
 2659|  81.0k|            m_multibyte_left = cplen - 1;
 2660|  81.0k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  81.0k|        }
 2662|  91.7k|        else {
 2663|  91.7k|            --m_multibyte_left;
 2664|  91.7k|        }
 2665|       |
 2666|   172k|        ++m_current;
 2667|   172k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2627|  81.0k|    {
 2628|  81.0k|        return static_cast<difference_type>(
 2629|  81.0k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  81.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2633|  81.0k|    {
 2634|  81.0k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 764, False: 80.2k]
  |  |  ------------------
  ------------------
 2635|    764|            return 0;
 2636|    764|        }
 2637|       |
 2638|  80.2k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 55.0k, False: 25.2k]
  ------------------
 2639|  55.0k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  55.0k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  55.0k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  55.0k|        }
 2643|       |
 2644|  25.2k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  25.2k|                                           cplen);
 2646|  25.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 24.8k]
  |  |  ------------------
  ------------------
 2647|    332|            return 0;
 2648|    332|        }
 2649|       |
 2650|  24.8k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  24.8k|        return static_cast<difference_type>(
 2652|  24.8k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  25.2k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  27.6k|{
 1845|  27.6k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  27.6k|    if constexpr (ranges::sized_range<Range>) {
 1848|  27.6k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  27.6k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 440, False: 27.2k]
  ------------------
 1850|    440|            return unexpected(eof_error::eof);
 1851|    440|        }
 1852|       |
 1853|  27.2k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  27.6k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  97.0k|    {
 2520|  97.0k|        return !(a == b);
 2521|  97.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|   104k|    {
 2512|   104k|        return a.m_current == b.m_current;
 2513|   104k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2418|  8.70k|    {
 2419|  8.70k|        return *m_current;
 2420|  8.70k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.33k|    {
  268|  1.33k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.33k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.33k|    {
  161|  1.33k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.33k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.33k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.33k|        else {
  169|  1.33k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.33k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.33k|        }
  173|  1.33k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1877|  48.8k|    {
 1878|  48.8k|        return !codepoint.empty();
 1879|  48.8k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1670|  1.78k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  1.78k|    else {
 1677|  1.78k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  1.78k|    }
 1679|  1.78k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|  1.78k|    {
 1525|  1.78k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  1.78k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1608|  1.78k|    {
 1609|  1.78k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|  1.78k|        else {
 1642|  1.78k|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|  1.78k|            if constexpr (ranges::common_range<Range>) {
 1647|  1.78k|                std::copy(ranges::begin(range), ranges::end(range),
 1648|  1.78k|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|  1.78k|            m_view = string_view_type{str};
 1657|  1.78k|        }
 1658|  1.78k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2369|  23.2k|        : m_current(x), m_end(s), m_count(n)
 2370|  23.2k|    {
 2371|  23.2k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2401|   181k|    {
 2402|   181k|        return m_current;
 2403|   181k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  11.6k|    {
 2821|  11.6k|        return take_width_view{r, n};
 2822|  11.6k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2788|  11.6k|        : m_base(base), m_count(count)
 2789|  11.6k|    {
 2790|  11.6k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2702|  11.6k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5651|    310|    {
 5652|    310|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 278, False: 32]
  ------------------
 5653|    310|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 32]
  ------------------
 5654|    278|            return read_default(range, value, loc);
 5655|    278|        }
 5656|       |
 5657|     32|        reader_impl_for_int<CharT> reader{};
 5658|     32|        signed char tmp_value{};
 5659|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     32|        value = static_cast<signed char>(value);
 5661|     32|        return ret;
 5662|    310|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5633|    278|    {
 5634|    278|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    278|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    278|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    278|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    278|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5552|    278|    {
 5553|    278|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    278|        ch = *range.begin();
 5555|    278|        return it;
 5556|    278|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  2.05k|{
 1834|  2.05k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.05k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  2.05k|    return ranges::next(range.begin());
 1839|  2.05k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.05k|{
  950|  2.05k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.05k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.05k|    return eof_error::good;
  954|  2.05k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.05k|{
  944|  2.05k|    return is_range_eof(r.begin(), r.end());
  945|  2.05k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  50.8k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  50.8k|    {
  937|  50.8k|        return begin == end;
  938|  50.8k|    }
  939|  50.8k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|   173k|        {
 2759|   173k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 3.57k, False: 169k]
  |  Branch (2759:39): [True: 860, False: 2.71k]
  ------------------
 2760|   173k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 1.16k, False: 171k]
  ------------------
 2761|   173k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2804|   105k|    {
 2805|   105k|        return sentinel<true>{m_base.get().end()};
 2806|   105k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2705|   151k|    {
 2706|   151k|        return view;
 2707|   151k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2739|   105k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.08k|    {
  296|  2.08k|        ++x;
  297|  2.08k|        return x;
  298|  2.08k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2798|  23.2k|    {
 2799|  23.2k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  23.2k|                                      m_count};
 2801|  23.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|     32|    {
 3528|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     32|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 32]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 32]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3554|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    888|{
 3315|    888|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 888]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    888|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    888|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    888|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    888|        parse_integer_base_prefix(
 3320|    888|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    888|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 888]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    888|    else {
 3332|    888|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 888]
  |  Branch (3332:13): [True: 888, False: 0]
  ------------------
 3333|    888|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 888, False: 0]
  ------------------
 3334|    888|            digits_begin_it = base_prefix_begin_it;
 3335|    888|        }
 3336|    888|    }
 3337|       |
 3338|    888|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 888, False: 0]
  ------------------
 3339|    888|        sign = sign_type::plus_sign;
 3340|    888|    }
 3341|    888|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    888|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    888|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|  1.18k|{
 3130|  1.18k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.18k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.18k, False: 0]
  ------------------
 3132|  1.18k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.18k, False: 0]
  ------------------
 3133|  1.18k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.18k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  1.18k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|  1.18k|{
 2261|  1.18k|    auto it = read_code_unit(range);
 2262|  1.18k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  2.36k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.36k, False: 1.18k]
  ------------------
 2267|  2.36k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 2.36k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  2.36k|    }
 2271|       |
 2272|  1.18k|    return unexpected(parse_error::error);
 2273|  1.18k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    888|{
 3282|    888|    switch (base) {
 3283|     14|        case 2:
  ------------------
  |  Branch (3283:9): [True: 14, False: 874]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     14|                    false};
 3287|       |
 3288|     14|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 14, False: 874]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     14|            bool zero_parsed = false;
 3291|     14|            auto it = apply_opt(
 3292|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     14|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    286|        case 16:
  ------------------
  |  Branch (3296:9): [True: 286, False: 602]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    286|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    286|                    false};
 3300|       |
 3301|     20|        case 0:
  ------------------
  |  Branch (3301:9): [True: 20, False: 868]
  ------------------
 3302|       |            // detect base
 3303|     20|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    554|        default:
  ------------------
  |  Branch (3305:9): [True: 554, False: 334]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    554|            return {range.begin(), base, false};
 3308|    888|    }
 3309|    888|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    314|{
 2280|    314|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 314, False: 0]
  ------------------
 2281|    314|        return range.begin();
 2282|    314|    }
 2283|      0|    return *result;
 2284|    314|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     34|{
 3233|     34|    return read_matching_string_classic_nocase(range, "0b");
 3234|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|  1.23k|{
 2220|  1.23k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.23k|    else {
 2233|  1.23k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.23k|            if (ch < 'A' || ch > 'Z') {
 2235|  1.23k|                return ch;
 2236|  1.23k|            }
 2237|  1.23k|            return static_cast<char_type>(ch +
 2238|  1.23k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.23k|        };
 2240|       |
 2241|  1.23k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    182|    }                                                  \
  |  |  |  | 3667|  1.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.05k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.05k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.05k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 0]
  |  |  ------------------
  ------------------
 2246|  1.05k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.05k|                    return ascii_tolower(a) ==
 2248|  1.05k|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.05k|                }))) {
 2250|  1.05k|            return unexpected(parse_error::error);
 2251|  1.05k|        }
 2252|       |
 2253|      0|        return it;
 2254|  1.05k|    }
 2255|  1.23k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|  3.85k|{
 1845|  3.85k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  3.85k|    else {
 1856|  3.85k|        auto it = range.begin();
 1857|  3.85k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 3.85k]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  14.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 10.5k, False: 3.64k]
  ------------------
 1862|  10.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 210, False: 10.3k]
  ------------------
 1863|    210|                return unexpected(eof_error::eof);
 1864|    210|            }
 1865|  10.5k|        }
 1866|       |
 1867|  3.64k|        return it;
 1868|  3.85k|    }
 1869|  3.85k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.85k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|  3.85k|    else {
 1115|  3.85k|        return 0;
 1116|  3.85k|    }
 1117|  3.85k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  1.05k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.05k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 42, False: 1.00k]
  |  Branch (2234:29): [True: 1.00k, False: 0]
  ------------------
 2235|  1.05k|                return ch;
 2236|  1.05k|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.05k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     34|{
 3247|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 34]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     34|    return unexpected(parse_error::error);
 3257|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     34|{
 2135|     34|    auto it = read_code_unit(range);
 2136|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2141|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     34|        return unexpected(parse_error::error);
 2143|     34|    }
 2144|       |
 2145|      0|    return *it;
 2146|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     34|{
 1834|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     34|    return ranges::next(range.begin());
 1839|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  48.8k|{
  944|  48.8k|    return is_range_eof(r.begin(), r.end());
  945|  48.8k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    306|{
 3240|    306|    return read_matching_string_classic_nocase(range, "0x");
 3241|    306|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     20|{
 3263|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 20]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 20]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     20|    {
 3270|     20|        bool zero_parsed{false};
 3271|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 20]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     20|    }
 3275|     20|    return {range.begin(), 10, false};
 3276|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    868|{
 3349|    868|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    868|    else {
 3360|    868|        return read_while1_code_unit(range,
 3361|    868|                                     [&](char_type ch) noexcept {
 3362|    868|                                         return char_to_int(ch) < base;
 3363|    868|                                     })
 3364|    868|            .transform_error(map_parse_error_to_scan_error(
 3365|    868|                scan_error::invalid_scanned_value,
 3366|    868|                "Failed to parse integer: No digits found"));
 3367|    868|    }
 3368|    868|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|  1.16k|{
 1984|  1.16k|    auto it = read_while_code_unit(range, pred);
 1985|  1.16k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 1.16k, False: 0]
  ------------------
 1986|  1.16k|        return unexpected(parse_error::error);
 1987|  1.16k|    }
 1988|      0|    return it;
 1989|  1.16k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|  1.16k|{
 1964|  1.16k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  1.16k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|  1.16k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  1.16k|    else {
 1949|  1.16k|        auto first = range.begin();
 1950|  1.16k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.16k, False: 0]
  ------------------
 1951|  1.16k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 1.16k, False: 0]
  ------------------
 1952|  1.16k|                return first;
 1953|  1.16k|            }
 1954|  1.16k|        }
 1955|      0|        return first;
 1956|  1.16k|    }
 1957|  1.16k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  95.1k|        {
 2770|  95.1k|            return !(y == x);
 2771|  95.1k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    868|        : m_fptr([](storage fn,
  743|    868|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    868|              cvref<T> obj = *get<T>(fn);
  745|    868|              if constexpr (std::is_void_v<R>) {
  746|    868|                  obj(static_cast<decltype(args)>(args)...);
  747|    868|              }
  748|    868|              else {
  749|    868|                  return obj(static_cast<decltype(args)>(args)...);
  750|    868|              }
  751|    868|          }),
  752|    868|          m_storage(std::addressof(f))
  753|    868|    {
  754|    868|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    868|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    868|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    868|              else {
  749|    868|                  return obj(static_cast<decltype(args)>(args)...);
  750|    868|              }
  751|    868|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    868|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    868|        else if constexpr (std::is_object_v<T>) {
  688|    868|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    868|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3361|    868|                                     [&](char_type ch) noexcept {
 3362|    868|                                         return char_to_int(ch) < base;
 3363|    868|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    868|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    868|        {
  662|    868|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     20|{
 3379|     20|    std::basic_string<CharT> output;
 3380|     20|    std::string thsep_indices;
 3381|     20|    auto it = range.begin();
 3382|     20|    bool digit_matched = false;
 3383|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 20, False: 0]
  ------------------
 3384|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 20]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 20, False: 0]
  ------------------
 3389|     20|            break;
 3390|     20|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     20|    }
 3396|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3397|     20|        return unexpected_scan_error(
 3398|     20|            scan_error::invalid_scanned_value,
 3399|     20|            "Failed to parse integer: No digits found");
 3400|     20|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2405|   175k|    {
 2406|   175k|        return m_count;
 2407|   175k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5651|    272|    {
 5652|    272|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 250, False: 22]
  ------------------
 5653|    272|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 22]
  ------------------
 5654|    250|            return read_default(range, value, loc);
 5655|    250|        }
 5656|       |
 5657|     22|        reader_impl_for_int<CharT> reader{};
 5658|     22|        signed char tmp_value{};
 5659|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     22|        value = static_cast<signed char>(value);
 5661|     22|        return ret;
 5662|    272|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5633|    904|    {
 5634|    904|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    904|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    904|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    904|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    904|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5552|    904|    {
 5553|    904|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    904|        ch = *range.begin();
 5555|    904|        return it;
 5556|    904|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  6.75k|{
 1834|  6.75k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  6.75k|    return ranges::next(range.begin());
 1839|  6.75k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  22.3k|{
  950|  22.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.3k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.3k|    return eof_error::good;
  954|  22.3k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   713k|{
  944|   713k|    return is_range_eof(r.begin(), r.end());
  945|   713k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   792k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   792k|    {
  937|   792k|        return begin == end;
  938|   792k|    }
  939|   792k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  71.1k|    {
  296|  71.1k|        ++x;
  297|  71.1k|        return x;
  298|  71.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|     22|    {
 3528|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     22|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 22]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 22]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3554|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|     22|                    parse_integer_digits_without_thsep(
 3556|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|     22|                        prefix_result.parsed_base));
 3558|       |
 3559|     22|            auto buf = make_contiguous_buffer(
 3560|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|     22|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.86k|{
 3315|  2.86k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.86k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.86k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.86k|        parse_integer_base_prefix(
 3320|  2.86k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.86k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.86k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.86k|    else {
 3332|  2.86k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.86k]
  ------------------
 3333|  2.86k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.86k, False: 0]
  ------------------
 3334|  2.86k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.86k|        }
 3336|  2.86k|    }
 3337|       |
 3338|  2.86k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.86k, False: 0]
  ------------------
 3339|  2.86k|        sign = sign_type::plus_sign;
 3340|  2.86k|    }
 3341|  2.86k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.86k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.86k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.81k|{
 3130|  3.81k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.81k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.81k, False: 0]
  ------------------
 3132|  3.81k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.81k, False: 0]
  ------------------
 3133|  3.81k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.81k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.81k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.81k|{
 2261|  3.81k|    auto it = read_code_unit(range);
 2262|  3.81k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.81k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  7.62k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 7.62k, False: 3.81k]
  ------------------
 2267|  7.62k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 7.62k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  7.62k|    }
 2271|       |
 2272|  3.81k|    return unexpected(parse_error::error);
 2273|  3.81k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.86k|{
 3282|  2.86k|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 2.86k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     86|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 86, False: 2.78k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     86|            bool zero_parsed = false;
 3291|     86|            auto it = apply_opt(
 3292|     86|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     86|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    920|        case 16:
  ------------------
  |  Branch (3296:9): [True: 920, False: 1.94k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    920|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    920|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 2.85k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.83k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.83k, False: 1.02k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.83k|            return {range.begin(), base, false};
 3308|  2.86k|    }
 3309|  2.86k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  1.01k|{
 2280|  1.01k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 1.01k, False: 0]
  ------------------
 2281|  1.01k|        return range.begin();
 2282|  1.01k|    }
 2283|      0|    return *result;
 2284|  1.01k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     22|{
 3233|     22|    return read_matching_string_classic_nocase(range, "0b");
 3234|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.86k|{
 2220|  3.86k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  3.86k|                  std::is_same_v<char_type, char>) {
 2224|  3.86k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 8, False: 3.85k]
  ------------------
 2225|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|      8|        }
 2227|  3.85k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 3.85k, False: 0]
  ------------------
 2228|  3.85k|            return unexpected(parse_error::error);
 2229|  3.85k|        }
 2230|      0|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  3.86k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|    102|{
 3247|    102|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 102]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|    102|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 102]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|    102|    return unexpected(parse_error::error);
 3257|    102|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  2.04k|{
 2135|  2.04k|    auto it = read_code_unit(range);
 2136|  2.04k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.04k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  2.04k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.04k, False: 0]
  |  |  ------------------
  ------------------
 2141|  2.04k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  2.04k|        return unexpected(parse_error::error);
 2143|  2.04k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  2.04k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    936|{
 3240|    936|    return read_matching_string_classic_nocase(range, "0x");
 3241|    936|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.78k|{
 3349|  2.78k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.78k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.78k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.78k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.78k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.78k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     84|{
 3379|     84|    std::basic_string<CharT> output;
 3380|     84|    std::string thsep_indices;
 3381|     84|    auto it = range.begin();
 3382|     84|    bool digit_matched = false;
 3383|     84|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 84, False: 0]
  ------------------
 3384|     84|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 84]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     84|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 84, False: 0]
  ------------------
 3389|     84|            break;
 3390|     84|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     84|    }
 3396|     84|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 0]
  |  |  ------------------
  ------------------
 3397|     84|        return unexpected_scan_error(
 3398|     84|            scan_error::invalid_scanned_value,
 3399|     84|            "Failed to parse integer: No digits found");
 3400|     84|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     84|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  17.6k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  17.6k|                  ranges::sized_range<Range>) {
 1674|  17.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  17.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  17.6k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  17.6k|    {
 1478|  17.6k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  75.6k|    {
 1491|  75.6k|        return sv;
 1492|  75.6k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|  5.17k|{
 5940|  5.17k|    using char_type = detail::char_t<Range>;
 5941|  5.17k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|  5.17k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 4.79k, False: 384]
  ------------------
 5944|  4.79k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|  4.79k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|  4.79k|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 4.67k, False: 116]
  ------------------
 5948|  4.67k|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|  4.67k|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 256, False: 4.42k]
  ------------------
 5951|    256|                auto prefix_width =
 5952|    256|                    static_cast<std::ptrdiff_t>(
 5953|    256|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|    256|                    ranges::distance(range.begin(), it);
 5955|    256|                return result_type{it, prefix_width};
 5956|    256|            }
 5957|  4.42k|            return result_type{it, 0};
 5958|  4.67k|        }
 5959|       |
 5960|    116|        auto max_width_view = take_width(range, max_width);
 5961|    116|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    116|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 116, False: 0]
  ------------------
 5964|    116|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    116|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    116|    }
 5968|       |
 5969|    384|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    384|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 206, False: 178]
  ------------------
 5971|    206|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|    206|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 52, False: 154]
  ------------------
 5974|     52|            auto prefix_width =
 5975|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|     52|            return result_type{it, prefix_width};
 5978|     52|        }
 5979|    154|        return result_type{it, 0};
 5980|    206|    }
 5981|       |
 5982|    178|    auto max_width_view = take_width(range, max_width);
 5983|    178|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    178|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 178, False: 0]
  ------------------
 5986|    178|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    178|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    178|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  4.85k|{
 1964|  4.85k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  4.85k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  5.06k|{
 1945|  5.06k|    if constexpr (ranges::common_range<Range>) {
 1946|  5.06k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  5.06k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  4.79k|        : m_fptr([](storage fn,
  743|  4.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.79k|              cvref<T> obj = *get<T>(fn);
  745|  4.79k|              if constexpr (std::is_void_v<R>) {
  746|  4.79k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.79k|              }
  748|  4.79k|              else {
  749|  4.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.79k|              }
  751|  4.79k|          }),
  752|  4.79k|          m_storage(std::addressof(f))
  753|  4.79k|    {
  754|  4.79k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  5.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.21k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.21k|              else {
  749|  5.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.21k|              }
  751|  5.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  5.21k|    {
  684|  5.21k|        if constexpr (std::is_const_v<T>) {
  685|  5.21k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.21k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|  5.21k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  4.79k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.79k|        {
  667|  4.79k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|    272|{
 1964|    272|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    272|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    530|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    530|    else {
 1949|    530|        auto first = range.begin();
 1950|  9.20k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 8.92k, False: 280]
  ------------------
 1951|  8.92k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 250, False: 8.67k]
  ------------------
 1952|    250|                return first;
 1953|    250|            }
 1954|  8.92k|        }
 1955|    280|        return first;
 1956|    530|    }
 1957|    530|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2024|    206|{
 2025|    206|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    206|    auto it = range.begin();
 2028|    364|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 364, False: 0]
  ------------------
 2029|    364|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    364|                                           needle.size());
 2031|    364|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 6, False: 358]
  ------------------
 2032|      6|            return it;
 2033|      6|        }
 2034|    358|        static_assert(
 2035|    358|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    358|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 200, False: 158]
  ------------------
 2037|    200|            return it;
 2038|    200|        }
 2039|    158|        it = *r;
 2040|    158|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2024|    178|{
 2025|    178|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    178|    auto it = range.begin();
 2028|    324|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 288, False: 36]
  ------------------
 2029|    288|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    288|                                           needle.size());
 2031|    288|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 28, False: 260]
  ------------------
 2032|     28|            return it;
 2033|     28|        }
 2034|    260|        static_assert(
 2035|    260|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    260|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 114, False: 146]
  ------------------
 2037|    114|            return it;
 2038|    114|        }
 2039|    146|        it = *r;
 2040|    146|    }
 2041|     36|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     36|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|     36|    return it;
 2043|     36|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    534|{
 2940|    534|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 534]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    534|    return read_while_classic_space(range);
 2951|    534|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    534|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    534|    else {
 2114|    534|        auto it = range.begin();
 2115|       |
 2116|    534|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|    534|            auto seg = get_contiguous_beginning(range);
 2118|    534|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|    534|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 534]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|    534|            ranges::advance(it, seg.size());
 2123|    534|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    534|            return detail::is_cp_space(cp);
 2127|    534|        });
 2128|    534|    }
 2129|    534|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.33k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.33k|    else {
 1058|  1.33k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.33k|    }
 1060|  1.33k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    840|{
 2070|    840|    return read_until_code_point(range, std::not_fn(pred));
 2071|    840|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    990|{
 2049|    990|    auto it = range.begin();
 2050|  35.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 35.0k, False: 262]
  ------------------
 2051|  35.0k|        const auto val =
 2052|  35.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  35.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  35.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.7k, False: 4.31k]
  |  |  ------------------
  ------------------
 2054|  30.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  30.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  30.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 728, False: 30.0k]
  ------------------
 2057|    728|                return it;
 2058|    728|            }
 2059|  30.7k|        }
 2060|  34.3k|        it = val.iterator;
 2061|  34.3k|    }
 2062|       |
 2063|    262|    return it;
 2064|    990|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  48.8k|{
 1887|  48.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  48.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  48.8k|    auto it = range.begin();
 1891|  48.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  48.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.47k, False: 41.3k]
  |  |  ------------------
  ------------------
 1894|  7.47k|        ++it;
 1895|  7.47k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  7.47k|        return {it, {}};
 1897|  7.47k|    }
 1898|       |
 1899|  41.3k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 36.6k, False: 4.62k]
  ------------------
 1900|  36.6k|        ++it;
 1901|  36.6k|        return {it, string_type(1, *range.begin())};
 1902|  36.6k|    }
 1903|       |
 1904|  4.62k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  4.62k|    return {it, string_type{range.begin(), it}};
 1906|  41.3k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  7.47k|{
 1155|  7.47k|    auto it = input.begin();
 1156|  9.18k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 9.01k, False: 174]
  ------------------
 1157|  9.01k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 7.30k, False: 1.71k]
  ------------------
 1158|  7.30k|            break;
 1159|  7.30k|        }
 1160|  9.01k|    }
 1161|  7.47k|    return it;
 1162|  7.47k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  4.62k|    {
  283|  4.62k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.62k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  4.62k|    {
  227|  4.62k|        constexpr iter_difference_t<I> zero{0};
  228|  4.62k|        iter_difference_t<I> counter{0};
  229|       |
  230|  4.62k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 4.62k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  4.62k|        else {
  237|  15.0k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 10.6k, False: 4.49k]
  |  Branch (237:34): [True: 10.4k, False: 138]
  ------------------
  238|  10.4k|                ++i;
  239|  10.4k|                ++counter;
  240|  10.4k|            }
  241|  4.62k|        }
  242|       |
  243|  4.62k|        return counter;
  244|  4.62k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    534|        : m_fptr([](storage fn,
  743|    534|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    534|              cvref<T> obj = *get<T>(fn);
  745|    534|              if constexpr (std::is_void_v<R>) {
  746|    534|                  obj(static_cast<decltype(args)>(args)...);
  747|    534|              }
  748|    534|              else {
  749|    534|                  return obj(static_cast<decltype(args)>(args)...);
  750|    534|              }
  751|    534|          }),
  752|    534|          m_storage(std::addressof(f))
  753|    534|    {
  754|    534|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.71k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.71k|              else {
  749|  1.71k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.71k|              }
  751|  1.71k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.71k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.71k|        else if constexpr (std::is_object_v<T>) {
  688|  1.71k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.71k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|  1.71k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.71k|            return detail::is_cp_space(cp);
 2127|  1.71k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    534|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    534|        {
  662|    534|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  7.19k|{
 2940|  7.19k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 6.93k, False: 262]
  ------------------
 2941|  6.93k|        auto it = read_while_classic_space(range);
 2942|  6.93k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  6.93k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.93k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  6.93k|        return it;
 2948|  6.93k|    }
 2949|       |
 2950|    262|    return read_while_classic_space(range);
 2951|  7.19k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  15.2k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  15.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  15.2k|        auto buf = make_contiguous_buffer(range);
 2109|  15.2k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  15.2k|        return ranges::next(range.begin(),
 2111|  15.2k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  15.2k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  18.2k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  18.2k|                  ranges::sized_range<Range>) {
 1674|  18.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  18.2k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  18.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  18.2k|    {
 1478|  18.2k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  27.4k|    {
 3029|  27.4k|        reader_error_handler eh{};
 3030|  27.4k|        get_derived().check_specs_impl(specs, eh);
 3031|  27.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.2k, False: 1.28k]
  |  |  ------------------
  ------------------
 3032|  26.2k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  26.2k|        }
 3034|  1.28k|        return {};
 3035|  27.4k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|  27.4k|    {
 3040|  27.4k|        return static_cast<Derived&>(*this);
 3041|  27.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  27.4k|    {
 3474|  27.4k|        detail::check_int_type_specs(specs, eh);
 3475|  27.4k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  2.58k|    {
 3024|  2.58k|        return true;
 3025|  2.58k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    296|    {
 3528|    296|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    296|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    296|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 296]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    296|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 296]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    296|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    296|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 286, False: 10]
  |  |  ------------------
  ------------------
 3554|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    286|    }                                                  \
  |  |  |  | 3667|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    314|    {
 3528|    314|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    314|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    314|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 314]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    314|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 314]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    314|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    314|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 272, False: 42]
  |  |  ------------------
  ------------------
 3554|    272|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    272|                    parse_integer_digits_without_thsep(
 3556|    272|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    272|                        prefix_result.parsed_base));
 3558|       |
 3559|    272|            auto buf = make_contiguous_buffer(
 3560|    272|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    272|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    272|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    272|        }
 3569|       |
 3570|     42|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     42|            localized_number_formatting_options<CharT>{loc};
 3575|     42|#endif
 3576|       |
 3577|     42|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    296|    {
 3528|    296|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    296|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    296|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 296]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    296|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 296]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    296|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    296|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 286, False: 10]
  |  |  ------------------
  ------------------
 3554|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    286|    }                                                  \
  |  |  |  | 3667|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    314|    {
 3528|    314|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    314|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    314|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 314]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    314|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 314]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    314|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    314|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 272, False: 42]
  |  |  ------------------
  ------------------
 3554|    272|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    272|                    parse_integer_digits_without_thsep(
 3556|    272|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    272|                        prefix_result.parsed_base));
 3558|       |
 3559|    272|            auto buf = make_contiguous_buffer(
 3560|    272|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    272|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    272|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    272|        }
 3569|       |
 3570|     42|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     42|            localized_number_formatting_options<CharT>{loc};
 3575|     42|#endif
 3576|       |
 3577|     42|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    264|    {
 3528|    264|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    264|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    264|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 264]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    264|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 264]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    264|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    264|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 264, False: 0]
  |  |  ------------------
  ------------------
 3554|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    264|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    908|    {
 3528|    908|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 908]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    908|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    908|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 908]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    908|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 908]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    908|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 908, False: 0]
  |  |  ------------------
  ------------------
 3554|    908|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 908]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    908|                    parse_integer_digits_without_thsep(
 3556|    908|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    908|                        prefix_result.parsed_base));
 3558|       |
 3559|    908|            auto buf = make_contiguous_buffer(
 3560|    908|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    908|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    908|    }                                                  \
  |  |  |  | 3667|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    908|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  13.7k|    {
 3029|  13.7k|        reader_error_handler eh{};
 3030|  13.7k|        get_derived().check_specs_impl(specs, eh);
 3031|  13.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 612]
  |  |  ------------------
  ------------------
 3032|  13.1k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  13.1k|        }
 3034|    612|        return {};
 3035|  13.7k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  13.7k|    {
 3040|  13.7k|        return static_cast<Derived&>(*this);
 3041|  13.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  13.7k|    {
 4134|  13.7k|        detail::check_float_type_specs(specs, eh);
 4135|  13.7k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  1.26k|    {
 3024|  1.26k|        return true;
 3025|  1.26k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|    582|    {
 4206|    582|        unsigned options{};
 4207|    582|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 18, False: 564]
  ------------------
 4208|     18|            options |= float_reader_base::allow_thsep;
 4209|     18|        }
 4210|       |
 4211|    582|        SCN_GCC_COMPAT_PUSH
 4212|    582|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    582|        switch (specs.type) {
 4215|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 30, False: 552]
  ------------------
 4216|     30|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 578]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 12, False: 570]
  ------------------
 4222|     12|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|     10|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 10, False: 572]
  ------------------
 4225|     10|                return options | float_reader_base::allow_scientific |
 4226|     10|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    526|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 526, False: 56]
  ------------------
 4229|    526|                return options | float_reader_base::allow_scientific |
 4230|    526|                       float_reader_base::allow_fixed |
 4231|    526|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 582]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    582|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    582|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    582|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|    582|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  1.23k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  2.47k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|    918|    {
 4046|    918|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 918, False: 0]
  ------------------
 4047|    918|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 918, False: 0]
  ------------------
 4048|    918|            return;
 4049|    918|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|    816|    {
 1575|    816|        return m_storage.has_value();
 1576|    816|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|    408|    {
 1580|    408|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    408|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    408|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    408|        return *m_storage;
 1582|    408|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    292|    {
  763|    292|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    292|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    292|    {
 3694|    292|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    292|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    292|        auto it = sign_result.first;
 3697|    292|        m_sign = sign_result.second;
 3698|       |
 3699|    292|        auto digits_begin = it;
 3700|    292|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    292|        else {
 3727|    292|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    292|    }                                                  \
  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    292|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    292|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    292|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    292|    {
 3989|    292|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    292|        const bool allowed_nonhex =
 3991|    292|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    292|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    292|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 292, False: 0]
  |  Branch (3994:45): [True: 0, False: 292]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    292|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 292]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    292|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 292, False: 0]
  |  Branch (4003:45): [True: 0, False: 292]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    292|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 292]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    292|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 274, False: 18]
  |  Branch (4010:28): [True: 4, False: 270]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      4|            auto it = range.begin();
 4014|       |
 4015|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 4]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      4|            else {
 4020|      4|                m_kind = float_kind::hex_without_prefix;
 4021|      4|            }
 4022|       |
 4023|      4|            return read_hex(ranges::subrange{it, range.end()});
 4024|      4|        }
 4025|    288|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 18, False: 270]
  |  Branch (4025:29): [True: 18, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     18|            m_kind = float_kind::generic;
 4029|     18|            return read_regular_float(range);
 4030|     18|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    270|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    270|        m_kind = float_kind::generic;
 4041|    270|        return read_regular(range);
 4042|    270|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    292|    {
 3800|    292|        auto it = range.begin();
 3801|    292|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 292, False: 0]
  ------------------
 3802|    292|            return unexpected(r.error());
 3803|    292|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    292|    {
 3823|    292|        auto it = range.begin();
 3824|    292|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 292, False: 0]
  ------------------
 3825|    292|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    292|                scan_error::invalid_scanned_value,
 3827|    292|                "Invalid floating-point NaN value"));
 3828|    292|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    274|    {
 3793|    274|        return read_matching_string_classic_nocase(range, "0x");
 3794|    274|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      4|    {
 3893|      4|        auto it = range.begin();
 3894|       |
 3895|      4|        std::ptrdiff_t digits_count = 0;
 3896|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3898|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      4|                scan_error::invalid_scanned_value,
 3900|      4|                "Invalid hexadecimal floating-point value"));
 3901|      4|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      4|    {
 3778|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      4|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      4|        return read_while1_code_unit(
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    288|    {
 3933|    288|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    288|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 274, False: 14]
  |  Branch (3934:50): [True: 0, False: 274]
  ------------------
 3935|       |
 3936|    288|        auto it = ranges::begin(range);
 3937|    288|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    288|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    288|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 288, False: 0]
  |  |  ------------------
  ------------------
 3941|    288|            return r.transform_error(
 3942|    288|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    288|                                              "Invalid floating-point value"));
 3944|    288|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    288|    {
 3763|    288|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  Branch (859:45): [True: 0, False: 288]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    288|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    288|        return read_while1_code_unit(
 3772|    288|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    288|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    288|        : m_fptr([](storage fn,
  743|    288|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    288|              cvref<T> obj = *get<T>(fn);
  745|    288|              if constexpr (std::is_void_v<R>) {
  746|    288|                  obj(static_cast<decltype(args)>(args)...);
  747|    288|              }
  748|    288|              else {
  749|    288|                  return obj(static_cast<decltype(args)>(args)...);
  750|    288|              }
  751|    288|          }),
  752|    288|          m_storage(std::addressof(f))
  753|    288|    {
  754|    288|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    288|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    288|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    288|              else {
  749|    288|                  return obj(static_cast<decltype(args)>(args)...);
  750|    288|              }
  751|    288|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    288|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    288|        else if constexpr (std::is_object_v<T>) {
  688|    288|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    288|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3772|    288|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    288|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    288|        {
  662|    288|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    284|    {
 3654|    284|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    284|        return read_source_impl(range);
 3660|    284|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    944|    {
  763|    944|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    944|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    944|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|     10|    {
 3668|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     10|        return read_source_impl(range);
 3674|     10|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    944|    {
 3694|    944|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    944|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 944]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    944|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    944|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    944|        auto it = sign_result.first;
 3697|    944|        m_sign = sign_result.second;
 3698|       |
 3699|    944|        auto digits_begin = it;
 3700|    944|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    944|                      ranges::sized_range<Range>) {
 3703|    944|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 944]
  |  |  |  Branch (859:45): [True: 0, False: 944]
  |  |  |  Branch (859:45): [True: 0, False: 944]
  |  |  ------------------
  ------------------
 3704|    944|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    944|            else {
 3713|    944|                auto cb = [&](const auto& rr)
 3714|    944|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    944|                    auto res = read_all(rr);
 3716|    944|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    944|                        return unexpected_scan_error(
 3718|    944|                            scan_error::invalid_scanned_value,
 3719|    944|                            "Invalid float value");
 3720|    944|                    }
 3721|    944|                    return res;
 3722|    944|                };
 3723|    944|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 918]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     26|    }                                                  \
  |  | 3667|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    944|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    918|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    944|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    918|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 918, False: 0]
  |  Branch (3736:48): [True: 918, False: 0]
  ------------------
 3737|    918|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 918, False: 0]
  ------------------
 3738|    918|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 918, False: 0]
  ------------------
 3739|    918|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    918|        }
 3741|       |
 3742|    918|        handle_separators();
 3743|       |
 3744|    918|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 918]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    918|        return it;
 3757|    918|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    944|    {
 3800|    944|        auto it = range.begin();
 3801|    944|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 944, False: 0]
  ------------------
 3802|    944|            return unexpected(r.error());
 3803|    944|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    944|    {
 3823|    944|        auto it = range.begin();
 3824|    944|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 944, False: 0]
  ------------------
 3825|    944|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    944|                scan_error::invalid_scanned_value,
 3827|    944|                "Invalid floating-point NaN value"));
 3828|    944|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    918|    {
 3793|    918|        return read_matching_string_classic_nocase(range, "0x");
 3794|    918|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|     26|{
 1984|     26|    auto it = read_while_code_unit(range, pred);
 1985|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 26, False: 0]
  ------------------
 1986|     26|        return unexpected(parse_error::error);
 1987|     26|    }
 1988|      0|    return it;
 1989|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|     26|    {
 3933|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 10, False: 16]
  |  Branch (3934:50): [True: 4, False: 6]
  ------------------
 3935|       |
 3936|     26|        auto it = ranges::begin(range);
 3937|     26|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3941|     26|            return r.transform_error(
 3942|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|     26|                                              "Invalid floating-point value"));
 3944|     26|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|     26|    {
 3763|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|     26|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|     26|        return read_while1_code_unit(
 3772|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     26|        : m_fptr([](storage fn,
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
  752|     26|          m_storage(std::addressof(f))
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  688|     26|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    944|    {
 3989|    944|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    944|        const bool allowed_nonhex =
 3991|    944|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    944|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    944|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 944, False: 0]
  |  Branch (3994:45): [True: 0, False: 944]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    944|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 944]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    944|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 944, False: 0]
  |  Branch (4003:45): [True: 0, False: 944]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    944|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 944]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    944|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 918, False: 26]
  |  Branch (4010:28): [True: 8, False: 910]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      8|            auto it = range.begin();
 4014|       |
 4015|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 8]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      8|            else {
 4020|      8|                m_kind = float_kind::hex_without_prefix;
 4021|      8|            }
 4022|       |
 4023|      8|            return read_hex(ranges::subrange{it, range.end()});
 4024|      8|        }
 4025|    936|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 26, False: 910]
  |  Branch (4025:29): [True: 26, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     26|            m_kind = float_kind::generic;
 4029|     26|            return read_regular_float(range);
 4030|     26|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    910|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    910|        m_kind = float_kind::generic;
 4041|    910|        return read_regular(range);
 4042|    910|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    918|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    918|                    auto res = read_all(rr);
 3716|    918|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    918|                    return res;
 3722|    918|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    918|{
 1827|    918|    return ranges::next(range.begin(), range.end());
 1828|    918|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    918|    {
  313|    918|        ranges::advance(x, bound);
  314|    918|        return x;
  315|    918|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    918|    {
  275|    918|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    918|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    990|    {
  190|    990|        i = std::move(bound);
  191|    990|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    918|    {
 1565|    918|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    918|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    918|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|    918|    {
 1609|    918|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    918|                      ranges::sized_range<Range>) {
 1614|    918|            m_storage.reset();
 1615|    918|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    918|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    934|    {
 3654|    934|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 934]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    934|        return read_source_impl(range);
 3660|    934|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    918|    {
 3680|    918|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    918|        const std::ptrdiff_t sign_len =
 3683|    918|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 918]
  ------------------
 3684|       |
 3685|    918|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    918|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    918|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    918|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 918, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    918|    }                                                  \
  |  |  |  | 3667|    918|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    918|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    292|    {
 4159|    292|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    292|#if !SCN_DISABLE_LOCALE
 4162|    292|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 284]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    284|#endif
 4171|       |
 4172|    284|        return read_impl<Range>(
 4173|    284|            range, rd,
 4174|    284|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    284|                return r.read_source(SCN_FWD(args)...);
 4176|    284|            },
 4177|    284|            value);
 4178|    292|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    292|    {
 4195|    292|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    292|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  ------------------
  ------------------
 4197|    292|            return unexpected(r.error());
 4198|    292|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    284|        : m_fptr([](storage fn,
  743|    284|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    284|              cvref<T> obj = *get<T>(fn);
  745|    284|              if constexpr (std::is_void_v<R>) {
  746|    284|                  obj(static_cast<decltype(args)>(args)...);
  747|    284|              }
  748|    284|              else {
  749|    284|                  return obj(static_cast<decltype(args)>(args)...);
  750|    284|              }
  751|    284|          }),
  752|    284|          m_storage(std::addressof(f))
  753|    284|    {
  754|    284|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    284|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    284|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    284|              else {
  749|    284|                  return obj(static_cast<decltype(args)>(args)...);
  750|    284|              }
  751|    284|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    284|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    284|        else if constexpr (std::is_object_v<T>) {
  688|    284|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    284|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    284|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    284|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    284|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    284|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    284|        {
  662|    284|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    290|    {
 4159|    290|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    290|#if !SCN_DISABLE_LOCALE
 4162|    290|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 10, False: 280]
  ------------------
 4163|     10|            return read_impl<Range>(
 4164|     10|                range, rd,
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     10|                },
 4168|     10|                value, loc);
 4169|     10|        }
 4170|    280|#endif
 4171|       |
 4172|    280|        return read_impl<Range>(
 4173|    280|            range, rd,
 4174|    280|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    280|                return r.read_source(SCN_FWD(args)...);
 4176|    280|            },
 4177|    280|            value);
 4178|    290|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    944|    {
 4195|    944|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    944|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 918]
  |  |  ------------------
  ------------------
 4197|     26|            return unexpected(r.error());
 4198|     26|        }
 4199|       |
 4200|    918|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    918|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    918|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    918|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 918, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    918|    }                                                  \
  |  |  |  | 3667|    918|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    918|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    280|        : m_fptr([](storage fn,
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|    280|              if constexpr (std::is_void_v<R>) {
  746|    280|                  obj(static_cast<decltype(args)>(args)...);
  747|    280|              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
  752|    280|          m_storage(std::addressof(f))
  753|    280|    {
  754|    280|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    280|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    280|        else if constexpr (std::is_object_v<T>) {
  688|    280|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    280|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    280|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    280|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    280|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    280|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    280|        {
  662|    280|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|  14.3k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  14.3k|                       std::is_same_v<T, std::wstring>) {
 5816|  14.3k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  14.3k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|  42.9k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  40.9k|    {
 3029|  40.9k|        reader_error_handler eh{};
 3030|  40.9k|        get_derived().check_specs_impl(specs, eh);
 3031|  40.9k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 40.6k]
  |  |  ------------------
  ------------------
 3032|    378|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    378|        }
 3034|  40.6k|        return {};
 3035|  40.9k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|  40.9k|    {
 3040|  40.9k|        return static_cast<Derived&>(*this);
 3041|  40.9k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  40.9k|    {
 5199|  40.9k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  40.9k|        SCN_GCC_PUSH
 5202|  40.9k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  40.9k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  40.9k|        SCN_CLANG_PUSH
 5206|  40.9k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  40.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  40.9k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 372, False: 40.6k]
  ------------------
 5210|  1.59k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.59k, False: 39.3k]
  ------------------
 5211|  1.59k|                m_type = reader_type::word;
 5212|  1.59k|                break;
 5213|       |
 5214|    606|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 606, False: 40.3k]
  ------------------
 5215|    606|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 132, False: 474]
  ------------------
 5216|    606|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 246, False: 228]
  ------------------
 5217|    378|                    m_type = reader_type::custom_word;
 5218|    378|                }
 5219|    228|                else {
 5220|    228|                    m_type = reader_type::word;
 5221|    228|                }
 5222|    606|                break;
 5223|      0|            }
 5224|       |
 5225|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 102, False: 40.8k]
  ------------------
 5226|    102|                m_type = reader_type::character;
 5227|    102|                break;
 5228|       |
 5229|  5.05k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 5.05k, False: 35.9k]
  ------------------
 5230|  5.05k|                m_type = reader_type::character_set;
 5231|  5.05k|                break;
 5232|       |
 5233|  28.1k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 28.1k, False: 12.8k]
  ------------------
 5234|  28.1k|                m_type = reader_type::regex;
 5235|  28.1k|                break;
 5236|       |
 5237|  5.16k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 5.16k, False: 35.8k]
  ------------------
 5238|  5.16k|                m_type = reader_type::regex_escaped;
 5239|  5.16k|                break;
 5240|  40.9k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  40.9k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|  49.1k|    {
 5248|  49.1k|        return m_type == reader_type::word;
 5249|  49.1k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  14.9k|{
 1132|  14.9k|    auto it = src.begin();
 1133|  1.12M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.10M, False: 12.4k]
  ------------------
 1134|  1.10M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.10M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.73k, False: 1.10M]
  ------------------
 1136|  1.73k|            return false;
 1137|  1.73k|        }
 1138|  1.10M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 258, False: 1.10M]
  ------------------
 1139|    258|            return false;
 1140|    258|        }
 1141|  1.10M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.10M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.10M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 540, False: 1.10M]
  ------------------
 1144|    540|            return false;
 1145|    540|        }
 1146|  1.10M|        it += len;
 1147|  1.10M|    }
 1148|  12.4k|    return true;
 1149|  14.9k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    408|{
 2982|    408|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    408|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 408, False: 0]
  ------------------
 2984|    408|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    408|    static_cast<    \
  |  |  929|    408|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    408|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    408|    return {};
 2995|    408|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  5.04k|        {
 5092|  5.04k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 588, False: 4.45k]
  ------------------
 5093|    588|                return {};
 5094|    588|            }
 5095|       |
 5096|  4.45k|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|  4.45k|            auto it = detail::to_address(charset_string.begin());
 5098|  4.45k|            auto set = detail::parse_presentation_set(
 5099|  4.45k|                it, detail::to_address(charset_string.end()), nonascii);
 5100|  4.45k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.45k]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|  4.45k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  4.45k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|  4.45k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  4.45k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|  4.45k|            std::sort(nonascii.extra_ranges.begin(),
 5107|  4.45k|                      nonascii.extra_ranges.end());
 5108|  4.45k|            return {};
 5109|  4.45k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|   718k|        {
 5127|   718k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 99.3k, False: 618k]
  ------------------
 5128|  99.3k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  99.3k|            }
 5130|       |
 5131|   618k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|   718k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  99.3k|        {
 5075|       |            // TODO: binary search?
 5076|  99.3k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 99.3k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  99.3k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  99.3k|            return std::find_if(
 5082|  99.3k|                       nonascii.extra_ranges.begin(),
 5083|  99.3k|                       nonascii.extra_ranges.end(),
 5084|  99.3k|                       [cp_val](const auto& pair) noexcept {
 5085|  99.3k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  99.3k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  99.3k|                       }) != nonascii.extra_ranges.end();
 5088|  99.3k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  17.5M|                       [cp_val](const auto& pair) noexcept {
 5085|  17.5M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 17.5M, False: 6.84k]
  ------------------
 5086|  17.5M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 97.4k, False: 17.4M]
  ------------------
 5087|  17.5M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|   626k|        {
 5065|   626k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|   626k|            const auto val =
 5067|   626k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|   626k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|   626k|                    (val % 8)) &
 5070|   626k|                   1u;
 5071|   626k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  9.75k|        {
 5118|  9.75k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 2.41k, False: 7.33k]
  ------------------
 5119|  2.41k|                return false;
 5120|  2.41k|            }
 5121|       |
 5122|  7.33k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  9.75k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  5.04k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|  1.16k|    {
 5266|  1.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.16k|        return read_impl(range, specs, value);
 5268|  1.16k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|  1.16k|    {
 5284|  1.16k|        SCN_CLANG_PUSH
 5285|  1.16k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.16k|        switch (m_type) {
 5288|    268|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 268, False: 894]
  ------------------
 5289|    268|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     68|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 68, False: 1.09k]
  ------------------
 5292|     68|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     68|                                                                   value);
 5294|       |
 5295|     32|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 32, False: 1.13k]
  ------------------
 5296|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    256|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 256, False: 906]
  ------------------
 5299|    256|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    256|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 1.16k]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    536|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 536, False: 626]
  ------------------
 5309|    536|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    536|                    range,
 5311|    536|                    get_unescaped_regex_pattern(
 5312|    536|                        specs.charset_string<SourceCharT>()),
 5313|    536|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.16k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.16k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.16k|        }
 5320|       |
 5321|  1.16k|        SCN_CLANG_POP
 5322|  1.16k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    268|    {
 4809|    268|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    268|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    368|{
 4741|    368|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    368|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    368|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 128, False: 240]
  ------------------
 4745|    128|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    128|                                     "Invalid encoding in scanned string");
 4747|    128|    }
 4748|    240|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    240|    static_cast<    \
  |  |  929|    240|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    240|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    240|    return SCN_MOVE(result);
  ------------------
  |  |  928|    240|    static_cast<    \
  |  |  929|    240|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    240|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    804|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    804|    else {
 2085|    804|        auto it = range.begin();
 2086|       |
 2087|    804|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|    804|            auto seg = get_contiguous_beginning(range);
 2089|    804|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|    804|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 804]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|    804|            ranges::advance(it, seg.size());
 2094|    804|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|    804|            ranges::subrange{it, range.end()},
 2098|    804|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    804|    }
 2100|    804|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    804|{
 2049|    804|    auto it = range.begin();
 2050|  14.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 13.7k, False: 606]
  ------------------
 2051|  13.7k|        const auto val =
 2052|  13.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  13.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  13.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.5k, False: 3.15k]
  |  |  ------------------
  ------------------
 2054|  10.5k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  10.5k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  10.5k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 198, False: 10.3k]
  ------------------
 2057|    198|                return it;
 2058|    198|            }
 2059|  10.5k|        }
 2060|  13.5k|        it = val.iterator;
 2061|  13.5k|    }
 2062|       |
 2063|    606|    return it;
 2064|    804|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    804|        : m_fptr([](storage fn,
  743|    804|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    804|              cvref<T> obj = *get<T>(fn);
  745|    804|              if constexpr (std::is_void_v<R>) {
  746|    804|                  obj(static_cast<decltype(args)>(args)...);
  747|    804|              }
  748|    804|              else {
  749|    804|                  return obj(static_cast<decltype(args)>(args)...);
  750|    804|              }
  751|    804|          }),
  752|    804|          m_storage(std::addressof(f))
  753|    804|    {
  754|    804|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  10.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.5k|              else {
  749|  10.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.5k|              }
  751|  10.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  10.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.5k|        else if constexpr (std::is_object_v<T>) {
  688|  10.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.5k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  10.5k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    804|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    804|        {
  662|    804|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     68|    {
 4830|     68|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 34, False: 34]
  ------------------
 4831|     34|            return read_string_impl(
 4832|     34|                range,
 4833|     34|                read_until_code_unit(
 4834|     34|                    range,
 4835|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     34|                        SourceCharT ch) { return ch == until; }),
 4837|     34|                value);
 4838|     34|        }
 4839|     34|        return read_string_impl(
 4840|     34|            range,
 4841|     34|            read_until_code_units(
 4842|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     34|            value);
 4844|     68|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 1994|    102|{
 1995|    102|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|       |    if constexpr (ranges::common_range<Range>) {
 1998|       |        return std::search(range.begin(), range.end(), needle.begin(),
 1999|       |                           needle.end());
 2000|       |    }
 2001|    102|    else {
 2002|    102|        auto first = range.begin();
 2003|    732|        while (true) {
  ------------------
  |  Branch (2003:16): [Folded - Ignored]
  ------------------
 2004|    732|            auto it = first;
 2005|    906|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|    906|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2006:21): [True: 54, False: 852]
  ------------------
 2007|     54|                    return first;
 2008|     54|                }
 2009|    852|                if (it == range.end()) {
  ------------------
  |  Branch (2009:21): [True: 48, False: 804]
  ------------------
 2010|     48|                    return it;
 2011|     48|                }
 2012|    804|                if (*it != *needle_it) {
  ------------------
  |  Branch (2012:21): [True: 630, False: 174]
  ------------------
 2013|    630|                    break;
 2014|    630|                }
 2015|    804|            }
 2016|    630|            ++first;
 2017|    630|        }
 2018|    102|    }
 2019|    102|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     32|    {
 4936|     32|        return read_impl(
 4937|     32|            range,
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
 4941|     32|            detail::priority_tag<1>{});
 4942|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     32|    {
 4963|     32|        return read_cb(range);
 4964|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     96|{
 1827|     96|    return ranges::next(range.begin(), range.end());
 1828|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.96k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.86k, False: 96]
  ------------------
  204|  1.86k|            ++i;
  205|  1.86k|        }
  206|     96|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    256|    {
 5037|    256|        auto it = read_source_impl(range, {specs});
 5038|    256|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 244]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    244|        return read_string_impl(range, *it, value);
 5043|    256|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    768|    {
 5142|    768|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    768|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    768|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 768]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    768|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    768|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 456, False: 312]
  ------------------
 5152|    456|            const auto cb = [&](char32_t cp) {
 5153|    456|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    456|            };
 5155|       |
 5156|    456|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 150, False: 306]
  ------------------
 5157|    150|                auto it = read_until_code_point(range, cb);
 5158|    150|                return check_nonempty(it, range);
 5159|    150|            }
 5160|    306|            auto it = read_while_code_point(range, cb);
 5161|    306|            return check_nonempty(it, range);
 5162|    456|        }
 5163|       |
 5164|    312|        const auto cb = [&](SourceCharT ch) {
 5165|    312|            return cb_wrapper.on_ascii_only(ch);
 5166|    312|        };
 5167|       |
 5168|    312|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 156, False: 156]
  ------------------
 5169|    156|            auto it = read_until_code_unit(range, cb);
 5170|    156|            return check_nonempty(it, range);
 5171|    156|        }
 5172|    156|        auto it = read_while_code_unit(range, cb);
 5173|    156|        return check_nonempty(it, range);
 5174|    312|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    456|        : m_fptr([](storage fn,
  743|    456|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    456|              cvref<T> obj = *get<T>(fn);
  745|    456|              if constexpr (std::is_void_v<R>) {
  746|    456|                  obj(static_cast<decltype(args)>(args)...);
  747|    456|              }
  748|    456|              else {
  749|    456|                  return obj(static_cast<decltype(args)>(args)...);
  750|    456|              }
  751|    456|          }),
  752|    456|          m_storage(std::addressof(f))
  753|    456|    {
  754|    456|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  29.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  29.0k|              else {
  749|  29.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.0k|              }
  751|  29.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  29.0k|    {
  684|  29.0k|        if constexpr (std::is_const_v<T>) {
  685|  29.0k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  29.0k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  29.0k|            const auto cb = [&](char32_t cp) {
 5153|  29.0k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  29.0k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    456|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    456|        {
  667|    456|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    768|    {
 5180|    768|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 36, False: 732]
  ------------------
 5181|     36|            return unexpected_scan_error(
 5182|     36|                scan_error::invalid_scanned_value,
 5183|     36|                "No characters matched in [character set]");
 5184|     36|        }
 5185|       |
 5186|    732|        return it;
 5187|    768|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    312|        : m_fptr([](storage fn,
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|    312|              if constexpr (std::is_void_v<R>) {
  746|    312|                  obj(static_cast<decltype(args)>(args)...);
  747|    312|              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
  752|    312|          m_storage(std::addressof(f))
  753|    312|    {
  754|    312|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  6.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.27k|              else {
  749|  6.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.27k|              }
  751|  6.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.27k|    {
  684|  6.27k|        if constexpr (std::is_const_v<T>) {
  685|  6.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5164|  6.27k|        const auto cb = [&](SourceCharT ch) {
 5165|  6.27k|            return cb_wrapper.on_ascii_only(ch);
 5166|  6.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    312|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    312|        {
  667|    312|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    244|{
 4741|    244|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    244|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    244|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 76, False: 168]
  ------------------
 4745|     76|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     76|                                     "Invalid encoding in scanned string");
 4747|     76|    }
 4748|    168|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    168|    static_cast<    \
  |  |  929|    168|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    168|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    168|    return SCN_MOVE(result);
  ------------------
  |  |  928|    168|    static_cast<    \
  |  |  929|    168|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    168|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|    538|    {
 4880|    538|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    538|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    538|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    538|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 538, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    538|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    538|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    538|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    538|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    538|    }                                                  \
  |  |  |  | 3667|    538|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|    538|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|  1.61k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  1.61k|        else {
 4909|  1.61k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 1.61k, False: 0]
  ------------------
 4910|  1.61k|                return unexpected_scan_error(
 4911|  1.61k|                    scan_error::invalid_scanned_value,
 4912|  1.61k|                    "Cannot use regex with a non-contiguous source "
 4913|  1.61k|                    "range");
 4914|  1.61k|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|  1.61k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  1.61k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|  1.61k|    else {
  974|  1.61k|        return false;
  975|  1.61k|    }
  976|  1.61k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  12.3k|    {
 5266|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.3k|        return read_impl(range, specs, value);
 5268|  12.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  12.3k|    {
 5284|  12.3k|        SCN_CLANG_PUSH
 5285|  12.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  12.3k|        switch (m_type) {
 5288|    316|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 316, False: 12.0k]
  ------------------
 5289|    316|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 12.2k]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 12.3k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  1.42k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 1.42k, False: 10.9k]
  ------------------
 5299|  1.42k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  1.42k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  9.36k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 9.36k, False: 2.98k]
  ------------------
 5304|  9.36k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  9.36k|                    range, specs.charset_string<SourceCharT>(),
 5306|  9.36k|                    specs.regexp_flags, value);
 5307|       |
 5308|  1.18k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 1.18k, False: 11.1k]
  ------------------
 5309|  1.18k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|  1.18k|                    range,
 5311|  1.18k|                    get_unescaped_regex_pattern(
 5312|  1.18k|                        specs.charset_string<SourceCharT>()),
 5313|  1.18k|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 12.3k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  12.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  12.3k|        }
 5320|       |
 5321|  12.3k|        SCN_CLANG_POP
 5322|  12.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    970|    {
 4809|    970|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    970|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  1.02k|{
 4741|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.02k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.02k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 330, False: 698]
  ------------------
 4745|    330|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    330|                                     "Invalid encoding in scanned string");
 4747|    330|    }
 4748|    698|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    698|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    698|    return SCN_MOVE(result);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    698|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  2.69k|{
 3001|  2.69k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  2.69k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  2.69k|    return {};
 3009|  2.69k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.91k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|  2.91k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|  2.91k|        auto buf = make_contiguous_buffer(range);
 2080|  2.91k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|  2.91k|        return ranges::next(range.begin(),
 2082|  2.91k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|  2.91k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     58|    {
 4830|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 30, False: 28]
  ------------------
 4831|     30|            return read_string_impl(
 4832|     30|                range,
 4833|     30|                read_until_code_unit(
 4834|     30|                    range,
 4835|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     30|                        SourceCharT ch) { return ch == until; }),
 4837|     30|                value);
 4838|     30|        }
 4839|     28|        return read_string_impl(
 4840|     28|            range,
 4841|     28|            read_until_code_units(
 4842|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     28|            value);
 4844|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 1994|     84|{
 1995|     84|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|     84|    if constexpr (ranges::common_range<Range>) {
 1998|     84|        return std::search(range.begin(), range.end(), needle.begin(),
 1999|     84|                           needle.end());
 2000|       |    }
 2001|       |    else {
 2002|       |        auto first = range.begin();
 2003|       |        while (true) {
 2004|       |            auto it = first;
 2005|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|       |                if (needle_it == needle.end()) {
 2007|       |                    return first;
 2008|       |                }
 2009|       |                if (it == range.end()) {
 2010|       |                    return it;
 2011|       |                }
 2012|       |                if (*it != *needle_it) {
 2013|       |                    break;
 2014|       |                }
 2015|       |            }
 2016|       |            ++first;
 2017|       |        }
 2018|       |    }
 2019|     84|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  1.42k|    {
 5037|  1.42k|        auto it = read_source_impl(range, {specs});
 5038|  1.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 1.03k]
  |  |  ------------------
  ------------------
 5039|    390|            return unexpected(it.error());
 5040|    390|        }
 5041|       |
 5042|  1.03k|        return read_string_impl(range, *it, value);
 5043|  1.42k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  4.27k|    {
 5142|  4.27k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  4.27k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  4.27k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.27k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  4.27k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  4.27k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 4.00k, False: 276]
  ------------------
 5152|  4.00k|            const auto cb = [&](char32_t cp) {
 5153|  4.00k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  4.00k|            };
 5155|       |
 5156|  4.00k|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 240, False: 3.76k]
  ------------------
 5157|    240|                auto it = read_until_code_point(range, cb);
 5158|    240|                return check_nonempty(it, range);
 5159|    240|            }
 5160|  3.76k|            auto it = read_while_code_point(range, cb);
 5161|  3.76k|            return check_nonempty(it, range);
 5162|  4.00k|        }
 5163|       |
 5164|    276|        const auto cb = [&](SourceCharT ch) {
 5165|    276|            return cb_wrapper.on_ascii_only(ch);
 5166|    276|        };
 5167|       |
 5168|    276|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 120, False: 156]
  ------------------
 5169|    120|            auto it = read_until_code_unit(range, cb);
 5170|    120|            return check_nonempty(it, range);
 5171|    120|        }
 5172|    156|        auto it = read_while_code_unit(range, cb);
 5173|    156|        return check_nonempty(it, range);
 5174|    276|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  4.00k|{
 2049|  4.00k|    auto it = range.begin();
 2050|   691k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 691k, False: 234]
  ------------------
 2051|   691k|        const auto val =
 2052|   691k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   691k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   691k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 689k, False: 2.11k]
  |  |  ------------------
  ------------------
 2054|   689k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   689k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   689k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 3.76k, False: 685k]
  ------------------
 2057|  3.76k|                return it;
 2058|  3.76k|            }
 2059|   689k|        }
 2060|   687k|        it = val.iterator;
 2061|   687k|    }
 2062|       |
 2063|    234|    return it;
 2064|  4.00k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   691k|{
 1887|   691k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   691k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   691k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   691k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   691k|    auto it = range.begin();
 1891|   691k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   691k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 689k]
  |  |  ------------------
  ------------------
 1894|  2.11k|        ++it;
 1895|  2.11k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  2.11k|        return {it, {}};
 1897|  2.11k|    }
 1898|       |
 1899|   689k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 592k, False: 96.6k]
  ------------------
 1900|   592k|        ++it;
 1901|   592k|        return {it, string_type(1, *range.begin())};
 1902|   592k|    }
 1903|       |
 1904|  96.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  96.6k|    return {it, string_type{range.begin(), it}};
 1906|   689k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  2.11k|{
 1155|  2.11k|    auto it = input.begin();
 1156|  2.77k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.70k, False: 72]
  ------------------
 1157|  2.70k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.04k, False: 660]
  ------------------
 1158|  2.04k|            break;
 1159|  2.04k|        }
 1160|  2.70k|    }
 1161|  2.11k|    return it;
 1162|  2.11k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  96.6k|    {
  283|  96.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  96.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  96.6k|    {
  212|  96.6k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 72, False: 96.6k]
  ------------------
  213|     72|            auto dist = bound - i;
  214|     72|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     72|            return dist;
  216|     72|        }
  217|  96.6k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  96.6k|        return n;
  219|  96.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   193k|    {
  132|   193k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 193k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   193k|        return t;
  136|   193k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1877|   691k|    {
 1878|   691k|        return !codepoint.empty();
 1879|   691k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.00k|        : m_fptr([](storage fn,
  743|  4.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.00k|              cvref<T> obj = *get<T>(fn);
  745|  4.00k|              if constexpr (std::is_void_v<R>) {
  746|  4.00k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.00k|              }
  748|  4.00k|              else {
  749|  4.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.00k|              }
  751|  4.00k|          }),
  752|  4.00k|          m_storage(std::addressof(f))
  753|  4.00k|    {
  754|  4.00k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   689k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   689k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   689k|              else {
  749|   689k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   689k|              }
  751|   689k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   689k|    {
  684|   689k|        if constexpr (std::is_const_v<T>) {
  685|   689k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   689k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|   689k|            const auto cb = [&](char32_t cp) {
 5153|   689k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|   689k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.00k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.00k|        {
  667|  4.00k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  4.27k|    {
 5180|  4.27k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 1.17k, False: 3.10k]
  ------------------
 5181|  1.17k|            return unexpected_scan_error(
 5182|  1.17k|                scan_error::invalid_scanned_value,
 5183|  1.17k|                "No characters matched in [character set]");
 5184|  1.17k|        }
 5185|       |
 5186|  3.10k|        return it;
 5187|  4.27k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  3.76k|{
 2070|  3.76k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  3.76k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    276|        : m_fptr([](storage fn,
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|    276|              if constexpr (std::is_void_v<R>) {
  746|    276|                  obj(static_cast<decltype(args)>(args)...);
  747|    276|              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
  752|    276|          m_storage(std::addressof(f))
  753|    276|    {
  754|    276|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.48k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.48k|              else {
  749|  3.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.48k|              }
  751|  3.48k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.48k|    {
  684|  3.48k|        if constexpr (std::is_const_v<T>) {
  685|  3.48k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.48k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  3.48k|        const auto cb = [&](SourceCharT ch) {
 5165|  3.48k|            return cb_wrapper.on_ascii_only(ch);
 5166|  3.48k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    276|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    276|        {
  667|    276|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  2.30k|{
 4741|  2.30k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.30k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.30k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 310, False: 1.99k]
  ------------------
 4745|    310|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    310|                                     "Invalid encoding in scanned string");
 4747|    310|    }
 4748|  1.99k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  1.99k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  1.99k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  1.99k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  10.5k|    {
 4880|  10.5k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.28k, False: 1.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.28k|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|  1.27k|        return read_string_impl(range, it, value);
 4882|  10.5k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|  31.6k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  31.6k|        else {
 4909|  31.6k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 31.6k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  31.6k|            auto input = get_as_contiguous(range);
 4917|  31.6k|            SCN_TRY(it,
  ------------------
  |  | 3668|  31.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.8k, False: 3.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  27.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  27.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  27.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  27.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  27.8k|    }                                                  \
  |  |  |  | 3667|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  3.81k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  3.81k|            return ranges::next(range.begin(),
 4920|  3.81k|                                ranges::distance(input.begin(), it));
 4921|  31.6k|        }
 4922|  31.6k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  31.6k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  31.6k|                  ranges::sized_range<Range>) {
  961|  31.6k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  31.6k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  31.6k|{
 1065|  31.6k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  31.6k|                  ranges::sized_range<Range>) {
 1069|  31.6k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  31.6k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  31.6k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  31.6k|                  ranges::sized_range<Range>) {
  983|  31.6k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  31.6k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  31.6k|{
 4335|  31.6k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  31.6k|                  ranges::borrowed_range<Input> &&
 4337|  31.6k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  31.6k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  31.6k|    std::basic_regex<CharT> re{};
 4341|  31.6k|    try {
 4342|  31.6k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  31.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  31.6k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  31.6k|                                     re_flags | std::regex_constants::nosubs};
 4345|  31.6k|    }
 4346|  31.6k|    catch (const std::regex_error& err) {
 4347|  19.6k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  19.6k|                                     "Invalid regex");
 4349|  19.6k|    }
 4350|       |
 4351|  12.0k|    std::match_results<const CharT*> matches{};
 4352|  12.0k|    try {
 4353|  12.0k|        bool found = std::regex_search(input.data(),
 4354|  12.0k|                                       input.data() + input.size(), matches, re,
 4355|  12.0k|                                       std::regex_constants::match_continuous);
 4356|  12.0k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 8.20k, False: 3.81k]
  |  Branch (4356:23): [True: 0, False: 3.81k]
  ------------------
 4357|  7.71k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  7.71k|                                         "Regular expression didn't match");
 4359|  7.71k|        }
 4360|  12.0k|    }
 4361|  12.0k|    catch (const std::regex_error& err) {
 4362|    492|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|    492|                                     "Regex matching failed with an error");
 4364|    492|    }
 4365|       |
 4366|  3.81k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  12.0k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5797|  14.3k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  14.3k|                       std::is_same_v<T, std::wstring>) {
 5816|  14.3k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  14.3k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    408|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    408|    else {
 2991|    408|        return transcode_impl(source.view(), dest);
 2992|    408|    }
 2993|       |
 2994|      0|    return {};
 2995|    408|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  3.10k|{
 2957|  3.10k|    dst.clear();
 2958|  3.10k|    transcode_valid_to_string(src, dst);
 2959|  3.10k|    return {};
 2960|  3.10k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  3.10k|{
 1391|  3.10k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  3.10k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|  3.10k|    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|  3.10k|        else if constexpr (sizeof(DestCharT) == 4) {
 1403|  3.10k|            return transcode_valid_to_string_impl_to32(src, dest);
 1404|  3.10k|        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|       |        if constexpr (sizeof(DestCharT) == 1) {
 1419|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|       |    }
 1425|       |
 1426|  3.10k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  3.10k|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1264|  3.10k|{
 1265|  3.10k|    static_assert(sizeof(DestCharT) == 4);
 1266|       |
 1267|  3.10k|    auto it = src.begin();
 1268|   272k|    while (it != src.end()) {
  ------------------
  |  Branch (1268:12): [True: 269k, False: 3.10k]
  ------------------
 1269|   269k|        auto res = get_next_code_point_valid(
 1270|   269k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1271|   269k|                                                                 src.end()));
 1272|   269k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1273|   269k|        dest.push_back(res.value);
 1274|   269k|        it = detail::make_string_view_iterator(src, res.iterator);
 1275|   269k|    }
 1276|  3.10k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   269k|{
 1189|   269k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   269k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   269k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   269k|    return {input.begin() + len,
 1195|   269k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   269k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|  1.16k|    {
 5266|  1.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.16k|        return read_impl(range, specs, value);
 5268|  1.16k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|  1.16k|    {
 5284|  1.16k|        SCN_CLANG_PUSH
 5285|  1.16k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.16k|        switch (m_type) {
 5288|    268|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 268, False: 894]
  ------------------
 5289|    268|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     68|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 68, False: 1.09k]
  ------------------
 5292|     68|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     68|                                                                   value);
 5294|       |
 5295|     32|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 32, False: 1.13k]
  ------------------
 5296|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    256|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 256, False: 906]
  ------------------
 5299|    256|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    256|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 1.16k]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    536|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 536, False: 626]
  ------------------
 5309|    536|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    536|                    range,
 5311|    536|                    get_unescaped_regex_pattern(
 5312|    536|                        specs.charset_string<SourceCharT>()),
 5313|    536|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.16k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.16k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.16k|        }
 5320|       |
 5321|  1.16k|        SCN_CLANG_POP
 5322|  1.16k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    268|    {
 4809|    268|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    268|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    368|{
 4741|    368|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    368|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    368|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 128, False: 240]
  ------------------
 4745|    128|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    128|                                     "Invalid encoding in scanned string");
 4747|    128|    }
 4748|    240|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    240|    static_cast<    \
  |  |  929|    240|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    240|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    240|    return SCN_MOVE(result);
  ------------------
  |  |  928|    240|    static_cast<    \
  |  |  929|    240|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    240|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     68|    {
 4830|     68|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 34, False: 34]
  ------------------
 4831|     34|            return read_string_impl(
 4832|     34|                range,
 4833|     34|                read_until_code_unit(
 4834|     34|                    range,
 4835|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     34|                        SourceCharT ch) { return ch == until; }),
 4837|     34|                value);
 4838|     34|        }
 4839|     34|        return read_string_impl(
 4840|     34|            range,
 4841|     34|            read_until_code_units(
 4842|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     34|            value);
 4844|     68|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     32|    {
 4936|     32|        return read_impl(
 4937|     32|            range,
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
 4941|     32|            detail::priority_tag<1>{});
 4942|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     32|    {
 4963|     32|        return read_cb(range);
 4964|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    256|    {
 5037|    256|        auto it = read_source_impl(range, {specs});
 5038|    256|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 244]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    244|        return read_string_impl(range, *it, value);
 5043|    256|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    244|{
 4741|    244|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    244|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    244|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 76, False: 168]
  ------------------
 4745|     76|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     76|                                     "Invalid encoding in scanned string");
 4747|     76|    }
 4748|    168|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    168|    static_cast<    \
  |  |  929|    168|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    168|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    168|    return SCN_MOVE(result);
  ------------------
  |  |  928|    168|    static_cast<    \
  |  |  929|    168|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    168|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|    538|    {
 4880|    538|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    538|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    538|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    538|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 538, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    538|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    538|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    538|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    538|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    538|    }                                                  \
  |  |  |  | 3667|    538|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|    538|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  12.3k|    {
 5266|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.3k|        return read_impl(range, specs, value);
 5268|  12.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  12.3k|    {
 5284|  12.3k|        SCN_CLANG_PUSH
 5285|  12.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  12.3k|        switch (m_type) {
 5288|    316|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 316, False: 12.0k]
  ------------------
 5289|    316|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 12.2k]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 12.3k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  1.42k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 1.42k, False: 10.9k]
  ------------------
 5299|  1.42k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  1.42k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  9.36k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 9.36k, False: 2.98k]
  ------------------
 5304|  9.36k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  9.36k|                    range, specs.charset_string<SourceCharT>(),
 5306|  9.36k|                    specs.regexp_flags, value);
 5307|       |
 5308|  1.18k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 1.18k, False: 11.1k]
  ------------------
 5309|  1.18k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|  1.18k|                    range,
 5311|  1.18k|                    get_unescaped_regex_pattern(
 5312|  1.18k|                        specs.charset_string<SourceCharT>()),
 5313|  1.18k|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 12.3k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  12.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  12.3k|        }
 5320|       |
 5321|  12.3k|        SCN_CLANG_POP
 5322|  12.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    970|    {
 4809|    970|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    970|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  1.02k|{
 4741|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.02k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.02k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 330, False: 698]
  ------------------
 4745|    330|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    330|                                     "Invalid encoding in scanned string");
 4747|    330|    }
 4748|    698|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    698|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    698|    return SCN_MOVE(result);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    698|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  2.69k|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|  2.69k|    else {
 3005|  2.69k|        return transcode_impl(source.view(), dest);
 3006|  2.69k|    }
 3007|       |
 3008|      0|    return {};
 3009|  2.69k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     58|    {
 4830|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 30, False: 28]
  ------------------
 4831|     30|            return read_string_impl(
 4832|     30|                range,
 4833|     30|                read_until_code_unit(
 4834|     30|                    range,
 4835|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     30|                        SourceCharT ch) { return ch == until; }),
 4837|     30|                value);
 4838|     30|        }
 4839|     28|        return read_string_impl(
 4840|     28|            range,
 4841|     28|            read_until_code_units(
 4842|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     28|            value);
 4844|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  1.42k|    {
 5037|  1.42k|        auto it = read_source_impl(range, {specs});
 5038|  1.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 1.03k]
  |  |  ------------------
  ------------------
 5039|    390|            return unexpected(it.error());
 5040|    390|        }
 5041|       |
 5042|  1.03k|        return read_string_impl(range, *it, value);
 5043|  1.42k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  2.30k|{
 4741|  2.30k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.30k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.30k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 310, False: 1.99k]
  ------------------
 4745|    310|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    310|                                     "Invalid encoding in scanned string");
 4747|    310|    }
 4748|  1.99k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  1.99k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  1.99k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  1.99k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  10.5k|    {
 4880|  10.5k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.28k, False: 1.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.28k|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|  1.27k|        return read_string_impl(range, it, value);
 4882|  10.5k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|  14.3k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  14.3k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  14.3k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  14.3k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  1.16k|    {
 5266|  1.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.16k|        return read_impl(range, specs, value);
 5268|  1.16k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  1.16k|    {
 5284|  1.16k|        SCN_CLANG_PUSH
 5285|  1.16k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.16k|        switch (m_type) {
 5288|    268|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 268, False: 894]
  ------------------
 5289|    268|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     68|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 68, False: 1.09k]
  ------------------
 5292|     68|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     68|                                                                   value);
 5294|       |
 5295|     32|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 32, False: 1.13k]
  ------------------
 5296|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    256|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 256, False: 906]
  ------------------
 5299|    256|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    256|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 1.16k]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    536|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 536, False: 626]
  ------------------
 5309|    536|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    536|                    range,
 5311|    536|                    get_unescaped_regex_pattern(
 5312|    536|                        specs.charset_string<SourceCharT>()),
 5313|    536|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.16k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.16k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.16k|        }
 5320|       |
 5321|  1.16k|        SCN_CLANG_POP
 5322|  1.16k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    268|    {
 4816|    268|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    268|                                     value);
 4818|    268|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    368|{
 4762|    368|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    368|    auto src = [&]() {
 4765|    368|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    368|            return make_contiguous_buffer(
 4767|    368|                ranges::subrange{range.begin().base(), result.base()});
 4768|    368|        }
 4769|    368|        else {
 4770|    368|            return make_contiguous_buffer(
 4771|    368|                ranges::subrange{range.begin(), result});
 4772|    368|        }
 4773|    368|    }();
 4774|    368|    using src_type = decltype(src);
 4775|       |
 4776|    368|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    368|    else {
 4789|    368|        const auto view = src.view();
 4790|    368|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    368|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 128, False: 240]
  ------------------
 4793|    128|            return unexpected_scan_error(
 4794|    128|                scan_error::invalid_scanned_value,
 4795|    128|                "Invalid encoding in scanned string_view");
 4796|    128|        }
 4797|       |
 4798|    240|        return SCN_MOVE(result);
  ------------------
  |  |  928|    240|    static_cast<    \
  |  |  929|    240|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    368|    }
 4800|    368|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    368|    auto src = [&]() {
 4765|    368|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    368|            return make_contiguous_buffer(
 4767|    368|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    368|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     68|    {
 4852|     68|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 34, False: 34]
  ------------------
 4853|     34|            return read_string_view_impl(
 4854|     34|                range,
 4855|     34|                read_until_code_unit(
 4856|     34|                    range,
 4857|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     34|                        SourceCharT ch) { return ch == until; }),
 4859|     34|                value);
 4860|     34|        }
 4861|     34|        return read_string_view_impl(
 4862|     34|            range,
 4863|     34|            read_until_code_units(
 4864|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     34|            value);
 4866|     68|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4858|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     32|    {
 4948|     32|        return read_impl(
 4949|     32|            range,
 4950|     32|            [&](const auto& rng) {
 4951|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     32|            },
 4953|     32|            detail::priority_tag<1>{});
 4954|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     32|    {
 4963|     32|        return read_cb(range);
 4964|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     32|            [&](const auto& rng) {
 4951|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|    256|    {
 5051|    256|        auto it = read_source_impl(range, {specs});
 5052|    256|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 244]
  |  |  ------------------
  ------------------
 5053|     12|            return unexpected(it.error());
 5054|     12|        }
 5055|       |
 5056|    244|        return read_string_view_impl(range, *it, value);
 5057|    256|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|    244|{
 4762|    244|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    244|    auto src = [&]() {
 4765|    244|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    244|            return make_contiguous_buffer(
 4767|    244|                ranges::subrange{range.begin().base(), result.base()});
 4768|    244|        }
 4769|    244|        else {
 4770|    244|            return make_contiguous_buffer(
 4771|    244|                ranges::subrange{range.begin(), result});
 4772|    244|        }
 4773|    244|    }();
 4774|    244|    using src_type = decltype(src);
 4775|       |
 4776|    244|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    244|    else {
 4789|    244|        const auto view = src.view();
 4790|    244|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    244|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 76, False: 168]
  ------------------
 4793|     76|            return unexpected_scan_error(
 4794|     76|                scan_error::invalid_scanned_value,
 4795|     76|                "Invalid encoding in scanned string_view");
 4796|     76|        }
 4797|       |
 4798|    168|        return SCN_MOVE(result);
  ------------------
  |  |  928|    168|    static_cast<    \
  |  |  929|    168|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    244|    }
 4800|    244|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|    244|    auto src = [&]() {
 4765|    244|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    244|            return make_contiguous_buffer(
 4767|    244|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    244|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|    538|    {
 4891|    538|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    538|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    538|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    538|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 538, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    538|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    538|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    538|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    538|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    538|    }                                                  \
  |  |  |  | 3667|    538|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|    538|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  12.3k|    {
 5266|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.3k|        return read_impl(range, specs, value);
 5268|  12.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  12.3k|    {
 5284|  12.3k|        SCN_CLANG_PUSH
 5285|  12.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  12.3k|        switch (m_type) {
 5288|    316|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 316, False: 12.0k]
  ------------------
 5289|    316|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 12.2k]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 12.3k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  1.42k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 1.42k, False: 10.9k]
  ------------------
 5299|  1.42k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  1.42k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  9.36k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 9.36k, False: 2.98k]
  ------------------
 5304|  9.36k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  9.36k|                    range, specs.charset_string<SourceCharT>(),
 5306|  9.36k|                    specs.regexp_flags, value);
 5307|       |
 5308|  1.18k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 1.18k, False: 11.1k]
  ------------------
 5309|  1.18k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|  1.18k|                    range,
 5311|  1.18k|                    get_unescaped_regex_pattern(
 5312|  1.18k|                        specs.charset_string<SourceCharT>()),
 5313|  1.18k|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 12.3k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  12.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  12.3k|        }
 5320|       |
 5321|  12.3k|        SCN_CLANG_POP
 5322|  12.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    970|    {
 4816|    970|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    970|                                     value);
 4818|    970|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|  1.02k|{
 4762|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.02k|    auto src = [&]() {
 4765|  1.02k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.02k|            return make_contiguous_buffer(
 4767|  1.02k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.02k|        }
 4769|  1.02k|        else {
 4770|  1.02k|            return make_contiguous_buffer(
 4771|  1.02k|                ranges::subrange{range.begin(), result});
 4772|  1.02k|        }
 4773|  1.02k|    }();
 4774|  1.02k|    using src_type = decltype(src);
 4775|       |
 4776|  1.02k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.02k|    else {
 4789|  1.02k|        const auto view = src.view();
 4790|  1.02k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.02k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 330, False: 698]
  ------------------
 4793|    330|            return unexpected_scan_error(
 4794|    330|                scan_error::invalid_scanned_value,
 4795|    330|                "Invalid encoding in scanned string_view");
 4796|    330|        }
 4797|       |
 4798|    698|        return SCN_MOVE(result);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.02k|    }
 4800|  1.02k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|  1.02k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.02k|        else {
 4770|  1.02k|            return make_contiguous_buffer(
 4771|  1.02k|                ranges::subrange{range.begin(), result});
 4772|  1.02k|        }
 4773|  1.02k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     58|    {
 4852|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 30, False: 28]
  ------------------
 4853|     30|            return read_string_view_impl(
 4854|     30|                range,
 4855|     30|                read_until_code_unit(
 4856|     30|                    range,
 4857|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     30|                        SourceCharT ch) { return ch == until; }),
 4859|     30|                value);
 4860|     30|        }
 4861|     28|        return read_string_view_impl(
 4862|     28|            range,
 4863|     28|            read_until_code_units(
 4864|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     28|            value);
 4866|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4858|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  1.42k|    {
 5051|  1.42k|        auto it = read_source_impl(range, {specs});
 5052|  1.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 1.03k]
  |  |  ------------------
  ------------------
 5053|    390|            return unexpected(it.error());
 5054|    390|        }
 5055|       |
 5056|  1.03k|        return read_string_view_impl(range, *it, value);
 5057|  1.42k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  2.30k|{
 4762|  2.30k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  2.30k|    auto src = [&]() {
 4765|  2.30k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  2.30k|            return make_contiguous_buffer(
 4767|  2.30k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  2.30k|        }
 4769|  2.30k|        else {
 4770|  2.30k|            return make_contiguous_buffer(
 4771|  2.30k|                ranges::subrange{range.begin(), result});
 4772|  2.30k|        }
 4773|  2.30k|    }();
 4774|  2.30k|    using src_type = decltype(src);
 4775|       |
 4776|  2.30k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  2.30k|    else {
 4789|  2.30k|        const auto view = src.view();
 4790|  2.30k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  2.30k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 310, False: 1.99k]
  ------------------
 4793|    310|            return unexpected_scan_error(
 4794|    310|                scan_error::invalid_scanned_value,
 4795|    310|                "Invalid encoding in scanned string_view");
 4796|    310|        }
 4797|       |
 4798|  1.99k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  2.30k|    }
 4800|  2.30k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  2.30k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  2.30k|        else {
 4770|  2.30k|            return make_contiguous_buffer(
 4771|  2.30k|                ranges::subrange{range.begin(), result});
 4772|  2.30k|        }
 4773|  2.30k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  10.5k|    {
 4891|  10.5k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.28k, False: 1.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.28k|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.27k|        return read_string_view_impl(range, it, value);
 4893|  10.5k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5612|  5.23k|    {
 5613|  5.23k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  5.23k|        else {
 5618|  5.23k|            detail::check_char_type_specs(specs, eh);
 5619|  5.23k|        }
 5620|  5.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 538]
  |  |  ------------------
  ------------------
 5621|  4.70k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  4.70k|        }
 5623|    538|        return {};
 5624|  5.23k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  9.21k|    {
  763|  9.21k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.21k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.56k|        : m_fptr([](storage fn,
  743|  1.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.56k|              cvref<T> obj = *get<T>(fn);
  745|  1.56k|              if constexpr (std::is_void_v<R>) {
  746|  1.56k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.56k|              }
  748|  1.56k|              else {
  749|  1.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.56k|              }
  751|  1.56k|          }),
  752|  1.56k|          m_storage(std::addressof(f))
  753|  1.56k|    {
  754|  1.56k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.12k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.12k|              else {
  749|  3.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.12k|              }
  751|  3.12k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.12k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.12k|        else if constexpr (std::is_object_v<T>) {
  688|  3.12k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.12k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.56k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.56k|        {
  662|  1.56k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5607|  1.63k|    {
 5608|  1.63k|        return false;
 5609|  1.63k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|    120|    {
 1768|    120|        auto stdloc = loc.get<std::locale>();
 1769|    120|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|    120|        grouping = numpunct.grouping();
 1771|    120|        thousands_sep =
 1772|    120|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 120]
  ------------------
 1773|    120|        decimal_point = numpunct.decimal_point();
 1774|    120|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|    156|{
 1705|    156|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 156, False: 0]
  ------------------
 1706|    156|        return std::use_facet<Facet>(stdloc);
 1707|    156|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    156|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  5.60k|{
 2338|  5.60k|    size_t count{0};
 2339|  5.60k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  5.60k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  5.60k|    });
 2342|  5.60k|    return count;
 2343|  5.60k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  5.60k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  5.60k|    auto it = input.begin();
 1436|  13.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 8.27k, False: 5.60k]
  ------------------
 1437|  8.27k|        auto res = get_next_code_point(
 1438|  8.27k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  8.27k|        cb(res.value);
 1440|  8.27k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  8.27k|    }
 1442|  5.60k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   787M|{
 1169|   787M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   787M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   787M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   787M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   787M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 787M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   787M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   787M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 787M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   787M|    return {input.begin() + len,
 1181|   787M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   787M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  5.60k|        : m_fptr([](storage fn,
  743|  5.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.60k|              cvref<T> obj = *get<T>(fn);
  745|  5.60k|              if constexpr (std::is_void_v<R>) {
  746|  5.60k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.60k|              }
  748|  5.60k|              else {
  749|  5.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.60k|              }
  751|  5.60k|          }),
  752|  5.60k|          m_storage(std::addressof(f))
  753|  5.60k|    {
  754|  5.60k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  8.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.27k|              cvref<T> obj = *get<T>(fn);
  745|  8.27k|              if constexpr (std::is_void_v<R>) {
  746|  8.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  8.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  8.27k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.27k|        else if constexpr (std::is_object_v<T>) {
  688|  8.27k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.27k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  8.27k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  8.27k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  8.27k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  5.60k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.60k|        {
  662|  5.60k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  2.67k|    {
 1570|  2.67k|        return m_view;
 1571|  2.67k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.88k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2409|    422|    {
 2410|    422|        return m_multibyte_left;
 2411|    422|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2414|  53.7k|    {
 2415|  53.7k|        return *m_current;
 2416|  53.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2423|  36.6k|    {
 2424|  36.6k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  36.6k|        _increment_current();
 2426|  36.6k|        return *this;
 2427|  36.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2656|  36.6k|    {
 2657|  36.6k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 36.6k, False: 0]
  ------------------
 2658|  36.6k|            auto cplen = _get_cp_length_at_current();
 2659|  36.6k|            m_multibyte_left = cplen - 1;
 2660|  36.6k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  36.6k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  36.6k|        ++m_current;
 2667|  36.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2627|  36.6k|    {
 2628|  36.6k|        return static_cast<difference_type>(
 2629|  36.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  36.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2633|  36.6k|    {
 2634|  36.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36.6k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  36.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 36.6k, False: 0]
  ------------------
 2639|  36.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  36.6k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  36.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  36.6k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  5.97k|{
 1845|  5.97k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  5.97k|    if constexpr (ranges::sized_range<Range>) {
 1848|  5.97k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  5.97k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 134, False: 5.84k]
  ------------------
 1850|    134|            return unexpected(eof_error::eof);
 1851|    134|        }
 1852|       |
 1853|  5.84k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  5.97k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  13.1k|    {
 2520|  13.1k|        return !(a == b);
 2521|  13.1k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|  14.1k|    {
 2512|  14.1k|        return a.m_current == b.m_current;
 2513|  14.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2418|  2.70k|    {
 2419|  2.70k|        return *m_current;
 2420|  2.70k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1877|  16.4k|    {
 1878|  16.4k|        return !codepoint.empty();
 1879|  16.4k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1670|    570|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|    570|    else {
 1677|    570|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|    570|    }
 1679|    570|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|    570|    {
 1525|    570|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|    570|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1608|    570|    {
 1609|    570|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|    570|        else {
 1642|    570|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|    570|            if constexpr (ranges::common_range<Range>) {
 1647|    570|                std::copy(ranges::begin(range), ranges::end(range),
 1648|    570|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|    570|            m_view = string_view_type{str};
 1657|    570|        }
 1658|    570|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2369|  12.1k|        : m_current(x), m_end(s), m_count(n)
 2370|  12.1k|    {
 2371|  12.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2401|  52.0k|    {
 2402|  52.0k|        return m_current;
 2403|  52.0k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  4.16k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  4.16k|    else {
 2114|  4.16k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  4.16k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  4.16k|            return detail::is_cp_space(cp);
 2127|  4.16k|        });
 2128|  4.16k|    }
 2129|  4.16k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2069|  4.16k|{
 2070|  4.16k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  4.16k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2048|  4.16k|{
 2049|  4.16k|    auto it = range.begin();
 2050|  8.79k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 7.51k, False: 1.28k]
  ------------------
 2051|  7.51k|        const auto val =
 2052|  7.51k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  7.51k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  7.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.51k, False: 0]
  |  |  ------------------
  ------------------
 2054|  7.51k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  7.51k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  7.51k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 2.88k, False: 4.62k]
  ------------------
 2057|  2.88k|                return it;
 2058|  2.88k|            }
 2059|  7.51k|        }
 2060|  4.62k|        it = val.iterator;
 2061|  4.62k|    }
 2062|       |
 2063|  1.28k|    return it;
 2064|  4.16k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  87.0k|{
 1887|  87.0k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  87.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  87.0k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  87.0k|    auto it = range.begin();
 1891|  87.0k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  87.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.0k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  87.0k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 87.0k, False: 0]
  ------------------
 1900|  87.0k|        ++it;
 1901|  87.0k|        return {it, string_type(1, *range.begin())};
 1902|  87.0k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  87.0k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   109k|{
  944|   109k|    return is_range_eof(r.begin(), r.end());
  945|   109k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   787M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   787M|    {
  937|   787M|        return begin == end;
  938|   787M|    }
  939|   787M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    968|    {
  190|    968|        i = std::move(bound);
  191|    968|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  87.0k|    {
 1878|  87.0k|        return !codepoint.empty();
 1879|  87.0k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  4.16k|        : m_fptr([](storage fn,
  743|  4.16k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.16k|              cvref<T> obj = *get<T>(fn);
  745|  4.16k|              if constexpr (std::is_void_v<R>) {
  746|  4.16k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.16k|              }
  748|  4.16k|              else {
  749|  4.16k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.16k|              }
  751|  4.16k|          }),
  752|  4.16k|          m_storage(std::addressof(f))
  753|  4.16k|    {
  754|  4.16k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  7.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.51k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.51k|              else {
  749|  7.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.51k|              }
  751|  7.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  7.51k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.51k|        else if constexpr (std::is_object_v<T>) {
  688|  7.51k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.51k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2125|  7.51k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  7.51k|            return detail::is_cp_space(cp);
 2127|  7.51k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  4.16k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.16k|        {
  662|  4.16k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  22.6k|{
  950|  22.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.6k|    return eof_error::good;
  954|  22.6k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  4.44k|    {
 2821|  4.44k|        return take_width_view{r, n};
 2822|  4.44k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2788|  4.44k|        : m_base(base), m_count(count)
 2789|  4.44k|    {
 2790|  4.44k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2702|  4.44k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5687|    176|    {
 5688|    176|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 156, False: 20]
  ------------------
 5689|    176|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    156|            return read_default(range, value, loc);
 5691|    156|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    176|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5671|    156|    {
 5672|    156|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    156|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    156|        else {
 5677|    156|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    156|        }
 5679|    156|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5552|    156|    {
 5553|    156|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    156|        ch = *range.begin();
 5555|    156|        return it;
 5556|    156|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  1.29k|{
 1834|  1.29k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  1.29k|    return ranges::next(range.begin());
 1839|  1.29k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.29k|{
  950|  1.29k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.29k|    return eof_error::good;
  954|  1.29k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.29k|{
  944|  1.29k|    return is_range_eof(r.begin(), r.end());
  945|  1.29k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  17.8k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  17.8k|    {
  937|  17.8k|        return begin == end;
  938|  17.8k|    }
  939|  17.8k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|  48.8k|        {
 2759|  48.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 422, False: 48.4k]
  |  Branch (2759:39): [True: 422, False: 0]
  ------------------
 2760|  48.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 354, False: 48.0k]
  ------------------
 2761|  48.8k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2804|  16.9k|    {
 2805|  16.9k|        return sentinel<true>{m_base.get().end()};
 2806|  16.9k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2705|  41.1k|    {
 2706|  41.1k|        return view;
 2707|  41.1k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2739|  16.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  16.9k|    static_cast<    \
  |  |  929|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.33k|    {
  296|  1.33k|        ++x;
  297|  1.33k|        return x;
  298|  1.33k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2798|  12.1k|    {
 2799|  12.1k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  12.1k|                                      m_count};
 2801|  12.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    216|    {
 3528|    216|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    216|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    216|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 216]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    216|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 216]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    216|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    216|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 196, False: 20]
  |  |  ------------------
  ------------------
 3554|    196|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 196, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    196|    }                                                  \
  |  |  |  | 3667|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    570|{
 3315|    570|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    570|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    570|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    570|        parse_integer_base_prefix(
 3320|    570|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    570|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 570]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    570|    else {
 3332|    570|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 570]
  |  Branch (3332:13): [True: 570, False: 0]
  ------------------
 3333|    570|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 570, False: 0]
  ------------------
 3334|    570|            digits_begin_it = base_prefix_begin_it;
 3335|    570|        }
 3336|    570|    }
 3337|       |
 3338|    570|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 570, False: 0]
  ------------------
 3339|    570|        sign = sign_type::plus_sign;
 3340|    570|    }
 3341|    570|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    570|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    570|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|    750|{
 3130|    750|    auto r = read_one_of_code_unit(range, "+-");
 3131|    750|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 750, False: 0]
  ------------------
 3132|    750|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 750, False: 0]
  ------------------
 3133|    750|            return std::pair{range.begin(), sign_type::default_sign};
 3134|    750|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|    750|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|    750|{
 2261|    750|    auto it = read_code_unit(range);
 2262|    750|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  1.50k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.50k, False: 750]
  ------------------
 2267|  1.50k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 1.50k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  1.50k|    }
 2271|       |
 2272|    750|    return unexpected(parse_error::error);
 2273|    750|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    570|{
 3282|    570|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 564]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     16|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 16, False: 554]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     16|            bool zero_parsed = false;
 3291|     16|            auto it = apply_opt(
 3292|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     16|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    168|        case 16:
  ------------------
  |  Branch (3296:9): [True: 168, False: 402]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    168|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    168|                    false};
 3300|       |
 3301|     22|        case 0:
  ------------------
  |  Branch (3301:9): [True: 22, False: 548]
  ------------------
 3302|       |            // detect base
 3303|     22|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    358|        default:
  ------------------
  |  Branch (3305:9): [True: 358, False: 212]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    358|            return {range.begin(), base, false};
 3308|    570|    }
 3309|    570|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    190|{
 2280|    190|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 190, False: 0]
  ------------------
 2281|    190|        return range.begin();
 2282|    190|    }
 2283|      0|    return *result;
 2284|    190|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|    788|{
 2220|    788|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|    788|    else {
 2233|    788|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    788|            if (ch < 'A' || ch > 'Z') {
 2235|    788|                return ch;
 2236|    788|            }
 2237|    788|            return static_cast<char_type>(ch +
 2238|    788|                                          static_cast<char_type>('a' - 'A'));
 2239|    788|        };
 2240|       |
 2241|    788|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    788|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    788|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    788|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    788|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 92, False: 696]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     92|    }                                                  \
  |  |  |  | 3667|    788|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    696|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|    696|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|    696|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|    696|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 696, False: 0]
  |  |  ------------------
  ------------------
 2246|    696|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|    696|                    return ascii_tolower(a) ==
 2248|    696|                           static_cast<detail::char_t<Range>>(b);
 2249|    696|                }))) {
 2250|    696|            return unexpected(parse_error::error);
 2251|    696|        }
 2252|       |
 2253|      0|        return it;
 2254|    696|    }
 2255|    788|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|    788|{
 1845|    788|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    788|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    788|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    788|    else {
 1856|    788|        auto it = range.begin();
 1857|    788|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 788]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  2.61k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.91k, False: 696]
  ------------------
 1862|  1.91k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 92, False: 1.82k]
  ------------------
 1863|     92|                return unexpected(eof_error::eof);
 1864|     92|            }
 1865|  1.91k|        }
 1866|       |
 1867|    696|        return it;
 1868|    788|    }
 1869|    788|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    788|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    788|    else {
 1115|    788|        return 0;
 1116|    788|    }
 1117|    788|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2233|    696|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    696|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 32, False: 664]
  |  Branch (2234:29): [True: 664, False: 0]
  ------------------
 2235|    696|                return ch;
 2236|    696|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|    696|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     38|{
 3247|     38|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 38]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     38|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 38]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     38|    return unexpected(parse_error::error);
 3257|     38|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     38|{
 2135|     38|    auto it = read_code_unit(range);
 2136|     38|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     38|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2141|     38|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     38|        return unexpected(parse_error::error);
 2143|     38|    }
 2144|       |
 2145|      0|    return *it;
 2146|     38|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     38|{
 1834|     38|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     38|    return ranges::next(range.begin());
 1839|     38|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     38|{
  950|     38|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     38|    return eof_error::good;
  954|     38|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  16.5k|{
  944|  16.5k|    return is_range_eof(r.begin(), r.end());
  945|  16.5k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    190|{
 3240|    190|    return read_matching_string_classic_nocase(range, "0x");
 3241|    190|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     22|{
 3263|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 22]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 22]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     22|    {
 3270|     22|        bool zero_parsed{false};
 3271|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 22]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     22|    }
 3275|     22|    return {range.begin(), 10, false};
 3276|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    530|{
 3349|    530|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    530|    else {
 3360|    530|        return read_while1_code_unit(range,
 3361|    530|                                     [&](char_type ch) noexcept {
 3362|    530|                                         return char_to_int(ch) < base;
 3363|    530|                                     })
 3364|    530|            .transform_error(map_parse_error_to_scan_error(
 3365|    530|                scan_error::invalid_scanned_value,
 3366|    530|                "Failed to parse integer: No digits found"));
 3367|    530|    }
 3368|    530|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|    710|{
 1984|    710|    auto it = read_while_code_unit(range, pred);
 1985|    710|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 710, False: 0]
  ------------------
 1986|    710|        return unexpected(parse_error::error);
 1987|    710|    }
 1988|      0|    return it;
 1989|    710|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|    710|{
 1964|    710|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    710|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|    710|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    710|    else {
 1949|    710|        auto first = range.begin();
 1950|    710|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 710, False: 0]
  ------------------
 1951|    710|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 710, False: 0]
  ------------------
 1952|    710|                return first;
 1953|    710|            }
 1954|    710|        }
 1955|      0|        return first;
 1956|    710|    }
 1957|    710|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  22.8k|        {
 2770|  22.8k|            return !(y == x);
 2771|  22.8k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    530|        : m_fptr([](storage fn,
  743|    530|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    530|              cvref<T> obj = *get<T>(fn);
  745|    530|              if constexpr (std::is_void_v<R>) {
  746|    530|                  obj(static_cast<decltype(args)>(args)...);
  747|    530|              }
  748|    530|              else {
  749|    530|                  return obj(static_cast<decltype(args)>(args)...);
  750|    530|              }
  751|    530|          }),
  752|    530|          m_storage(std::addressof(f))
  753|    530|    {
  754|    530|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    530|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    530|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    530|              else {
  749|    530|                  return obj(static_cast<decltype(args)>(args)...);
  750|    530|              }
  751|    530|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    530|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    530|        else if constexpr (std::is_object_v<T>) {
  688|    530|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    530|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3361|    530|                                     [&](char_type ch) noexcept {
 3362|    530|                                         return char_to_int(ch) < base;
 3363|    530|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    530|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    530|        {
  662|    530|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     40|{
 3379|     40|    std::basic_string<CharT> output;
 3380|     40|    std::string thsep_indices;
 3381|     40|    auto it = range.begin();
 3382|     40|    bool digit_matched = false;
 3383|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 40, False: 0]
  ------------------
 3384|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 40]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 40, False: 0]
  ------------------
 3389|     40|            break;
 3390|     40|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     40|    }
 3396|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3397|     40|        return unexpected_scan_error(
 3398|     40|            scan_error::invalid_scanned_value,
 3399|     40|            "Failed to parse integer: No digits found");
 3400|     40|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     40|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2405|  49.8k|    {
 2406|  49.8k|        return m_count;
 2407|  49.8k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5687|    360|    {
 5688|    360|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 340, False: 20]
  ------------------
 5689|    360|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    340|            return read_default(range, value, loc);
 5691|    340|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    360|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5671|    942|    {
 5672|    942|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    942|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    942|        else {
 5677|    942|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    942|        }
 5679|    942|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5552|    942|    {
 5553|    942|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    942|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    942|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    942|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 942]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    942|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    942|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    942|        ch = *range.begin();
 5555|    942|        return it;
 5556|    942|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  6.86k|{
 1834|  6.86k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.86k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  6.86k|    return ranges::next(range.begin());
 1839|  6.86k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   787M|    {
  296|   787M|        ++x;
  297|   787M|        return x;
  298|   787M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    406|    {
 3528|    406|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    406|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    406|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 406]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    406|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 406]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    406|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    406|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 380, False: 26]
  |  |  ------------------
  ------------------
 3554|    380|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    380|                    parse_integer_digits_without_thsep(
 3556|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    380|                        prefix_result.parsed_base));
 3558|       |
 3559|    380|            auto buf = make_contiguous_buffer(
 3560|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 380, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    380|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    380|        }
 3569|       |
 3570|     26|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     26|            localized_number_formatting_options<CharT>{loc};
 3575|     26|#endif
 3576|       |
 3577|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     26|    }                                                  \
  |  |  |  | 3667|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.94k|{
 3315|  2.94k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.94k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.94k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.94k|        parse_integer_base_prefix(
 3320|  2.94k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.94k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.94k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.94k|    else {
 3332|  2.94k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.94k]
  ------------------
 3333|  2.94k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.94k, False: 0]
  ------------------
 3334|  2.94k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.94k|        }
 3336|  2.94k|    }
 3337|       |
 3338|  2.94k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.94k, False: 0]
  ------------------
 3339|  2.94k|        sign = sign_type::plus_sign;
 3340|  2.94k|    }
 3341|  2.94k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.94k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.94k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.91k|{
 3130|  3.91k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.91k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.91k, False: 0]
  ------------------
 3132|  3.91k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.91k, False: 0]
  ------------------
 3133|  3.91k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.91k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.91k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.91k|{
 2261|  3.91k|    auto it = read_code_unit(range);
 2262|  3.91k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.91k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  7.83k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 7.83k, False: 3.91k]
  ------------------
 2267|  7.83k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 7.83k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  7.83k|    }
 2271|       |
 2272|  3.91k|    return unexpected(parse_error::error);
 2273|  3.91k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.94k|{
 3282|  2.94k|    switch (base) {
 3283|     12|        case 2:
  ------------------
  |  Branch (3283:9): [True: 12, False: 2.92k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     12|                    false};
 3287|       |
 3288|     10|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 10, False: 2.93k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     10|            bool zero_parsed = false;
 3291|     10|            auto it = apply_opt(
 3292|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     10|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    964|        case 16:
  ------------------
  |  Branch (3296:9): [True: 964, False: 1.97k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    964|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    964|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 2.92k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.93k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.93k, False: 1.00k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.93k|            return {range.begin(), base, false};
 3308|  2.94k|    }
 3309|  2.94k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|    986|{
 2280|    986|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 986, False: 0]
  ------------------
 2281|    986|        return range.begin();
 2282|    986|    }
 2283|      0|    return *result;
 2284|    986|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.95k|{
 2220|  3.95k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  3.95k|    else {
 2233|  3.95k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.95k|            if (ch < 'A' || ch > 'Z') {
 2235|  3.95k|                return ch;
 2236|  3.95k|            }
 2237|  3.95k|            return static_cast<char_type>(ch +
 2238|  3.95k|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.95k|        };
 2240|       |
 2241|  3.95k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  3.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  3.95k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  3.95k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  3.95k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.95k, False: 0]
  |  |  ------------------
  ------------------
 2246|  3.95k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  3.95k|                    return ascii_tolower(a) ==
 2248|  3.95k|                           static_cast<detail::char_t<Range>>(b);
 2249|  3.95k|                }))) {
 2250|  3.95k|            return unexpected(parse_error::error);
 2251|  3.95k|        }
 2252|       |
 2253|      0|        return it;
 2254|  3.95k|    }
 2255|  3.95k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  3.95k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.95k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 44, False: 3.90k]
  |  Branch (2234:29): [True: 3.90k, False: 0]
  ------------------
 2235|  3.95k|                return ch;
 2236|  3.95k|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.95k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|     26|{
 3247|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 26]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 26]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     26|    return unexpected(parse_error::error);
 3257|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  2.00k|{
 2135|  2.00k|    auto it = read_code_unit(range);
 2136|  2.00k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  2.00k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 0]
  |  |  ------------------
  ------------------
 2141|  2.00k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  2.00k|        return unexpected(parse_error::error);
 2143|  2.00k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  2.00k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    980|{
 3240|    980|    return read_matching_string_classic_nocase(range, "0x");
 3241|    980|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.88k|{
 3349|  2.88k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.88k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.88k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.88k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.88k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     52|{
 3379|     52|    std::basic_string<CharT> output;
 3380|     52|    std::string thsep_indices;
 3381|     52|    auto it = range.begin();
 3382|     52|    bool digit_matched = false;
 3383|     52|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 52, False: 0]
  ------------------
 3384|     52|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 52]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     52|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 52, False: 0]
  ------------------
 3389|     52|            break;
 3390|     52|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     52|    }
 3396|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 0]
  |  |  ------------------
  ------------------
 3397|     52|        return unexpected_scan_error(
 3398|     52|            scan_error::invalid_scanned_value,
 3399|     52|            "Failed to parse integer: No digits found");
 3400|     52|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     52|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  15.0k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  15.0k|                  ranges::sized_range<Range>) {
 1674|  15.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  15.0k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  15.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  15.0k|    {
 1478|  15.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  17.8k|    {
 1491|  17.8k|        return sv;
 1492|  17.8k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|    526|{
 5940|    526|    using char_type = detail::char_t<Range>;
 5941|    526|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    526|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 526, False: 0]
  ------------------
 5944|    526|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    526|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    526|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 468, False: 58]
  ------------------
 5948|    468|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|    468|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 66, False: 402]
  ------------------
 5951|     66|                auto prefix_width =
 5952|     66|                    static_cast<std::ptrdiff_t>(
 5953|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|     66|                    ranges::distance(range.begin(), it);
 5955|     66|                return result_type{it, prefix_width};
 5956|     66|            }
 5957|    402|            return result_type{it, 0};
 5958|    468|        }
 5959|       |
 5960|     58|        auto max_width_view = take_width(range, max_width);
 5961|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 58, False: 0]
  ------------------
 5964|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|     58|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|     58|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|    530|{
 1964|    530|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    530|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|    680|{
 1945|    680|    if constexpr (ranges::common_range<Range>) {
 1946|    680|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|    680|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    526|        : m_fptr([](storage fn,
  743|    526|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    526|              cvref<T> obj = *get<T>(fn);
  745|    526|              if constexpr (std::is_void_v<R>) {
  746|    526|                  obj(static_cast<decltype(args)>(args)...);
  747|    526|              }
  748|    526|              else {
  749|    526|                  return obj(static_cast<decltype(args)>(args)...);
  750|    526|              }
  751|    526|          }),
  752|    526|          m_storage(std::addressof(f))
  753|    526|    {
  754|    526|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    974|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    974|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    974|              else {
  749|    974|                  return obj(static_cast<decltype(args)>(args)...);
  750|    974|              }
  751|    974|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    974|    {
  684|    974|        if constexpr (std::is_const_v<T>) {
  685|    974|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    974|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    974|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    526|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    526|        {
  667|    526|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|     94|{
 1964|     94|    return read_until_code_unit(range, std::not_fn(pred));
 1965|     94|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    220|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    220|    else {
 1949|    220|        auto first = range.begin();
 1950|  1.75k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.63k, False: 122]
  ------------------
 1951|  1.63k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 98, False: 1.53k]
  ------------------
 1952|     98|                return first;
 1953|     98|            }
 1954|  1.63k|        }
 1955|    122|        return first;
 1956|    220|    }
 1957|    220|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    302|{
 2940|    302|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 302]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    302|    return read_while_classic_space(range);
 2951|    302|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    302|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    302|    else {
 2114|    302|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|    302|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    302|            return detail::is_cp_space(cp);
 2127|    302|        });
 2128|    302|    }
 2129|    302|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    338|{
 2070|    338|    return read_until_code_point(range, std::not_fn(pred));
 2071|    338|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    488|{
 2049|    488|    auto it = range.begin();
 2050|  1.50k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.45k, False: 48]
  ------------------
 2051|  1.45k|        const auto val =
 2052|  1.45k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.45k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.45k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.45k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.45k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.45k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.45k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 440, False: 1.01k]
  ------------------
 2057|    440|                return it;
 2058|    440|            }
 2059|  1.45k|        }
 2060|  1.01k|        it = val.iterator;
 2061|  1.01k|    }
 2062|       |
 2063|     48|    return it;
 2064|    488|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  16.4k|{
 1887|  16.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  16.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  16.4k|    auto it = range.begin();
 1891|  16.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  16.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.4k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  16.4k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 16.4k, False: 0]
  ------------------
 1900|  16.4k|        ++it;
 1901|  16.4k|        return {it, string_type(1, *range.begin())};
 1902|  16.4k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  16.4k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    302|        : m_fptr([](storage fn,
  743|    302|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    302|              cvref<T> obj = *get<T>(fn);
  745|    302|              if constexpr (std::is_void_v<R>) {
  746|    302|                  obj(static_cast<decltype(args)>(args)...);
  747|    302|              }
  748|    302|              else {
  749|    302|                  return obj(static_cast<decltype(args)>(args)...);
  750|    302|              }
  751|    302|          }),
  752|    302|          m_storage(std::addressof(f))
  753|    302|    {
  754|    302|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    416|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    416|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    416|              else {
  749|    416|                  return obj(static_cast<decltype(args)>(args)...);
  750|    416|              }
  751|    416|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    416|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    416|        else if constexpr (std::is_object_v<T>) {
  688|    416|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    416|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|    416|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    416|            return detail::is_cp_space(cp);
 2127|    416|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    302|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    302|        {
  662|    302|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  8.88k|{
 2940|  8.88k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 7.48k, False: 1.39k]
  ------------------
 2941|  7.48k|        auto it = read_while_classic_space(range);
 2942|  7.48k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  7.48k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.48k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  7.48k|        return it;
 2948|  7.48k|    }
 2949|       |
 2950|  1.39k|    return read_while_classic_space(range);
 2951|  8.88k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  13.0k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  13.0k|    else {
 2114|  13.0k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  13.0k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  13.0k|            return detail::is_cp_space(cp);
 2127|  13.0k|        });
 2128|  13.0k|    }
 2129|  13.0k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  13.2k|{
 2070|  13.2k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  13.2k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  16.2k|{
 2049|  16.2k|    auto it = range.begin();
 2050|  82.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 79.5k, False: 3.19k]
  ------------------
 2051|  79.5k|        const auto val =
 2052|  79.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  79.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  79.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.5k, False: 0]
  |  |  ------------------
  ------------------
 2054|  79.5k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  79.5k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  79.5k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 13.0k, False: 66.5k]
  ------------------
 2057|  13.0k|                return it;
 2058|  13.0k|            }
 2059|  79.5k|        }
 2060|  66.5k|        it = val.iterator;
 2061|  66.5k|    }
 2062|       |
 2063|  3.19k|    return it;
 2064|  16.2k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  13.0k|        : m_fptr([](storage fn,
  743|  13.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.0k|              cvref<T> obj = *get<T>(fn);
  745|  13.0k|              if constexpr (std::is_void_v<R>) {
  746|  13.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.0k|              }
  748|  13.0k|              else {
  749|  13.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.0k|              }
  751|  13.0k|          }),
  752|  13.0k|          m_storage(std::addressof(f))
  753|  13.0k|    {
  754|  13.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  19.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  19.0k|              else {
  749|  19.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.0k|              }
  751|  19.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  19.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  19.0k|        else if constexpr (std::is_object_v<T>) {
  688|  19.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  19.0k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  19.0k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  19.0k|            return detail::is_cp_space(cp);
 2127|  19.0k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  13.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  13.0k|        {
  662|  13.0k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  10.6k|    {
 3029|  10.6k|        reader_error_handler eh{};
 3030|  10.6k|        get_derived().check_specs_impl(specs, eh);
 3031|  10.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.43k, False: 1.16k]
  |  |  ------------------
  ------------------
 3032|  9.43k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  9.43k|        }
 3034|  1.16k|        return {};
 3035|  10.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|  10.6k|    {
 3040|  10.6k|        return static_cast<Derived&>(*this);
 3041|  10.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  10.6k|    {
 3474|  10.6k|        detail::check_int_type_specs(specs, eh);
 3475|  10.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|  2.37k|    {
 3024|  2.37k|        return true;
 3025|  2.37k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    196|    {
 3528|    196|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 196]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    196|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    196|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    196|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 196]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    196|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 196]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    196|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    196|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 176, False: 20]
  |  |  ------------------
  ------------------
 3554|    176|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 176, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    176|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    176|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    176|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    176|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    176|    }                                                  \
  |  |  |  | 3667|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    386|    {
 3528|    386|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    386|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    386|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 386]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    386|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 386]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    386|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    386|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 360, False: 26]
  |  |  ------------------
  ------------------
 3554|    360|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    360|                    parse_integer_digits_without_thsep(
 3556|    360|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    360|                        prefix_result.parsed_base));
 3558|       |
 3559|    360|            auto buf = make_contiguous_buffer(
 3560|    360|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    360|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 360, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    360|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    360|        }
 3569|       |
 3570|     26|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     26|            localized_number_formatting_options<CharT>{loc};
 3575|     26|#endif
 3576|       |
 3577|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     26|    }                                                  \
  |  |  |  | 3667|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    158|    {
 3528|    158|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    158|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    158|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 158]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    158|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 158]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    158|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    158|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 158, False: 0]
  |  |  ------------------
  ------------------
 3554|    158|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    158|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    944|    {
 3528|    944|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    944|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 944]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    944|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    944|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    944|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 944]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    944|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 944]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    944|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    944|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 944, False: 0]
  |  |  ------------------
  ------------------
 3554|    944|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    944|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 944]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    944|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    944|                    parse_integer_digits_without_thsep(
 3556|    944|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    944|                        prefix_result.parsed_base));
 3558|       |
 3559|    944|            auto buf = make_contiguous_buffer(
 3560|    944|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    944|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    944|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 944, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    944|    }                                                  \
  |  |  |  | 3667|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    944|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  5.30k|    {
 3029|  5.30k|        reader_error_handler eh{};
 3030|  5.30k|        get_derived().check_specs_impl(specs, eh);
 3031|  5.30k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 558]
  |  |  ------------------
  ------------------
 3032|  4.74k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  4.74k|        }
 3034|    558|        return {};
 3035|  5.30k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|  5.30k|    {
 3040|  5.30k|        return static_cast<Derived&>(*this);
 3041|  5.30k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  5.30k|    {
 4134|  5.30k|        detail::check_float_type_specs(specs, eh);
 4135|  5.30k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  1.16k|    {
 3024|  1.16k|        return true;
 3025|  1.16k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|    554|    {
 4206|    554|        unsigned options{};
 4207|    554|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 28, False: 526]
  ------------------
 4208|     28|            options |= float_reader_base::allow_thsep;
 4209|     28|        }
 4210|       |
 4211|    554|        SCN_GCC_COMPAT_PUSH
 4212|    554|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    554|        switch (specs.type) {
 4215|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 8, False: 546]
  ------------------
 4216|      8|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 550]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 18, False: 536]
  ------------------
 4222|     18|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 4, False: 550]
  ------------------
 4225|      4|                return options | float_reader_base::allow_scientific |
 4226|      4|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    520|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 520, False: 34]
  ------------------
 4229|    520|                return options | float_reader_base::allow_scientific |
 4230|    520|                       float_reader_base::allow_fixed |
 4231|    520|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 554]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    554|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    554|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    554|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|    554|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.15k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  2.31k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|    968|    {
 4046|    968|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 968, False: 0]
  ------------------
 4047|    968|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 968, False: 0]
  ------------------
 4048|    968|            return;
 4049|    968|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|    344|    {
 1575|    344|        return m_storage.has_value();
 1576|    344|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|    172|    {
 1580|    172|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    172|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    172|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    172|        return *m_storage;
 1582|    172|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    180|    {
  763|    180|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    180|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|     10|    {
 3668|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     10|        return read_source_impl(range);
 3674|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    180|    {
 3694|    180|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    180|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    180|        auto it = sign_result.first;
 3697|    180|        m_sign = sign_result.second;
 3698|       |
 3699|    180|        auto digits_begin = it;
 3700|    180|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    180|        else {
 3727|    180|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 180, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    180|    }                                                  \
  |  | 3667|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    180|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    180|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    180|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    180|    {
 3989|    180|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    180|        const bool allowed_nonhex =
 3991|    180|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    180|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    180|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 180, False: 0]
  |  Branch (3994:45): [True: 0, False: 180]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    180|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 180]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    180|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 180, False: 0]
  |  Branch (4003:45): [True: 0, False: 180]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    180|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 180]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    180|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 172, False: 8]
  |  Branch (4010:28): [True: 6, False: 166]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      6|            auto it = range.begin();
 4014|       |
 4015|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 6]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      6|            else {
 4020|      6|                m_kind = float_kind::hex_without_prefix;
 4021|      6|            }
 4022|       |
 4023|      6|            return read_hex(ranges::subrange{it, range.end()});
 4024|      6|        }
 4025|    174|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 166]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    166|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 166]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    166|        m_kind = float_kind::generic;
 4041|    166|        return read_regular(range);
 4042|    166|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    180|    {
 3800|    180|        auto it = range.begin();
 3801|    180|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 180, False: 0]
  ------------------
 3802|    180|            return unexpected(r.error());
 3803|    180|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    180|    {
 3823|    180|        auto it = range.begin();
 3824|    180|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 180, False: 0]
  ------------------
 3825|    180|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    180|                scan_error::invalid_scanned_value,
 3827|    180|                "Invalid floating-point NaN value"));
 3828|    180|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    172|    {
 3793|    172|        return read_matching_string_classic_nocase(range, "0x");
 3794|    172|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      6|    {
 3893|      6|        auto it = range.begin();
 3894|       |
 3895|      6|        std::ptrdiff_t digits_count = 0;
 3896|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3898|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      6|                scan_error::invalid_scanned_value,
 3900|      6|                "Invalid hexadecimal floating-point value"));
 3901|      6|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      6|    {
 3778|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      6|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      6|        return read_while1_code_unit(
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    174|    {
 3933|    174|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    174|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 168, False: 6]
  |  Branch (3934:50): [True: 2, False: 166]
  ------------------
 3935|       |
 3936|    174|        auto it = ranges::begin(range);
 3937|    174|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    174|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    174|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 0]
  |  |  ------------------
  ------------------
 3941|    174|            return r.transform_error(
 3942|    174|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    174|                                              "Invalid floating-point value"));
 3944|    174|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    174|    {
 3763|    174|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  Branch (859:45): [True: 0, False: 174]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    174|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    174|        return read_while1_code_unit(
 3772|    174|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    174|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    174|        : m_fptr([](storage fn,
  743|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    174|              cvref<T> obj = *get<T>(fn);
  745|    174|              if constexpr (std::is_void_v<R>) {
  746|    174|                  obj(static_cast<decltype(args)>(args)...);
  747|    174|              }
  748|    174|              else {
  749|    174|                  return obj(static_cast<decltype(args)>(args)...);
  750|    174|              }
  751|    174|          }),
  752|    174|          m_storage(std::addressof(f))
  753|    174|    {
  754|    174|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    174|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    174|              else {
  749|    174|                  return obj(static_cast<decltype(args)>(args)...);
  750|    174|              }
  751|    174|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    174|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    174|        else if constexpr (std::is_object_v<T>) {
  688|    174|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    174|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3772|    174|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    174|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    174|        {
  662|    174|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    170|    {
 3654|    170|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 170]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    170|        return read_source_impl(range);
 3660|    170|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    976|    {
  763|    976|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    976|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    976|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|     18|    {
 3668|     18|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     18|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     18|        return read_source_impl(range);
 3674|     18|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    976|    {
 3694|    976|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 976]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    976|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    976|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    976|        auto it = sign_result.first;
 3697|    976|        m_sign = sign_result.second;
 3698|       |
 3699|    976|        auto digits_begin = it;
 3700|    976|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    976|                      ranges::sized_range<Range>) {
 3703|    976|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 976]
  |  |  |  Branch (859:45): [True: 0, False: 976]
  |  |  |  Branch (859:45): [True: 0, False: 976]
  |  |  ------------------
  ------------------
 3704|    976|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    976|            else {
 3713|    976|                auto cb = [&](const auto& rr)
 3714|    976|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    976|                    auto res = read_all(rr);
 3716|    976|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    976|                        return unexpected_scan_error(
 3718|    976|                            scan_error::invalid_scanned_value,
 3719|    976|                            "Invalid float value");
 3720|    976|                    }
 3721|    976|                    return res;
 3722|    976|                };
 3723|    976|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 968]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      8|    }                                                  \
  |  | 3667|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    976|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    968|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    976|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    968|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 968, False: 0]
  |  Branch (3736:48): [True: 968, False: 0]
  ------------------
 3737|    968|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 968, False: 0]
  ------------------
 3738|    968|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 968, False: 0]
  ------------------
 3739|    968|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    968|        }
 3741|       |
 3742|    968|        handle_separators();
 3743|       |
 3744|    968|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 968]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    968|        return it;
 3757|    968|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    976|    {
 3800|    976|        auto it = range.begin();
 3801|    976|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 976, False: 0]
  ------------------
 3802|    976|            return unexpected(r.error());
 3803|    976|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    976|    {
 3823|    976|        auto it = range.begin();
 3824|    976|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 976, False: 0]
  ------------------
 3825|    976|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    976|                scan_error::invalid_scanned_value,
 3827|    976|                "Invalid floating-point NaN value"));
 3828|    976|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    968|    {
 3793|    968|        return read_matching_string_classic_nocase(range, "0x");
 3794|    968|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|      8|{
 1984|      8|    auto it = read_while_code_unit(range, pred);
 1985|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 8, False: 0]
  ------------------
 1986|      8|        return unexpected(parse_error::error);
 1987|      8|    }
 1988|      0|    return it;
 1989|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|      8|    {
 3933|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 6, False: 2]
  |  Branch (3934:50): [True: 2, False: 4]
  ------------------
 3935|       |
 3936|      8|        auto it = ranges::begin(range);
 3937|      8|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3941|      8|            return r.transform_error(
 3942|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|      8|                                              "Invalid floating-point value"));
 3944|      8|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|      8|    {
 3763|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      8|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|      8|        return read_while1_code_unit(
 3772|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    976|    {
 3989|    976|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    976|        const bool allowed_nonhex =
 3991|    976|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    976|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    976|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 976, False: 0]
  |  Branch (3994:45): [True: 0, False: 976]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    976|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 976]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    976|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 976, False: 0]
  |  Branch (4003:45): [True: 0, False: 976]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    976|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 976]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    976|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 968, False: 8]
  |  Branch (4010:28): [True: 12, False: 956]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|     12|            auto it = range.begin();
 4014|       |
 4015|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 12]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|     12|            else {
 4020|     12|                m_kind = float_kind::hex_without_prefix;
 4021|     12|            }
 4022|       |
 4023|     12|            return read_hex(ranges::subrange{it, range.end()});
 4024|     12|        }
 4025|    964|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 956]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    956|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 956]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    956|        m_kind = float_kind::generic;
 4041|    956|        return read_regular(range);
 4042|    956|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    968|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    968|                    auto res = read_all(rr);
 3716|    968|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    968|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 968]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    968|                    return res;
 3722|    968|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    968|{
 1827|    968|    return ranges::next(range.begin(), range.end());
 1828|    968|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    968|    {
  313|    968|        ranges::advance(x, bound);
  314|    968|        return x;
  315|    968|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    968|    {
  275|    968|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    968|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    968|    {
 1565|    968|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    968|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    968|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|    968|    {
 1609|    968|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    968|                      ranges::sized_range<Range>) {
 1614|    968|            m_storage.reset();
 1615|    968|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    968|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    958|    {
 3654|    958|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    958|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 958]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    958|        return read_source_impl(range);
 3660|    958|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    968|    {
 3680|    968|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    968|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    968|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    968|        const std::ptrdiff_t sign_len =
 3683|    968|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 968]
  ------------------
 3684|       |
 3685|    968|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    968|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    968|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    968|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    968|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 968, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    968|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    968|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    968|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    968|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    968|    }                                                  \
  |  |  |  | 3667|    968|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    968|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    180|    {
 4159|    180|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    180|#if !SCN_DISABLE_LOCALE
 4162|    180|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 10, False: 170]
  ------------------
 4163|     10|            return read_impl<Range>(
 4164|     10|                range, rd,
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     10|                },
 4168|     10|                value, loc);
 4169|     10|        }
 4170|    170|#endif
 4171|       |
 4172|    170|        return read_impl<Range>(
 4173|    170|            range, rd,
 4174|    170|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    170|                return r.read_source(SCN_FWD(args)...);
 4176|    170|            },
 4177|    170|            value);
 4178|    180|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    180|    {
 4195|    180|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    180|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 0]
  |  |  ------------------
  ------------------
 4197|    180|            return unexpected(r.error());
 4198|    180|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    170|        : m_fptr([](storage fn,
  743|    170|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    170|              cvref<T> obj = *get<T>(fn);
  745|    170|              if constexpr (std::is_void_v<R>) {
  746|    170|                  obj(static_cast<decltype(args)>(args)...);
  747|    170|              }
  748|    170|              else {
  749|    170|                  return obj(static_cast<decltype(args)>(args)...);
  750|    170|              }
  751|    170|          }),
  752|    170|          m_storage(std::addressof(f))
  753|    170|    {
  754|    170|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    170|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    170|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    170|              else {
  749|    170|                  return obj(static_cast<decltype(args)>(args)...);
  750|    170|              }
  751|    170|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    170|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    170|        else if constexpr (std::is_object_v<T>) {
  688|    170|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    170|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    170|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    170|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    170|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    170|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    170|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    170|        {
  662|    170|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    374|    {
 4159|    374|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    374|#if !SCN_DISABLE_LOCALE
 4162|    374|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 18, False: 356]
  ------------------
 4163|     18|            return read_impl<Range>(
 4164|     18|                range, rd,
 4165|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     18|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     18|                },
 4168|     18|                value, loc);
 4169|     18|        }
 4170|    356|#endif
 4171|       |
 4172|    356|        return read_impl<Range>(
 4173|    356|            range, rd,
 4174|    356|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    356|                return r.read_source(SCN_FWD(args)...);
 4176|    356|            },
 4177|    356|            value);
 4178|    374|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    976|    {
 4195|    976|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    976|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 968]
  |  |  ------------------
  ------------------
 4197|      8|            return unexpected(r.error());
 4198|      8|        }
 4199|       |
 4200|    968|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    968|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    968|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    968|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    968|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 968, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    968|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    968|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    968|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    968|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    968|    }                                                  \
  |  |  |  | 3667|    968|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    968|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     18|        : m_fptr([](storage fn,
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|     18|              if constexpr (std::is_void_v<R>) {
  746|     18|                  obj(static_cast<decltype(args)>(args)...);
  747|     18|              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
  752|     18|          m_storage(std::addressof(f))
  753|     18|    {
  754|     18|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     18|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     18|        else if constexpr (std::is_object_v<T>) {
  688|     18|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     18|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     18|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     18|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     18|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     18|        {
  662|     18|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    356|        : m_fptr([](storage fn,
  743|    356|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    356|              cvref<T> obj = *get<T>(fn);
  745|    356|              if constexpr (std::is_void_v<R>) {
  746|    356|                  obj(static_cast<decltype(args)>(args)...);
  747|    356|              }
  748|    356|              else {
  749|    356|                  return obj(static_cast<decltype(args)>(args)...);
  750|    356|              }
  751|    356|          }),
  752|    356|          m_storage(std::addressof(f))
  753|    356|    {
  754|    356|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    356|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    356|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    356|              else {
  749|    356|                  return obj(static_cast<decltype(args)>(args)...);
  750|    356|              }
  751|    356|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    356|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    356|        else if constexpr (std::is_object_v<T>) {
  688|    356|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    356|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    356|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    356|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    356|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    356|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    356|        {
  662|    356|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5797|  5.84k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  5.84k|                       std::is_same_v<T, std::wstring>) {
 5816|  5.84k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  5.84k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  17.5k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  15.7k|    {
 3029|  15.7k|        reader_error_handler eh{};
 3030|  15.7k|        get_derived().check_specs_impl(specs, eh);
 3031|  15.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 15.4k]
  |  |  ------------------
  ------------------
 3032|    234|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    234|        }
 3034|  15.4k|        return {};
 3035|  15.7k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  15.7k|    {
 3040|  15.7k|        return static_cast<Derived&>(*this);
 3041|  15.7k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  15.7k|    {
 5199|  15.7k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  15.7k|        SCN_GCC_PUSH
 5202|  15.7k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  15.7k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  15.7k|        SCN_CLANG_PUSH
 5206|  15.7k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  15.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  15.7k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 228, False: 15.4k]
  ------------------
 5210|  1.49k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.49k, False: 14.2k]
  ------------------
 5211|  1.49k|                m_type = reader_type::word;
 5212|  1.49k|                break;
 5213|       |
 5214|    222|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 222, False: 15.4k]
  ------------------
 5215|    222|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 72, False: 150]
  ------------------
 5216|    222|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 102, False: 48]
  ------------------
 5217|    174|                    m_type = reader_type::custom_word;
 5218|    174|                }
 5219|     48|                else {
 5220|     48|                    m_type = reader_type::word;
 5221|     48|                }
 5222|    222|                break;
 5223|      0|            }
 5224|       |
 5225|     54|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 54, False: 15.6k]
  ------------------
 5226|     54|                m_type = reader_type::character;
 5227|     54|                break;
 5228|       |
 5229|    720|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 720, False: 14.9k]
  ------------------
 5230|    720|                m_type = reader_type::character_set;
 5231|    720|                break;
 5232|       |
 5233|  12.6k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 12.6k, False: 3.09k]
  ------------------
 5234|  12.6k|                m_type = reader_type::regex;
 5235|  12.6k|                break;
 5236|       |
 5237|    378|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 378, False: 15.3k]
  ------------------
 5238|    378|                m_type = reader_type::regex_escaped;
 5239|    378|                break;
 5240|  15.7k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  15.7k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  20.1k|    {
 5248|  20.1k|        return m_type == reader_type::word;
 5249|  20.1k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  8.64k|{
 1132|  8.64k|    auto it = src.begin();
 1133|  72.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 66.4k, False: 6.38k]
  ------------------
 1134|  66.4k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  66.4k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 66.4k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  66.4k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 66.4k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  66.4k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  66.4k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  66.4k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.26k, False: 64.2k]
  ------------------
 1144|  2.26k|            return false;
 1145|  2.26k|        }
 1146|  64.2k|        it += len;
 1147|  64.2k|    }
 1148|  6.38k|    return true;
 1149|  8.64k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    172|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    172|    else {
 2991|    172|        return transcode_impl(source.view(), dest);
 2992|    172|    }
 2993|       |
 2994|      0|    return {};
 2995|    172|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  1.59k|{
 2957|  1.59k|    dst.clear();
 2958|  1.59k|    transcode_valid_to_string(src, dst);
 2959|  1.59k|    return {};
 2960|  1.59k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  1.59k|{
 1391|  1.59k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  1.59k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1403|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1404|       |        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|  1.59k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|  1.59k|        if constexpr (sizeof(DestCharT) == 1) {
 1419|  1.59k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|  1.59k|    }
 1425|       |
 1426|  1.59k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  1.59k|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1281|  1.59k|{
 1282|  1.59k|    static_assert(sizeof(SourceCharT) == 4);
 1283|  1.59k|    static_assert(sizeof(DestCharT) == 1);
 1284|       |
 1285|  10.5k|    for (auto cp : src) {
  ------------------
  |  Branch (1285:18): [True: 10.5k, False: 1.59k]
  ------------------
 1286|  10.5k|        const auto u32cp = static_cast<uint32_t>(cp);
 1287|  10.5k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1288|       |            // Replacement character
 1289|      0|            dest.push_back(static_cast<char>(0xef));
 1290|      0|            dest.push_back(static_cast<char>(0xbf));
 1291|      0|            dest.push_back(static_cast<char>(0xbd));
 1292|      0|        }
 1293|  10.5k|        else if (cp < 128) {
  ------------------
  |  Branch (1293:18): [True: 8.66k, False: 1.89k]
  ------------------
 1294|  8.66k|            dest.push_back(static_cast<char>(cp));
 1295|  8.66k|        }
 1296|  1.89k|        else if (cp < 2048) {
  ------------------
  |  Branch (1296:18): [True: 212, False: 1.67k]
  ------------------
 1297|    212|            dest.push_back(
 1298|    212|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1299|    212|            dest.push_back(
 1300|    212|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1301|    212|        }
 1302|  1.67k|        else if (cp < 65536) {
  ------------------
  |  Branch (1302:18): [True: 1.19k, False: 482]
  ------------------
 1303|  1.19k|            dest.push_back(
 1304|  1.19k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1305|  1.19k|            dest.push_back(static_cast<char>(
 1306|  1.19k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1307|  1.19k|            dest.push_back(
 1308|  1.19k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1309|  1.19k|        }
 1310|    482|        else {
 1311|    482|            dest.push_back(
 1312|    482|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1313|    482|            dest.push_back(static_cast<char>(
 1314|    482|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1315|    482|            dest.push_back(static_cast<char>(
 1316|    482|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1317|    482|            dest.push_back(
 1318|    482|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1319|    482|        }
 1320|  10.5k|    }
 1321|  1.59k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|    720|        {
 5092|    720|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 198, False: 522]
  ------------------
 5093|    198|                return {};
 5094|    198|            }
 5095|       |
 5096|    522|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|    522|            auto it = detail::to_address(charset_string.begin());
 5098|    522|            auto set = detail::parse_presentation_set(
 5099|    522|                it, detail::to_address(charset_string.end()), nonascii);
 5100|    522|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 522]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|    522|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    522|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|    522|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    522|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|    522|            std::sort(nonascii.extra_ranges.begin(),
 5107|    522|                      nonascii.extra_ranges.end());
 5108|    522|            return {};
 5109|    522|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|  6.33k|        {
 5127|  6.33k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 1.90k, False: 4.42k]
  ------------------
 5128|  1.90k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  1.90k|            }
 5130|       |
 5131|  4.42k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|  6.33k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  1.90k|        {
 5075|       |            // TODO: binary search?
 5076|  1.90k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 1.90k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  1.90k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  1.90k|            return std::find_if(
 5082|  1.90k|                       nonascii.extra_ranges.begin(),
 5083|  1.90k|                       nonascii.extra_ranges.end(),
 5084|  1.90k|                       [cp_val](const auto& pair) noexcept {
 5085|  1.90k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  1.90k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  1.90k|                       }) != nonascii.extra_ranges.end();
 5088|  1.90k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  20.6k|                       [cp_val](const auto& pair) noexcept {
 5085|  20.6k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 20.4k, False: 216]
  ------------------
 5086|  20.6k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 1.83k, False: 18.5k]
  ------------------
 5087|  20.6k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  6.02k|        {
 5065|  6.02k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  6.02k|            const auto val =
 5067|  6.02k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  6.02k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  6.02k|                    (val % 8)) &
 5070|  6.02k|                   1u;
 5071|  6.02k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  1.60k|        {
 5118|  1.60k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 12, False: 1.59k]
  ------------------
 5119|     12|                return false;
 5120|     12|            }
 5121|       |
 5122|  1.59k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  1.60k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|    720|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    298|    {
 5266|    298|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    298|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    298|        return read_impl(range, specs, value);
 5268|    298|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    298|    {
 5284|    298|        SCN_CLANG_PUSH
 5285|    298|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    298|        switch (m_type) {
 5288|    160|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 160, False: 138]
  ------------------
 5289|    160|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 20, False: 278]
  ------------------
 5292|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     20|                                                                   value);
 5294|       |
 5295|     16|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 16, False: 282]
  ------------------
 5296|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     96|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 96, False: 202]
  ------------------
 5299|     96|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     96|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 296]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 4, False: 294]
  ------------------
 5309|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      4|                    range,
 5311|      4|                    get_unescaped_regex_pattern(
 5312|      4|                        specs.charset_string<SourceCharT>()),
 5313|      4|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 298]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    298|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    298|        }
 5320|       |
 5321|    298|        SCN_CLANG_POP
 5322|    298|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    160|    {
 4809|    160|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    160|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    196|{
 4741|    196|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    196|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    196|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 108, False: 88]
  ------------------
 4745|    108|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    108|                                     "Invalid encoding in scanned string");
 4747|    108|    }
 4748|     88|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     88|    static_cast<    \
  |  |  929|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     88|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     88|    return SCN_MOVE(result);
  ------------------
  |  |  928|     88|    static_cast<    \
  |  |  929|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     88|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    480|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    480|    else {
 2085|    480|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|    480|        return read_until_code_point(
 2097|    480|            ranges::subrange{it, range.end()},
 2098|    480|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    480|    }
 2100|    480|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    480|{
 2049|    480|    auto it = range.begin();
 2050|  15.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 15.0k, False: 396]
  ------------------
 2051|  15.0k|        const auto val =
 2052|  15.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  15.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  15.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.0k, False: 0]
  |  |  ------------------
  ------------------
 2054|  15.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  15.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  15.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 84, False: 14.9k]
  ------------------
 2057|     84|                return it;
 2058|     84|            }
 2059|  15.0k|        }
 2060|  14.9k|        it = val.iterator;
 2061|  14.9k|    }
 2062|       |
 2063|    396|    return it;
 2064|    480|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    480|        : m_fptr([](storage fn,
  743|    480|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    480|              cvref<T> obj = *get<T>(fn);
  745|    480|              if constexpr (std::is_void_v<R>) {
  746|    480|                  obj(static_cast<decltype(args)>(args)...);
  747|    480|              }
  748|    480|              else {
  749|    480|                  return obj(static_cast<decltype(args)>(args)...);
  750|    480|              }
  751|    480|          }),
  752|    480|          m_storage(std::addressof(f))
  753|    480|    {
  754|    480|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  15.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.0k|              else {
  749|  15.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.0k|              }
  751|  15.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  15.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.0k|        else if constexpr (std::is_object_v<T>) {
  688|  15.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.0k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  15.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    480|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    480|        {
  662|    480|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     20|    {
 4830|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 20, False: 0]
  ------------------
 4831|     20|            return read_string_impl(
 4832|     20|                range,
 4833|     20|                read_until_code_unit(
 4834|     20|                    range,
 4835|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     20|                        SourceCharT ch) { return ch == until; }),
 4837|     20|                value);
 4838|     20|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     16|    {
 4936|     16|        return read_impl(
 4937|     16|            range,
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
 4941|     16|            detail::priority_tag<1>{});
 4942|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     16|    {
 4963|     16|        return read_cb(range);
 4964|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     48|{
 1827|     48|    return ranges::next(range.begin(), range.end());
 1828|     48|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     48|    {
  313|     48|        ranges::advance(x, bound);
  314|     48|        return x;
  315|     48|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     48|    {
  275|     48|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     48|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     48|    {
  203|    684|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 636, False: 48]
  ------------------
  204|    636|            ++i;
  205|    636|        }
  206|     48|    }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|     96|    {
 5037|     96|        auto it = read_source_impl(range, {specs});
 5038|     96|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 84]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|     84|        return read_string_impl(range, *it, value);
 5043|     96|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    288|    {
 5142|    288|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    288|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    288|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    288|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    288|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 186, False: 102]
  ------------------
 5152|    186|            const auto cb = [&](char32_t cp) {
 5153|    186|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    186|            };
 5155|       |
 5156|    186|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 150, False: 36]
  ------------------
 5157|    150|                auto it = read_until_code_point(range, cb);
 5158|    150|                return check_nonempty(it, range);
 5159|    150|            }
 5160|     36|            auto it = read_while_code_point(range, cb);
 5161|     36|            return check_nonempty(it, range);
 5162|    186|        }
 5163|       |
 5164|    102|        const auto cb = [&](SourceCharT ch) {
 5165|    102|            return cb_wrapper.on_ascii_only(ch);
 5166|    102|        };
 5167|       |
 5168|    102|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 66, False: 36]
  ------------------
 5169|     66|            auto it = read_until_code_unit(range, cb);
 5170|     66|            return check_nonempty(it, range);
 5171|     66|        }
 5172|     36|        auto it = read_while_code_unit(range, cb);
 5173|     36|        return check_nonempty(it, range);
 5174|    102|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    186|        : m_fptr([](storage fn,
  743|    186|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    186|              cvref<T> obj = *get<T>(fn);
  745|    186|              if constexpr (std::is_void_v<R>) {
  746|    186|                  obj(static_cast<decltype(args)>(args)...);
  747|    186|              }
  748|    186|              else {
  749|    186|                  return obj(static_cast<decltype(args)>(args)...);
  750|    186|              }
  751|    186|          }),
  752|    186|          m_storage(std::addressof(f))
  753|    186|    {
  754|    186|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  1.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.03k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.03k|              else {
  749|  1.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.03k|              }
  751|  1.03k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.03k|    {
  684|  1.03k|        if constexpr (std::is_const_v<T>) {
  685|  1.03k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.03k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  1.03k|            const auto cb = [&](char32_t cp) {
 5153|  1.03k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  1.03k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    186|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    186|        {
  667|    186|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    288|    {
 5180|    288|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 36, False: 252]
  ------------------
 5181|     36|            return unexpected_scan_error(
 5182|     36|                scan_error::invalid_scanned_value,
 5183|     36|                "No characters matched in [character set]");
 5184|     36|        }
 5185|       |
 5186|    252|        return it;
 5187|    288|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    102|        : m_fptr([](storage fn,
  743|    102|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    102|              cvref<T> obj = *get<T>(fn);
  745|    102|              if constexpr (std::is_void_v<R>) {
  746|    102|                  obj(static_cast<decltype(args)>(args)...);
  747|    102|              }
  748|    102|              else {
  749|    102|                  return obj(static_cast<decltype(args)>(args)...);
  750|    102|              }
  751|    102|          }),
  752|    102|          m_storage(std::addressof(f))
  753|    102|    {
  754|    102|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    336|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    336|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    336|              else {
  749|    336|                  return obj(static_cast<decltype(args)>(args)...);
  750|    336|              }
  751|    336|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    336|    {
  684|    336|        if constexpr (std::is_const_v<T>) {
  685|    336|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    336|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5164|    336|        const auto cb = [&](SourceCharT ch) {
 5165|    336|            return cb_wrapper.on_ascii_only(ch);
 5166|    336|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    102|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    102|        {
  667|    102|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     84|{
 4741|     84|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     84|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     84|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 84]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     84|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     84|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     84|    return SCN_MOVE(result);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     84|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      6|    {
 4880|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|     18|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|     18|        else {
 4909|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 18, False: 0]
  ------------------
 4910|     18|                return unexpected_scan_error(
 4911|     18|                    scan_error::invalid_scanned_value,
 4912|     18|                    "Cannot use regex with a non-contiguous source "
 4913|     18|                    "range");
 4914|     18|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  4.85k|    {
 5266|  4.85k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.85k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  4.85k|        return read_impl(range, specs, value);
 5268|  4.85k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  4.85k|    {
 5284|  4.85k|        SCN_CLANG_PUSH
 5285|  4.85k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  4.85k|        switch (m_type) {
 5288|    352|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352, False: 4.50k]
  ------------------
 5289|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 4.82k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 4.85k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    144|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 144, False: 4.71k]
  ------------------
 5299|    144|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    144|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.20k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.20k, False: 654]
  ------------------
 5304|  4.20k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.20k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.20k|                    specs.regexp_flags, value);
 5307|       |
 5308|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 122, False: 4.73k]
  ------------------
 5309|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    122|                    range,
 5311|    122|                    get_unescaped_regex_pattern(
 5312|    122|                        specs.charset_string<SourceCharT>()),
 5313|    122|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 4.85k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  4.85k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  4.85k|        }
 5320|       |
 5321|  4.85k|        SCN_CLANG_POP
 5322|  4.85k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    954|    {
 4809|    954|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    954|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    990|{
 4741|    990|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    990|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    990|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 362, False: 628]
  ------------------
 4745|    362|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    362|                                     "Invalid encoding in scanned string");
 4747|    362|    }
 4748|    628|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    628|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    628|    return SCN_MOVE(result);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    628|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.42k|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|  1.42k|    else {
 3005|  1.42k|        return transcode_impl(source.view(), dest);
 3006|  1.42k|    }
 3007|       |
 3008|      0|    return {};
 3009|  1.42k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.86k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  2.86k|    else {
 2085|  2.86k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  2.86k|        return read_until_code_point(
 2097|  2.86k|            ranges::subrange{it, range.end()},
 2098|  2.86k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  2.86k|    }
 2100|  2.86k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.86k|        : m_fptr([](storage fn,
  743|  2.86k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.86k|              cvref<T> obj = *get<T>(fn);
  745|  2.86k|              if constexpr (std::is_void_v<R>) {
  746|  2.86k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.86k|              }
  748|  2.86k|              else {
  749|  2.86k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.86k|              }
  751|  2.86k|          }),
  752|  2.86k|          m_storage(std::addressof(f))
  753|  2.86k|    {
  754|  2.86k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  55.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.2k|              else {
  749|  55.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.2k|              }
  751|  55.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  55.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.2k|        else if constexpr (std::is_object_v<T>) {
  688|  55.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.2k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  55.2k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.86k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.86k|        {
  662|  2.86k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     36|    {
 4830|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 36, False: 0]
  ------------------
 4831|     36|            return read_string_impl(
 4832|     36|                range,
 4833|     36|                read_until_code_unit(
 4834|     36|                    range,
 4835|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     36|                        SourceCharT ch) { return ch == until; }),
 4837|     36|                value);
 4838|     36|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    144|    {
 5037|    144|        auto it = read_source_impl(range, {specs});
 5038|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 126]
  |  |  ------------------
  ------------------
 5039|     18|            return unexpected(it.error());
 5040|     18|        }
 5041|       |
 5042|    126|        return read_string_impl(range, *it, value);
 5043|    144|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|    432|    {
 5142|    432|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    432|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    432|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    432|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    432|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 336, False: 96]
  ------------------
 5152|    336|            const auto cb = [&](char32_t cp) {
 5153|    336|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    336|            };
 5155|       |
 5156|    336|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 126, False: 210]
  ------------------
 5157|    126|                auto it = read_until_code_point(range, cb);
 5158|    126|                return check_nonempty(it, range);
 5159|    126|            }
 5160|    210|            auto it = read_while_code_point(range, cb);
 5161|    210|            return check_nonempty(it, range);
 5162|    336|        }
 5163|       |
 5164|     96|        const auto cb = [&](SourceCharT ch) {
 5165|     96|            return cb_wrapper.on_ascii_only(ch);
 5166|     96|        };
 5167|       |
 5168|     96|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 42, False: 54]
  ------------------
 5169|     42|            auto it = read_until_code_unit(range, cb);
 5170|     42|            return check_nonempty(it, range);
 5171|     42|        }
 5172|     54|        auto it = read_while_code_unit(range, cb);
 5173|     54|        return check_nonempty(it, range);
 5174|     96|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    336|        : m_fptr([](storage fn,
  743|    336|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    336|              cvref<T> obj = *get<T>(fn);
  745|    336|              if constexpr (std::is_void_v<R>) {
  746|    336|                  obj(static_cast<decltype(args)>(args)...);
  747|    336|              }
  748|    336|              else {
  749|    336|                  return obj(static_cast<decltype(args)>(args)...);
  750|    336|              }
  751|    336|          }),
  752|    336|          m_storage(std::addressof(f))
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  5.29k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.29k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.29k|              else {
  749|  5.29k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.29k|              }
  751|  5.29k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  5.29k|    {
  684|  5.29k|        if constexpr (std::is_const_v<T>) {
  685|  5.29k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.29k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  5.29k|            const auto cb = [&](char32_t cp) {
 5153|  5.29k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  5.29k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    336|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    336|        {
  667|    336|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|    432|    {
 5180|    432|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 54, False: 378]
  ------------------
 5181|     54|            return unexpected_scan_error(
 5182|     54|                scan_error::invalid_scanned_value,
 5183|     54|                "No characters matched in [character set]");
 5184|     54|        }
 5185|       |
 5186|    378|        return it;
 5187|    432|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5165|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5166|  1.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.08k|{
 4741|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.08k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.08k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 284, False: 796]
  ------------------
 4745|    284|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    284|                                     "Invalid encoding in scanned string");
 4747|    284|    }
 4748|    796|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    796|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 796]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    796|    return SCN_MOVE(result);
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    796|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  4.32k|    {
 4880|  4.32k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 954]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.37k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    954|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    954|        return read_string_impl(range, it, value);
 4882|  4.32k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|  12.9k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  12.9k|        else {
 4909|  12.9k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 12.9k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  12.9k|            auto input = get_as_contiguous(range);
 4917|  12.9k|            SCN_TRY(it,
  ------------------
  |  | 3668|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.1k, False: 2.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.1k|    }                                                  \
  |  |  |  | 3667|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  2.86k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  2.86k|            return ranges::next(range.begin(),
 4920|  2.86k|                                ranges::distance(input.begin(), it));
 4921|  12.9k|        }
 4922|  12.9k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  12.9k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  12.9k|                  ranges::sized_range<Range>) {
  961|  12.9k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  12.9k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  12.9k|{
 1065|  12.9k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  12.9k|                  ranges::sized_range<Range>) {
 1069|  12.9k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  12.9k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  12.9k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  12.9k|                  ranges::sized_range<Range>) {
  983|  12.9k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  12.9k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  12.9k|{
 4335|  12.9k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  12.9k|                  ranges::borrowed_range<Input> &&
 4337|  12.9k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  12.9k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  12.9k|    std::basic_regex<CharT> re{};
 4341|  12.9k|    try {
 4342|  12.9k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  12.9k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  12.9k|                                     re_flags | std::regex_constants::nosubs};
 4345|  12.9k|    }
 4346|  12.9k|    catch (const std::regex_error& err) {
 4347|  4.60k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  4.60k|                                     "Invalid regex");
 4349|  4.60k|    }
 4350|       |
 4351|  8.37k|    std::match_results<const CharT*> matches{};
 4352|  8.37k|    try {
 4353|  8.37k|        bool found = std::regex_search(input.data(),
 4354|  8.37k|                                       input.data() + input.size(), matches, re,
 4355|  8.37k|                                       std::regex_constants::match_continuous);
 4356|  8.37k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 5.50k, False: 2.86k]
  |  Branch (4356:23): [True: 0, False: 2.86k]
  ------------------
 4357|  5.41k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  5.41k|                                         "Regular expression didn't match");
 4359|  5.41k|        }
 4360|  8.37k|    }
 4361|  8.37k|    catch (const std::regex_error& err) {
 4362|     90|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|     90|                                     "Regex matching failed with an error");
 4364|     90|    }
 4365|       |
 4366|  2.86k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  8.37k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  5.84k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  5.84k|                       std::is_same_v<T, std::wstring>) {
 5816|  5.84k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  5.84k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    172|{
 2982|    172|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    172|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 172, False: 0]
  ------------------
 2984|    172|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    172|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    172|    return {};
 2995|    172|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    298|    {
 5266|    298|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    298|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    298|        return read_impl(range, specs, value);
 5268|    298|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    298|    {
 5284|    298|        SCN_CLANG_PUSH
 5285|    298|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    298|        switch (m_type) {
 5288|    160|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 160, False: 138]
  ------------------
 5289|    160|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 20, False: 278]
  ------------------
 5292|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     20|                                                                   value);
 5294|       |
 5295|     16|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 16, False: 282]
  ------------------
 5296|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     96|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 96, False: 202]
  ------------------
 5299|     96|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     96|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 296]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 4, False: 294]
  ------------------
 5309|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      4|                    range,
 5311|      4|                    get_unescaped_regex_pattern(
 5312|      4|                        specs.charset_string<SourceCharT>()),
 5313|      4|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 298]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    298|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    298|        }
 5320|       |
 5321|    298|        SCN_CLANG_POP
 5322|    298|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    160|    {
 4809|    160|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    160|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    196|{
 4741|    196|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    196|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    196|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 108, False: 88]
  ------------------
 4745|    108|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    108|                                     "Invalid encoding in scanned string");
 4747|    108|    }
 4748|     88|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     88|    static_cast<    \
  |  |  929|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     88|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     88|    return SCN_MOVE(result);
  ------------------
  |  |  928|     88|    static_cast<    \
  |  |  929|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     88|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     20|    {
 4830|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 20, False: 0]
  ------------------
 4831|     20|            return read_string_impl(
 4832|     20|                range,
 4833|     20|                read_until_code_unit(
 4834|     20|                    range,
 4835|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     20|                        SourceCharT ch) { return ch == until; }),
 4837|     20|                value);
 4838|     20|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     16|    {
 4936|     16|        return read_impl(
 4937|     16|            range,
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
 4941|     16|            detail::priority_tag<1>{});
 4942|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     16|    {
 4963|     16|        return read_cb(range);
 4964|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|     96|    {
 5037|     96|        auto it = read_source_impl(range, {specs});
 5038|     96|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 84]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|     84|        return read_string_impl(range, *it, value);
 5043|     96|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     84|{
 4741|     84|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     84|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     84|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 84]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     84|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     84|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     84|    return SCN_MOVE(result);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     84|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      6|    {
 4880|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  4.85k|    {
 5266|  4.85k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.85k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  4.85k|        return read_impl(range, specs, value);
 5268|  4.85k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  4.85k|    {
 5284|  4.85k|        SCN_CLANG_PUSH
 5285|  4.85k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  4.85k|        switch (m_type) {
 5288|    352|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352, False: 4.50k]
  ------------------
 5289|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 4.82k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 4.85k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    144|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 144, False: 4.71k]
  ------------------
 5299|    144|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    144|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.20k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.20k, False: 654]
  ------------------
 5304|  4.20k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.20k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.20k|                    specs.regexp_flags, value);
 5307|       |
 5308|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 122, False: 4.73k]
  ------------------
 5309|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    122|                    range,
 5311|    122|                    get_unescaped_regex_pattern(
 5312|    122|                        specs.charset_string<SourceCharT>()),
 5313|    122|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 4.85k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  4.85k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  4.85k|        }
 5320|       |
 5321|  4.85k|        SCN_CLANG_POP
 5322|  4.85k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    954|    {
 4809|    954|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    954|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    990|{
 4741|    990|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    990|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    990|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 362, False: 628]
  ------------------
 4745|    362|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    362|                                     "Invalid encoding in scanned string");
 4747|    362|    }
 4748|    628|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    628|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    628|    return SCN_MOVE(result);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    628|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.42k|{
 3001|  1.42k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  1.42k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  1.42k|    return {};
 3009|  1.42k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     36|    {
 4830|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 36, False: 0]
  ------------------
 4831|     36|            return read_string_impl(
 4832|     36|                range,
 4833|     36|                read_until_code_unit(
 4834|     36|                    range,
 4835|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     36|                        SourceCharT ch) { return ch == until; }),
 4837|     36|                value);
 4838|     36|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    144|    {
 5037|    144|        auto it = read_source_impl(range, {specs});
 5038|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 126]
  |  |  ------------------
  ------------------
 5039|     18|            return unexpected(it.error());
 5040|     18|        }
 5041|       |
 5042|    126|        return read_string_impl(range, *it, value);
 5043|    144|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.08k|{
 4741|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.08k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.08k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 284, False: 796]
  ------------------
 4745|    284|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    284|                                     "Invalid encoding in scanned string");
 4747|    284|    }
 4748|    796|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    796|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 796]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    796|    return SCN_MOVE(result);
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    796|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  4.32k|    {
 4880|  4.32k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 954]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.37k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    954|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    954|        return read_string_impl(range, it, value);
 4882|  4.32k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|  5.84k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  5.84k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  5.84k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  5.84k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|    298|    {
 5266|    298|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    298|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    298|        return read_impl(range, specs, value);
 5268|    298|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|    298|    {
 5284|    298|        SCN_CLANG_PUSH
 5285|    298|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    298|        switch (m_type) {
 5288|    160|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 160, False: 138]
  ------------------
 5289|    160|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 20, False: 278]
  ------------------
 5292|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     20|                                                                   value);
 5294|       |
 5295|     16|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 16, False: 282]
  ------------------
 5296|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     96|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 96, False: 202]
  ------------------
 5299|     96|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     96|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 296]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 4, False: 294]
  ------------------
 5309|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      4|                    range,
 5311|      4|                    get_unescaped_regex_pattern(
 5312|      4|                        specs.charset_string<SourceCharT>()),
 5313|      4|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 298]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    298|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    298|        }
 5320|       |
 5321|    298|        SCN_CLANG_POP
 5322|    298|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    160|    {
 4816|    160|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    160|                                     value);
 4818|    160|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    196|{
 4762|    196|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    196|    auto src = [&]() {
 4765|    196|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    196|            return make_contiguous_buffer(
 4767|    196|                ranges::subrange{range.begin().base(), result.base()});
 4768|    196|        }
 4769|    196|        else {
 4770|    196|            return make_contiguous_buffer(
 4771|    196|                ranges::subrange{range.begin(), result});
 4772|    196|        }
 4773|    196|    }();
 4774|    196|    using src_type = decltype(src);
 4775|       |
 4776|    196|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    196|    else {
 4789|    196|        const auto view = src.view();
 4790|    196|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    196|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 108, False: 88]
  ------------------
 4793|    108|            return unexpected_scan_error(
 4794|    108|                scan_error::invalid_scanned_value,
 4795|    108|                "Invalid encoding in scanned string_view");
 4796|    108|        }
 4797|       |
 4798|     88|        return SCN_MOVE(result);
  ------------------
  |  |  928|     88|    static_cast<    \
  |  |  929|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    196|    }
 4800|    196|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    196|    auto src = [&]() {
 4765|    196|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    196|            return make_contiguous_buffer(
 4767|    196|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    196|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     20|    {
 4852|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 20, False: 0]
  ------------------
 4853|     20|            return read_string_view_impl(
 4854|     20|                range,
 4855|     20|                read_until_code_unit(
 4856|     20|                    range,
 4857|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     20|                        SourceCharT ch) { return ch == until; }),
 4859|     20|                value);
 4860|     20|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4858|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     16|    {
 4948|     16|        return read_impl(
 4949|     16|            range,
 4950|     16|            [&](const auto& rng) {
 4951|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     16|            },
 4953|     16|            detail::priority_tag<1>{});
 4954|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     16|    {
 4963|     16|        return read_cb(range);
 4964|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     16|            [&](const auto& rng) {
 4951|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|     96|    {
 5051|     96|        auto it = read_source_impl(range, {specs});
 5052|     96|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 84]
  |  |  ------------------
  ------------------
 5053|     12|            return unexpected(it.error());
 5054|     12|        }
 5055|       |
 5056|     84|        return read_string_view_impl(range, *it, value);
 5057|     96|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|     84|{
 4762|     84|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     84|    auto src = [&]() {
 4765|     84|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     84|            return make_contiguous_buffer(
 4767|     84|                ranges::subrange{range.begin().base(), result.base()});
 4768|     84|        }
 4769|     84|        else {
 4770|     84|            return make_contiguous_buffer(
 4771|     84|                ranges::subrange{range.begin(), result});
 4772|     84|        }
 4773|     84|    }();
 4774|     84|    using src_type = decltype(src);
 4775|       |
 4776|     84|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     84|    else {
 4789|     84|        const auto view = src.view();
 4790|     84|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     84|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 84]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|     84|        return SCN_MOVE(result);
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     84|    }
 4800|     84|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|     84|    auto src = [&]() {
 4765|     84|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     84|            return make_contiguous_buffer(
 4767|     84|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|     84|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  4.85k|    {
 5266|  4.85k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.85k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  4.85k|        return read_impl(range, specs, value);
 5268|  4.85k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  4.85k|    {
 5284|  4.85k|        SCN_CLANG_PUSH
 5285|  4.85k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  4.85k|        switch (m_type) {
 5288|    352|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352, False: 4.50k]
  ------------------
 5289|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 4.82k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 4.85k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    144|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 144, False: 4.71k]
  ------------------
 5299|    144|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    144|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.20k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.20k, False: 654]
  ------------------
 5304|  4.20k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.20k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.20k|                    specs.regexp_flags, value);
 5307|       |
 5308|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 122, False: 4.73k]
  ------------------
 5309|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    122|                    range,
 5311|    122|                    get_unescaped_regex_pattern(
 5312|    122|                        specs.charset_string<SourceCharT>()),
 5313|    122|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 4.85k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  4.85k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  4.85k|        }
 5320|       |
 5321|  4.85k|        SCN_CLANG_POP
 5322|  4.85k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    954|    {
 4816|    954|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    954|                                     value);
 4818|    954|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|    990|{
 4762|    990|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    990|    auto src = [&]() {
 4765|    990|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    990|            return make_contiguous_buffer(
 4767|    990|                ranges::subrange{range.begin().base(), result.base()});
 4768|    990|        }
 4769|    990|        else {
 4770|    990|            return make_contiguous_buffer(
 4771|    990|                ranges::subrange{range.begin(), result});
 4772|    990|        }
 4773|    990|    }();
 4774|    990|    using src_type = decltype(src);
 4775|       |
 4776|    990|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    990|    else {
 4789|    990|        const auto view = src.view();
 4790|    990|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    990|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 362, False: 628]
  ------------------
 4793|    362|            return unexpected_scan_error(
 4794|    362|                scan_error::invalid_scanned_value,
 4795|    362|                "Invalid encoding in scanned string_view");
 4796|    362|        }
 4797|       |
 4798|    628|        return SCN_MOVE(result);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    990|    }
 4800|    990|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|    990|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    990|        else {
 4770|    990|            return make_contiguous_buffer(
 4771|    990|                ranges::subrange{range.begin(), result});
 4772|    990|        }
 4773|    990|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     36|    {
 4852|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 36, False: 0]
  ------------------
 4853|     36|            return read_string_view_impl(
 4854|     36|                range,
 4855|     36|                read_until_code_unit(
 4856|     36|                    range,
 4857|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     36|                        SourceCharT ch) { return ch == until; }),
 4859|     36|                value);
 4860|     36|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4858|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|    144|    {
 5051|    144|        auto it = read_source_impl(range, {specs});
 5052|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 126]
  |  |  ------------------
  ------------------
 5053|     18|            return unexpected(it.error());
 5054|     18|        }
 5055|       |
 5056|    126|        return read_string_view_impl(range, *it, value);
 5057|    144|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  1.08k|{
 4762|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.08k|    auto src = [&]() {
 4765|  1.08k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.08k|            return make_contiguous_buffer(
 4767|  1.08k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.08k|        }
 4769|  1.08k|        else {
 4770|  1.08k|            return make_contiguous_buffer(
 4771|  1.08k|                ranges::subrange{range.begin(), result});
 4772|  1.08k|        }
 4773|  1.08k|    }();
 4774|  1.08k|    using src_type = decltype(src);
 4775|       |
 4776|  1.08k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.08k|    else {
 4789|  1.08k|        const auto view = src.view();
 4790|  1.08k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.08k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 284, False: 796]
  ------------------
 4793|    284|            return unexpected_scan_error(
 4794|    284|                scan_error::invalid_scanned_value,
 4795|    284|                "Invalid encoding in scanned string_view");
 4796|    284|        }
 4797|       |
 4798|    796|        return SCN_MOVE(result);
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.08k|    }
 4800|  1.08k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  1.08k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.08k|        else {
 4770|  1.08k|            return make_contiguous_buffer(
 4771|  1.08k|                ranges::subrange{range.begin(), result});
 4772|  1.08k|        }
 4773|  1.08k|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  4.32k|    {
 4891|  4.32k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 954]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.37k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    954|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    954|        return read_string_view_impl(range, it, value);
 4893|  4.32k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|  8.09k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  8.09k|                  ranges::sized_range<Range>) {
 1674|  8.09k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  8.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  8.09k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|  8.09k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  8.09k|    {
 1478|  8.09k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|    918|    {
 4089|    918|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 918]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    918|        return std::copysign(value, T{1.0});
 4093|    918|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|    968|    {
 4089|    968|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 968]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    968|        return std::copysign(value, T{1.0});
 4093|    968|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  5.88k|{
 5784|  5.88k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  5.88k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 654, False: 5.23k]
  ------------------
 5789|    654|        return range.begin();
 5790|    654|    }
 5791|       |
 5792|  5.23k|    return skip_classic_whitespace(range);
 5793|  5.88k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    654|    {
 3517|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    654|        return read_default_with_base(range, value, 10);
 3519|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    654|    {
 3517|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    654|        return read_default_with_base(range, value, 10);
 3519|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5736|  1.19k|    {
 5737|  1.19k|        return true;
 5738|  1.19k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    908|    {
 5754|    908|        detail::format_specs specs{};
 5755|    908|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    908|        std::uintptr_t intvalue{};
 5758|    908|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    908|    }                                                  \
  |  |  |  | 3667|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    908|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3023|  1.51k|    {
 3024|  1.51k|        return true;
 3025|  1.51k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    654|    {
 5493|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    654|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    654|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5337|  1.25k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|  1.05k|    {
 5344|  1.05k|        scan_error err{scan_error::invalid_scanned_value,
 5345|  1.05k|                       "Failed to read boolean"};
 5346|       |
 5347|  1.05k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 926, False: 124]
  ------------------
 5348|    926|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 926]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    926|            else {
 5352|    926|                err = r.error();
 5353|    926|            }
 5354|    926|        }
 5355|       |
 5356|  1.05k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 1.02k, False: 22]
  ------------------
 5357|  1.02k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 1.02k]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|  1.02k|            else {
 5361|  1.02k|                err = r.error();
 5362|  1.02k|            }
 5363|  1.02k|        }
 5364|       |
 5365|  1.05k|        return unexpected(err);
 5366|  1.05k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    970|    {
 5373|    970|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 970]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    970|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 970]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    970|        return unexpected_scan_error(
 5383|    970|            scan_error::invalid_scanned_value,
 5384|    970|            "Failed to read numeric boolean value: No match");
 5385|    970|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|  1.02k|    {
 5391|  1.02k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 1.02k]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|  1.02k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 1.02k]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|  1.02k|        return unexpected_scan_error(
 5401|  1.02k|            scan_error::invalid_scanned_value,
 5402|  1.02k|            "Failed to read textual boolean value: No match");
 5403|  1.02k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  2.05k|{
 2183|  2.05k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    100|    }                                                  \
  |  |  |  | 3667|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.95k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.95k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|  1.95k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|  1.95k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|  1.95k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 0]
  |  |  ------------------
  ------------------
 2190|  1.95k|            return unexpected(parse_error::error);
 2191|  1.95k|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|  1.95k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|    654|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|  1.25k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    654|    {
 4141|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    654|        float_reader<CharT> rd{};
 4144|    654|        return read_impl<Range>(
 4145|    654|            range, rd,
 4146|    654|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    654|                return r.read_source(SCN_FWD(args)...);
 4148|    654|            },
 4149|    654|            value);
 4150|    654|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    654|        : m_fptr([](storage fn,
  743|    654|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    654|              cvref<T> obj = *get<T>(fn);
  745|    654|              if constexpr (std::is_void_v<R>) {
  746|    654|                  obj(static_cast<decltype(args)>(args)...);
  747|    654|              }
  748|    654|              else {
  749|    654|                  return obj(static_cast<decltype(args)>(args)...);
  750|    654|              }
  751|    654|          }),
  752|    654|          m_storage(std::addressof(f))
  753|    654|    {
  754|    654|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    654|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    654|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    654|              else {
  749|    654|                  return obj(static_cast<decltype(args)>(args)...);
  750|    654|              }
  751|    654|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    654|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    654|        else if constexpr (std::is_object_v<T>) {
  688|    654|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    654|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    654|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    654|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    654|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    654|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    654|        {
  662|    654|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    654|    {
 5255|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    654|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    654|    {
 5255|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    654|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    654|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    654|                          basic_contiguous_scan_context<char_type>>) {
 5864|    654|            auto rd = make_reader<T, char_type>();
 5865|    654|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    654|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    654|    {
 5852|    654|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    654|                        .transform_error(make_eof_scan_error));
 5854|    654|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    654|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    654|    {
 5255|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    654|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    654|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   192k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   192k|    static_cast<    \
  |  |  929|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   192k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   192k|          m_current(m_range.begin())
 2867|   192k|    {
 2868|   192k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   413k|    {
 2872|   413k|        return m_current;
 2873|   413k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   299k|    {
 2877|   299k|        return m_range.end();
 2878|   299k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|  77.6k|{
 1209|       |    // TODO: optimize
 1210|  77.6k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  77.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|  77.6k|    auto res = get_next_code_point(str);
 1212|  77.6k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|  77.6k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  82.3k|    {
 2892|  82.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  82.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  82.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  82.3k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 82.3k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  82.3k|        }
 2898|  82.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  82.3k|    static_cast<    \
  |  |  929|  82.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  82.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   137k|    {
 2882|   137k|        return ranges::subrange{begin(), end()};
 2883|   137k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  8.09k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  8.09k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  8.09k|        auto buf = make_contiguous_buffer(range);
 2109|  8.09k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  8.09k|        return ranges::next(range.begin(),
 2111|  8.09k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  8.09k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  5.54k|    {
 6026|  5.54k|        const bool need_skipped_width =
 6027|  5.54k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 52, False: 5.49k]
  |  Branch (6027:33): [True: 5.49k, False: 0]
  ------------------
 6028|  5.54k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  5.54k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 268, False: 5.27k]
  ------------------
 6032|  5.54k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 536, False: 4.74k]
  ------------------
 6033|    804|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    804|                             need_skipped_width);
 6035|    804|        }
 6036|  4.74k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 4.62k, False: 120]
  |  Branch (6036:56): [True: 2.13k, False: 2.48k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.13k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 2.13k, False: 0]
  ------------------
 6040|  2.13k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  2.13k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  2.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  2.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  1.96k|                                  .transform_error(make_eof_scan_error));
 6043|  1.96k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  2.13k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|  2.60k|        return result_type{rng.begin(), 0};
 6059|  4.74k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    804|{
 5940|    804|    using char_type = detail::char_t<Range>;
 5941|    804|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    804|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 542, False: 262]
  ------------------
 5944|    542|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    542|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    542|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 542]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    542|        auto max_width_view = take_width(range, max_width);
 5961|    542|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    542|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 542, False: 0]
  ------------------
 5964|    542|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    542|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    542|    }
 5968|       |
 5969|    262|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    262|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 262]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|    262|    auto max_width_view = take_width(range, max_width);
 5983|    262|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    262|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 262, False: 0]
  ------------------
 5986|    262|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    262|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    262|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    542|        : m_fptr([](storage fn,
  743|    542|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    542|              cvref<T> obj = *get<T>(fn);
  745|    542|              if constexpr (std::is_void_v<R>) {
  746|    542|                  obj(static_cast<decltype(args)>(args)...);
  747|    542|              }
  748|    542|              else {
  749|    542|                  return obj(static_cast<decltype(args)>(args)...);
  750|    542|              }
  751|    542|          }),
  752|    542|          m_storage(std::addressof(f))
  753|    542|    {
  754|    542|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    724|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    724|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    724|              else {
  749|    724|                  return obj(static_cast<decltype(args)>(args)...);
  750|    724|              }
  751|    724|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    724|    {
  684|    724|        if constexpr (std::is_const_v<T>) {
  685|    724|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    724|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|    724|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    542|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    542|        {
  667|    542|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    542|{
 1964|    542|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    542|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    542|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    542|    else {
 1949|    542|        auto first = range.begin();
 1950|    778|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 724, False: 54]
  ------------------
 1951|    724|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 488, False: 236]
  ------------------
 1952|    488|                return first;
 1953|    488|            }
 1954|    724|        }
 1955|     54|        return first;
 1956|    542|    }
 1957|    542|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2798|  5.07k|    {
 2799|  5.07k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  5.07k|                                      m_count};
 2801|  5.07k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2705|  20.1k|    {
 2706|  20.1k|        return view;
 2707|  20.1k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  5.07k|        : m_current(x), m_end(s), m_count(n)
 2370|  5.07k|    {
 2371|  5.07k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  6.51k|        {
 2770|  6.51k|            return !(y == x);
 2771|  6.51k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  12.7k|        {
 2759|  12.7k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 784, False: 11.9k]
  |  Branch (2759:39): [True: 454, False: 330]
  ------------------
 2760|  12.7k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 12.2k]
  ------------------
 2761|  12.7k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|    784|    {
 2410|    784|        return m_multibyte_left;
 2411|    784|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2804|  10.0k|    {
 2805|  10.0k|        return sentinel<true>{m_base.get().end()};
 2806|  10.0k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  10.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  10.0k|    static_cast<    \
  |  |  929|  10.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  8.71k|    {
 2415|  8.71k|        return *m_current;
 2416|  8.71k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  9.79k|    {
 2424|  9.79k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  9.79k|        _increment_current();
 2426|  9.79k|        return *this;
 2427|  9.79k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  9.79k|    {
 2657|  9.79k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 5.52k, False: 4.27k]
  ------------------
 2658|  5.52k|            auto cplen = _get_cp_length_at_current();
 2659|  5.52k|            m_multibyte_left = cplen - 1;
 2660|  5.52k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  5.52k|        }
 2662|  4.27k|        else {
 2663|  4.27k|            --m_multibyte_left;
 2664|  4.27k|        }
 2665|       |
 2666|  9.79k|        ++m_current;
 2667|  9.79k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  5.52k|    {
 2628|  5.52k|        return static_cast<difference_type>(
 2629|  5.52k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  5.52k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  5.52k|    {
 2634|  5.52k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.52k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  5.52k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 3.18k, False: 2.33k]
  ------------------
 2639|  3.18k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  3.18k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  3.18k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  3.18k|        }
 2643|       |
 2644|  2.33k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  2.33k|                                           cplen);
 2646|  2.33k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.33k]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|  2.33k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  2.33k|        return static_cast<difference_type>(
 2652|  2.33k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  2.33k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2024|    262|{
 2025|    262|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    262|    auto it = range.begin();
 2028|    262|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 262, False: 0]
  ------------------
 2029|    262|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    262|                                           needle.size());
 2031|    262|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 52, False: 210]
  ------------------
 2032|     52|            return it;
 2033|     52|        }
 2034|    210|        static_assert(
 2035|    210|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    210|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 210, False: 0]
  ------------------
 2037|    210|            return it;
 2038|    210|        }
 2039|      0|        it = *r;
 2040|      0|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1844|    262|{
 1845|    262|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    262|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    262|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    262|    else {
 1856|    262|        auto it = range.begin();
 1857|    262|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 262]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  1.07k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 866, False: 210]
  ------------------
 1862|    866|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 52, False: 814]
  ------------------
 1863|     52|                return unexpected(eof_error::eof);
 1864|     52|            }
 1865|    866|        }
 1866|       |
 1867|    210|        return it;
 1868|    262|    }
 1869|    262|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    262|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    262|    else {
 1115|    262|        return 0;
 1116|    262|    }
 1117|    262|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.13k|    {
  268|  2.13k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.13k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.13k|    {
  161|  2.13k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.13k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.13k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.13k|        else {
  169|  2.13k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.13k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.13k|        }
  173|  2.13k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2519|  5.83k|    {
 2520|  5.83k|        return !(a == b);
 2521|  5.83k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2511|  5.83k|    {
 2512|  5.83k|        return a.m_current == b.m_current;
 2513|  5.83k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  2.93k|    {
 2821|  2.93k|        return take_width_view{r, n};
 2822|  2.93k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2788|  2.93k|        : m_base(base), m_count(count)
 2789|  2.93k|    {
 2790|  2.93k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2702|  2.93k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  2.13k|{
 2940|  2.13k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 2.13k, False: 0]
  ------------------
 2941|  2.13k|        auto it = read_while_classic_space(range);
 2942|  2.13k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  2.13k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.96k]
  |  |  ------------------
  ------------------
 2944|    174|            return unexpected(e);
 2945|    174|        }
 2946|       |
 2947|  1.96k|        return it;
 2948|  2.13k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  2.13k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  2.13k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  2.13k|    else {
 2114|  2.13k|        auto it = range.begin();
 2115|       |
 2116|  2.13k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  2.13k|            auto seg = get_contiguous_beginning(range);
 2118|  2.13k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  2.13k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 2.13k]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|  2.13k|            ranges::advance(it, seg.size());
 2123|  2.13k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.13k|            return detail::is_cp_space(cp);
 2127|  2.13k|        });
 2128|  2.13k|    }
 2129|  2.13k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  2.13k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  2.13k|    else {
 1058|  2.13k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.13k|    }
 1060|  2.13k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  2.13k|{
 2070|  2.13k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  2.13k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  2.13k|{
 2049|  2.13k|    auto it = range.begin();
 2050|  3.38k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.20k, False: 174]
  ------------------
 2051|  3.20k|        const auto val =
 2052|  3.20k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.20k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.20k, False: 0]
  |  |  ------------------
  ------------------
 2054|  3.20k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.20k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.20k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.96k, False: 1.24k]
  ------------------
 2057|  1.96k|                return it;
 2058|  1.96k|            }
 2059|  3.20k|        }
 2060|  1.24k|        it = val.iterator;
 2061|  1.24k|    }
 2062|       |
 2063|    174|    return it;
 2064|  2.13k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  3.20k|{
 1887|  3.20k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.20k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.20k|    auto it = range.begin();
 1891|  3.20k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.20k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.20k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  3.20k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 2.48k, False: 724]
  ------------------
 1900|  2.48k|        ++it;
 1901|  2.48k|        return {it, string_type(1, *range.begin())};
 1902|  2.48k|    }
 1903|       |
 1904|    724|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|    724|    return {it, string_type{range.begin(), it}};
 1906|  3.20k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  5.34k|{
  944|  5.34k|    return is_range_eof(r.begin(), r.end());
  945|  5.34k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  5.34k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.34k|    {
  937|  5.34k|        return begin == end;
  938|  5.34k|    }
  939|  5.34k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    724|    {
  283|    724|        return n - fn::impl_i_n_s(i, n, bound);
  284|    724|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    724|    {
  227|    724|        constexpr iter_difference_t<I> zero{0};
  228|    724|        iter_difference_t<I> counter{0};
  229|       |
  230|    724|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 724]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    724|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.08k, False: 724]
  |  Branch (237:34): [True: 2.08k, False: 0]
  ------------------
  238|  2.08k|                ++i;
  239|  2.08k|                ++counter;
  240|  2.08k|            }
  241|    724|        }
  242|       |
  243|    724|        return counter;
  244|    724|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1877|  3.20k|    {
 1878|  3.20k|        return !codepoint.empty();
 1879|  3.20k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.13k|        : m_fptr([](storage fn,
  743|  2.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.13k|              cvref<T> obj = *get<T>(fn);
  745|  2.13k|              if constexpr (std::is_void_v<R>) {
  746|  2.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.13k|              }
  748|  2.13k|              else {
  749|  2.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.13k|              }
  751|  2.13k|          }),
  752|  2.13k|          m_storage(std::addressof(f))
  753|  2.13k|    {
  754|  2.13k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.20k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.20k|              else {
  749|  3.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.20k|              }
  751|  3.20k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.20k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.20k|        else if constexpr (std::is_object_v<T>) {
  688|  3.20k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.20k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  3.20k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.20k|            return detail::is_cp_space(cp);
 2127|  3.20k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.13k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.13k|        {
  662|  2.13k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.13k|{
  950|  2.13k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.96k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.96k|    return eof_error::good;
  954|  2.13k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  15.0k|    {
 2402|  15.0k|        return m_current;
 2403|  15.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  15.4k|    {
 2406|  15.4k|        return m_count;
 2407|  15.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  38.9k|    {
 6026|  38.9k|        const bool need_skipped_width =
 6027|  38.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 2.19k, False: 36.7k]
  |  Branch (6027:33): [True: 0, False: 36.7k]
  ------------------
 6028|  38.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  38.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 242, False: 38.7k]
  ------------------
 6032|  38.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 4.39k, False: 34.3k]
  ------------------
 6033|  4.63k|            return skip_fill(rng, specs.precision, specs.fill,
 6034|  4.63k|                             need_skipped_width);
 6035|  4.63k|        }
 6036|  34.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 33.6k, False: 716]
  |  Branch (6036:56): [True: 1.70k, False: 31.8k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.70k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.70k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  3.40k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  3.40k|                            make_eof_scan_error));
 6047|       |
 6048|  3.40k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.07k, False: 628]
  ------------------
 6049|  1.07k|                return result_type{
 6050|  1.07k|                    it,
 6051|  1.07k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.07k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.07k|                                             .view())};
 6054|  1.07k|            }
 6055|    628|            return result_type{it, 0};
 6056|  3.40k|        }
 6057|       |
 6058|  32.6k|        return result_type{rng.begin(), 0};
 6059|  34.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  7.09k|    {
 6068|  7.09k|        const bool need_skipped_width =
 6069|  7.09k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 584, False: 6.50k]
  |  Branch (6069:33): [True: 1.18k, False: 5.32k]
  ------------------
 6070|  7.09k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  7.09k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 316, False: 6.77k]
  ------------------
 6073|  7.09k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 336, False: 6.44k]
  ------------------
 6074|    652|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 248, False: 404]
  ------------------
 6075|    652|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 110, False: 138]
  ------------------
 6076|    110|                return result_type{rng.begin(), 0};
 6077|    110|            }
 6078|    542|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    542|                             specs.fill, need_skipped_width);
 6080|    652|        }
 6081|  6.44k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 6.25k, False: 188]
  ------------------
 6082|  6.44k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 5.92k, False: 330]
  ------------------
 6083|  6.44k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 298, False: 5.62k]
  |  Branch (6083:35): [True: 262, False: 36]
  ------------------
 6084|  5.92k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 634, False: 5.02k]
  ------------------
 6085|  5.66k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 534, False: 100]
  ------------------
 6086|    796|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 534, False: 262]
  ------------------
 6087|    534|                const auto initial_width =
 6088|    534|                    specs.precision - prefix_width - value_width;
 6089|    534|                auto max_width_view = take_width(rng, initial_width);
 6090|    534|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    534|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    534|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    534|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    534|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    534|                                  .transform_error(make_eof_scan_error));
 6092|    534|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    534|            }
 6094|    524|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|    524|                            make_eof_scan_error));
 6096|       |
 6097|    524|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 262, False: 0]
  ------------------
 6098|    262|                return result_type{
 6099|    262|                    it,
 6100|    262|                    calculate_text_width(make_contiguous_buffer(
 6101|    262|                                             ranges::subrange{rng.begin(), it})
 6102|    262|                                             .view())};
 6103|    262|            }
 6104|      0|            return result_type{it, 0};
 6105|    524|        }
 6106|  5.64k|        return result_type{rng.begin(), 0};
 6107|  6.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  13.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.7k|            auto rd = make_reader<T, char_type>();
 6187|  13.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 640]
  |  |  ------------------
  ------------------
 6188|  13.1k|                return unexpected(e);
 6189|  13.1k|            }
 6190|       |
 6191|    640|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    640|    {
 6113|    640|        const bool need_skipped_width =
 6114|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 220, False: 420]
  |  Branch (6114:33): [True: 324, False: 96]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    640|        auto it = rng.begin();
 6118|    640|        std::ptrdiff_t prefix_width = 0;
 6119|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 326, False: 314]
  ------------------
 6120|    326|            auto max_width_view = take_width(rng, specs.precision);
 6121|    326|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    302|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    302|            it = prefix_result.first.base();
 6124|    302|            prefix_width = prefix_result.second;
 6125|    302|        }
 6126|    314|        else {
 6127|    314|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    314|            std::tie(it, prefix_width) = prefix_result;
 6129|    314|        }
 6130|    616|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    616|        std::ptrdiff_t value_width = 0;
 6134|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 302, False: 314]
  ------------------
 6135|    302|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 296]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    296|            const auto initial_width = specs.precision - prefix_width;
 6143|    296|            auto max_width_view =
 6144|    296|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    296|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    296|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    314|        else {
 6150|    314|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 314, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    314|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    314|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    314|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    314|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    314|    }                                                  \
  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  13.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.7k|            auto rd = make_reader<T, char_type>();
 6187|  13.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 640]
  |  |  ------------------
  ------------------
 6188|  13.1k|                return unexpected(e);
 6189|  13.1k|            }
 6190|       |
 6191|    640|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    640|    {
 6113|    640|        const bool need_skipped_width =
 6114|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 220, False: 420]
  |  Branch (6114:33): [True: 324, False: 96]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    640|        auto it = rng.begin();
 6118|    640|        std::ptrdiff_t prefix_width = 0;
 6119|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 326, False: 314]
  ------------------
 6120|    326|            auto max_width_view = take_width(rng, specs.precision);
 6121|    326|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    302|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    302|            it = prefix_result.first.base();
 6124|    302|            prefix_width = prefix_result.second;
 6125|    302|        }
 6126|    314|        else {
 6127|    314|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    314|            std::tie(it, prefix_width) = prefix_result;
 6129|    314|        }
 6130|    616|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    616|        std::ptrdiff_t value_width = 0;
 6134|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 302, False: 314]
  ------------------
 6135|    302|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 296]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    296|            const auto initial_width = specs.precision - prefix_width;
 6143|    296|            auto max_width_view =
 6144|    296|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    296|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    296|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    314|        else {
 6150|    314|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 314, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    314|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    314|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    314|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    314|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    314|    }                                                  \
  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6181|  13.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.6k|            auto rd = make_reader<T, char_type>();
 6187|  13.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 538]
  |  |  ------------------
  ------------------
 6188|  13.1k|                return unexpected(e);
 6189|  13.1k|            }
 6190|       |
 6191|    538|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.6k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5741|  13.6k|    {
 5742|  13.6k|        reader_error_handler eh{};
 5743|  13.6k|        detail::check_pointer_type_specs(specs, eh);
 5744|  13.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 538]
  |  |  ------------------
  ------------------
 5745|  13.1k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  13.1k|        }
 5747|    538|        return {};
 5748|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    538|    {
 6113|    538|        const bool need_skipped_width =
 6114|    538|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 184, False: 354]
  |  Branch (6114:33): [True: 282, False: 72]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    538|        auto it = rng.begin();
 6118|    538|        std::ptrdiff_t prefix_width = 0;
 6119|    538|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 284, False: 254]
  ------------------
 6120|    284|            auto max_width_view = take_width(rng, specs.precision);
 6121|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    268|            it = prefix_result.first.base();
 6124|    268|            prefix_width = prefix_result.second;
 6125|    268|        }
 6126|    254|        else {
 6127|    254|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    254|            std::tie(it, prefix_width) = prefix_result;
 6129|    254|        }
 6130|    522|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    522|        std::ptrdiff_t value_width = 0;
 6134|    522|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 268, False: 254]
  ------------------
 6135|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 264]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    264|            const auto initial_width = specs.precision - prefix_width;
 6143|    264|            auto max_width_view =
 6144|    264|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    264|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    264|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    254|        else {
 6150|    254|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    254|    }                                                  \
  |  | 3667|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    264|    {
 5771|    264|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    264|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    264|        return read_default(range, value, loc);
 5773|    264|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    264|    {
 5754|    264|        detail::format_specs specs{};
 5755|    264|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    264|        std::uintptr_t intvalue{};
 5758|    264|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    264|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    264|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    254|    {
 5771|    254|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    254|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    254|        return read_default(range, value, loc);
 5773|    254|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6181|  13.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.7k|            auto rd = make_reader<T, char_type>();
 6187|  13.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.8k, False: 864]
  |  |  ------------------
  ------------------
 6188|  12.8k|                return unexpected(e);
 6189|  12.8k|            }
 6190|       |
 6191|    864|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.7k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  13.7k|    {
 3029|  13.7k|        reader_error_handler eh{};
 3030|  13.7k|        get_derived().check_specs_impl(specs, eh);
 3031|  13.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.8k, False: 864]
  |  |  ------------------
  ------------------
 3032|  12.8k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  12.8k|        }
 3034|    864|        return {};
 3035|  13.7k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3039|  13.7k|    {
 3040|  13.7k|        return static_cast<Derived&>(*this);
 3041|  13.7k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  13.7k|    {
 5486|  13.7k|        detail::check_bool_type_specs(specs, eh);
 5487|  13.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    864|    {
 6113|    864|        const bool need_skipped_width =
 6114|    864|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 232, False: 632]
  |  Branch (6114:33): [True: 404, False: 228]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    864|        auto it = rng.begin();
 6118|    864|        std::ptrdiff_t prefix_width = 0;
 6119|    864|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 408, False: 456]
  ------------------
 6120|    408|            auto max_width_view = take_width(rng, specs.precision);
 6121|    408|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    408|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    380|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    380|            it = prefix_result.first.base();
 6124|    380|            prefix_width = prefix_result.second;
 6125|    380|        }
 6126|    456|        else {
 6127|    456|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    456|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 456]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    456|            std::tie(it, prefix_width) = prefix_result;
 6129|    456|        }
 6130|    836|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    836|        std::ptrdiff_t value_width = 0;
 6134|    836|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 380, False: 456]
  ------------------
 6135|    380|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 374]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    374|            const auto initial_width = specs.precision - prefix_width;
 6143|    374|            auto max_width_view =
 6144|    374|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    374|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 374, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    374|    }                                                  \
  |  |  |  | 3667|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    456|        else {
 6150|    456|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 456, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    456|    }                                                  \
  |  | 3667|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    374|    {
 5505|    374|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    374|#if !SCN_DISABLE_LOCALE
 5508|    374|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 14, False: 360]
  ------------------
 5509|     14|            return rd.read_localized(range, loc, value);
 5510|     14|        }
 5511|    360|#endif
 5512|       |
 5513|    360|        return rd.read_classic(range, value);
 5514|    374|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5517|    830|    {
 5518|    830|        SCN_GCC_COMPAT_PUSH
 5519|    830|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    830|        switch (specs.type) {
 5522|    218|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 218, False: 612]
  ------------------
 5523|    218|                return bool_reader_base::allow_text;
 5524|       |
 5525|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 12, False: 818]
  ------------------
 5526|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 822]
  ------------------
 5527|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 6, False: 824]
  ------------------
 5528|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 818]
  ------------------
 5529|     82|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 44, False: 786]
  ------------------
 5530|     86|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 4, False: 826]
  ------------------
 5531|     86|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    526|            default:
  ------------------
  |  Branch (5533:13): [True: 526, False: 304]
  ------------------
 5534|    526|                return bool_reader_base::allow_text |
 5535|    526|                       bool_reader_base::allow_numeric;
 5536|    830|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    830|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     14|    {
 5417|     14|        scan_error err{scan_error::invalid_scanned_value,
 5418|     14|                       "Failed to read boolean"};
 5419|       |
 5420|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 10, False: 4]
  ------------------
 5421|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 10]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     10|            else {
 5425|     10|                err = r.error();
 5426|     10|            }
 5427|     10|        }
 5428|       |
 5429|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 12, False: 2]
  ------------------
 5430|     12|            auto stdloc = loc.get<std::locale>();
 5431|     12|            const auto& numpunct =
 5432|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     12|            const auto truename = numpunct.truename();
 5434|     12|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     12|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 12]
  ------------------
 5437|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     12|            else {
 5441|     12|                err = r.error();
 5442|     12|            }
 5443|     12|        }
 5444|       |
 5445|     14|        return unexpected(err);
 5446|     14|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    296|    {
 5373|    296|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 296]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    296|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 296]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    296|        return unexpected_scan_error(
 5383|    296|            scan_error::invalid_scanned_value,
 5384|    296|            "Failed to read numeric boolean value: No match");
 5385|    296|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    592|{
 2135|    592|    auto it = read_code_unit(range);
 2136|    592|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    592|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 592, False: 0]
  |  |  ------------------
  ------------------
 2141|    592|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    592|        return unexpected(parse_error::error);
 2143|    592|    }
 2144|       |
 2145|      0|    return *it;
 2146|    592|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5456|     12|    {
 5457|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     12|        const auto shorter = std::pair{
 5459|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 12, False: 0]
  ------------------
 5460|     12|        const auto longer = std::pair{
 5461|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 12]
  ------------------
 5462|       |
 5463|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 12]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 12]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     12|                                     "read_textual: No match");
 5474|     12|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     24|{
 2168|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     14|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2174|     14|        return unexpected(parse_error::error);
 2175|     14|    }
 2176|      0|    return it;
 2177|     14|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    696|{
 1845|    696|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    696|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    696|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    696|    else {
 1856|    696|        auto it = range.begin();
 1857|    696|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 696]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  3.47k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 2.91k, False: 558]
  ------------------
 1862|  2.91k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 138, False: 2.77k]
  ------------------
 1863|    138|                return unexpected(eof_error::eof);
 1864|    138|            }
 1865|  2.91k|        }
 1866|       |
 1867|    558|        return it;
 1868|    696|    }
 1869|    696|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    696|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    696|    else {
 1115|    696|        return 0;
 1116|    696|    }
 1117|    696|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    360|    {
 5344|    360|        scan_error err{scan_error::invalid_scanned_value,
 5345|    360|                       "Failed to read boolean"};
 5346|       |
 5347|    360|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 286, False: 74]
  ------------------
 5348|    286|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 286]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    286|            else {
 5352|    286|                err = r.error();
 5353|    286|            }
 5354|    286|        }
 5355|       |
 5356|    360|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 336, False: 24]
  ------------------
 5357|    336|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 336]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    336|            else {
 5361|    336|                err = r.error();
 5362|    336|            }
 5363|    336|        }
 5364|       |
 5365|    360|        return unexpected(err);
 5366|    360|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    336|    {
 5391|    336|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 336]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    336|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 336]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    336|        return unexpected_scan_error(
 5401|    336|            scan_error::invalid_scanned_value,
 5402|    336|            "Failed to read textual boolean value: No match");
 5403|    336|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    672|{
 2183|    672|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    672|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    672|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    672|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 544]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|    672|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    544|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    544|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|    544|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|    544|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|    544|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 544, False: 0]
  |  |  ------------------
  ------------------
 2190|    544|            return unexpected(parse_error::error);
 2191|    544|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|    544|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    456|    {
 5505|    456|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    456|#if !SCN_DISABLE_LOCALE
 5508|    456|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 60, False: 396]
  ------------------
 5509|     60|            return rd.read_localized(range, loc, value);
 5510|     60|        }
 5511|    396|#endif
 5512|       |
 5513|    396|        return rd.read_classic(range, value);
 5514|    456|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     60|    {
 5417|     60|        scan_error err{scan_error::invalid_scanned_value,
 5418|     60|                       "Failed to read boolean"};
 5419|       |
 5420|     60|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 44, False: 16]
  ------------------
 5421|     44|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 44]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     44|            else {
 5425|     44|                err = r.error();
 5426|     44|            }
 5427|     44|        }
 5428|       |
 5429|     60|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 22, False: 38]
  ------------------
 5430|     22|            auto stdloc = loc.get<std::locale>();
 5431|     22|            const auto& numpunct =
 5432|     22|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     22|            const auto truename = numpunct.truename();
 5434|     22|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     22|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 22]
  ------------------
 5437|     22|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     22|            else {
 5441|     22|                err = r.error();
 5442|     22|            }
 5443|     22|        }
 5444|       |
 5445|     60|        return unexpected(err);
 5446|     60|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5456|     22|    {
 5457|     22|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     22|        const auto shorter = std::pair{
 5459|     22|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 22, False: 0]
  ------------------
 5460|     22|        const auto longer = std::pair{
 5461|     22|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 22]
  ------------------
 5462|       |
 5463|     22|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 22]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     22|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 22]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     22|                                     "read_textual: No match");
 5474|     22|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     44|{
 2168|     44|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     42|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     42|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     42|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     42|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 2174|     42|        return unexpected(parse_error::error);
 2175|     42|    }
 2176|      0|    return it;
 2177|     42|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6181|  13.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.6k|            auto rd = make_reader<T, char_type>();
 6187|  13.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 588]
  |  |  ------------------
  ------------------
 6188|  13.0k|                return unexpected(e);
 6189|  13.0k|            }
 6190|       |
 6191|    588|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    588|    {
 6113|    588|        const bool need_skipped_width =
 6114|    588|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 186, False: 402]
  |  Branch (6114:33): [True: 314, False: 88]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    588|        auto it = rng.begin();
 6118|    588|        std::ptrdiff_t prefix_width = 0;
 6119|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 316, False: 272]
  ------------------
 6120|    316|            auto max_width_view = take_width(rng, specs.precision);
 6121|    316|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    316|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    316|            it = prefix_result.first.base();
 6124|    316|            prefix_width = prefix_result.second;
 6125|    316|        }
 6126|    272|        else {
 6127|    272|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    272|            std::tie(it, prefix_width) = prefix_result;
 6129|    272|        }
 6130|    588|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    588|        std::ptrdiff_t value_width = 0;
 6134|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 316, False: 272]
  ------------------
 6135|    316|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 310]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    310|            const auto initial_width = specs.precision - prefix_width;
 6143|    310|            auto max_width_view =
 6144|    310|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    310|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    278|            it = w_it.base();
 6147|    278|            value_width = initial_width - w_it.count();
 6148|    278|        }
 6149|    272|        else {
 6150|    272|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 250]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     22|    }                                                  \
  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    250|                                             specs, value, loc));
 6152|       |
 6153|    250|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 180, False: 70]
  ------------------
 6154|    180|                value_width = calculate_text_width(
 6155|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    180|                        .view());
 6157|    180|            }
 6158|    250|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    528|        std::ptrdiff_t postfix_width = 0;
 6162|    528|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 528, False: 0]
  ------------------
 6163|    528|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    528|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    528|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    528|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 528]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    528|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    528|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    528|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    528|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    528|                                 value_width));
 6167|    528|            std::tie(it, postfix_width) = postfix_result;
 6168|    528|        }
 6169|       |
 6170|    528|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    528|                                                 value_width, postfix_width);
 6172|    528|            !e) {
  ------------------
  |  Branch (6172:13): [True: 160, False: 368]
  ------------------
 6173|    160|            return unexpected(e);
 6174|    160|        }
 6175|       |
 6176|    368|        return it;
 6177|    528|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|  13.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.7k|            auto rd = make_reader<T, char_type>();
 6187|  13.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 612]
  |  |  ------------------
  ------------------
 6188|  13.1k|                return unexpected(e);
 6189|  13.1k|            }
 6190|       |
 6191|    612|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    612|    {
 6113|    612|        const bool need_skipped_width =
 6114|    612|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 194, False: 418]
  |  Branch (6114:33): [True: 318, False: 100]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    612|        auto it = rng.begin();
 6118|    612|        std::ptrdiff_t prefix_width = 0;
 6119|    612|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 322, False: 290]
  ------------------
 6120|    322|            auto max_width_view = take_width(rng, specs.precision);
 6121|    322|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    300|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    300|            it = prefix_result.first.base();
 6124|    300|            prefix_width = prefix_result.second;
 6125|    300|        }
 6126|    290|        else {
 6127|    290|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    290|            std::tie(it, prefix_width) = prefix_result;
 6129|    290|        }
 6130|    590|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    590|        std::ptrdiff_t value_width = 0;
 6134|    590|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 300, False: 290]
  ------------------
 6135|    300|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 8, False: 292]
  ------------------
 6136|      8|                return unexpected_scan_error(
 6137|      8|                    scan_error::invalid_scanned_value,
 6138|      8|                    "Too many fill characters before value, "
 6139|      8|                    "precision exceeded before reading value");
 6140|      8|            }
 6141|       |
 6142|    292|            const auto initial_width = specs.precision - prefix_width;
 6143|    292|            auto max_width_view =
 6144|    292|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    292|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    290|        else {
 6150|    290|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 290, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    290|    }                                                  \
  |  | 3667|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  13.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.6k|            auto rd = make_reader<T, char_type>();
 6187|  13.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 13.5k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  13.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  13.5k|    {
 6113|  13.5k|        const bool need_skipped_width =
 6114|  13.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 336, False: 13.2k]
  |  Branch (6114:33): [True: 1.17k, False: 12.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  13.5k|        auto it = rng.begin();
 6118|  13.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  13.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 1.18k, False: 12.3k]
  ------------------
 6120|  1.18k|            auto max_width_view = take_width(rng, specs.precision);
 6121|  1.18k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|  1.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|  1.16k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|  1.16k|            it = prefix_result.first.base();
 6124|  1.16k|            prefix_width = prefix_result.second;
 6125|  1.16k|        }
 6126|  12.3k|        else {
 6127|  12.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  12.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  12.3k|        }
 6130|  13.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  13.5k|        std::ptrdiff_t value_width = 0;
 6134|  13.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 1.16k, False: 12.3k]
  ------------------
 6135|  1.16k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 1.16k]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|  1.16k|            const auto initial_width = specs.precision - prefix_width;
 6143|  1.16k|            auto max_width_view =
 6144|  1.16k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|  1.16k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 754, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    754|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    754|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    754|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    754|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    754|    }                                                  \
  |  |  |  | 3667|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    408|            it = w_it.base();
 6147|    408|            value_width = initial_width - w_it.count();
 6148|    408|        }
 6149|  12.3k|        else {
 6150|  12.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10.0k, False: 2.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  10.0k|    }                                                  \
  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  2.30k|                                             specs, value, loc));
 6152|       |
 6153|  2.30k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 262, False: 2.03k]
  ------------------
 6154|    262|                value_width = calculate_text_width(
 6155|    262|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    262|                        .view());
 6157|    262|            }
 6158|  2.30k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  2.70k|        std::ptrdiff_t postfix_width = 0;
 6162|  2.70k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 2.18k, False: 520]
  ------------------
 6163|  2.18k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  2.18k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  2.18k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  2.18k|                                 value_width));
 6167|  2.18k|            std::tie(it, postfix_width) = postfix_result;
 6168|  2.18k|        }
 6169|       |
 6170|  2.70k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  2.70k|                                                 value_width, postfix_width);
 6172|  2.70k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 158, False: 2.55k]
  ------------------
 6173|    158|            return unexpected(e);
 6174|    158|        }
 6175|       |
 6176|  2.55k|        return it;
 6177|  2.70k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  13.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.6k|            auto rd = make_reader<T, char_type>();
 6187|  13.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 13.5k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  13.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  13.5k|    {
 6113|  13.5k|        const bool need_skipped_width =
 6114|  13.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 336, False: 13.2k]
  |  Branch (6114:33): [True: 1.17k, False: 12.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  13.5k|        auto it = rng.begin();
 6118|  13.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  13.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 1.18k, False: 12.3k]
  ------------------
 6120|  1.18k|            auto max_width_view = take_width(rng, specs.precision);
 6121|  1.18k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|  1.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|  1.16k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|  1.16k|            it = prefix_result.first.base();
 6124|  1.16k|            prefix_width = prefix_result.second;
 6125|  1.16k|        }
 6126|  12.3k|        else {
 6127|  12.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  12.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  12.3k|        }
 6130|  13.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  13.5k|        std::ptrdiff_t value_width = 0;
 6134|  13.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 1.16k, False: 12.3k]
  ------------------
 6135|  1.16k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 1.16k]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|  1.16k|            const auto initial_width = specs.precision - prefix_width;
 6143|  1.16k|            auto max_width_view =
 6144|  1.16k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|  1.16k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 754, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    754|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    754|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    754|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    754|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    754|    }                                                  \
  |  |  |  | 3667|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    408|            it = w_it.base();
 6147|    408|            value_width = initial_width - w_it.count();
 6148|    408|        }
 6149|  12.3k|        else {
 6150|  12.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10.0k, False: 2.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  10.0k|    }                                                  \
  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  2.30k|                                             specs, value, loc));
 6152|       |
 6153|  2.30k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 262, False: 2.03k]
  ------------------
 6154|    262|                value_width = calculate_text_width(
 6155|    262|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    262|                        .view());
 6157|    262|            }
 6158|  2.30k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  2.70k|        std::ptrdiff_t postfix_width = 0;
 6162|  2.70k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 2.18k, False: 520]
  ------------------
 6163|  2.18k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  2.18k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  2.18k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  2.18k|                                 value_width));
 6167|  2.18k|            std::tie(it, postfix_width) = postfix_result;
 6168|  2.18k|        }
 6169|       |
 6170|  2.70k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  2.70k|                                                 value_width, postfix_width);
 6172|  2.70k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 158, False: 2.55k]
  ------------------
 6173|    158|            return unexpected(e);
 6174|    158|        }
 6175|       |
 6176|  2.55k|        return it;
 6177|  2.70k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  13.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  13.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  13.6k|            auto rd = make_reader<T, char_type>();
 6187|  13.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 13.5k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  13.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  13.5k|    {
 6113|  13.5k|        const bool need_skipped_width =
 6114|  13.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 336, False: 13.2k]
  |  Branch (6114:33): [True: 1.17k, False: 12.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  13.5k|        auto it = rng.begin();
 6118|  13.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  13.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 1.18k, False: 12.3k]
  ------------------
 6120|  1.18k|            auto max_width_view = take_width(rng, specs.precision);
 6121|  1.18k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|  1.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|  1.16k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|  1.16k|            it = prefix_result.first.base();
 6124|  1.16k|            prefix_width = prefix_result.second;
 6125|  1.16k|        }
 6126|  12.3k|        else {
 6127|  12.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  12.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  12.3k|        }
 6130|  13.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  13.5k|        std::ptrdiff_t value_width = 0;
 6134|  13.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 1.16k, False: 12.3k]
  ------------------
 6135|  1.16k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 1.16k]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|  1.16k|            const auto initial_width = specs.precision - prefix_width;
 6143|  1.16k|            auto max_width_view =
 6144|  1.16k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|  1.16k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 754, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    754|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    754|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    754|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    754|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    754|    }                                                  \
  |  |  |  | 3667|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    408|            it = w_it.base();
 6147|    408|            value_width = initial_width - w_it.count();
 6148|    408|        }
 6149|  12.3k|        else {
 6150|  12.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10.0k, False: 2.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  10.0k|    }                                                  \
  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  2.30k|                                             specs, value, loc));
 6152|       |
 6153|  2.30k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 262, False: 2.03k]
  ------------------
 6154|    262|                value_width = calculate_text_width(
 6155|    262|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    262|                        .view());
 6157|    262|            }
 6158|  2.30k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  2.70k|        std::ptrdiff_t postfix_width = 0;
 6162|  2.70k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 2.18k, False: 520]
  ------------------
 6163|  2.18k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  2.18k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  2.18k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  2.18k|                                 value_width));
 6167|  2.18k|            std::tie(it, postfix_width) = postfix_result;
 6168|  2.18k|        }
 6169|       |
 6170|  2.70k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  2.70k|                                                 value_width, postfix_width);
 6172|  2.70k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 158, False: 2.55k]
  ------------------
 6173|    158|            return unexpected(e);
 6174|    158|        }
 6175|       |
 6176|  2.55k|        return it;
 6177|  2.70k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  5.41k|{
 5784|  5.41k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.41k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  5.41k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 602, False: 4.81k]
  ------------------
 5789|    602|        return range.begin();
 5790|    602|    }
 5791|       |
 5792|  4.81k|    return skip_classic_whitespace(range);
 5793|  5.41k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    602|    {
 3517|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    602|        return read_default_with_base(range, value, 10);
 3519|    602|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    602|    {
 3481|    602|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    602|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    602|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 602]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.20k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.20k|                parse_integer_digits_without_thsep(
 3500|  1.20k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.20k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.20k|        auto buf = make_contiguous_buffer(
 3504|  1.20k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.20k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 602, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    602|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    602|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    602|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    602|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    602|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.20k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    602|    {
 3517|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    602|        return read_default_with_base(range, value, 10);
 3519|    602|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    602|    {
 3481|    602|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    602|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    602|        if constexpr (!std::is_signed_v<T>) {
 3485|    602|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 602]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    602|        }
 3492|       |
 3493|    602|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 602]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.20k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.20k|                parse_integer_digits_without_thsep(
 3500|  1.20k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.20k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.20k|        auto buf = make_contiguous_buffer(
 3504|  1.20k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.20k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 602, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    602|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    602|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    602|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    602|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    602|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.20k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5736|  1.10k|    {
 5737|  1.10k|        return true;
 5738|  1.10k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    944|    {
 5754|    944|        detail::format_specs specs{};
 5755|    944|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    944|        std::uintptr_t intvalue{};
 5758|    944|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    944|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 944, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    944|    }                                                  \
  |  |  |  | 3667|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    944|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3023|  1.27k|    {
 3024|  1.27k|        return true;
 3025|  1.27k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    602|    {
 5493|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    602|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    602|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|  1.01k|    {
 5344|  1.01k|        scan_error err{scan_error::invalid_scanned_value,
 5345|  1.01k|                       "Failed to read boolean"};
 5346|       |
 5347|  1.01k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 962, False: 48]
  ------------------
 5348|    962|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 962]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    962|            else {
 5352|    962|                err = r.error();
 5353|    962|            }
 5354|    962|        }
 5355|       |
 5356|  1.01k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 990, False: 20]
  ------------------
 5357|    990|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 990]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    990|            else {
 5361|    990|                err = r.error();
 5362|    990|            }
 5363|    990|        }
 5364|       |
 5365|  1.01k|        return unexpected(err);
 5366|  1.01k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    990|    {
 5373|    990|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 990]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    990|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 990]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    990|        return unexpected_scan_error(
 5383|    990|            scan_error::invalid_scanned_value,
 5384|    990|            "Failed to read numeric boolean value: No match");
 5385|    990|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|    990|    {
 5391|    990|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 990]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    990|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 990]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    990|        return unexpected_scan_error(
 5401|    990|            scan_error::invalid_scanned_value,
 5402|    990|            "Failed to read textual boolean value: No match");
 5403|    990|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  1.98k|{
 2183|  1.98k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 1.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.85k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.85k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|  1.85k|    else {
 2195|  1.85k|        auto range_it = range.begin();
 2196|  1.85k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 1.85k, False: 0]
  ------------------
 2197|  1.85k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
 2198|  1.85k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|  1.85k|                return unexpected(parse_error::error);
 2200|  1.85k|            }
 2201|  1.85k|        }
 2202|      0|        return it;
 2203|  1.85k|    }
 2204|  1.85k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|    602|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    602|    {
 4141|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    602|        float_reader<CharT> rd{};
 4144|    602|        return read_impl<Range>(
 4145|    602|            range, rd,
 4146|    602|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    602|                return r.read_source(SCN_FWD(args)...);
 4148|    602|            },
 4149|    602|            value);
 4150|    602|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    602|        : m_fptr([](storage fn,
  743|    602|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    602|              cvref<T> obj = *get<T>(fn);
  745|    602|              if constexpr (std::is_void_v<R>) {
  746|    602|                  obj(static_cast<decltype(args)>(args)...);
  747|    602|              }
  748|    602|              else {
  749|    602|                  return obj(static_cast<decltype(args)>(args)...);
  750|    602|              }
  751|    602|          }),
  752|    602|          m_storage(std::addressof(f))
  753|    602|    {
  754|    602|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    602|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    602|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    602|              else {
  749|    602|                  return obj(static_cast<decltype(args)>(args)...);
  750|    602|              }
  751|    602|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    602|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    602|        else if constexpr (std::is_object_v<T>) {
  688|    602|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    602|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    602|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    602|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    602|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    602|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    602|        {
  662|    602|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    602|    {
 5255|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    602|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    602|    {
 5255|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    602|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    602|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    602|                          basic_contiguous_scan_context<char_type>>) {
 5864|    602|            auto rd = make_reader<T, char_type>();
 5865|    602|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    602|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    602|    {
 5852|    602|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    602|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    602|                        .transform_error(make_eof_scan_error));
 5854|    602|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    602|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    602|    {
 5255|    602|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    602|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    602|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    602|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   384k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   384k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   384k|          m_current(m_range.begin())
 2867|   384k|    {
 2868|   384k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   788M|    {
 2872|   788M|        return m_current;
 2873|   788M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.57G|    {
 2877|  1.57G|        return m_range.end();
 2878|  1.57G|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|   787M|{
 1209|       |    // TODO: optimize
 1210|   787M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   787M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|   787M|    auto res = get_next_code_point(str);
 1212|   787M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|   787M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   787M|    {
 2892|   787M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   787M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   787M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   787M|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 787M]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   787M|        }
 2898|   787M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   787M|    static_cast<    \
  |  |  929|   787M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   787M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|  57.5k|    {
 2882|  57.5k|        return ranges::subrange{begin(), end()};
 2883|  57.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  2.06k|    {
 6026|  2.06k|        const bool need_skipped_width =
 6027|  2.06k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 52, False: 2.00k]
  |  Branch (6027:33): [True: 2.00k, False: 0]
  ------------------
 6028|  2.06k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  2.06k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 36, False: 2.02k]
  ------------------
 6032|  2.06k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 198, False: 1.82k]
  ------------------
 6033|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    234|                             need_skipped_width);
 6035|    234|        }
 6036|  1.82k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.77k, False: 52]
  |  Branch (6036:56): [True: 1.27k, False: 504]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.27k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 1.27k, False: 0]
  ------------------
 6040|  1.27k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  1.27k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  1.27k|                                  .transform_error(make_eof_scan_error));
 6043|  1.27k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  1.27k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|    556|        return result_type{rng.begin(), 0};
 6059|  1.82k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    234|{
 5940|    234|    using char_type = detail::char_t<Range>;
 5941|    234|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    234|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 234, False: 0]
  ------------------
 5944|    234|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    234|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    234|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 234]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    234|        auto max_width_view = take_width(range, max_width);
 5961|    234|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    234|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 234, False: 0]
  ------------------
 5964|    234|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    234|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    234|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    234|        : m_fptr([](storage fn,
  743|    234|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    234|              cvref<T> obj = *get<T>(fn);
  745|    234|              if constexpr (std::is_void_v<R>) {
  746|    234|                  obj(static_cast<decltype(args)>(args)...);
  747|    234|              }
  748|    234|              else {
  749|    234|                  return obj(static_cast<decltype(args)>(args)...);
  750|    234|              }
  751|    234|          }),
  752|    234|          m_storage(std::addressof(f))
  753|    234|    {
  754|    234|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    280|    {
  684|    280|        if constexpr (std::is_const_v<T>) {
  685|    280|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    280|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    280|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    234|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    234|        {
  667|    234|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    234|{
 1964|    234|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    234|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    234|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    234|    else {
 1949|    234|        auto first = range.begin();
 1950|    314|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 280, False: 34]
  ------------------
 1951|    280|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 200, False: 80]
  ------------------
 1952|    200|                return first;
 1953|    200|            }
 1954|    280|        }
 1955|     34|        return first;
 1956|    234|    }
 1957|    234|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2798|  2.77k|    {
 2799|  2.77k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  2.77k|                                      m_count};
 2801|  2.77k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2705|  9.67k|    {
 2706|  9.67k|        return view;
 2707|  9.67k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  2.77k|        : m_current(x), m_end(s), m_count(n)
 2370|  2.77k|    {
 2371|  2.77k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  1.58k|        {
 2770|  1.58k|            return !(y == x);
 2771|  1.58k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  4.12k|        {
 2759|  4.12k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 34, False: 4.09k]
  |  Branch (2759:39): [True: 34, False: 0]
  ------------------
 2760|  4.12k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 4.09k]
  ------------------
 2761|  4.12k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|     34|    {
 2410|     34|        return m_multibyte_left;
 2411|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2804|  4.12k|    {
 2805|  4.12k|        return sentinel<true>{m_base.get().end()};
 2806|  4.12k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  4.12k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  4.12k|    static_cast<    \
  |  |  929|  4.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  2.82k|    {
 2415|  2.82k|        return *m_current;
 2416|  2.82k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  1.35k|    {
 2424|  1.35k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  1.35k|        _increment_current();
 2426|  1.35k|        return *this;
 2427|  1.35k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  1.35k|    {
 2657|  1.35k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 1.35k, False: 0]
  ------------------
 2658|  1.35k|            auto cplen = _get_cp_length_at_current();
 2659|  1.35k|            m_multibyte_left = cplen - 1;
 2660|  1.35k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  1.35k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  1.35k|        ++m_current;
 2667|  1.35k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  1.35k|    {
 2628|  1.35k|        return static_cast<difference_type>(
 2629|  1.35k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  1.35k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  1.35k|    {
 2634|  1.35k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  1.35k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 1.35k, False: 0]
  ------------------
 2639|  1.35k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  1.35k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  1.35k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  1.35k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  1.50k|    {
 2821|  1.50k|        return take_width_view{r, n};
 2822|  1.50k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2788|  1.50k|        : m_base(base), m_count(count)
 2789|  1.50k|    {
 2790|  1.50k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2702|  1.50k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.27k|{
 2940|  1.27k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.27k, False: 0]
  ------------------
 2941|  1.27k|        auto it = read_while_classic_space(range);
 2942|  1.27k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.27k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.27k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  1.27k|        return it;
 2948|  1.27k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.27k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.27k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.27k|    else {
 2114|  1.27k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.27k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.27k|            return detail::is_cp_space(cp);
 2127|  1.27k|        });
 2128|  1.27k|    }
 2129|  1.27k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.27k|{
 2070|  1.27k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.27k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.27k|{
 2049|  1.27k|    auto it = range.begin();
 2050|  1.27k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.27k, False: 0]
  ------------------
 2051|  1.27k|        const auto val =
 2052|  1.27k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.27k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.27k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.27k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.27k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.27k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.27k, False: 0]
  ------------------
 2057|  1.27k|                return it;
 2058|  1.27k|            }
 2059|  1.27k|        }
 2060|      0|        it = val.iterator;
 2061|      0|    }
 2062|       |
 2063|      0|    return it;
 2064|  1.27k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  1.27k|{
 1887|  1.27k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.27k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.27k|    auto it = range.begin();
 1891|  1.27k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.27k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.27k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.27k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.27k, False: 0]
  ------------------
 1900|  1.27k|        ++it;
 1901|  1.27k|        return {it, string_type(1, *range.begin())};
 1902|  1.27k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.27k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.54k|{
  944|  2.54k|    return is_range_eof(r.begin(), r.end());
  945|  2.54k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.54k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.54k|    {
  937|  2.54k|        return begin == end;
  938|  2.54k|    }
  939|  2.54k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1877|  1.27k|    {
 1878|  1.27k|        return !codepoint.empty();
 1879|  1.27k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.27k|        : m_fptr([](storage fn,
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|  1.27k|              if constexpr (std::is_void_v<R>) {
  746|  1.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.27k|              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
  752|  1.27k|          m_storage(std::addressof(f))
  753|  1.27k|    {
  754|  1.27k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.27k|        else if constexpr (std::is_object_v<T>) {
  688|  1.27k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.27k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.27k|            return detail::is_cp_space(cp);
 2127|  1.27k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.27k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.27k|        {
  662|  1.27k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.27k|{
  950|  1.27k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.27k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.27k|    return eof_error::good;
  954|  1.27k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  5.59k|    {
 2402|  5.59k|        return m_current;
 2403|  5.59k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  5.62k|    {
 2406|  5.62k|        return m_count;
 2407|  5.62k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  16.8k|    {
 6026|  16.8k|        const bool need_skipped_width =
 6027|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 8.53k, False: 8.32k]
  |  Branch (6027:33): [True: 0, False: 8.32k]
  ------------------
 6028|  16.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  16.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 54, False: 16.8k]
  ------------------
 6032|  16.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 270, False: 16.5k]
  ------------------
 6033|    324|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    324|                             need_skipped_width);
 6035|    324|        }
 6036|  16.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 16.1k, False: 414]
  |  Branch (6036:56): [True: 2.67k, False: 13.4k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.67k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 2.67k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  5.34k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  5.34k|                            make_eof_scan_error));
 6047|       |
 6048|  5.34k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.98k, False: 686]
  ------------------
 6049|  1.98k|                return result_type{
 6050|  1.98k|                    it,
 6051|  1.98k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.98k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.98k|                                             .view())};
 6054|  1.98k|            }
 6055|    686|            return result_type{it, 0};
 6056|  5.34k|        }
 6057|       |
 6058|  13.8k|        return result_type{rng.begin(), 0};
 6059|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  3.38k|    {
 6068|  3.38k|        const bool need_skipped_width =
 6069|  3.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 1.61k, False: 1.76k]
  |  Branch (6069:33): [True: 542, False: 1.22k]
  ------------------
 6070|  3.38k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  3.38k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 92, False: 3.29k]
  ------------------
 6073|  3.38k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 154, False: 3.13k]
  ------------------
 6074|    246|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 66, False: 180]
  ------------------
 6075|    246|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 44, False: 22]
  ------------------
 6076|     44|                return result_type{rng.begin(), 0};
 6077|     44|            }
 6078|    202|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    202|                             specs.fill, need_skipped_width);
 6080|    246|        }
 6081|  3.13k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 3.11k, False: 18]
  ------------------
 6082|  3.13k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 2.86k, False: 252]
  ------------------
 6083|  3.13k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 1.45k, False: 1.41k]
  |  Branch (6083:35): [True: 1.39k, False: 58]
  ------------------
 6084|  2.86k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 410, False: 1.06k]
  ------------------
 6085|  1.69k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 300, False: 110]
  ------------------
 6086|  1.69k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 302, False: 1.39k]
  ------------------
 6087|    302|                const auto initial_width =
 6088|    302|                    specs.precision - prefix_width - value_width;
 6089|    302|                auto max_width_view = take_width(rng, initial_width);
 6090|    302|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    302|                                  .transform_error(make_eof_scan_error));
 6092|    302|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    302|            }
 6094|  2.78k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|  1.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  2.78k|                            make_eof_scan_error));
 6096|       |
 6097|  2.78k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 1.39k, False: 0]
  ------------------
 6098|  1.39k|                return result_type{
 6099|  1.39k|                    it,
 6100|  1.39k|                    calculate_text_width(make_contiguous_buffer(
 6101|  1.39k|                                             ranges::subrange{rng.begin(), it})
 6102|  1.39k|                                             .view())};
 6103|  1.39k|            }
 6104|      0|            return result_type{it, 0};
 6105|  2.78k|        }
 6106|  1.44k|        return result_type{rng.begin(), 0};
 6107|  3.13k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  5.30k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.30k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.30k|            auto rd = make_reader<T, char_type>();
 6187|  5.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.71k, False: 584]
  |  |  ------------------
  ------------------
 6188|  4.71k|                return unexpected(e);
 6189|  4.71k|            }
 6190|       |
 6191|    584|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    584|    {
 6113|    584|        const bool need_skipped_width =
 6114|    584|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 260, False: 324]
  |  Branch (6114:33): [True: 194, False: 130]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    584|        auto it = rng.begin();
 6118|    584|        std::ptrdiff_t prefix_width = 0;
 6119|    584|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 198, False: 386]
  ------------------
 6120|    198|            auto max_width_view = take_width(rng, specs.precision);
 6121|    198|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    198|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    198|            it = prefix_result.first.base();
 6124|    198|            prefix_width = prefix_result.second;
 6125|    198|        }
 6126|    386|        else {
 6127|    386|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    386|            std::tie(it, prefix_width) = prefix_result;
 6129|    386|        }
 6130|    584|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    584|        std::ptrdiff_t value_width = 0;
 6134|    584|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 198, False: 386]
  ------------------
 6135|    198|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 196]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    196|            const auto initial_width = specs.precision - prefix_width;
 6143|    196|            auto max_width_view =
 6144|    196|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    196|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 196, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    196|    }                                                  \
  |  |  |  | 3667|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    386|        else {
 6150|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    386|    }                                                  \
  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  5.30k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.30k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.30k|            auto rd = make_reader<T, char_type>();
 6187|  5.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.71k, False: 584]
  |  |  ------------------
  ------------------
 6188|  4.71k|                return unexpected(e);
 6189|  4.71k|            }
 6190|       |
 6191|    584|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    584|    {
 6113|    584|        const bool need_skipped_width =
 6114|    584|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 260, False: 324]
  |  Branch (6114:33): [True: 194, False: 130]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    584|        auto it = rng.begin();
 6118|    584|        std::ptrdiff_t prefix_width = 0;
 6119|    584|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 198, False: 386]
  ------------------
 6120|    198|            auto max_width_view = take_width(rng, specs.precision);
 6121|    198|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    198|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    198|            it = prefix_result.first.base();
 6124|    198|            prefix_width = prefix_result.second;
 6125|    198|        }
 6126|    386|        else {
 6127|    386|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    386|            std::tie(it, prefix_width) = prefix_result;
 6129|    386|        }
 6130|    584|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    584|        std::ptrdiff_t value_width = 0;
 6134|    584|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 198, False: 386]
  ------------------
 6135|    198|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 196]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    196|            const auto initial_width = specs.precision - prefix_width;
 6143|    196|            auto max_width_view =
 6144|    196|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    196|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 196, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    196|    }                                                  \
  |  |  |  | 3667|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    386|        else {
 6150|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    386|    }                                                  \
  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6181|  5.23k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.23k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.23k|            auto rd = make_reader<T, char_type>();
 6187|  5.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.73k, False: 502]
  |  |  ------------------
  ------------------
 6188|  4.73k|                return unexpected(e);
 6189|  4.73k|            }
 6190|       |
 6191|    502|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.23k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5741|  5.23k|    {
 5742|  5.23k|        reader_error_handler eh{};
 5743|  5.23k|        detail::check_pointer_type_specs(specs, eh);
 5744|  5.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.73k, False: 502]
  |  |  ------------------
  ------------------
 5745|  4.73k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  4.73k|        }
 5747|    502|        return {};
 5748|  5.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    502|    {
 6113|    502|        const bool need_skipped_width =
 6114|    502|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 254, False: 248]
  |  Branch (6114:33): [True: 156, False: 92]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    502|        auto it = rng.begin();
 6118|    502|        std::ptrdiff_t prefix_width = 0;
 6119|    502|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 160, False: 342]
  ------------------
 6120|    160|            auto max_width_view = take_width(rng, specs.precision);
 6121|    160|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    160|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    160|            it = prefix_result.first.base();
 6124|    160|            prefix_width = prefix_result.second;
 6125|    160|        }
 6126|    342|        else {
 6127|    342|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    342|            std::tie(it, prefix_width) = prefix_result;
 6129|    342|        }
 6130|    502|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    502|        std::ptrdiff_t value_width = 0;
 6134|    502|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 160, False: 342]
  ------------------
 6135|    160|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 158]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    158|            const auto initial_width = specs.precision - prefix_width;
 6143|    158|            auto max_width_view =
 6144|    158|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    158|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    158|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    342|        else {
 6150|    342|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    342|    }                                                  \
  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    158|    {
 5771|    158|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    158|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    158|        return read_default(range, value, loc);
 5773|    158|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    158|    {
 5754|    158|        detail::format_specs specs{};
 5755|    158|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    158|        std::uintptr_t intvalue{};
 5758|    158|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    158|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    158|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    342|    {
 5771|    342|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    342|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    342|        return read_default(range, value, loc);
 5773|    342|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6181|  5.30k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.30k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.30k|            auto rd = make_reader<T, char_type>();
 6187|  5.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.63k, False: 672]
  |  |  ------------------
  ------------------
 6188|  4.63k|                return unexpected(e);
 6189|  4.63k|            }
 6190|       |
 6191|    672|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.30k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  5.30k|    {
 3029|  5.30k|        reader_error_handler eh{};
 3030|  5.30k|        get_derived().check_specs_impl(specs, eh);
 3031|  5.30k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.63k, False: 672]
  |  |  ------------------
  ------------------
 3032|  4.63k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  4.63k|        }
 3034|    672|        return {};
 3035|  5.30k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3039|  5.30k|    {
 3040|  5.30k|        return static_cast<Derived&>(*this);
 3041|  5.30k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  5.30k|    {
 5486|  5.30k|        detail::check_bool_type_specs(specs, eh);
 5487|  5.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    672|    {
 6113|    672|        const bool need_skipped_width =
 6114|    672|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 274, False: 398]
  |  Branch (6114:33): [True: 224, False: 174]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    672|        auto it = rng.begin();
 6118|    672|        std::ptrdiff_t prefix_width = 0;
 6119|    672|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 230, False: 442]
  ------------------
 6120|    230|            auto max_width_view = take_width(rng, specs.precision);
 6121|    230|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    230|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    230|            it = prefix_result.first.base();
 6124|    230|            prefix_width = prefix_result.second;
 6125|    230|        }
 6126|    442|        else {
 6127|    442|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    442|            std::tie(it, prefix_width) = prefix_result;
 6129|    442|        }
 6130|    672|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    672|        std::ptrdiff_t value_width = 0;
 6134|    672|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 230, False: 442]
  ------------------
 6135|    230|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 226]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    226|            const auto initial_width = specs.precision - prefix_width;
 6143|    226|            auto max_width_view =
 6144|    226|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    226|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    226|    }                                                  \
  |  |  |  | 3667|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    442|        else {
 6150|    442|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 442, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    442|    }                                                  \
  |  | 3667|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    226|    {
 5505|    226|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    226|#if !SCN_DISABLE_LOCALE
 5508|    226|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 26, False: 200]
  ------------------
 5509|     26|            return rd.read_localized(range, loc, value);
 5510|     26|        }
 5511|    200|#endif
 5512|       |
 5513|    200|        return rd.read_classic(range, value);
 5514|    226|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5517|    668|    {
 5518|    668|        SCN_GCC_COMPAT_PUSH
 5519|    668|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    668|        switch (specs.type) {
 5522|     84|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 84, False: 584]
  ------------------
 5523|     84|                return bool_reader_base::allow_text;
 5524|       |
 5525|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 14, False: 654]
  ------------------
 5526|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 660]
  ------------------
 5527|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 8, False: 660]
  ------------------
 5528|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 656]
  ------------------
 5529|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 10, False: 658]
  ------------------
 5530|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 12, False: 656]
  ------------------
 5531|     64|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    520|            default:
  ------------------
  |  Branch (5533:13): [True: 520, False: 148]
  ------------------
 5534|    520|                return bool_reader_base::allow_text |
 5535|    520|                       bool_reader_base::allow_numeric;
 5536|    668|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    668|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     26|    {
 5417|     26|        scan_error err{scan_error::invalid_scanned_value,
 5418|     26|                       "Failed to read boolean"};
 5419|       |
 5420|     26|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 20, False: 6]
  ------------------
 5421|     20|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 20]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     20|            else {
 5425|     20|                err = r.error();
 5426|     20|            }
 5427|     20|        }
 5428|       |
 5429|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 16, False: 10]
  ------------------
 5430|     16|            auto stdloc = loc.get<std::locale>();
 5431|     16|            const auto& numpunct =
 5432|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     16|            const auto truename = numpunct.truename();
 5434|     16|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     16|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 16]
  ------------------
 5437|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     16|            else {
 5441|     16|                err = r.error();
 5442|     16|            }
 5443|     16|        }
 5444|       |
 5445|     26|        return unexpected(err);
 5446|     26|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    196|    {
 5373|    196|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 196]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    196|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 196]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    196|        return unexpected_scan_error(
 5383|    196|            scan_error::invalid_scanned_value,
 5384|    196|            "Failed to read numeric boolean value: No match");
 5385|    196|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    392|{
 2135|    392|    auto it = read_code_unit(range);
 2136|    392|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 392]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    392|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 392, False: 0]
  |  |  ------------------
  ------------------
 2141|    392|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    392|        return unexpected(parse_error::error);
 2143|    392|    }
 2144|       |
 2145|      0|    return *it;
 2146|    392|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5456|     16|    {
 5457|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     16|        const auto shorter = std::pair{
 5459|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 16, False: 0]
  ------------------
 5460|     16|        const auto longer = std::pair{
 5461|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 16]
  ------------------
 5462|       |
 5463|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 16]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 16]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     16|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     16|                                     "read_textual: No match");
 5474|     16|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     32|{
 2168|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     10|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2174|     10|        return unexpected(parse_error::error);
 2175|     10|    }
 2176|      0|    return it;
 2177|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    392|{
 1845|    392|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    392|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    392|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    392|    else {
 1856|    392|        auto it = range.begin();
 1857|    392|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 392]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  1.97k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.65k, False: 322]
  ------------------
 1862|  1.65k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 70, False: 1.58k]
  ------------------
 1863|     70|                return unexpected(eof_error::eof);
 1864|     70|            }
 1865|  1.65k|        }
 1866|       |
 1867|    322|        return it;
 1868|    392|    }
 1869|    392|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    392|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    392|    else {
 1115|    392|        return 0;
 1116|    392|    }
 1117|    392|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    200|    {
 5344|    200|        scan_error err{scan_error::invalid_scanned_value,
 5345|    200|                       "Failed to read boolean"};
 5346|       |
 5347|    200|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 176, False: 24]
  ------------------
 5348|    176|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 176]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    176|            else {
 5352|    176|                err = r.error();
 5353|    176|            }
 5354|    176|        }
 5355|       |
 5356|    200|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 180, False: 20]
  ------------------
 5357|    180|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 180]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    180|            else {
 5361|    180|                err = r.error();
 5362|    180|            }
 5363|    180|        }
 5364|       |
 5365|    200|        return unexpected(err);
 5366|    200|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    180|    {
 5391|    180|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 180]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    180|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 180]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    180|        return unexpected_scan_error(
 5401|    180|            scan_error::invalid_scanned_value,
 5402|    180|            "Failed to read textual boolean value: No match");
 5403|    180|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    360|{
 2183|    360|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    312|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    312|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|    312|    else {
 2195|    312|        auto range_it = range.begin();
 2196|    312|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 312, False: 0]
  ------------------
 2197|    312|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 312, False: 0]
  |  |  ------------------
  ------------------
 2198|    312|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|    312|                return unexpected(parse_error::error);
 2200|    312|            }
 2201|    312|        }
 2202|      0|        return it;
 2203|    312|    }
 2204|    312|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    442|    {
 5505|    442|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    442|#if !SCN_DISABLE_LOCALE
 5508|    442|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 34, False: 408]
  ------------------
 5509|     34|            return rd.read_localized(range, loc, value);
 5510|     34|        }
 5511|    408|#endif
 5512|       |
 5513|    408|        return rd.read_classic(range, value);
 5514|    442|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     34|    {
 5417|     34|        scan_error err{scan_error::invalid_scanned_value,
 5418|     34|                       "Failed to read boolean"};
 5419|       |
 5420|     34|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 28, False: 6]
  ------------------
 5421|     28|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 28]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     28|            else {
 5425|     28|                err = r.error();
 5426|     28|            }
 5427|     28|        }
 5428|       |
 5429|     34|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 20, False: 14]
  ------------------
 5430|     20|            auto stdloc = loc.get<std::locale>();
 5431|     20|            const auto& numpunct =
 5432|     20|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     20|            const auto truename = numpunct.truename();
 5434|     20|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     20|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 20]
  ------------------
 5437|     20|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     20|            else {
 5441|     20|                err = r.error();
 5442|     20|            }
 5443|     20|        }
 5444|       |
 5445|     34|        return unexpected(err);
 5446|     34|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5456|     20|    {
 5457|     20|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     20|        const auto shorter = std::pair{
 5459|     20|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 20, False: 0]
  ------------------
 5460|     20|        const auto longer = std::pair{
 5461|     20|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 20]
  ------------------
 5462|       |
 5463|     20|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 20]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     20|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 20]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     20|                                     "read_textual: No match");
 5474|     20|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     40|{
 2168|     40|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     38|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     38|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     38|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     38|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2174|     38|        return unexpected(parse_error::error);
 2175|     38|    }
 2176|      0|    return it;
 2177|     38|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6181|  5.23k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.23k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.23k|            auto rd = make_reader<T, char_type>();
 6187|  5.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 538]
  |  |  ------------------
  ------------------
 6188|  4.70k|                return unexpected(e);
 6189|  4.70k|            }
 6190|       |
 6191|    538|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    538|    {
 6113|    538|        const bool need_skipped_width =
 6114|    538|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 256, False: 282]
  |  Branch (6114:33): [True: 174, False: 108]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    538|        auto it = rng.begin();
 6118|    538|        std::ptrdiff_t prefix_width = 0;
 6119|    538|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 178, False: 360]
  ------------------
 6120|    178|            auto max_width_view = take_width(rng, specs.precision);
 6121|    178|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    178|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    178|            it = prefix_result.first.base();
 6124|    178|            prefix_width = prefix_result.second;
 6125|    178|        }
 6126|    360|        else {
 6127|    360|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    360|            std::tie(it, prefix_width) = prefix_result;
 6129|    360|        }
 6130|    538|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    538|        std::ptrdiff_t value_width = 0;
 6134|    538|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 178, False: 360]
  ------------------
 6135|    178|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 176]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    176|            const auto initial_width = specs.precision - prefix_width;
 6143|    176|            auto max_width_view =
 6144|    176|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    176|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    156|            it = w_it.base();
 6147|    156|            value_width = initial_width - w_it.count();
 6148|    156|        }
 6149|    360|        else {
 6150|    360|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 340]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     20|    }                                                  \
  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    340|                                             specs, value, loc));
 6152|       |
 6153|    340|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 250, False: 90]
  ------------------
 6154|    250|                value_width = calculate_text_width(
 6155|    250|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    250|                        .view());
 6157|    250|            }
 6158|    340|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    496|        std::ptrdiff_t postfix_width = 0;
 6162|    496|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 496, False: 0]
  ------------------
 6163|    496|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    496|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    496|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    496|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    496|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    496|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    496|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    496|                                 value_width));
 6167|    496|            std::tie(it, postfix_width) = postfix_result;
 6168|    496|        }
 6169|       |
 6170|    496|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    496|                                                 value_width, postfix_width);
 6172|    496|            !e) {
  ------------------
  |  Branch (6172:13): [True: 250, False: 246]
  ------------------
 6173|    250|            return unexpected(e);
 6174|    250|        }
 6175|       |
 6176|    246|        return it;
 6177|    496|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|  5.30k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.30k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.30k|            auto rd = make_reader<T, char_type>();
 6187|  5.30k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 558]
  |  |  ------------------
  ------------------
 6188|  4.74k|                return unexpected(e);
 6189|  4.74k|            }
 6190|       |
 6191|    558|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.30k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    558|    {
 6113|    558|        const bool need_skipped_width =
 6114|    558|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 264, False: 294]
  |  Branch (6114:33): [True: 178, False: 116]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    558|        auto it = rng.begin();
 6118|    558|        std::ptrdiff_t prefix_width = 0;
 6119|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 184, False: 374]
  ------------------
 6120|    184|            auto max_width_view = take_width(rng, specs.precision);
 6121|    184|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    184|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    184|            it = prefix_result.first.base();
 6124|    184|            prefix_width = prefix_result.second;
 6125|    184|        }
 6126|    374|        else {
 6127|    374|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    374|            std::tie(it, prefix_width) = prefix_result;
 6129|    374|        }
 6130|    558|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    558|        std::ptrdiff_t value_width = 0;
 6134|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 184, False: 374]
  ------------------
 6135|    184|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 180]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    180|            const auto initial_width = specs.precision - prefix_width;
 6143|    180|            auto max_width_view =
 6144|    180|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    180|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 180, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    180|    }                                                  \
  |  |  |  | 3667|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    374|        else {
 6150|    374|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 374, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    374|    }                                                  \
  |  | 3667|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  5.23k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.23k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.23k|            auto rd = make_reader<T, char_type>();
 6187|  5.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 5.16k]
  |  |  ------------------
  ------------------
 6188|     78|                return unexpected(e);
 6189|     78|            }
 6190|       |
 6191|  5.16k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  5.16k|    {
 6113|  5.16k|        const bool need_skipped_width =
 6114|  5.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 2.34k, False: 2.82k]
  |  Branch (6114:33): [True: 296, False: 2.52k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  5.16k|        auto it = rng.begin();
 6118|  5.16k|        std::ptrdiff_t prefix_width = 0;
 6119|  5.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 304, False: 4.85k]
  ------------------
 6120|    304|            auto max_width_view = take_width(rng, specs.precision);
 6121|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    304|            it = prefix_result.first.base();
 6124|    304|            prefix_width = prefix_result.second;
 6125|    304|        }
 6126|  4.85k|        else {
 6127|  4.85k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  4.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  4.85k|            std::tie(it, prefix_width) = prefix_result;
 6129|  4.85k|        }
 6130|  5.16k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  5.16k|        std::ptrdiff_t value_width = 0;
 6134|  5.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 304, False: 4.85k]
  ------------------
 6135|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 298]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    298|            const auto initial_width = specs.precision - prefix_width;
 6143|    298|            auto max_width_view =
 6144|    298|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    298|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 172]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    172|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    172|            it = w_it.base();
 6147|    172|            value_width = initial_width - w_it.count();
 6148|    172|        }
 6149|  4.85k|        else {
 6150|  4.85k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.73k, False: 1.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.73k|    }                                                  \
  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.12k|                                             specs, value, loc));
 6152|       |
 6153|  1.12k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 660, False: 464]
  ------------------
 6154|    660|                value_width = calculate_text_width(
 6155|    660|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    660|                        .view());
 6157|    660|            }
 6158|  1.12k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.29k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.29k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 962, False: 334]
  ------------------
 6163|    962|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    962|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    962|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    962|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 962]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    962|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    962|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    962|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    962|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    962|                                 value_width));
 6167|    962|            std::tie(it, postfix_width) = postfix_result;
 6168|    962|        }
 6169|       |
 6170|  1.29k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.29k|                                                 value_width, postfix_width);
 6172|  1.29k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 416, False: 880]
  ------------------
 6173|    416|            return unexpected(e);
 6174|    416|        }
 6175|       |
 6176|    880|        return it;
 6177|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  5.23k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.23k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.23k|            auto rd = make_reader<T, char_type>();
 6187|  5.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 5.16k]
  |  |  ------------------
  ------------------
 6188|     78|                return unexpected(e);
 6189|     78|            }
 6190|       |
 6191|  5.16k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  5.16k|    {
 6113|  5.16k|        const bool need_skipped_width =
 6114|  5.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 2.34k, False: 2.82k]
  |  Branch (6114:33): [True: 296, False: 2.52k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  5.16k|        auto it = rng.begin();
 6118|  5.16k|        std::ptrdiff_t prefix_width = 0;
 6119|  5.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 304, False: 4.85k]
  ------------------
 6120|    304|            auto max_width_view = take_width(rng, specs.precision);
 6121|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    304|            it = prefix_result.first.base();
 6124|    304|            prefix_width = prefix_result.second;
 6125|    304|        }
 6126|  4.85k|        else {
 6127|  4.85k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  4.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  4.85k|            std::tie(it, prefix_width) = prefix_result;
 6129|  4.85k|        }
 6130|  5.16k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  5.16k|        std::ptrdiff_t value_width = 0;
 6134|  5.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 304, False: 4.85k]
  ------------------
 6135|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 298]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    298|            const auto initial_width = specs.precision - prefix_width;
 6143|    298|            auto max_width_view =
 6144|    298|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    298|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 172]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    172|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    172|            it = w_it.base();
 6147|    172|            value_width = initial_width - w_it.count();
 6148|    172|        }
 6149|  4.85k|        else {
 6150|  4.85k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.73k, False: 1.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.73k|    }                                                  \
  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.12k|                                             specs, value, loc));
 6152|       |
 6153|  1.12k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 660, False: 464]
  ------------------
 6154|    660|                value_width = calculate_text_width(
 6155|    660|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    660|                        .view());
 6157|    660|            }
 6158|  1.12k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.29k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.29k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 962, False: 334]
  ------------------
 6163|    962|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    962|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    962|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    962|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 962]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    962|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    962|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    962|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    962|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    962|                                 value_width));
 6167|    962|            std::tie(it, postfix_width) = postfix_result;
 6168|    962|        }
 6169|       |
 6170|  1.29k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.29k|                                                 value_width, postfix_width);
 6172|  1.29k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 416, False: 880]
  ------------------
 6173|    416|            return unexpected(e);
 6174|    416|        }
 6175|       |
 6176|    880|        return it;
 6177|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  5.23k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.23k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.23k|            auto rd = make_reader<T, char_type>();
 6187|  5.23k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 5.16k]
  |  |  ------------------
  ------------------
 6188|     78|                return unexpected(e);
 6189|     78|            }
 6190|       |
 6191|  5.16k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.23k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  5.16k|    {
 6113|  5.16k|        const bool need_skipped_width =
 6114|  5.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 2.34k, False: 2.82k]
  |  Branch (6114:33): [True: 296, False: 2.52k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  5.16k|        auto it = rng.begin();
 6118|  5.16k|        std::ptrdiff_t prefix_width = 0;
 6119|  5.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 304, False: 4.85k]
  ------------------
 6120|    304|            auto max_width_view = take_width(rng, specs.precision);
 6121|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    304|            it = prefix_result.first.base();
 6124|    304|            prefix_width = prefix_result.second;
 6125|    304|        }
 6126|  4.85k|        else {
 6127|  4.85k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  4.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  4.85k|            std::tie(it, prefix_width) = prefix_result;
 6129|  4.85k|        }
 6130|  5.16k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  5.16k|        std::ptrdiff_t value_width = 0;
 6134|  5.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 304, False: 4.85k]
  ------------------
 6135|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 298]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    298|            const auto initial_width = specs.precision - prefix_width;
 6143|    298|            auto max_width_view =
 6144|    298|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    298|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 172]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    172|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    172|            it = w_it.base();
 6147|    172|            value_width = initial_width - w_it.count();
 6148|    172|        }
 6149|  4.85k|        else {
 6150|  4.85k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.73k, False: 1.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.73k|    }                                                  \
  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.12k|                                             specs, value, loc));
 6152|       |
 6153|  1.12k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 660, False: 464]
  ------------------
 6154|    660|                value_width = calculate_text_width(
 6155|    660|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    660|                        .view());
 6157|    660|            }
 6158|  1.12k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.29k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.29k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 962, False: 334]
  ------------------
 6163|    962|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    962|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    962|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    962|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 962]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    962|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    962|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    962|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    962|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    962|                                 value_width));
 6167|    962|            std::tie(it, postfix_width) = postfix_result;
 6168|    962|        }
 6169|       |
 6170|  1.29k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.29k|                                                 value_width, postfix_width);
 6172|  1.29k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 416, False: 880]
  ------------------
 6173|    416|            return unexpected(e);
 6174|    416|        }
 6175|       |
 6176|    880|        return it;
 6177|  1.29k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    654|    {
 3481|    654|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    654|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    654|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 654]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.30k|                parse_integer_digits_without_thsep(
 3500|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.30k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.30k|        auto buf = make_contiguous_buffer(
 3504|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 654, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    654|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    654|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    654|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    654|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    654|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    654|    {
 3481|    654|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    654|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    654|        if constexpr (!std::is_signed_v<T>) {
 3485|    654|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 654]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    654|        }
 3492|       |
 3493|    654|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 654]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.30k|                parse_integer_digits_without_thsep(
 3500|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.30k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.30k|        auto buf = make_contiguous_buffer(
 3504|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 654, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    654|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    654|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    654|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    654|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    654|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.30k|    }

LLVMFuzzerTestOneInput:
   68|  10.6k|{
   69|  10.6k|    scn::fuzz::run(data, size);
   70|  10.6k|    return 0;
   71|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  10.6k|{
   52|  10.6k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 10.6k]
  |  Branch (52:35): [True: 0, False: 10.6k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  10.6k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  10.6k|    run_for_source(sv);
   59|  10.6k|    run_for_source(wsv_reinterpret);
   60|  10.6k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 10.6k, False: 0]
  ------------------
   61|  10.6k|        run_for_source(wsv_transcode);
   62|  10.6k|    }
   63|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  10.6k|{
   37|  10.6k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  10.6k|    run_for_type<char_type>(source);
   40|  10.6k|    run_for_type<int>(source);
   41|  10.6k|    run_for_type<unsigned>(source);
   42|  10.6k|    run_for_type<double>(source);
   43|  10.6k|    run_for_type<bool>(source);
   44|  10.6k|    run_for_type<void*>(source);
   45|  10.6k|    run_for_type<std::string>(source);
   46|  10.6k|    run_for_type<std::wstring>(source);
   47|  10.6k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  10.6k|{
   25|  10.6k|    {
   26|  10.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.6k|    }
   28|  10.6k|    {
   29|  10.6k|        auto _ =
   30|  10.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.6k|    }
   32|  10.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  21.3k|{
   37|  21.3k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  21.3k|    run_for_type<char_type>(source);
   40|  21.3k|    run_for_type<int>(source);
   41|  21.3k|    run_for_type<unsigned>(source);
   42|  21.3k|    run_for_type<double>(source);
   43|  21.3k|    run_for_type<bool>(source);
   44|  21.3k|    run_for_type<void*>(source);
   45|  21.3k|    run_for_type<std::string>(source);
   46|  21.3k|    run_for_type<std::wstring>(source);
   47|  21.3k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  21.3k|{
   25|  21.3k|    {
   26|  21.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  21.3k|    }
   28|  21.3k|    {
   29|  21.3k|        auto _ =
   30|  21.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  21.3k|    }
   32|  21.3k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  10.6k|{
   52|  10.6k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  10.6k|    string_buffer.resize(size);
   56|  10.6k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  10.6k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  10.6k|    const auto wsv_reinterpret_size =
   61|  10.6k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 93, False: 10.5k]
  ------------------
   62|  10.6k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  10.6k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  10.6k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  10.6k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  10.6k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  10.6k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  10.6k|}

