_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  6.48M|{
 3807|  6.48M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  6.48M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  6.48M|    }
 3810|  6.48M|    else if constexpr (sizeof(U) == 2) {
 3811|  6.48M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  6.48M|    }
 3813|  6.48M|    else {
 3814|       |        // utf-32
 3815|  6.48M|        static_assert(sizeof(U) == 4);
 3816|  6.48M|        SCN_UNUSED(ch);
 3817|  6.48M|        return 1;
 3818|  6.48M|    }
 3819|  6.48M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  6.48M|{
 3771|  6.48M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  6.48M|    SCN_GCC_COMPAT_PUSH
 3774|  6.48M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  6.48M|    constexpr char lengths[] =
 3776|  6.48M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  6.48M|        "\1\1\1\1\1\1\1\1"
 3778|  6.48M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  6.48M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  6.48M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  6.48M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  6.48M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  6.48M|    SCN_GCC_COMPAT_POP
 3785|  6.48M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  5.85M|{
 4013|  5.85M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  5.85M|        return decode_utf8_code_point_exhaustive(input);
 4015|  5.85M|    }
 4016|  5.85M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  5.85M|        return decode_utf16_code_point_exhaustive(input);
 4018|  5.85M|    }
 4019|  5.85M|    else {
 4020|  5.85M|        SCN_EXPECT(input.size() == 1);
 4021|  5.85M|        auto cp = static_cast<char32_t>(input.front());
 4022|  5.85M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  5.85M|            return invalid_code_point;
 4024|  5.85M|        }
 4025|  5.85M|        return cp;
 4026|  5.85M|    }
 4027|  5.85M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  5.85M|{
 3826|  5.85M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  5.85M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  5.85M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  5.85M|    };
 3831|       |
 3832|  5.85M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 5.24M, False: 608k]
  ------------------
 3833|  5.24M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 84, False: 5.24M]
  ------------------
 3834|     84|            SCN_UNLIKELY_ATTR
 3835|     84|            return invalid_code_point;
 3836|     84|        }
 3837|  5.24M|        return static_cast<char32_t>(input[0]);
 3838|  5.24M|    }
 3839|       |
 3840|   608k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 572k, False: 35.9k]
  ------------------
 3841|   572k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 30, False: 572k]
  ------------------
 3842|     30|            SCN_UNLIKELY_ATTR
 3843|     30|            return invalid_code_point;
 3844|     30|        }
 3845|   572k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 9.84k, False: 562k]
  ------------------
 3846|  9.84k|            SCN_UNLIKELY_ATTR
 3847|  9.84k|            return invalid_code_point;
 3848|  9.84k|        }
 3849|       |
 3850|   562k|        char32_t cp{};
 3851|   562k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   562k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   562k|        return cp;
 3854|   572k|    }
 3855|       |
 3856|  35.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 25.7k, False: 10.2k]
  ------------------
 3857|  25.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 6, False: 25.7k]
  ------------------
 3858|      6|            SCN_UNLIKELY_ATTR
 3859|      6|            return invalid_code_point;
 3860|      6|        }
 3861|  25.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.39k, False: 18.3k]
  ------------------
 3862|  25.7k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 769, False: 17.5k]
  ------------------
 3863|  8.16k|            SCN_UNLIKELY_ATTR
 3864|  8.16k|            return invalid_code_point;
 3865|  8.16k|        }
 3866|       |
 3867|  17.5k|        char32_t cp{};
 3868|  17.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  17.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  17.5k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  17.5k|        return cp;
 3872|  25.7k|    }
 3873|       |
 3874|  10.2k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 10.2k, False: 0]
  ------------------
 3875|  10.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 10.2k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  10.2k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 5.22k, False: 5.02k]
  ------------------
 3880|  5.22k|            SCN_UNLIKELY_ATTR
 3881|  5.22k|            return invalid_code_point;
 3882|  5.22k|        }
 3883|  5.02k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 1.25k, False: 3.77k]
  ------------------
 3884|  5.02k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 453, False: 3.32k]
  ------------------
 3885|  5.02k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 331, False: 2.98k]
  ------------------
 3886|  2.03k|            SCN_UNLIKELY_ATTR
 3887|  2.03k|            return invalid_code_point;
 3888|  2.03k|        }
 3889|       |
 3890|  2.98k|        char32_t cp{};
 3891|  2.98k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  2.98k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  2.98k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  2.98k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  2.98k|        return cp;
 3896|  5.02k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   628k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   628k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   628k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  2.67M|{
 3699|  2.67M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  2.67M|                                          decltype(first), decltype(last)> &&
 3701|  2.67M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.67M|        return {first, last};
 3703|  2.67M|    }
 3704|  2.67M|    else {
 3705|  2.67M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  2.67M|                                       to_address(first), to_address(last)))};
 3707|  2.67M|    }
 3708|  2.67M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  8.08M|{
  326|  8.08M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  8.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  8.08M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  8.09M|{
  304|  8.09M|    return p;
  305|  8.09M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  1.87M|{
 3730|  1.87M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  1.87M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  1.87M|                      decltype(it)> &&
 3733|  1.87M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  1.87M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  1.87M|        return it;
 3736|  1.87M|    }
 3737|  1.87M|    else {
 3738|  1.87M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  1.87M|    }
 3740|  1.87M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  13.3k|{
 5135|  13.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  13.3k|                  "Scan argument types must be default constructible");
 5137|  13.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  13.3k|                  "Scan argument types must be Destructible");
 5139|  13.3k|    static_assert(
 5140|  13.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  13.3k|        "Scan argument types must not be references");
 5142|  13.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  13.3k|    {
 4988|  13.3k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  13.3k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  13.3k|            return val;
 4991|  13.3k|        }
 4992|  13.3k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  13.3k|            return unscannable_disabled{val};
 4994|  13.3k|        }
 4995|  13.3k|        else {
 4996|  13.3k|            SCN_UNUSED(val);
 4997|  13.3k|            return unscannable_char{};
 4998|  13.3k|        }
 4999|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  13.3k|{
 5089|  13.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  13.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  13.3k|    constexpr bool scannable_char =
 5093|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  13.3k|    static_assert(scannable_char,
 5095|  13.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  13.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  13.3k|    constexpr bool scannable_const =
 5099|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  13.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  13.3k|    constexpr bool scannable_disabled =
 5103|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  13.3k|    static_assert(scannable_disabled,
 5105|  13.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  13.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  13.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  13.3k|    static_assert(
 5110|  13.3k|        scannable,
 5111|  13.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  13.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  13.3k|    return arg_value{arg};
 5115|  13.3k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  13.3k|    {
 4902|  13.3k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  60.1k|{
 8654|  60.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  60.1k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  60.1k|{
 8591|  60.1k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  60.1k|    auto result = vscan_impl(buffer, format, args);
 8594|  60.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.7k, False: 1.40k]
  |  |  ------------------
  ------------------
 8595|  58.7k|        return unexpected(result.error());
 8596|  58.7k|    }
 8597|  1.40k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  60.1k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   120k|{
 4720|   120k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   120k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   120k|                  "\n"
 4724|   120k|                  "Unsupported range type given as input to a scanning "
 4725|   120k|                  "function.\n"
 4726|   120k|                  "A range needs to have a character type (value type) "
 4727|   120k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   120k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   120k|                  "to be included.\n"
 4730|   120k|                  "See the scnlib documentation for more details.");
 4731|   120k|    static_assert(
 4732|   120k|        !std::is_same_v<T, custom_char_traits>,
 4733|   120k|        "\n"
 4734|   120k|        "Unsupported range type given as input to a scanning "
 4735|   120k|        "function.\n"
 4736|   120k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   120k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   120k|        "not supported.");
 4739|   120k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   120k|                  "\n"
 4741|   120k|                  "Unsupported range type given as input to a scanning "
 4742|   120k|                  "function.\n"
 4743|   120k|                  "file_marker_found cannot be used as an "
 4744|   120k|                  "source range type to scn::scan.\n"
 4745|   120k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   120k|                  "and do not provide an explicit source range, "
 4747|   120k|                  "or use scn::scan with a FILE* directly.");
 4748|   120k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   120k|                  "\n"
 4750|   120k|                  "Unsupported range type given as input to a scanning "
 4751|   120k|                  "function.\n"
 4752|   120k|                  "In order to be scannable, a range needs to satisfy "
 4753|   120k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   120k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   120k|                  "\n"
 4756|   120k|                  "Unsupported range type given as input to a scanning "
 4757|   120k|                  "function.\n"
 4758|   120k|                  "A range needs to model forward_range and have a valid "
 4759|   120k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   120k|                  "Examples of scannable ranges are std::string, "
 4761|   120k|                  "std::string_view, "
 4762|   120k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   120k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   120k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   120k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   120k|{
 4612|   120k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   120k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   120k|    }
 4616|   120k|    else {
 4617|   120k|        return invalid_char_type{};
 4618|   120k|    }
 4619|   120k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   364k|    {
 1598|   364k|        return has_value();
 1599|   364k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   728k|    {
  485|   728k|        return m_has_value;
  486|   728k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   360k|    {
 1604|   360k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   360k|        return this->get_unexpected().error();
 1606|   360k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   360k|    {
  468|   360k|        return m_unexpected;
  469|   360k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  2.16M|    {
  361|  2.16M|        return m_unexpected;
  362|  2.16M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  1.22M|    {
  347|  1.22M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.22M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.22M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   117k|    {
 1476|   117k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   117k|    {
  447|   117k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  1.26M|    {
  356|  1.26M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.26M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.26M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   120k|    {
 1177|   120k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  2.80k|{
 5923|  2.80k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.80k|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.80k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.80k|    }
 5927|  2.80k|    else {
 5928|  2.80k|        auto it = ranges::begin(source);
 5929|  2.80k|        while (n > 0) {
 5930|  2.80k|            --n;
 5931|  2.80k|            ++it;
 5932|  2.80k|        }
 5933|  2.80k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.80k|    }
 5935|  2.80k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.80k|    {
 2724|  2.80k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.80k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.80k|    {
 2705|  2.80k|        return decay_copy(t.begin());
 2706|  2.80k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  54.1k|{
 1949|  54.1k|    return SCN_FWD(t);
  ------------------
  |  |  930|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  54.1k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  2.80k|{
 5910|  2.80k|    return ranges::end(source);
 5911|  2.80k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.80k|    {
 2781|  2.80k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.80k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.80k|    {
 2763|  2.80k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.80k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|   797k|    {
 3316|   797k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.46k|    {
 1653|  3.46k|        return value();
 1654|  3.46k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  3.46k|    {
 1627|  3.46k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.46k|        return this->get_value();
 1629|  3.46k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.46k|    {
  451|  3.46k|        return m_value;
  452|  3.46k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.80k|    {
 1430|  2.80k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.80k|    {
  437|  2.80k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   120k|    {
 5478|   120k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 180]
  |  |  ------------------
  ------------------
 8821|  13.1k|        return unexpected(result.error());
 8822|  13.1k|    }
 8823|    180|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    180|    static_cast<    \
  |  |  929|    180|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    180|    static_cast<    \
  |  |  929|    180|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   120k|    {
 1598|   120k|        return has_value();
 1599|   120k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   240k|    {
  485|   240k|        return m_has_value;
  486|   240k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   117k|    {
 1604|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   117k|        return this->get_unexpected().error();
 1606|   117k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   117k|    {
  468|   117k|        return m_unexpected;
  469|   117k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  13.1k|    {
 1476|  13.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  13.1k|    {
  447|  13.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.80k|    {
 1653|  2.80k|        return value();
 1654|  2.80k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.80k|    {
 1627|  2.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.80k|        return this->get_value();
 1629|  2.80k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.80k|    {
  451|  2.80k|        return m_value;
  452|  2.80k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    180|    {
 5830|    180|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.80k|    {
 5681|  2.80k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    180|    {
 5616|    180|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    180|    {
 1430|    180|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    180|    {
  437|    180|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   120k|{
 7691|   120k|    return s;
 7692|   120k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   120k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  60.1k|{
 8672|  60.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  60.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  60.1k|{
 8607|  60.1k|#if !SCN_DISABLE_LOCALE
 8608|  60.1k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  60.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  60.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  60.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  60.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.7k, False: 1.40k]
  |  |  ------------------
  ------------------
 8615|  58.7k|        return unexpected(result.error());
 8616|  58.7k|    }
 8617|  1.40k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  60.1k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  13.3k|        return unexpected(result.error());
 8822|  13.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  13.3k|        return unexpected(result.error());
 8822|  13.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  13.3k|        return unexpected(result.error());
 8822|  13.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  13.3k|        return unexpected(result.error());
 8822|  13.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  13.3k|        return unexpected(result.error());
 8822|  13.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 876]
  |  |  ------------------
  ------------------
 8821|  12.4k|        return unexpected(result.error());
 8822|  12.4k|    }
 8823|    876|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    876|    static_cast<    \
  |  |  929|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    876|    static_cast<    \
  |  |  929|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  12.4k|    {
  626|  12.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  12.4k|    {
  689|  12.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  12.4k|                                  std::forward<Args>(args)...);
  691|  12.4k|        m_has_value = false;
  692|  12.4k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  78.1k|{
  392|  78.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  78.1k|        T(std::forward<Args>(args)...);
  394|  78.1k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  24.9k|    {
  718|  24.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  24.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  24.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  24.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    876|    {
 5830|    876|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.06k|    {
 5616|  1.06k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    876|    {
 1430|    876|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    876|    {
  616|    876|        construct(std::forward<Args>(args)...);
  617|    876|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    876|    {
  682|    876|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    876|        m_has_value = true;
  684|    876|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    876|{
  392|    876|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    876|        T(std::forward<Args>(args)...);
  394|    876|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    876|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.75k|    {
  706|  1.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.75k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  1.75k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  13.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  13.3k|    {
  631|  13.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 876, False: 12.4k]
  ------------------
  632|    876|            destroy_value();
  633|    876|        }
  634|  12.4k|        else {
  635|  12.4k|            destroy_unexpected();
  636|  12.4k|        }
  637|  13.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  13.3k|    {
  675|  13.3k|        return m_has_value;
  676|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    876|    {
  696|    876|        scn::detail::destroy_at(value_ptr());
  697|    876|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    876|{
  398|    876|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    876|        for (auto& elem : *p) {
  400|    876|            scn::detail::destroy_at(&elem);
  401|    876|        }
  402|    876|    }
  403|    876|    else {
  404|    876|        p->~T();
  405|    876|    }
  406|    876|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  12.4k|    {
  700|  12.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  12.4k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  78.1k|{
  398|  78.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  78.1k|        for (auto& elem : *p) {
  400|  78.1k|            scn::detail::destroy_at(&elem);
  401|  78.1k|        }
  402|  78.1k|    }
  403|  78.1k|    else {
  404|  78.1k|        p->~T();
  405|  78.1k|    }
  406|  78.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  40.0k|{
 5135|  40.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  40.0k|                  "Scan argument types must be default constructible");
 5137|  40.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  40.0k|                  "Scan argument types must be Destructible");
 5139|  40.0k|    static_assert(
 5140|  40.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  40.0k|        "Scan argument types must not be references");
 5142|  40.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  40.0k|{
 5089|  40.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  40.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  40.0k|    constexpr bool scannable_char =
 5093|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  40.0k|    static_assert(scannable_char,
 5095|  40.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  40.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  40.0k|    constexpr bool scannable_const =
 5099|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  40.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  40.0k|    constexpr bool scannable_disabled =
 5103|  40.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  40.0k|    static_assert(scannable_disabled,
 5105|  40.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  40.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  40.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  40.0k|    static_assert(
 5110|  40.0k|        scannable,
 5111|  40.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  40.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  40.0k|    return arg_value{arg};
 5115|  40.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  40.0k|    {
 4902|  40.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 876]
  |  |  ------------------
  ------------------
 8821|  12.4k|        return unexpected(result.error());
 8822|  12.4k|    }
 8823|    876|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    876|    static_cast<    \
  |  |  929|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    876|    static_cast<    \
  |  |  929|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  12.4k|    {
  626|  12.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  12.4k|    {
  689|  12.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  12.4k|                                  std::forward<Args>(args)...);
  691|  12.4k|        m_has_value = false;
  692|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  24.9k|    {
  718|  24.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  24.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  24.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  24.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    876|    {
 5830|    876|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.06k|    {
 5616|  1.06k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    876|    {
 1430|    876|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    876|    {
  616|    876|        construct(std::forward<Args>(args)...);
  617|    876|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    876|    {
  682|    876|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    876|        m_has_value = true;
  684|    876|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    876|{
  392|    876|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    876|        T(std::forward<Args>(args)...);
  394|    876|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    876|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.75k|    {
  706|  1.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.75k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.75k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  13.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  13.3k|    {
  631|  13.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 876, False: 12.4k]
  ------------------
  632|    876|            destroy_value();
  633|    876|        }
  634|  12.4k|        else {
  635|  12.4k|            destroy_unexpected();
  636|  12.4k|        }
  637|  13.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  13.3k|    {
  675|  13.3k|        return m_has_value;
  676|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    876|    {
  696|    876|        scn::detail::destroy_at(value_ptr());
  697|    876|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    876|{
  398|    876|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    876|        for (auto& elem : *p) {
  400|    876|            scn::detail::destroy_at(&elem);
  401|    876|        }
  402|    876|    }
  403|    876|    else {
  404|    876|        p->~T();
  405|    876|    }
  406|    876|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  12.4k|    {
  700|  12.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  12.4k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  6.67k|{
 8867|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  6.67k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  13.3k|{
 5396|  13.3k|    detail::check_scan_arg_types<Args...>();
 5397|  13.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  13.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  13.3k|{
 5135|  13.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  13.3k|                  "Scan argument types must be default constructible");
 5137|  13.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  13.3k|                  "Scan argument types must be Destructible");
 5139|  13.3k|    static_assert(
 5140|  13.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  13.3k|        "Scan argument types must not be references");
 5142|  13.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  13.3k|    {
 5349|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  13.3k|    {
 5360|  13.3k|        return {detail::make_arg<
 5361|  13.3k|            kind, Context,
 5362|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  13.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  13.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  13.3k|{
 5170|  13.3k|    return make_value<Context>(value).ref_value;
 5171|  13.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  13.3k|{
 5120|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  13.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  13.3k|                                  needs_context_tag>) {
 5124|  13.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  13.3k|    }
 5126|  13.3k|    else {
 5127|  13.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  13.3k|            value, context_tag<Context>{}));
 5129|  13.3k|    }
 5130|  13.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  13.3k|    {                                                                        \
 4959|  13.3k|        return val;                                                          \
 4960|  13.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  13.3k|{
 5089|  13.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  13.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  13.3k|    constexpr bool scannable_char =
 5093|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  13.3k|    static_assert(scannable_char,
 5095|  13.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  13.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  13.3k|    constexpr bool scannable_const =
 5099|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  13.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  13.3k|    constexpr bool scannable_disabled =
 5103|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  13.3k|    static_assert(scannable_disabled,
 5105|  13.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  13.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  13.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  13.3k|    static_assert(
 5110|  13.3k|        scannable,
 5111|  13.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  13.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  13.3k|    return arg_value{arg};
 5115|  13.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  13.3k|    {
 4902|  13.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  13.3k|    {
 7975|  13.3k|        return m_str;
 7976|  13.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  13.3k|    {
 5426|  13.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  13.3k|    {
 5379|  13.3k|        return m_argptrs;
 5380|  13.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  13.3k|{
 8820|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 876]
  |  |  ------------------
  ------------------
 8821|  12.4k|        return unexpected(result.error());
 8822|  12.4k|    }
 8823|    876|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    876|    static_cast<    \
  |  |  929|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    876|    static_cast<    \
  |  |  929|    876|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  13.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  12.4k|    {
  447|  12.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3k|    {
 1177|  13.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    876|    {
 5830|    876|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    876|    {
 5616|    876|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    876|    {
 1430|    876|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    876|    {
  437|    876|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  13.3k|    {
 5374|  13.3k|        return m_args;
 5375|  13.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  13.3k|    {
 7971|  13.3k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  6.67k|{
 8934|  6.67k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  6.67k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  6.67k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.67k|    static_cast<    \
  |  |  929|  6.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  6.67k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  26.7k|{
 5135|  26.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  26.7k|                  "Scan argument types must be default constructible");
 5137|  26.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  26.7k|                  "Scan argument types must be Destructible");
 5139|  26.7k|    static_assert(
 5140|  26.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  26.7k|        "Scan argument types must not be references");
 5142|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  26.7k|{
 5089|  26.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  26.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  26.7k|    constexpr bool scannable_char =
 5093|  26.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  26.7k|    static_assert(scannable_char,
 5095|  26.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  26.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  26.7k|    constexpr bool scannable_const =
 5099|  26.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  26.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  26.7k|    constexpr bool scannable_disabled =
 5103|  26.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  26.7k|    static_assert(scannable_disabled,
 5105|  26.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  26.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  26.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  26.7k|    static_assert(
 5110|  26.7k|        scannable,
 5111|  26.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  26.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  26.7k|    return arg_value{arg};
 5115|  26.7k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  26.7k|    {
 4902|  26.7k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   120k|{
 8591|   120k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   120k|    auto result = vscan_impl(buffer, format, args);
 8594|   120k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 119k, False: 327]
  |  |  ------------------
  ------------------
 8595|   119k|        return unexpected(result.error());
 8596|   119k|    }
 8597|    327|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    327|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   120k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   240k|{
 4720|   240k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   240k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   240k|                  "\n"
 4724|   240k|                  "Unsupported range type given as input to a scanning "
 4725|   240k|                  "function.\n"
 4726|   240k|                  "A range needs to have a character type (value type) "
 4727|   240k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   240k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   240k|                  "to be included.\n"
 4730|   240k|                  "See the scnlib documentation for more details.");
 4731|   240k|    static_assert(
 4732|   240k|        !std::is_same_v<T, custom_char_traits>,
 4733|   240k|        "\n"
 4734|   240k|        "Unsupported range type given as input to a scanning "
 4735|   240k|        "function.\n"
 4736|   240k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   240k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   240k|        "not supported.");
 4739|   240k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   240k|                  "\n"
 4741|   240k|                  "Unsupported range type given as input to a scanning "
 4742|   240k|                  "function.\n"
 4743|   240k|                  "file_marker_found cannot be used as an "
 4744|   240k|                  "source range type to scn::scan.\n"
 4745|   240k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   240k|                  "and do not provide an explicit source range, "
 4747|   240k|                  "or use scn::scan with a FILE* directly.");
 4748|   240k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   240k|                  "\n"
 4750|   240k|                  "Unsupported range type given as input to a scanning "
 4751|   240k|                  "function.\n"
 4752|   240k|                  "In order to be scannable, a range needs to satisfy "
 4753|   240k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   240k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   240k|                  "\n"
 4756|   240k|                  "Unsupported range type given as input to a scanning "
 4757|   240k|                  "function.\n"
 4758|   240k|                  "A range needs to model forward_range and have a valid "
 4759|   240k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   240k|                  "Examples of scannable ranges are std::string, "
 4761|   240k|                  "std::string_view, "
 4762|   240k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   240k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   240k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   240k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   240k|{
 4612|   240k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   240k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   240k|    }
 4616|   240k|    else {
 4617|   240k|        return invalid_char_type{};
 4618|   240k|    }
 4619|   240k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   239k|    {
 1476|   239k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   239k|    {
  447|   239k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   240k|    {
 1177|   240k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|    654|{
 5923|    654|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|    654|                      ranges::iterator_t<SourceRange>>) {
 5925|    654|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|    654|    }
 5927|    654|    else {
 5928|    654|        auto it = ranges::begin(source);
 5929|    654|        while (n > 0) {
 5930|    654|            --n;
 5931|    654|            ++it;
 5932|    654|        }
 5933|    654|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|    654|    }
 5935|    654|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    654|    {
 2724|    654|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    654|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    654|    {
 2705|    654|        return decay_copy(t.begin());
 2706|    654|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  21.4k|{
 1949|  21.4k|    return SCN_FWD(t);
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  21.4k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|    654|{
 5910|    654|    return ranges::end(source);
 5911|    654|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    654|    {
 2781|    654|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    654|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    654|    {
 2763|    654|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    654|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   413k|    {
 3316|   413k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    654|    {
 1430|    654|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|    654|    {
  437|    654|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   240k|    {
 5478|   240k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 96]
  |  |  ------------------
  ------------------
 8821|  26.6k|        return unexpected(result.error());
 8822|  26.6k|    }
 8823|     96|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   240k|    {
 1598|   240k|        return has_value();
 1599|   240k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   480k|    {
  485|   480k|        return m_has_value;
  486|   480k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   239k|    {
 1604|   239k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   239k|        return this->get_unexpected().error();
 1606|   239k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   239k|    {
  468|   239k|        return m_unexpected;
  469|   239k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.6k|    {
 1476|  26.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.6k|    {
  447|  26.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|    654|    {
 1653|    654|        return value();
 1654|    654|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    654|    {
 1627|    654|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    654|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    654|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    654|        return this->get_value();
 1629|    654|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    654|    {
  451|    654|        return m_value;
  452|    654|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|     96|    {
 5830|     96|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|    654|    {
 5681|    654|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|     96|    {
 5616|     96|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|     96|    {
 1430|     96|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|     96|    {
  437|     96|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   240k|{
 7696|   240k|    return s;
 7697|   240k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   240k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   120k|{
 8607|   120k|#if !SCN_DISABLE_LOCALE
 8608|   120k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   120k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   120k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   120k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   120k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 119k, False: 327]
  |  |  ------------------
  ------------------
 8615|   119k|        return unexpected(result.error());
 8616|   119k|    }
 8617|    327|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    327|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   120k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.5k, False: 186]
  |  |  ------------------
  ------------------
 8821|  26.5k|        return unexpected(result.error());
 8822|  26.5k|    }
 8823|    186|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  26.5k|    {
 1476|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  26.5k|    {
  626|  26.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.5k|    {
  689|  26.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.5k|                                  std::forward<Args>(args)...);
  691|  26.5k|        m_has_value = false;
  692|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.0k|    {
  718|  53.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    186|    {
 5830|    186|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    186|    {
  616|    186|        construct(std::forward<Args>(args)...);
  617|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    186|    {
  682|    186|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    186|        m_has_value = true;
  684|    186|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    186|{
  392|    186|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    186|        T(std::forward<Args>(args)...);
  394|    186|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    186|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    372|    {
  706|    372|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    372|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    372|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    372|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  26.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  26.7k|    {
  631|  26.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 186, False: 26.5k]
  ------------------
  632|    186|            destroy_value();
  633|    186|        }
  634|  26.5k|        else {
  635|  26.5k|            destroy_unexpected();
  636|  26.5k|        }
  637|  26.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  26.7k|    {
  675|  26.7k|        return m_has_value;
  676|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    186|    {
  696|    186|        scn::detail::destroy_at(value_ptr());
  697|    186|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    186|{
  398|    186|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    186|        for (auto& elem : *p) {
  400|    186|            scn::detail::destroy_at(&elem);
  401|    186|        }
  402|    186|    }
  403|    186|    else {
  404|    186|        p->~T();
  405|    186|    }
  406|    186|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.5k|    {
  700|  26.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.5k, False: 186]
  |  |  ------------------
  ------------------
 8821|  26.5k|        return unexpected(result.error());
 8822|  26.5k|    }
 8823|    186|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  26.5k|    {
 1476|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  26.5k|    {
  626|  26.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.5k|    {
  689|  26.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.5k|                                  std::forward<Args>(args)...);
  691|  26.5k|        m_has_value = false;
  692|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.0k|    {
  718|  53.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    186|    {
 5830|    186|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    186|    {
  616|    186|        construct(std::forward<Args>(args)...);
  617|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    186|    {
  682|    186|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    186|        m_has_value = true;
  684|    186|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    186|{
  392|    186|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    186|        T(std::forward<Args>(args)...);
  394|    186|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    186|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    372|    {
  706|    372|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    372|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    372|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    372|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  26.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  26.7k|    {
  631|  26.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 186, False: 26.5k]
  ------------------
  632|    186|            destroy_value();
  633|    186|        }
  634|  26.5k|        else {
  635|  26.5k|            destroy_unexpected();
  636|  26.5k|        }
  637|  26.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  26.7k|    {
  675|  26.7k|        return m_has_value;
  676|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    186|    {
  696|    186|        scn::detail::destroy_at(value_ptr());
  697|    186|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    186|{
  398|    186|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    186|        for (auto& elem : *p) {
  400|    186|            scn::detail::destroy_at(&elem);
  401|    186|        }
  402|    186|    }
  403|    186|    else {
  404|    186|        p->~T();
  405|    186|    }
  406|    186|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.5k|    {
  700|  26.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  26.7k|{
 5396|  26.7k|    detail::check_scan_arg_types<Args...>();
 5397|  26.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  26.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  26.7k|{
 5135|  26.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  26.7k|                  "Scan argument types must be default constructible");
 5137|  26.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  26.7k|                  "Scan argument types must be Destructible");
 5139|  26.7k|    static_assert(
 5140|  26.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  26.7k|        "Scan argument types must not be references");
 5142|  26.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  26.7k|    {
 5349|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  26.7k|    {
 5360|  26.7k|        return {detail::make_arg<
 5361|  26.7k|            kind, Context,
 5362|  26.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  26.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  26.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  26.7k|{
 5170|  26.7k|    return make_value<Context>(value).ref_value;
 5171|  26.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  26.7k|{
 5120|  26.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  26.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  26.7k|                                  needs_context_tag>) {
 5124|  26.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  26.7k|    }
 5126|  26.7k|    else {
 5127|  26.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  26.7k|            value, context_tag<Context>{}));
 5129|  26.7k|    }
 5130|  26.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  26.7k|    {                                                                        \
 4959|  26.7k|        return val;                                                          \
 4960|  26.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  26.7k|{
 5089|  26.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  26.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  26.7k|    constexpr bool scannable_char =
 5093|  26.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  26.7k|    static_assert(scannable_char,
 5095|  26.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  26.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  26.7k|    constexpr bool scannable_const =
 5099|  26.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  26.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  26.7k|    constexpr bool scannable_disabled =
 5103|  26.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  26.7k|    static_assert(scannable_disabled,
 5105|  26.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  26.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  26.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  26.7k|    static_assert(
 5110|  26.7k|        scannable,
 5111|  26.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  26.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  26.7k|    return arg_value{arg};
 5115|  26.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  26.7k|    {
 4902|  26.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  26.7k|    {
 7975|  26.7k|        return m_str;
 7976|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  26.7k|    {
 5426|  26.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  26.7k|    {
 5379|  26.7k|        return m_argptrs;
 5380|  26.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  26.7k|{
 8820|  26.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.5k, False: 186]
  |  |  ------------------
  ------------------
 8821|  26.5k|        return unexpected(result.error());
 8822|  26.5k|    }
 8823|    186|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  26.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  26.5k|    {
 1476|  26.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  26.5k|    {
  447|  26.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  26.7k|    {
 1177|  26.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    186|    {
 5830|    186|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    186|    {
 5616|    186|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    186|    {
  437|    186|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  26.7k|    {
 5374|  26.7k|        return m_args;
 5375|  26.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  26.7k|    {
 7971|  26.7k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   808k|    {
 3568|   808k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   808k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   808k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  3.83M|    {
 3574|  3.83M|        return m_code == good;
 3575|  3.83M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   100k|    {
 3585|   100k|        return m_code;
 3586|   100k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  4.89k|    {
 6181|  4.89k|        return m_size;
 6182|  4.89k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  4.48k|    {
 6222|  4.48k|        SCN_GCC_COMPAT_PUSH
 6223|  4.48k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  4.48k|        switch (type) {
 6225|  1.98k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 1.98k, False: 2.50k]
  ------------------
 6226|  1.98k|                return 10;
 6227|     54|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 54, False: 4.42k]
  ------------------
 6228|     54|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 4.48k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     32|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 32, False: 4.44k]
  ------------------
 6233|     32|                return 2;
 6234|     86|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 86, False: 4.39k]
  ------------------
 6235|     86|                return 8;
 6236|     36|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 36, False: 4.44k]
  ------------------
 6237|     94|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 58, False: 4.42k]
  ------------------
 6238|     94|                return 10;
 6239|  2.23k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.23k, False: 2.24k]
  ------------------
 6240|  2.23k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 4.48k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  4.48k|        }
 6246|  4.48k|        SCN_GCC_COMPAT_POP
 6247|  4.48k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   107k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  11.9k|    {
 6263|  11.9k|        m_specs.align = align;
 6264|  11.9k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    400|    {
 6272|    400|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    400|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    400|            m_specs.localized = true;
 6274|    400|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    400|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  33.5k|    {
 6282|  33.5k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 33.5k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  33.5k|        m_specs.width = width;
 6289|  33.5k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  13.9k|    {
 6292|  13.9k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 74, False: 13.8k]
  ------------------
 6293|       |            // clang-format off
 6294|     74|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     74|        }
 6297|       |
 6298|  13.8k|        m_specs.precision = prec;
 6299|  13.8k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   140k|    {
 6303|   140k|        m_specs.type = type;
 6304|   140k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  2.11M|    {
 6308|  2.11M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  2.11M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  2.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.83M, False: 277k]
  |  |  ------------------
  ------------------
 6310|  1.83M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  1.83M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  1.83M|        }
 6313|   277k|        else {
 6314|   277k|            m_specs.charset_has_nonascii = true;
 6315|   277k|        }
 6316|  2.11M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  12.7k|    {
 6320|  12.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  12.7k|        const auto end_value = static_cast<unsigned>(end);
 6322|  12.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  12.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  12.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.76k, False: 6.02k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  6.76k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  6.76k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   421k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 414k, False: 6.76k]
  ------------------
 6329|   414k|                m_specs.charset_literals[v / 8] |=
 6330|   414k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   414k|            }
 6332|  6.76k|        }
 6333|  6.02k|        else {
 6334|  6.02k|            m_specs.charset_has_nonascii = true;
 6335|  6.02k|        }
 6336|  12.7k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  2.62k|    {
 6340|  2.62k|        m_specs.charset_is_inverted = true;
 6341|  2.62k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|  72.9k|    {
 6359|  72.9k|        m_specs.regexp_flags = flags;
 6360|  72.9k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  11.7k|    {
 6365|  11.7k|        SCN_UNLIKELY_ATTR
 6366|  11.7k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  11.7k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.24M|    {
 6376|  2.24M|        return static_cast<bool>(m_error);
 6377|  2.24M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   100k|{
 3609|   100k|    return a.code() == b;
 3610|   100k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   100k|{
 3613|   100k|    return !(a == b);
 3614|   100k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   188k|{
 3908|   188k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   188k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   188k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   188k|    };
 3913|       |
 3914|   188k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 166k, False: 21.9k]
  ------------------
 3915|   166k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   166k|        return static_cast<char32_t>(input[0]);
 3917|   166k|    }
 3918|       |
 3919|  21.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 21.1k, False: 734]
  ------------------
 3920|  21.1k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  21.1k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  21.1k|        char32_t cp{};
 3924|  21.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  21.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  21.1k|        return cp;
 3927|  21.1k|    }
 3928|       |
 3929|    734|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 596, False: 138]
  ------------------
 3930|    596|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|    596|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|    596|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|    596|        char32_t cp{};
 3935|    596|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|    596|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|    596|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|    596|        return cp;
 3939|    596|    }
 3940|       |
 3941|    138|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 138, False: 0]
  ------------------
 3942|    138|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    138|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    138|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    138|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    138|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    138|        char32_t cp{};
 3949|    138|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    138|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    138|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    138|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    138|        return cp;
 3954|    138|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   103k|{
 6111|   103k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   103k|                                    static_cast<unsigned>(b));
 6113|   103k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  11.0k|{
 6116|  11.0k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  11.0k|                                    static_cast<unsigned>(b));
 6118|  11.0k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  11.0k|{
 6131|  11.0k|    return a = a | b;
 6132|  11.0k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.01k|{
 7063|  1.01k|    switch (type) {
 7064|    108|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 108, False: 906]
  ------------------
 7065|    108|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.01k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.01k]
  ------------------
 7069|    100|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 100, False: 914]
  ------------------
 7070|    100|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.01k]
  ------------------
 7071|    100|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.01k]
  ------------------
 7072|    100|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.01k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.01k]
  ------------------
 7076|    100|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 100, False: 914]
  ------------------
 7077|    100|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.01k]
  ------------------
 7078|    100|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.01k]
  ------------------
 7079|    100|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    100|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 100, False: 914]
  ------------------
 7082|    100|            return arg_type_category::pointer;
 7083|    100|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 100, False: 914]
  ------------------
 7084|    100|            return arg_type_category::boolean;
 7085|     62|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 62, False: 952]
  ------------------
 7086|    100|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 38, False: 976]
  ------------------
 7087|    100|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.01k]
  ------------------
 7088|    100|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 1.01k]
  ------------------
 7091|    100|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 100, False: 914]
  ------------------
 7092|    100|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.01k]
  ------------------
 7093|    100|            return arg_type_category::floating;
 7094|       |
 7095|     62|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 62, False: 952]
  ------------------
 7096|    164|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 102, False: 912]
  ------------------
 7097|    204|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 40, False: 974]
  ------------------
 7098|    306|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 102, False: 912]
  ------------------
 7099|    306|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.01k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.01k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.01k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.01k|            SCN_CLANG_POP
 7110|  1.01k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.01k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.22k|{
 3654|  1.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.22k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  22.4k|{
 7149|  22.4k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  22.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.1k, False: 2.26k]
  |  |  ------------------
  ------------------
 7150|  20.1k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  20.1k|    }
 7152|  2.26k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 112, False: 2.15k]
  ------------------
 7153|    112|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 100]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|    100|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    100|    }
 7165|  2.26k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.86k|{
 3654|  2.86k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.86k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  11.2k|{
 7193|  11.2k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 10.2k, False: 1.00k]
  ------------------
 7194|  11.2k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 130, False: 10.0k]
  ------------------
 7195|  10.2k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 9.95k, False: 134]
  ------------------
 7196|  10.0k|        SCN_UNLIKELY_ATTR
 7197|  10.0k|        return handler.on_error("Invalid type specifier for float type");
 7198|  10.0k|    }
 7199|  11.2k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  46.2k|    {
  485|  46.2k|        return m_has_value;
  486|  46.2k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  23.1k|    {
 1598|  23.1k|        return has_value();
 1599|  23.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  23.1k|    {
  451|  23.1k|        return m_value;
  452|  23.1k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  23.1k|    {
 1627|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  23.1k|        return this->get_value();
 1629|  23.1k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  23.1k|    {
 1663|  23.1k|        return std::move(value());
 1664|  23.1k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  11.9k|{
 3654|  11.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  11.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  7.92k|{
 3654|  7.92k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  7.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  7.92k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    234|{
 3654|    234|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    234|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  1.12k|{
 3654|  1.12k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.12k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.43k|{
 3654|  1.43k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.43k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  33.4k|{
 7205|  33.4k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 2.94k, False: 30.4k]
  ------------------
 7206|  33.4k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 720, False: 29.7k]
  ------------------
 7207|  33.4k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 4.66k, False: 25.0k]
  ------------------
 7208|  33.4k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 21.8k, False: 3.19k]
  ------------------
 7209|  33.4k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 2.37k, False: 828]
  ------------------
 7210|  32.5k|        return;
 7211|  32.5k|    }
 7212|    828|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 174, False: 654]
  ------------------
 7213|    174|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 162]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    162|        return;
 7219|    174|    }
 7220|    654|    SCN_UNLIKELY_ATTR
 7221|    654|    handler.on_error("Invalid type specifier for string");
 7222|    654|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  4.71k|{
 3654|  4.71k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.71k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     28|{
 3654|     28|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     28|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     28|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  11.2k|{
 7239|  11.2k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 10.2k, False: 1.00k]
  ------------------
 7240|  11.2k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 9.97k, False: 246]
  ------------------
 7241|  11.2k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 9.95k, False: 22]
  ------------------
 7242|  11.2k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 9.93k, False: 22]
  ------------------
 7243|  11.2k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 9.91k, False: 18]
  ------------------
 7244|  11.2k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 9.89k, False: 20]
  ------------------
 7245|  11.2k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 9.86k, False: 34]
  ------------------
 7246|  11.2k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 9.84k, False: 14]
  ------------------
 7247|  9.84k|        SCN_UNLIKELY_ATTR
 7248|  9.84k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  9.84k|    }
 7250|  11.2k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  11.1k|{
 7171|  11.1k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 10.0k, False: 1.07k]
  ------------------
 7172|  11.1k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.07k]
  ------------------
 7173|  10.0k|        SCN_UNLIKELY_ATTR
 7174|  10.0k|        return handler.on_error("Invalid type specifier for character type");
 7175|  10.0k|    }
 7176|  11.1k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  11.1k|{
 7228|  11.1k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 10.1k, False: 982]
  ------------------
 7229|  11.1k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 10.1k, False: 12]
  ------------------
 7230|  10.1k|        SCN_UNLIKELY_ATTR
 7231|  10.1k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  10.1k|    }
 7233|  11.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|    102|{
 3654|    102|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    102|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   106k|{
 3715|   106k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   106k|                                          const CharT*, const CharT*>) {
 3717|   106k|        return {first, last};
 3718|   106k|    }
 3719|   106k|    else {
 3720|   106k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   106k|    }
 3722|   106k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   492M|{
 3715|   492M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   492M|                                          const CharT*, const CharT*>) {
 3717|   492M|        return {first, last};
 3718|   492M|    }
 3719|   492M|    else {
 3720|   492M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   492M|    }
 3722|   492M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  1.85M|    {
 3330|  1.85M|        return m_iterator;
 3331|  1.85M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  2.04M|    {
 3334|  2.04M|        return m_sentinel;
 3335|  2.04M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   624k|    {
 3330|   624k|        return m_iterator;
 3331|   624k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   986M|    {
 3334|   986M|        return m_sentinel;
 3335|   986M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   187k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    112|{
 1211|    112|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    112|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.13k|    {
  361|  2.13k|        return m_unexpected;
  362|  2.13k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  5.31k|{
 3654|  5.31k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.31k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  38.6k|    {
  347|  38.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  38.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  38.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   109k|    {
 1476|   109k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   110k|    {
  447|   110k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   142k|    {
 1177|   142k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  29.8k|    {
 1430|  29.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  29.8k|    {
  437|  29.8k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   284k|    {
  485|   284k|        return m_has_value;
  486|   284k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   109k|    {
 1604|   109k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   109k|        return this->get_unexpected().error();
 1606|   109k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   109k|    {
  468|   109k|        return m_unexpected;
  469|   109k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  21.3k|    {
 1663|  21.3k|        return std::move(value());
 1664|  21.3k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  31.1k|    {
 1627|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  31.1k|        return this->get_value();
 1629|  31.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  31.1k|    {
  451|  31.1k|        return m_value;
  452|  31.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  68.9k|    {
 1476|  68.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  69.7k|    {
  447|  69.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  90.1k|    {
 1177|  90.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  20.0k|    {
 1430|  20.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  20.0k|    {
  437|  20.0k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  91.0k|    {
 1598|  91.0k|        return has_value();
 1599|  91.0k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   179k|    {
  485|   179k|        return m_has_value;
  486|   179k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  68.9k|    {
 1604|  68.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  68.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  68.9k|        return this->get_unexpected().error();
 1606|  68.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  68.9k|    {
  468|  68.9k|        return m_unexpected;
  469|  68.9k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  16.1k|    {
 1663|  16.1k|        return std::move(value());
 1664|  16.1k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  19.5k|    {
 1627|  19.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.5k|        return this->get_value();
 1629|  19.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  19.5k|    {
  451|  19.5k|        return m_value;
  452|  19.5k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.94k|    {
 1837|  8.94k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.94k|                                            std::forward<F>(f));
 1839|  8.94k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.94k|{
 1323|  8.94k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.94k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.94k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.94k|            return result(*std::forward<Exp>(exp));
 1327|  8.94k|        }
 1328|       |
 1329|  8.94k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.94k|        return result(unexpect, monostate{});
 1331|  8.94k|    }
 1332|  8.94k|    else {
 1333|  8.94k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.94k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.94k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.94k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.94k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.94k|    }
 1340|  8.94k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  92.4k|    {
  485|  92.4k|        return m_has_value;
  486|  92.4k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  10.8k|    {
 1663|  10.8k|        return std::move(value());
 1664|  10.8k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  43.1k|    {
 1627|  43.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  43.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  43.1k|        return this->get_value();
 1629|  43.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  43.1k|    {
  451|  43.1k|        return m_value;
  452|  43.1k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    982|    {
 1486|    982|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   531k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  3.47k|    {
 6187|  3.47k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  3.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  3.47k|        CharT r{};
 6189|  3.47k|        std::memcpy(&r, m_data, m_size);
 6190|  3.47k|        return r;
 6191|  3.47k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.20k|    {
  347|  1.20k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.20k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.31k|    {
  356|  1.31k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.31k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    572|    {
 6196|    572|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    572|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    112|    {
  347|    112|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    112|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    112|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  19.5k|    {
  361|  19.5k|        return m_unexpected;
  362|  19.5k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.73k|    {
  356|  3.73k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.73k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  29.6k|    {
  347|  29.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.6k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  29.6k|    {
  361|  29.6k|        return m_unexpected;
  362|  29.6k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  29.6k|    {
  356|  29.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  29.6k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    708|{
 1211|    708|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    708|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.01k|    {
  347|  3.01k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.01k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.01k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.46k|{
 1211|  1.46k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.46k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  10.4k|{
  326|  10.4k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  10.4k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  77.1k|    {
 3346|  77.1k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  77.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    490|    {
 1476|    490|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    490|    {
  447|    490|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  49.2k|    {
 1177|  49.2k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  48.7k|    {
 1430|  48.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  48.7k|    {
  437|  48.7k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  38.2k|    {
 1598|  38.2k|        return has_value();
 1599|  38.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  32.2k|    {
 1653|  32.2k|        return value();
 1654|  32.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  5.88k|    {
 1430|  5.88k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  5.88k|    {
  437|  5.88k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.25k|    {
 1177|  6.25k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    370|    {
 1476|    370|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    370|    {
  447|    370|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  3.34k|    {
 1598|  3.34k|        return has_value();
 1599|  3.34k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  10.5k|    {
  485|  10.5k|        return m_has_value;
  486|  10.5k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.38k|    {
 1653|  1.38k|        return value();
 1654|  1.38k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  3.95k|    {
 1627|  3.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.95k|        return this->get_value();
 1629|  3.95k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.95k|    {
  451|  3.95k|        return m_value;
  452|  3.95k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    112|    {
 1476|    112|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.39k|    {
 1177|  5.39k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  5.27k|    {
 1430|  5.27k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  5.27k|    {
  437|  5.27k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    834|    {
 1837|    834|        return detail::transform_error_impl(std::move(*this),
 1838|    834|                                            std::forward<F>(f));
 1839|    834|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    834|{
 1323|    834|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    834|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    834|        if (SCN_LIKELY(exp.has_value())) {
 1326|    834|            return result(*std::forward<Exp>(exp));
 1327|    834|        }
 1328|       |
 1329|    834|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    834|        return result(unexpect, monostate{});
 1331|    834|    }
 1332|    834|    else {
 1333|    834|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    834|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    834|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 834, False: 0]
  |  |  ------------------
  ------------------
 1335|    834|                   ? result(*std::forward<Exp>(exp))
 1336|    834|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    834|    }
 1340|    834|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.56k|    {
 1663|  2.56k|        return std::move(value());
 1664|  2.56k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  2.32k|    {
 1430|  2.32k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.32k|    {
  437|  2.32k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.9k|    {
 1177|  10.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    340|    {
 1614|    340|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    340|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    340|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    340|        return std::move(this->get_unexpected().error());
 1616|    340|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    340|    {
  468|    340|        return m_unexpected;
  469|    340|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.60k|    {
 1486|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  7.75k|    {
  447|  7.75k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.96k|    {
 2724|  1.96k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.96k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.96k|    {
 2705|  1.96k|        return decay_copy(t.begin());
 2706|  1.96k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  4.24k|{
 1949|  4.24k|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.24k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  1.96k|    {
 3330|  1.96k|        return m_iterator;
 3331|  1.96k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.96k|    {
 2781|  1.96k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.96k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.96k|    {
 2763|  1.96k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.96k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  1.96k|    {
 3334|  1.96k|        return m_sentinel;
 3335|  1.96k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  1.96k|    {
 3316|  1.96k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  5.39k|    {
 1598|  5.39k|        return has_value();
 1599|  5.39k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  10.7k|    {
  485|  10.7k|        return m_has_value;
  486|  10.7k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  5.27k|    {
 1663|  5.27k|        return std::move(value());
 1664|  5.27k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  5.27k|    {
 1627|  5.27k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.27k|        return this->get_value();
 1629|  5.27k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.27k|    {
  451|  5.27k|        return m_value;
  452|  5.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.7k|    {
 1177|  24.7k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  24.7k|    {
 1430|  24.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  24.7k|    {
  437|  24.7k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  24.7k|    {
 1598|  24.7k|        return has_value();
 1599|  24.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  49.5k|    {
  485|  49.5k|        return m_has_value;
  486|  49.5k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  24.7k|    {
 1663|  24.7k|        return std::move(value());
 1664|  24.7k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  24.7k|    {
 1627|  24.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  24.7k|        return this->get_value();
 1629|  24.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  24.7k|    {
  451|  24.7k|        return m_value;
  452|  24.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  6.15k|    {
 1476|  6.15k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    662|    {
 1476|    662|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.00k|    {
  447|  1.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.76k|    {
 1177|  7.76k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  5.03k|    {
 1476|  5.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  5.03k|    {
  447|  5.03k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  7.13k|    {
 1598|  7.13k|        return has_value();
 1599|  7.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  14.0k|    {
  485|  14.0k|        return m_has_value;
  486|  14.0k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.60k|    {
 1604|  2.60k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.60k|        return this->get_unexpected().error();
 1606|  2.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.56k|    {
  468|  3.56k|        return m_unexpected;
  469|  3.56k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.29k|    {
 1430|  1.29k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.29k|    {
  437|  1.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.29k|    {
 1177|  1.29k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.73k|    {
 1627|  1.73k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.73k|        return this->get_value();
 1629|  1.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.73k|    {
  451|  1.73k|        return m_value;
  452|  1.73k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    974|    {
 1598|    974|        return has_value();
 1599|    974|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.59k|    {
  485|  2.59k|        return m_has_value;
  486|  2.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    974|    {
 1177|    974|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.29k|    {
 1663|  1.29k|        return std::move(value());
 1664|  1.29k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.29k|    {
 1627|  1.29k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29k|        return this->get_value();
 1629|  1.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.29k|    {
  451|  1.29k|        return m_value;
  452|  1.29k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   156k|    {
 3334|   156k|        return m_sentinel;
 3335|   156k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  2.07k|    {
 1837|  2.07k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.07k|                                            std::forward<F>(f));
 1839|  2.07k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  2.07k|{
 1323|  2.07k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.07k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.07k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.07k|            return result(*std::forward<Exp>(exp));
 1327|  2.07k|        }
 1328|       |
 1329|  2.07k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.07k|        return result(unexpect, monostate{});
 1331|  2.07k|    }
 1332|  2.07k|    else {
 1333|  2.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.73k, False: 340]
  |  |  ------------------
  ------------------
 1335|  2.07k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.07k|                   : result(unexpect,
 1337|    340|                            trivial_invoke(std::forward<F>(f),
 1338|    340|                                           std::forward<Exp>(exp).error()));
 1339|  2.07k|    }
 1340|  2.07k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.73k|    {
 1430|  1.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.73k|    {
  437|  1.73k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    340|    {
 1486|    340|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.73k|    {
 1663|  1.73k|        return std::move(value());
 1664|  1.73k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   274k|    {
 3330|   274k|        return m_iterator;
 3331|   274k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    974|    {
 1430|    974|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    974|    {
  437|    974|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    974|    {
 1837|    974|        return detail::transform_error_impl(std::move(*this),
 1838|    974|                                            std::forward<F>(f));
 1839|    974|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    974|{
 1323|    974|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    974|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    974|        if (SCN_LIKELY(exp.has_value())) {
 1326|    974|            return result(*std::forward<Exp>(exp));
 1327|    974|        }
 1328|       |
 1329|    974|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    974|        return result(unexpect, monostate{});
 1331|    974|    }
 1332|    974|    else {
 1333|    974|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    974|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    974|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 974, False: 0]
  |  |  ------------------
  ------------------
 1335|    974|                   ? result(*std::forward<Exp>(exp))
 1336|    974|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    974|    }
 1340|    974|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.94k|    {
  485|  1.94k|        return m_has_value;
  486|  1.94k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    974|    {
 1663|    974|        return std::move(value());
 1664|    974|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    974|    {
 1627|    974|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    974|        return this->get_value();
 1629|    974|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    974|    {
  451|    974|        return m_value;
  452|    974|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    974|    {
 1430|    974|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    974|    {
  437|    974|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    974|    {
 1177|    974|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    974|    {
 1598|    974|        return has_value();
 1599|    974|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.94k|    {
  485|  1.94k|        return m_has_value;
  486|  1.94k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    974|    {
 1663|    974|        return std::move(value());
 1664|    974|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    974|    {
 1627|    974|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    974|        return this->get_value();
 1629|    974|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    974|    {
  451|    974|        return m_value;
  452|    974|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    958|    {
 1837|    958|        return detail::transform_error_impl(std::move(*this),
 1838|    958|                                            std::forward<F>(f));
 1839|    958|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    958|{
 1323|    958|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    958|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    958|        if (SCN_LIKELY(exp.has_value())) {
 1326|    958|            return result(*std::forward<Exp>(exp));
 1327|    958|        }
 1328|       |
 1329|    958|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    958|        return result(unexpect, monostate{});
 1331|    958|    }
 1332|    958|    else {
 1333|    958|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    958|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    958|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 958]
  |  |  ------------------
  ------------------
 1335|    958|                   ? result(*std::forward<Exp>(exp))
 1336|    958|                   : result(unexpect,
 1337|    958|                            trivial_invoke(std::forward<F>(f),
 1338|    958|                                           std::forward<Exp>(exp).error()));
 1339|    958|    }
 1340|    958|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    958|    {
 1614|    958|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    958|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    958|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    958|        return std::move(this->get_unexpected().error());
 1616|    958|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.60k|    {
 3648|  1.60k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  98.8k|    {
 3316|  98.8k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  11.3k|    {
 1598|  11.3k|        return has_value();
 1599|  11.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  21.9k|    {
  485|  21.9k|        return m_has_value;
  486|  21.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  7.43k|    {
 1604|  7.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.43k|        return this->get_unexpected().error();
 1606|  7.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  7.43k|    {
  468|  7.43k|        return m_unexpected;
  469|  7.43k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.32k|    {
 1663|  2.32k|        return std::move(value());
 1664|  2.32k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  3.24k|    {
 1627|  3.24k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.24k|        return this->get_value();
 1629|  3.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.24k|    {
  451|  3.24k|        return m_value;
  452|  3.24k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.06k|    {
 1476|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.16k|    {
  447|  1.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.5k|    {
 1177|  14.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  11.4k|    {
 1476|  11.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  11.4k|    {
  447|  11.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  15.5k|    {
 1598|  15.5k|        return has_value();
 1599|  15.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.2k|    {
  485|  24.2k|        return m_has_value;
  486|  24.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.78k|    {
 1604|  5.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.78k|        return this->get_unexpected().error();
 1606|  5.78k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.78k|    {
  468|  5.78k|        return m_unexpected;
  469|  5.78k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.74k|    {
 1430|  3.74k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.74k|    {
  437|  3.74k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.74k|    {
 1177|  3.74k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.93k|    {
 1627|  1.93k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.93k|        return this->get_value();
 1629|  1.93k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.93k|    {
  451|  1.93k|        return m_value;
  452|  1.93k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.79k|    {
 1598|  2.79k|        return has_value();
 1599|  2.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.49k|    {
  485|  7.49k|        return m_has_value;
  486|  7.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.79k|    {
 1177|  2.79k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.74k|    {
 1663|  3.74k|        return std::move(value());
 1664|  3.74k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.74k|    {
 1627|  3.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.74k|        return this->get_value();
 1629|  3.74k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.74k|    {
  451|  3.74k|        return m_value;
  452|  3.74k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  50.2k|    {
 3221|  50.2k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.76k, False: 48.5k]
  ------------------
 3222|  50.2k|                   ? nullptr
 3223|  50.2k|                   : std::addressof(*ranges::begin(derived()));
 3224|  50.2k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  50.2k|    {
 3005|  50.2k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  50.2k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  50.2k|    {
 2978|  50.2k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  50.2k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  50.2k|    {
 3339|  50.2k|        return m_iterator == m_sentinel;
 3340|  50.2k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  98.8k|    {
 3180|  98.8k|        return static_cast<D&>(*this);
 3181|  98.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  48.5k|    {
 2724|  48.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  48.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  48.5k|    {
 2705|  48.5k|        return decay_copy(t.begin());
 2706|  48.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.93k|    {
 1430|  1.93k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.93k|    {
  437|  1.93k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.79k|    {
 1430|  2.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.79k|    {
  437|  2.79k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.79k|    {
 1837|  2.79k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.79k|                                            std::forward<F>(f));
 1839|  2.79k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.79k|{
 1323|  2.79k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.79k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.79k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.79k|            return result(*std::forward<Exp>(exp));
 1327|  2.79k|        }
 1328|       |
 1329|  2.79k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.79k|        return result(unexpect, monostate{});
 1331|  2.79k|    }
 1332|  2.79k|    else {
 1333|  2.79k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.79k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.79k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.79k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.79k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.79k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.79k|    }
 1340|  2.79k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.58k|    {
  485|  5.58k|        return m_has_value;
  486|  5.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.79k|    {
 1663|  2.79k|        return std::move(value());
 1664|  2.79k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.79k|    {
 1627|  2.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.79k|        return this->get_value();
 1629|  2.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.79k|    {
  451|  2.79k|        return m_value;
  452|  2.79k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.79k|    {
 1430|  2.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.79k|    {
  437|  2.79k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.79k|    {
 1177|  2.79k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.79k|    {
 1598|  2.79k|        return has_value();
 1599|  2.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.58k|    {
  485|  5.58k|        return m_has_value;
  486|  5.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.79k|    {
 1663|  2.79k|        return std::move(value());
 1664|  2.79k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.79k|    {
 1627|  2.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.79k|        return this->get_value();
 1629|  2.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.79k|    {
  451|  2.79k|        return m_value;
  452|  2.79k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     32|    {
 1476|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     32|    {
  626|     32|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     32|    {
  689|     32|        scn::detail::construct_at(unexpected_ptr(),
  690|     32|                                  std::forward<Args>(args)...);
  691|     32|        m_has_value = false;
  692|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     96|    {
  718|     96|        return reinterpret_cast<unexpected<E>*>(
  719|     96|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     96|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     96|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     32|    {
 1177|     32|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     32|    {
 1598|     32|        return has_value();
 1599|     32|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     96|    {
  675|     96|        return m_has_value;
  676|     96|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     32|    {
 1604|     32|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     32|        return this->get_unexpected().error();
 1606|     32|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     32|    {
  658|     32|        return *unexpected_ptr();
  659|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     32|    {
  631|     32|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 32]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     32|        else {
  635|     32|            destroy_unexpected();
  636|     32|        }
  637|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     32|    {
  700|     32|        scn::detail::destroy_at(unexpected_ptr());
  701|     32|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  32.8k|    {
 2855|  32.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  32.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  32.8k|    {
 2836|  32.8k|        return t.data();
 2837|  32.8k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   360k|    {
 1476|   360k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   360k|    {
  447|   360k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   364k|    {
 1177|   364k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  3.46k|    {
 1430|  3.46k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  3.46k|    {
  437|  3.46k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.84k|{
 1211|  2.84k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.84k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    322|    {
 1837|    322|        return detail::transform_error_impl(std::move(*this),
 1838|    322|                                            std::forward<F>(f));
 1839|    322|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    322|{
 1323|    322|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    322|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    322|        if (SCN_LIKELY(exp.has_value())) {
 1326|    322|            return result(*std::forward<Exp>(exp));
 1327|    322|        }
 1328|       |
 1329|    322|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    322|        return result(unexpect, monostate{});
 1331|    322|    }
 1332|    322|    else {
 1333|    322|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    322|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    322|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 322, False: 0]
  |  |  ------------------
  ------------------
 1335|    322|                   ? result(*std::forward<Exp>(exp))
 1336|    322|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    322|    }
 1340|    322|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    322|    {
 1430|    322|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    322|    {
  437|    322|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    322|    {
 1177|    322|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    322|    {
 1598|    322|        return has_value();
 1599|    322|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    644|    {
  485|    644|        return m_has_value;
  486|    644|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    322|    {
 1663|    322|        return std::move(value());
 1664|    322|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    322|    {
 1627|    322|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    322|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    322|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    322|        return this->get_value();
 1629|    322|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    322|    {
  451|    322|        return m_value;
  452|    322|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    644|    {
 1823|    644|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    644|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    644|{
 1323|    644|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    644|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    644|        if (SCN_LIKELY(exp.has_value())) {
 1326|    644|            return result(*std::forward<Exp>(exp));
 1327|    644|        }
 1328|       |
 1329|    644|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    644|        return result(unexpect, monostate{});
 1331|    644|    }
 1332|    644|    else {
 1333|    644|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    644|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    644|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 644]
  |  |  ------------------
  ------------------
 1335|    644|                   ? result(*std::forward<Exp>(exp))
 1336|    644|                   : result(unexpect,
 1337|    644|                            trivial_invoke(std::forward<F>(f),
 1338|    644|                                           std::forward<Exp>(exp).error()));
 1339|    644|    }
 1340|    644|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|    918|    {
 1653|    918|        return value();
 1654|    918|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    316|    {
 2724|    316|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    316|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    316|    {
 2705|    316|        return decay_copy(t.begin());
 2706|    316|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    300|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    956|    {
 1837|    956|        return detail::transform_error_impl(std::move(*this),
 1838|    956|                                            std::forward<F>(f));
 1839|    956|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    956|{
 1323|    956|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    956|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    956|        if (SCN_LIKELY(exp.has_value())) {
 1326|    956|            return result(*std::forward<Exp>(exp));
 1327|    956|        }
 1328|       |
 1329|    956|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    956|        return result(unexpect, monostate{});
 1331|    956|    }
 1332|    956|    else {
 1333|    956|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    956|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    956|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 956, False: 0]
  |  |  ------------------
  ------------------
 1335|    956|                   ? result(*std::forward<Exp>(exp))
 1336|    956|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    956|    }
 1340|    956|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    956|    {
 1430|    956|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    956|    {
  437|    956|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    956|    {
 1177|    956|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    956|    {
 1598|    956|        return has_value();
 1599|    956|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.91k|    {
  485|  1.91k|        return m_has_value;
  486|  1.91k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    956|    {
 1663|    956|        return std::move(value());
 1664|    956|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    956|    {
 1627|    956|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    956|        return this->get_value();
 1629|    956|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    956|    {
  451|    956|        return m_value;
  452|    956|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    982|    {
 1823|    982|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    982|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    982|{
 1323|    982|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    982|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    982|        if (SCN_LIKELY(exp.has_value())) {
 1326|    982|            return result(*std::forward<Exp>(exp));
 1327|    982|        }
 1328|       |
 1329|    982|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    982|        return result(unexpect, monostate{});
 1331|    982|    }
 1332|    982|    else {
 1333|    982|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    982|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    982|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 982]
  |  |  ------------------
  ------------------
 1335|    982|                   ? result(*std::forward<Exp>(exp))
 1336|    982|                   : result(unexpect,
 1337|    982|                            trivial_invoke(std::forward<F>(f),
 1338|    982|                                           std::forward<Exp>(exp).error()));
 1339|    982|    }
 1340|    982|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    982|    {
 3648|    982|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  9.84k|    {
 1653|  9.84k|        return value();
 1654|  9.84k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  3.46k|{
 6697|  3.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.46k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.46k|    auto start = begin;
 6701|  3.46k|    ++begin;
 6702|       |
 6703|  3.46k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  3.46k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 390, False: 3.07k]
  ------------------
 6710|    390|        handler.on_charset_inverted();
 6711|    390|        ++begin;
 6712|    390|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    390|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 384]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    390|    }
 6723|  3.07k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 3.07k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|   702k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 702k, False: 0]
  ------------------
 6728|   702k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|   702k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.46k, False: 699k]
  ------------------
 6733|  3.46k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.46k|        }
 6735|       |
 6736|   699k|        parse_presentation_set_literal(begin, end, handler);
 6737|   699k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  3.46k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|   699k|{
 6661|   699k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|   699k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|   699k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 699k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|   699k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 699k, False: 0]
  |  Branch (6668:25): [True: 3.89k, False: 695k]
  |  Branch (6668:49): [True: 3.89k, False: 0]
  ------------------
 6669|   699k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 3.80k, False: 90]
  ------------------
 6670|  3.80k|        ++begin;
 6671|       |
 6672|  3.80k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  3.80k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.80k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  3.80k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.80k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  3.80k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  3.80k|        return;
 6686|  3.80k|    }
 6687|       |
 6688|   695k|    handler.on_charset_single(cp_first);
 6689|   695k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|   702k|{
 6637|   702k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   702k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   702k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|   702k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|   702k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702k]
  |  |  |  Branch (859:45): [True: 0, False: 702k]
  |  |  |  Branch (859:45): [True: 0, False: 702k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|   702k|    const auto cp =
 6646|   702k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|   702k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|   702k|    begin += len;
 6653|   702k|    return cp;
 6654|   702k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.1k|    {
 1177|  23.1k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  23.1k|    {
 1430|  23.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  23.1k|    {
  437|  23.1k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  18.4k|    {
 6252|  18.4k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  18.4k|                charset_string_size};
 6254|  18.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|    918|    {
 1430|    918|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|    918|    {
  437|    918|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  2.26k|    {
 1430|  2.26k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.26k|    {
  437|  2.26k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   188k|{
 4033|   188k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   188k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   188k|    }
 4036|   188k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   188k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   188k|    }
 4039|   188k|    else {
 4040|   188k|        SCN_EXPECT(input.size() == 1);
 4041|   188k|        return static_cast<char32_t>(input.front());
 4042|   188k|    }
 4043|   188k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  22.7k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  22.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  22.7k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    844|    {
 6187|    844|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    844|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    844|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    844|        CharT r{};
 6189|    844|        std::memcpy(&r, m_data, m_size);
 6190|    844|        return r;
 6191|    844|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   493M|{
 3807|   493M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   493M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   493M|    }
 3810|   493M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   493M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   493M|    }
 3813|   493M|    else {
 3814|       |        // utf-32
 3815|   493M|        static_assert(sizeof(U) == 4);
 3816|   493M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   493M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   493M|        return 1;
 3818|   493M|    }
 3819|   493M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   493M|{
 4013|   493M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   493M|        return decode_utf8_code_point_exhaustive(input);
 4015|   493M|    }
 4016|   493M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   493M|        return decode_utf16_code_point_exhaustive(input);
 4018|   493M|    }
 4019|   493M|    else {
 4020|   493M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   493M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   493M|        auto cp = static_cast<char32_t>(input.front());
 4022|   493M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   493M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126k, False: 492M]
  |  |  ------------------
  ------------------
 4023|   126k|            return invalid_code_point;
 4024|   126k|        }
 4025|   492M|        return cp;
 4026|   493M|    }
 4027|   493M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  46.6k|{
 3699|  46.6k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  46.6k|                                          decltype(first), decltype(last)> &&
 3701|  46.6k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  46.6k|        return {first, last};
 3703|  46.6k|    }
 3704|  46.6k|    else {
 3705|  46.6k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  46.6k|                                       to_address(first), to_address(last)))};
 3707|  46.6k|    }
 3708|  46.6k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   178k|{
  326|   178k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   178k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   179k|{
  304|   179k|    return p;
  305|   179k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  5.46k|{
 3730|  5.46k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  5.46k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  5.46k|                      decltype(it)> &&
 3733|  5.46k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  5.46k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  5.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  5.46k|        return it;
 3736|  5.46k|    }
 3737|  5.46k|    else {
 3738|  5.46k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  5.46k|    }
 3740|  5.46k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|    846|{
  326|    846|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|    846|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|    846|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  22.1k|    {
 3346|  22.1k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  22.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    130|    {
 1476|    130|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    130|    {
  447|    130|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  18.8k|    {
 1430|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  18.8k|    {
  437|  18.8k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  5.21k|    {
 1598|  5.21k|        return has_value();
 1599|  5.21k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  32.7k|    {
  485|  32.7k|        return m_has_value;
  486|  32.7k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  13.6k|    {
 1627|  13.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  13.6k|        return this->get_value();
 1629|  13.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  13.6k|    {
  451|  13.6k|        return m_value;
  452|  13.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  2.26k|    {
 1430|  2.26k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.26k|    {
  437|  2.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.39k|    {
 1177|  2.39k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    136|    {
 1476|    136|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    136|    {
  447|    136|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.07k|    {
 1598|  1.07k|        return has_value();
 1599|  1.07k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.71k|    {
  485|  3.71k|        return m_has_value;
  486|  3.71k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.18k|    {
 1627|  1.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.18k|        return this->get_value();
 1629|  1.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.18k|    {
  451|  1.18k|        return m_value;
  452|  1.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.65k|    {
 1177|  1.65k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.65k|    {
 1430|  1.65k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  1.65k|    {
  437|  1.65k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    258|    {
 1837|    258|        return detail::transform_error_impl(std::move(*this),
 1838|    258|                                            std::forward<F>(f));
 1839|    258|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    258|{
 1323|    258|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    258|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    258|        if (SCN_LIKELY(exp.has_value())) {
 1326|    258|            return result(*std::forward<Exp>(exp));
 1327|    258|        }
 1328|       |
 1329|    258|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    258|        return result(unexpect, monostate{});
 1331|    258|    }
 1332|    258|    else {
 1333|    258|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    258|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    258|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 258, False: 0]
  |  |  ------------------
  ------------------
 1335|    258|                   ? result(*std::forward<Exp>(exp))
 1336|    258|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    258|    }
 1340|    258|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.18k|    {
 1663|  1.18k|        return std::move(value());
 1664|  1.18k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    632|    {
 1430|    632|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    632|    {
  437|    632|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.44k|    {
 1177|  3.44k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    136|    {
 1614|    136|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    136|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    136|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    136|        return std::move(this->get_unexpected().error());
 1616|    136|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    136|    {
  468|    136|        return m_unexpected;
  469|    136|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    856|    {
 1486|    856|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.81k|    {
  447|  2.81k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    374|    {
 2724|    374|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    374|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    374|    {
 2705|    374|        return decay_copy(t.begin());
 2706|    374|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|    910|{
 1949|    910|    return SCN_FWD(t);
  ------------------
  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|    910|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    374|    {
 3330|    374|        return m_iterator;
 3331|    374|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    374|    {
 2781|    374|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    374|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    374|    {
 2763|    374|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    374|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    374|    {
 3334|    374|        return m_sentinel;
 3335|    374|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    374|    {
 3316|    374|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.65k|    {
 1598|  1.65k|        return has_value();
 1599|  1.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.30k|    {
  485|  3.30k|        return m_has_value;
  486|  3.30k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.65k|    {
 1663|  1.65k|        return std::move(value());
 1664|  1.65k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.65k|    {
 1627|  1.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.65k|        return this->get_value();
 1629|  1.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.65k|    {
  451|  1.65k|        return m_value;
  452|  1.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.5k|    {
 1177|  14.5k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  14.5k|    {
 1430|  14.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  14.5k|    {
  437|  14.5k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.50k|    {
 1837|  8.50k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.50k|                                            std::forward<F>(f));
 1839|  8.50k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.50k|{
 1323|  8.50k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.50k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.50k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.50k|            return result(*std::forward<Exp>(exp));
 1327|  8.50k|        }
 1328|       |
 1329|  8.50k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.50k|        return result(unexpect, monostate{});
 1331|  8.50k|    }
 1332|  8.50k|    else {
 1333|  8.50k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.50k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.50k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.50k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.50k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.50k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.50k|    }
 1340|  8.50k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  13.6k|    {
 1663|  13.6k|        return std::move(value());
 1664|  13.6k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    130|    {
 1614|    130|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    130|        return std::move(this->get_unexpected().error());
 1616|    130|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    130|    {
  468|    130|        return m_unexpected;
  469|    130|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    866|    {
 1486|    866|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  14.5k|    {
 1598|  14.5k|        return has_value();
 1599|  14.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  29.0k|    {
  485|  29.0k|        return m_has_value;
  486|  29.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  14.5k|    {
 1663|  14.5k|        return std::move(value());
 1664|  14.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  14.5k|    {
 1627|  14.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  14.5k|        return this->get_value();
 1629|  14.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  14.5k|    {
  451|  14.5k|        return m_value;
  452|  14.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.95k|    {
 1476|  1.95k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    310|    {
 1476|    310|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    446|    {
  447|    446|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.09k|    {
 1177|  4.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.72k|    {
 1476|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.72k|    {
  447|  2.72k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  3.76k|    {
 1598|  3.76k|        return has_value();
 1599|  3.76k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  7.40k|    {
  485|  7.40k|        return m_has_value;
  486|  7.40k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.35k|    {
 1604|  1.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.35k|        return this->get_unexpected().error();
 1606|  1.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.86k|    {
  468|  1.86k|        return m_unexpected;
  469|  1.86k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    694|    {
 1430|    694|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    694|    {
  437|    694|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    694|    {
 1177|    694|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|    926|    {
 1627|    926|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    926|        return this->get_value();
 1629|    926|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    926|    {
  451|    926|        return m_value;
  452|    926|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    520|    {
 1598|    520|        return has_value();
 1599|    520|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.38k|    {
  485|  1.38k|        return m_has_value;
  486|  1.38k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    520|    {
 1177|    520|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    694|    {
 1663|    694|        return std::move(value());
 1664|    694|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    694|    {
 1627|    694|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    694|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    694|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    694|        return this->get_value();
 1629|    694|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    694|    {
  451|    694|        return m_value;
  452|    694|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  59.5k|    {
 3334|  59.5k|        return m_sentinel;
 3335|  59.5k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.06k|    {
 1837|  1.06k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.06k|                                            std::forward<F>(f));
 1839|  1.06k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.06k|{
 1323|  1.06k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.06k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.06k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.06k|            return result(*std::forward<Exp>(exp));
 1327|  1.06k|        }
 1328|       |
 1329|  1.06k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.06k|        return result(unexpect, monostate{});
 1331|  1.06k|    }
 1332|  1.06k|    else {
 1333|  1.06k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.06k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 926, False: 136]
  |  |  ------------------
  ------------------
 1335|  1.06k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.06k|                   : result(unexpect,
 1337|    136|                            trivial_invoke(std::forward<F>(f),
 1338|    136|                                           std::forward<Exp>(exp).error()));
 1339|  1.06k|    }
 1340|  1.06k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|    926|    {
 1430|    926|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    926|    {
  437|    926|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    136|    {
 1486|    136|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|    926|    {
 1663|    926|        return std::move(value());
 1664|    926|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  61.0k|    {
 3330|  61.0k|        return m_iterator;
 3331|  61.0k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    520|    {
 1430|    520|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    520|    {
  437|    520|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    520|    {
 1837|    520|        return detail::transform_error_impl(std::move(*this),
 1838|    520|                                            std::forward<F>(f));
 1839|    520|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    520|{
 1323|    520|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    520|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    520|        if (SCN_LIKELY(exp.has_value())) {
 1326|    520|            return result(*std::forward<Exp>(exp));
 1327|    520|        }
 1328|       |
 1329|    520|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    520|        return result(unexpect, monostate{});
 1331|    520|    }
 1332|    520|    else {
 1333|    520|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    520|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    520|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 520, False: 0]
  |  |  ------------------
  ------------------
 1335|    520|                   ? result(*std::forward<Exp>(exp))
 1336|    520|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    520|    }
 1340|    520|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.04k|    {
  485|  1.04k|        return m_has_value;
  486|  1.04k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    520|    {
 1663|    520|        return std::move(value());
 1664|    520|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    520|    {
 1627|    520|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    520|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    520|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    520|        return this->get_value();
 1629|    520|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    520|    {
  451|    520|        return m_value;
  452|    520|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    520|    {
 1430|    520|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    520|    {
  437|    520|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    520|    {
 1177|    520|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    520|    {
 1598|    520|        return has_value();
 1599|    520|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.04k|    {
  485|  1.04k|        return m_has_value;
  486|  1.04k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    520|    {
 1663|    520|        return std::move(value());
 1664|    520|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    520|    {
 1627|    520|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    520|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    520|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    520|        return this->get_value();
 1629|    520|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    520|    {
  451|    520|        return m_value;
  452|    520|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    508|    {
 1837|    508|        return detail::transform_error_impl(std::move(*this),
 1838|    508|                                            std::forward<F>(f));
 1839|    508|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    508|{
 1323|    508|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    508|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    508|        if (SCN_LIKELY(exp.has_value())) {
 1326|    508|            return result(*std::forward<Exp>(exp));
 1327|    508|        }
 1328|       |
 1329|    508|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    508|        return result(unexpect, monostate{});
 1331|    508|    }
 1332|    508|    else {
 1333|    508|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    508|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    508|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 508]
  |  |  ------------------
  ------------------
 1335|    508|                   ? result(*std::forward<Exp>(exp))
 1336|    508|                   : result(unexpect,
 1337|    508|                            trivial_invoke(std::forward<F>(f),
 1338|    508|                                           std::forward<Exp>(exp).error()));
 1339|    508|    }
 1340|    508|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    508|    {
 1614|    508|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    508|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    508|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    508|        return std::move(this->get_unexpected().error());
 1616|    508|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|    856|    {
 3648|    856|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  20.7k|    {
 3316|  20.7k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     12|    {
 1476|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     12|    {
  626|     12|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     12|    {
  689|     12|        scn::detail::construct_at(unexpected_ptr(),
  690|     12|                                  std::forward<Args>(args)...);
  691|     12|        m_has_value = false;
  692|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     36|    {
  718|     36|        return reinterpret_cast<unexpected<E>*>(
  719|     36|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     36|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     36|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     12|    {
 1177|     12|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     12|    {
 1598|     12|        return has_value();
 1599|     12|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     36|    {
  675|     36|        return m_has_value;
  676|     36|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     12|    {
 1604|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     12|        return this->get_unexpected().error();
 1606|     12|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     12|    {
  658|     12|        return *unexpected_ptr();
  659|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     12|    {
  631|     12|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 12]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     12|        else {
  635|     12|            destroy_unexpected();
  636|     12|        }
  637|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     12|    {
  700|     12|        scn::detail::destroy_at(unexpected_ptr());
  701|     12|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  3.61k|    {
 1598|  3.61k|        return has_value();
 1599|  3.61k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.88k|    {
  485|  6.88k|        return m_has_value;
  486|  6.88k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.63k|    {
 1604|  2.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.63k|        return this->get_unexpected().error();
 1606|  2.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.63k|    {
  468|  2.63k|        return m_unexpected;
  469|  2.63k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    632|    {
 1663|    632|        return std::move(value());
 1664|    632|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    632|    {
 1627|    632|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    632|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    632|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    632|        return this->get_value();
 1629|    632|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    632|    {
  451|    632|        return m_value;
  452|    632|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    988|    {
 1476|    988|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.11k|    {
  447|  1.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.5k|    {
 1177|  16.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.3k|    {
 1476|  10.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  10.3k|    {
  447|  10.3k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  17.4k|    {
 1598|  17.4k|        return has_value();
 1599|  17.4k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  28.7k|    {
  485|  28.7k|        return m_has_value;
  486|  28.7k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  5.30k|    {
 1604|  5.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.30k|        return this->get_unexpected().error();
 1606|  5.30k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.30k|    {
  468|  5.30k|        return m_unexpected;
  469|  5.30k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.45k|    {
 1430|  3.45k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.45k|    {
  437|  3.45k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.45k|    {
 1177|  3.45k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  5.11k|    {
 1627|  5.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.11k|        return this->get_value();
 1629|  5.11k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  5.11k|    {
  451|  5.11k|        return m_value;
  452|  5.11k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.59k|    {
 1598|  2.59k|        return has_value();
 1599|  2.59k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.90k|    {
  485|  6.90k|        return m_has_value;
  486|  6.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.59k|    {
 1177|  2.59k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.45k|    {
 1663|  3.45k|        return std::move(value());
 1664|  3.45k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.45k|    {
 1627|  3.45k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.45k|        return this->get_value();
 1629|  3.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.45k|    {
  451|  3.45k|        return m_value;
  452|  3.45k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.24k|    {
 1837|  5.24k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.24k|                                            std::forward<F>(f));
 1839|  5.24k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  5.24k|{
 1323|  5.24k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  5.24k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  5.24k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  5.24k|            return result(*std::forward<Exp>(exp));
 1327|  5.24k|        }
 1328|       |
 1329|  5.24k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  5.24k|        return result(unexpect, monostate{});
 1331|  5.24k|    }
 1332|  5.24k|    else {
 1333|  5.24k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.24k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.11k, False: 130]
  |  |  ------------------
  ------------------
 1335|  5.24k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.24k|                   : result(unexpect,
 1337|    130|                            trivial_invoke(std::forward<F>(f),
 1338|    130|                                           std::forward<Exp>(exp).error()));
 1339|  5.24k|    }
 1340|  5.24k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  5.11k|    {
 1430|  5.11k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  5.11k|    {
  437|  5.11k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    130|    {
 1486|    130|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  5.11k|    {
 1663|  5.11k|        return std::move(value());
 1664|  5.11k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.59k|    {
 1430|  2.59k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.59k|    {
  437|  2.59k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.59k|    {
 1837|  2.59k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.59k|                                            std::forward<F>(f));
 1839|  2.59k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.59k|{
 1323|  2.59k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.59k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.59k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.59k|            return result(*std::forward<Exp>(exp));
 1327|  2.59k|        }
 1328|       |
 1329|  2.59k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.59k|        return result(unexpect, monostate{});
 1331|  2.59k|    }
 1332|  2.59k|    else {
 1333|  2.59k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.59k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.59k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.59k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.59k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.59k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.59k|    }
 1340|  2.59k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.18k|    {
  485|  5.18k|        return m_has_value;
  486|  5.18k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.59k|    {
 1663|  2.59k|        return std::move(value());
 1664|  2.59k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.59k|    {
 1627|  2.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.59k|        return this->get_value();
 1629|  2.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.59k|    {
  451|  2.59k|        return m_value;
  452|  2.59k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.59k|    {
 1430|  2.59k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.59k|    {
  437|  2.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.59k|    {
 1177|  2.59k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.59k|    {
 1598|  2.59k|        return has_value();
 1599|  2.59k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.18k|    {
  485|  5.18k|        return m_has_value;
  486|  5.18k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.59k|    {
 1663|  2.59k|        return std::move(value());
 1664|  2.59k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.59k|    {
 1627|  2.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.59k|        return this->get_value();
 1629|  2.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.59k|    {
  451|  2.59k|        return m_value;
  452|  2.59k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  11.4k|    {
 2855|  11.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  11.4k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  11.4k|    {
 2836|  11.4k|        return t.data();
 2837|  11.4k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  23.3k|    {
 3221|  23.3k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 3.22k, False: 20.1k]
  ------------------
 3222|  23.3k|                   ? nullptr
 3223|  23.3k|                   : std::addressof(*ranges::begin(derived()));
 3224|  23.3k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  23.3k|    {
 3005|  23.3k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  23.3k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  23.3k|    {
 2978|  23.3k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  23.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  23.3k|    {
 3339|  23.3k|        return m_iterator == m_sentinel;
 3340|  23.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  43.5k|    {
 3180|  43.5k|        return static_cast<D&>(*this);
 3181|  43.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  20.1k|    {
 2724|  20.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  20.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  20.1k|    {
 2705|  20.1k|        return decay_copy(t.begin());
 2706|  20.1k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    174|    {
 1837|    174|        return detail::transform_error_impl(std::move(*this),
 1838|    174|                                            std::forward<F>(f));
 1839|    174|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    174|{
 1323|    174|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    174|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    174|        if (SCN_LIKELY(exp.has_value())) {
 1326|    174|            return result(*std::forward<Exp>(exp));
 1327|    174|        }
 1328|       |
 1329|    174|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    174|        return result(unexpect, monostate{});
 1331|    174|    }
 1332|    174|    else {
 1333|    174|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    174|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    174|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 174, False: 0]
  |  |  ------------------
  ------------------
 1335|    174|                   ? result(*std::forward<Exp>(exp))
 1336|    174|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    174|    }
 1340|    174|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    174|    {
 1430|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    174|    {
  437|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    174|    {
 1177|    174|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    174|    {
 1598|    174|        return has_value();
 1599|    174|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    348|    {
  485|    348|        return m_has_value;
  486|    348|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    174|    {
 1663|    174|        return std::move(value());
 1664|    174|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    174|    {
 1627|    174|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    174|        return this->get_value();
 1629|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    174|    {
  451|    174|        return m_value;
  452|    174|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    348|    {
 1823|    348|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    348|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    348|{
 1323|    348|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    348|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    348|        if (SCN_LIKELY(exp.has_value())) {
 1326|    348|            return result(*std::forward<Exp>(exp));
 1327|    348|        }
 1328|       |
 1329|    348|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    348|        return result(unexpect, monostate{});
 1331|    348|    }
 1332|    348|    else {
 1333|    348|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    348|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    348|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 348]
  |  |  ------------------
  ------------------
 1335|    348|                   ? result(*std::forward<Exp>(exp))
 1336|    348|                   : result(unexpect,
 1337|    348|                            trivial_invoke(std::forward<F>(f),
 1338|    348|                                           std::forward<Exp>(exp).error()));
 1339|    348|    }
 1340|    348|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    162|    {
 2724|    162|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    162|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    162|    {
 2705|    162|        return decay_copy(t.begin());
 2706|    162|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    858|    {
 1837|    858|        return detail::transform_error_impl(std::move(*this),
 1838|    858|                                            std::forward<F>(f));
 1839|    858|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    858|{
 1323|    858|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    858|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    858|        if (SCN_LIKELY(exp.has_value())) {
 1326|    858|            return result(*std::forward<Exp>(exp));
 1327|    858|        }
 1328|       |
 1329|    858|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    858|        return result(unexpect, monostate{});
 1331|    858|    }
 1332|    858|    else {
 1333|    858|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    858|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    858|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 858, False: 0]
  |  |  ------------------
  ------------------
 1335|    858|                   ? result(*std::forward<Exp>(exp))
 1336|    858|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    858|    }
 1340|    858|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    858|    {
 1430|    858|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    858|    {
  437|    858|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    858|    {
 1177|    858|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    858|    {
 1598|    858|        return has_value();
 1599|    858|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.71k|    {
  485|  1.71k|        return m_has_value;
  486|  1.71k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    858|    {
 1663|    858|        return std::move(value());
 1664|    858|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    858|    {
 1627|    858|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    858|        return this->get_value();
 1629|    858|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    858|    {
  451|    858|        return m_value;
  452|    858|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    866|    {
 1823|    866|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    866|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    866|{
 1323|    866|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    866|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    866|        if (SCN_LIKELY(exp.has_value())) {
 1326|    866|            return result(*std::forward<Exp>(exp));
 1327|    866|        }
 1328|       |
 1329|    866|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    866|        return result(unexpect, monostate{});
 1331|    866|    }
 1332|    866|    else {
 1333|    866|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    866|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    866|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 866]
  |  |  ------------------
  ------------------
 1335|    866|                   ? result(*std::forward<Exp>(exp))
 1336|    866|                   : result(unexpect,
 1337|    866|                            trivial_invoke(std::forward<F>(f),
 1338|    866|                                           std::forward<Exp>(exp).error()));
 1339|    866|    }
 1340|    866|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    866|    {
 3648|    866|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.39k|    {
 1653|  3.39k|        return value();
 1654|  3.39k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    282|{
 6697|    282|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    282|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    282|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    282|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    282|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    282|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    282|    auto start = begin;
 6701|    282|    ++begin;
 6702|       |
 6703|    282|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    282|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 282]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|    282|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 282]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  5.70k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 5.70k, False: 0]
  ------------------
 6728|  5.70k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  5.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.70k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  5.70k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 282, False: 5.41k]
  ------------------
 6733|    282|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    282|        }
 6735|       |
 6736|  5.41k|        parse_presentation_set_literal(begin, end, handler);
 6737|  5.41k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    282|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  5.41k|{
 6661|  5.41k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  5.41k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  5.41k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.41k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  5.41k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 5.41k, False: 0]
  |  Branch (6668:25): [True: 42, False: 5.37k]
  |  Branch (6668:49): [True: 42, False: 0]
  ------------------
 6669|  5.41k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12, False: 30]
  ------------------
 6670|     12|        ++begin;
 6671|       |
 6672|     12|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|     12|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|     12|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|     12|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|     12|        return;
 6686|     12|    }
 6687|       |
 6688|  5.40k|    handler.on_charset_single(cp_first);
 6689|  5.40k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  5.43k|{
 6637|  5.43k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  5.43k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  5.43k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.43k]
  |  |  |  Branch (859:45): [True: 0, False: 5.43k]
  |  |  |  Branch (859:45): [True: 0, False: 5.43k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  5.43k|    const auto cp =
 6646|  5.43k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  5.43k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  5.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.43k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  5.43k|    begin += len;
 6653|  5.43k|    return cp;
 6654|  5.43k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  9.57k|    {
 6252|  9.57k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  9.57k|                charset_string_size};
 6254|  9.57k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    330|    {
 1430|    330|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    330|    {
  437|    330|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  1.78k|{
 3654|  1.78k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.78k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  7.06k|    {
 2855|  7.06k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  7.06k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  7.06k|    {
 2836|  7.06k|        return t.data();
 2837|  7.06k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   120k|    {
 5466|   120k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   120k|        return static_cast<std::size_t>(m_desc &
 5471|   120k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   120k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   196k|    {
 5491|   196k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   196k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  75.9k|    {
 5434|  75.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.9k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  75.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 75.8k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  75.8k|        const auto t = type(id);
 5446|  75.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 74.4k]
  |  |  ------------------
  ------------------
 5447|  1.41k|            return {};
 5448|  1.41k|        }
 5449|       |
 5450|  74.4k|        basic_scan_arg<Context> arg;
 5451|  74.4k|        arg.m_type = t;
 5452|  74.4k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 74.4k, False: 0]
  ------------------
 5453|  74.4k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  74.4k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  74.4k|        return arg;
 5459|  75.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  75.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   119k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  75.8k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  75.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  75.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  75.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  75.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  74.4k|    {
 5495|  74.4k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  74.4k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   147k|    {
 5247|   147k|        return m_type != detail::arg_type::none_type;
 5248|   147k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.15k|{
 8417|  6.15k|#define SCN_VISIT(Type)                                         \
 8418|  6.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.15k|    }                                                           \
 8421|  6.15k|    else {                                                      \
 8422|  6.15k|        return vis(monostate_val);                              \
 8423|  6.15k|    }
 8424|       |
 8425|  6.15k|    monostate monostate_val{};
 8426|       |
 8427|  6.15k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.15k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.15k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    684|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 684, False: 5.47k]
  ------------------
 8433|    684|            SCN_VISIT(int);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.15k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.15k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.15k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.15k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    684|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 684, False: 5.47k]
  ------------------
 8443|    684|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.15k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.15k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    684|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 684, False: 5.47k]
  ------------------
 8449|    684|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8450|    684|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 684, False: 5.47k]
  ------------------
 8451|    684|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8452|    684|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 684, False: 5.47k]
  ------------------
 8453|    684|            SCN_VISIT(char);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.15k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.15k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.15k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    684|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 684, False: 5.47k]
  ------------------
 8461|    684|            SCN_VISIT(double);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.15k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    684|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 684, False: 5.47k]
  ------------------
 8465|    684|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8466|    684|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 684, False: 5.47k]
  ------------------
 8467|    684|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.15k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    684|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 684, False: 5.47k]
  ------------------
 8471|    684|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    684|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    684|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    684|    }                                                           \
  |  | 8421|    684|    else {                                                      \
  |  | 8422|    684|        return vis(monostate_val);                              \
  |  | 8423|    684|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.15k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.15k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.15k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.15k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.15k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.15k|            SCN_CLANG_POP
 8495|  6.15k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.03k|    {
 1837|  2.03k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.03k|                                            std::forward<F>(f));
 1839|  2.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.03k|{
 1323|  2.03k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.03k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.03k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.03k|            return result(*std::forward<Exp>(exp));
 1327|  2.03k|        }
 1328|       |
 1329|  2.03k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.03k|        return result(unexpect, monostate{});
 1331|  2.03k|    }
 1332|  2.03k|    else {
 1333|  2.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.93k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.03k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.03k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.03k|    }
 1340|  2.03k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.93k|    {
 1663|  1.93k|        return std::move(value());
 1664|  1.93k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   120k|    {
 5545|   120k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   120k|    {
 8056|   120k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   120k|{
 7044|   120k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   120k|    handler.check_args_exhausted();
 7046|   120k|    return handler.get_error();
 7047|   120k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   120k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   120k|    auto begin = format.data();
 7013|   120k|    auto it = begin;
 7014|   120k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   297k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 289k, False: 7.33k]
  ------------------
 7017|   289k|        const auto ch = *it++;
 7018|   289k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 124k, False: 165k]
  ------------------
 7019|   124k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   124k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   124k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 111k, False: 12.8k]
  ------------------
 7023|   111k|                return;
 7024|   111k|            }
 7025|   124k|        }
 7026|   165k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 2.47k, False: 162k]
  ------------------
 7027|  2.47k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  4.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.27k, False: 1.20k]
  |  |  |  Branch (859:45): [True: 364, False: 2.10k]
  |  |  |  Branch (859:45): [True: 908, False: 1.20k]
  |  |  ------------------
  ------------------
 7028|  1.27k|                handler.on_error("Unmatched '}' in format string");
 7029|  1.27k|                return;
 7030|  1.27k|            }
 7031|       |
 7032|  1.20k|            handler.on_literal_text(begin, it);
 7033|  1.20k|            begin = ++it;
 7034|  1.20k|        }
 7035|   289k|    }
 7036|       |
 7037|  7.33k|    handler.on_literal_text(begin, end);
 7038|  7.33k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   124k|{
 6942|   124k|    struct id_adapter {
 6943|   124k|        constexpr void operator()()
 6944|   124k|        {
 6945|   124k|            arg_id = handler.on_arg_id();
 6946|   124k|        }
 6947|   124k|        constexpr void operator()(std::size_t id)
 6948|   124k|        {
 6949|   124k|            arg_id = handler.on_arg_id(id);
 6950|   124k|        }
 6951|       |
 6952|   124k|        constexpr void on_error(const char* msg)
 6953|   124k|        {
 6954|   124k|            SCN_UNLIKELY_ATTR
 6955|   124k|            handler.on_error(msg);
 6956|   124k|        }
 6957|       |
 6958|   124k|        Handler& handler;
 6959|   124k|        std::size_t arg_id;
 6960|   124k|    };
 6961|       |
 6962|   124k|    ++begin;
 6963|   124k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 124k]
  |  |  ------------------
  ------------------
 6964|     98|        handler.on_error("Unexpected end of replacement field");
 6965|     98|        return begin;
 6966|     98|    }
 6967|       |
 6968|   124k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.15k, False: 118k]
  ------------------
 6969|  6.15k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.15k|    }
 6971|   118k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.51k, False: 112k]
  ------------------
 6972|  5.51k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.51k|    }
 6974|   112k|    else {
 6975|   112k|        auto adapter = id_adapter{handler, 0};
 6976|   112k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   112k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 112k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   112k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 112k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|   112k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 69.7k, False: 42.7k]
  ------------------
 6987|  69.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 69.6k]
  |  |  ------------------
  ------------------
 6988|     74|                handler.on_error("Unexpected end of replacement field");
 6989|     74|                return begin;
 6990|     74|            }
 6991|  69.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  69.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.62k, False: 66.0k]
  |  |  |  Branch (859:45): [True: 0, False: 69.6k]
  |  |  |  Branch (859:45): [True: 3.62k, False: 66.0k]
  |  |  ------------------
  ------------------
 6993|  3.62k|                handler.on_error("Unknown format specifier");
 6994|  3.62k|                return begin;
 6995|  3.62k|            }
 6996|  69.6k|        }
 6997|  42.7k|        else {
 6998|  42.7k|            SCN_UNLIKELY_ATTR
 6999|  42.7k|            handler.on_error("Missing '}' in format string");
 7000|  42.7k|            return begin;
 7001|  42.7k|        }
 7002|   112k|    }
 7003|  77.8k|    return begin + 1;
 7004|   124k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  75.9k|    {
 8039|  75.9k|        return m_args.get(id);
 8040|  75.9k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.29k|    {
 8044|  6.29k|        return m_args;
 8045|  6.29k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  71.9k|    {
 8049|  71.9k|        return m_locale;
 8050|  71.9k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  72.1k|    {
 5566|  72.1k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 72.0k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  72.0k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  72.0k|        do_check_arg_id(id);
 5574|  72.0k|        return id;
 5575|  72.1k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  75.8k|{
 6054|  75.8k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  75.8k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  75.8k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   112k|{
 6443|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   112k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 112k, False: 0]
  |  Branch (6444:26): [True: 46.7k, False: 65.9k]
  ------------------
 6445|  46.7k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  46.7k|    }
 6447|       |
 6448|  65.9k|    handler();
 6449|  65.9k|    return begin;
 6450|   112k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  46.7k|{
 6413|  46.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  46.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  46.7k|    CharT c = *begin;
 6416|  46.7k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 42.5k, False: 4.21k]
  |  Branch (6416:27): [True: 140, False: 4.07k]
  ------------------
 6417|  42.6k|        handler.on_error("Invalid argument ID");
 6418|  42.6k|        return begin;
 6419|  42.6k|    }
 6420|       |
 6421|  4.07k|    int idx = 0;
 6422|  4.07k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 336, False: 3.73k]
  ------------------
 6423|    336|        idx = parse_simple_int(begin, end);
 6424|    336|    }
 6425|  3.73k|    else {
 6426|  3.73k|        ++begin;
 6427|  3.73k|    }
 6428|       |
 6429|  4.07k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 3.96k]
  |  Branch (6429:26): [True: 3.82k, False: 140]
  |  Branch (6429:50): [True: 84, False: 3.73k]
  ------------------
 6430|    194|        handler.on_error("Invalid argument ID");
 6431|    194|        return begin;
 6432|    194|    }
 6433|  3.87k|    handler(idx);
 6434|       |
 6435|  3.87k|    return begin;
 6436|  4.07k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  42.8k|        {
 6954|  42.8k|            SCN_UNLIKELY_ATTR
 6955|  42.8k|            handler.on_error(msg);
 6956|  42.8k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  16.2k|{
 6392|  16.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  16.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  16.2k|    unsigned long long value = 0;
 6396|  50.1k|    do {
 6397|  50.1k|        value *= 10;
 6398|  50.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  50.1k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 50.0k]
  ------------------
 6400|  50.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  50.0k|        ++begin;
 6404|  50.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 49.7k, False: 312]
  |  Branch (6404:30): [True: 43.8k, False: 5.89k]
  |  Branch (6404:47): [True: 33.9k, False: 9.91k]
  ------------------
 6405|  16.1k|    return static_cast<int>(value);
 6406|  16.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  3.87k|        {
 6949|  3.87k|            arg_id = handler.on_arg_id(id);
 6950|  3.87k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  3.87k|    {
 5579|  3.87k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 3.79k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  3.79k|        m_next_arg_id = -1;
 5585|  3.79k|        do_check_arg_id(id);
 5586|  3.79k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  65.9k|        {
 6945|  65.9k|            arg_id = handler.on_arg_id();
 6946|  65.9k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   139k|    {
 5252|   139k|        return m_type;
 5253|   139k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  65.7k|    {
 5561|  65.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  65.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   135k|    {
 5550|   135k|        return m_format.data();
 5551|   135k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  69.6k|    {
 7122|  69.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  69.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  69.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  69.6k|{
 6858|  69.6k|    auto do_presentation = [&]() -> const CharT* {
 6859|  69.6k|        if (*begin == CharT{'['}) {
 6860|  69.6k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  69.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  69.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  69.6k|                return begin;
 6866|  69.6k|            }
 6867|  69.6k|            handler.on_character_set_string(set);
 6868|  69.6k|            return begin;
 6869|  69.6k|        }
 6870|  69.6k|        if (*begin == CharT{'/'}) {
 6871|  69.6k|            return parse_presentation_regex(begin, end, handler);
 6872|  69.6k|        }
 6873|  69.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  69.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  69.6k|            handler.on_error("Invalid type specifier in format string");
 6876|  69.6k|            return begin;
 6877|  69.6k|        }
 6878|  69.6k|        handler.on_type(type);
 6879|  69.6k|        return begin;
 6880|  69.6k|    };
 6881|       |
 6882|  69.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 68.5k, False: 1.10k]
  |  Branch (6882:28): [True: 2.29k, False: 66.2k]
  ------------------
 6883|  69.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.39k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|  68.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.7k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  68.7k|    begin = parse_align(begin, end, handler);
 6893|  68.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 68.6k]
  |  |  ------------------
  ------------------
 6894|    120|        handler.on_error("Unexpected end of format string");
 6895|    120|        return begin;
 6896|    120|    }
 6897|       |
 6898|  68.6k|    begin = parse_width(begin, end, handler);
 6899|  68.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 68.5k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|  68.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 11.2k, False: 57.3k]
  ------------------
 6905|  11.2k|        ++begin;
 6906|  11.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 11.1k]
  |  |  ------------------
  ------------------
 6907|     40|            handler.on_error("Unexpected end of format string");
 6908|     40|            return begin;
 6909|     40|        }
 6910|  11.1k|        begin = parse_precision(begin, end, handler);
 6911|  11.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 11.0k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  11.1k|    }
 6916|       |
 6917|  68.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 608, False: 67.7k]
  ------------------
 6918|    608|        handler.on_localized();
 6919|    608|        ++begin;
 6920|    608|    }
 6921|  68.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 68.3k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  68.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 68.3k, False: 0]
  |  Branch (6926:25): [True: 63.4k, False: 4.87k]
  ------------------
 6927|  63.4k|        do_presentation();
 6928|  63.4k|    }
 6929|  68.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.20k, False: 66.1k]
  |  |  ------------------
  ------------------
 6930|  2.20k|        handler.on_error("Unexpected end of format string");
 6931|  2.20k|        return begin;
 6932|  2.20k|    }
 6933|       |
 6934|  66.1k|    return begin;
 6935|  68.3k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.29k|{
 6507|  2.29k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.44k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.29k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 250, False: 1.25k]
  |  Branch (6508:33): [True: 106, False: 144]
  ------------------
 6509|  2.29k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  64.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  64.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 13.7k, False: 50.6k]
  ------------------
 6860|  13.7k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  13.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 12.8k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  12.8k|            handler.on_character_set_string(set);
 6868|  12.8k|            return begin;
 6869|  13.7k|        }
 6870|  50.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 45.6k, False: 4.91k]
  ------------------
 6871|  45.6k|            return parse_presentation_regex(begin, end, handler);
 6872|  45.6k|        }
 6873|  4.91k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.91k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 800, False: 4.11k]
  |  |  ------------------
  ------------------
 6875|    800|            handler.on_error("Invalid type specifier in format string");
 6876|    800|            return begin;
 6877|    800|        }
 6878|  4.11k|        handler.on_type(type);
 6879|  4.11k|        return begin;
 6880|  4.91k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  13.7k|{
 6697|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  13.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  13.7k|    auto start = begin;
 6701|  13.7k|    ++begin;
 6702|       |
 6703|  13.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 13.6k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  13.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 2.51k, False: 11.1k]
  ------------------
 6710|  2.51k|        handler.on_charset_inverted();
 6711|  2.51k|        ++begin;
 6712|  2.51k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.48k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  2.48k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 2.42k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  2.48k|    }
 6723|  11.1k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 11.1k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  2.11M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 2.11M, False: 484]
  ------------------
 6728|  2.11M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 2.11M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  2.11M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 12.8k, False: 2.10M]
  ------------------
 6733|  12.8k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  12.8k|        }
 6735|       |
 6736|  2.10M|        parse_presentation_set_literal(begin, end, handler);
 6737|  2.10M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  13.6k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  2.10M|{
 6661|  2.10M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  2.10M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  2.10M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.10M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  2.10M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 2.10M, False: 188]
  |  Branch (6668:25): [True: 12.9k, False: 2.09M]
  |  Branch (6668:49): [True: 12.9k, False: 34]
  ------------------
 6669|  2.10M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12.6k, False: 304]
  ------------------
 6670|  12.6k|        ++begin;
 6671|       |
 6672|  12.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  12.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 12.5k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  12.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 12.5k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  12.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  12.5k|        return;
 6686|  12.5k|    }
 6687|       |
 6688|  2.09M|    handler.on_charset_single(cp_first);
 6689|  2.09M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  2.11M|{
 6637|  2.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  2.11M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  2.11M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 2.11M]
  |  |  |  Branch (859:45): [True: 70, False: 2.11M]
  |  |  |  Branch (859:45): [True: 26, False: 2.11M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  2.11M|    const auto cp =
 6646|  2.11M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  2.11M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 2.11M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  2.11M|    begin += len;
 6653|  2.11M|    return cp;
 6654|  2.11M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  12.8k|    {
 6346|  12.8k|        m_specs.charset_string_data = fmt.data();
 6347|  12.8k|        m_specs.charset_string_size = fmt.size();
 6348|  12.8k|        on_type(presentation_type::string_set);
 6349|  12.8k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  45.6k|{
 6749|  45.6k|#if !SCN_DISABLE_REGEX
 6750|  45.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  45.6k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  45.6k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  91.3k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  45.6k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  45.6k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  45.6k|        return begin;
 6757|  45.6k|    }
 6758|       |
 6759|  45.6k|    auto start = begin;
 6760|  45.6k|    ++begin;
 6761|       |
 6762|  45.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 45.6k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  45.6k|    handler.on_type(presentation_type::regex);
 6768|  12.2M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 12.2M, False: 398]
  ------------------
 6769|  12.2M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 87.5k, False: 12.1M]
  ------------------
 6770|  87.5k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 45.2k, False: 42.3k]
  ------------------
 6771|  45.2k|                break;
 6772|  45.2k|            }
 6773|  42.3k|            else {
 6774|  42.3k|                handler.on_type(presentation_type::regex_escaped);
 6775|  42.3k|            }
 6776|  87.5k|        }
 6777|  12.2M|    }
 6778|  45.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 398, False: 45.2k]
  |  |  ------------------
  ------------------
 6779|    398|        handler.on_error("Unexpected end of regex in format string");
 6780|    398|        return begin;
 6781|    398|    }
 6782|       |
 6783|  45.2k|    auto regex_end = begin;
 6784|  45.2k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  45.2k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 45.2k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  45.2k|    handler.on_regex_pattern(regex_pattern);
 6790|  45.2k|    ++begin;
 6791|       |
 6792|  45.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 45.1k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  45.1k|    regex_flags flags{regex_flags::none};
 6798|  45.1k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  45.1k|        {{'m', regex_flags::multiline},
 6800|  45.1k|         {'s', regex_flags::singleline},
 6801|  45.1k|         {'i', regex_flags::nocase},
 6802|  45.1k|         {'n', regex_flags::nocapture}}};
 6803|  54.2k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 54.1k, False: 58]
  ------------------
 6804|  54.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 44.9k, False: 9.26k]
  ------------------
 6805|  44.9k|            break;
 6806|  44.9k|        }
 6807|  9.26k|        bool found_flag = false;
 6808|  24.4k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 24.4k, False: 194]
  ------------------
 6809|  24.4k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 15.4k, False: 9.07k]
  ------------------
 6810|  15.4k|                continue;
 6811|  15.4k|            }
 6812|  9.07k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 9.04k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  9.04k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  9.04k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 8.99k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  9.04k|#endif
 6830|  9.04k|            flags |= flag.second;
 6831|  9.04k|            found_flag = true;
 6832|  9.04k|            break;
 6833|  9.07k|        }
 6834|  9.23k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 194, False: 9.04k]
  ------------------
 6835|    194|            handler.on_error("Invalid flag in regex");
 6836|    194|            return begin;
 6837|    194|        }
 6838|  9.23k|    }
 6839|  44.9k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  44.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 44.9k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  44.9k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  44.9k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  45.2k|    {
 6354|  45.2k|        m_specs.charset_string_data = pattern.data();
 6355|  45.2k|        m_specs.charset_string_size = pattern.size();
 6356|  45.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  4.91k|{
 6455|  4.91k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 4.79k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 4.86k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|    110|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 110, False: 4.80k]
  ------------------
 6460|    110|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 4.75k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 4.84k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    232|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 232, False: 4.68k]
  ------------------
 6466|    232|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 4.82k]
  ------------------
 6468|    130|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 34, False: 4.88k]
  ------------------
 6469|    130|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 4.88k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 4.88k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 4.81k]
  ------------------
 6474|    374|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 268, False: 4.64k]
  ------------------
 6475|    374|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 4.82k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 4.84k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 4.68k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 4.81k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 4.78k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 4.85k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.64k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.64k, False: 3.27k]
  ------------------
 6486|  1.64k|            return presentation_type::string;
 6487|    358|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 358, False: 4.55k]
  ------------------
 6488|    358|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.88k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 4.83k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.91k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.91k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    800|        default:
  ------------------
  |  Branch (6499:9): [True: 800, False: 4.11k]
  ------------------
 6500|    800|            return presentation_type::none;
 6501|  4.91k|    }
 6502|  4.91k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  68.7k|{
 6532|  68.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  68.7k|    auto check_align = [](wchar_t ch) {
 6535|  68.7k|        switch (ch) {
 6536|  68.7k|            case L'<':
 6537|  68.7k|                return align_type::left;
 6538|  68.7k|            case L'>':
 6539|  68.7k|                return align_type::right;
 6540|  68.7k|            case L'^':
 6541|  68.7k|                return align_type::center;
 6542|  68.7k|            default:
 6543|  68.7k|                return align_type::none;
 6544|  68.7k|        }
 6545|  68.7k|    };
 6546|       |
 6547|  68.7k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  68.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 68.7k]
  |  |  |  Branch (859:45): [True: 38, False: 68.7k]
  |  |  |  Branch (859:45): [True: 4, False: 68.7k]
  |  |  ------------------
  ------------------
 6549|  68.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  68.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  68.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  68.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  68.7k|    const auto begin_before_fill = begin;
 6559|  68.7k|    begin += potential_fill_len;
 6560|       |
 6561|  68.7k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 67.6k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|  67.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  67.6k|    const auto begin_after_fill = begin;
 6567|  67.6k|    ++begin;
 6568|       |
 6569|  67.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 66.8k, False: 822]
  ------------------
 6570|  66.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 66.8k]
  |  |  ------------------
  ------------------
 6571|     54|            handler.on_error("Invalid fill character '{' in format string");
 6572|     54|            return begin;
 6573|     54|        }
 6574|  66.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 9.86k, False: 56.9k]
  ------------------
 6575|  9.86k|            return begin_before_fill;
 6576|  9.86k|        }
 6577|  66.8k|    }
 6578|       |
 6579|  57.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 51.4k, False: 6.28k]
  ------------------
 6580|  51.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 3.96k, False: 47.5k]
  ------------------
 6581|  3.96k|            handler.on_align(potential_align_on_fill);
 6582|  3.96k|            return begin_after_fill;
 6583|  3.96k|        }
 6584|  47.5k|        return begin_before_fill;
 6585|  51.4k|    }
 6586|       |
 6587|  6.28k|    handler.on_fill(potential_fill);
 6588|  6.28k|    handler.on_align(potential_align_after_fill);
 6589|  6.28k|    return begin;
 6590|  57.7k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  68.7k|{
 6514|  68.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  68.7k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  68.7k|        return 1;
 6517|  68.7k|    }
 6518|  68.7k|    else {
 6519|  68.7k|        const auto lengths =
 6520|  68.7k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  68.7k|            "\3\4";
 6522|  68.7k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  68.7k|        return len;
 6524|  68.7k|    }
 6525|  68.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   136k|    auto check_align = [](wchar_t ch) {
 6535|   136k|        switch (ch) {
 6536|  1.50k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.50k, False: 134k]
  ------------------
 6537|  1.50k|                return align_type::left;
 6538|  1.60k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 1.60k, False: 134k]
  ------------------
 6539|  1.60k|                return align_type::right;
 6540|  8.35k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 8.35k, False: 128k]
  ------------------
 6541|  8.35k|                return align_type::center;
 6542|   124k|            default:
  ------------------
  |  Branch (6542:13): [True: 124k, False: 11.4k]
  ------------------
 6543|   124k|                return align_type::none;
 6544|   136k|        }
 6545|   136k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  6.28k|    {
 6268|  6.28k|        m_specs.fill = fill;
 6269|  6.28k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  6.28k|    {
 6149|  6.28k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  6.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  6.28k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  6.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  6.28k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  14.0k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 7.81k, False: 6.28k]
  ------------------
 6153|  7.81k|                SCN_GCC_PUSH
 6154|  7.81k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  7.81k|                m_data[i] = s[i];
 6156|  7.81k|                SCN_GCC_POP
 6157|  7.81k|            }
 6158|  6.28k|            m_size = static_cast<unsigned char>(s.size());
 6159|  6.28k|        }
 6160|  6.28k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  6.28k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  6.28k|            m_data[1] =
 6163|  6.28k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  6.28k|            if (s.size() == 1) {
 6165|  6.28k|                return;
 6166|  6.28k|            }
 6167|  6.28k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  6.28k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  6.28k|        }
 6170|  6.28k|        else {
 6171|  6.28k|            const auto front = static_cast<unsigned>(s.front());
 6172|  6.28k|            m_data[0] = static_cast<char>(front);
 6173|  6.28k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  6.28k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  6.28k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  6.28k|        }
 6177|  6.28k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  68.6k|{
 6597|  68.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  68.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 17.1k, False: 51.5k]
  |  Branch (6599:33): [True: 4.81k, False: 12.2k]
  ------------------
 6600|  4.81k|        int width = parse_simple_int(begin, end);
 6601|  4.81k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.78k, False: 34]
  |  |  ------------------
  ------------------
 6602|  4.78k|            handler.on_width(width);
 6603|  4.78k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  4.81k|    }
 6609|  68.6k|    return begin;
 6610|  68.6k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  11.1k|{
 6617|  11.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  11.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 11.1k, False: 38]
  |  Branch (6619:33): [True: 11.0k, False: 42]
  ------------------
 6620|  11.0k|        int prec = parse_simple_int(begin, end);
 6621|  11.0k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 48]
  |  |  ------------------
  ------------------
 6622|  11.0k|            handler.on_precision(prec);
 6623|  11.0k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  11.0k|    }
 6629|  11.1k|    return begin;
 6630|  11.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    608|    {
 7127|    608|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    608|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 546, False: 62]
  ------------------
 7129|    608|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 484, False: 62]
  ------------------
 7130|    608|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 422, False: 62]
  ------------------
 7131|    608|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 360, False: 62]
  ------------------
 7132|    360|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    360|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    360|        }
 7137|       |
 7138|    248|        Handler::on_localized();
 7139|    248|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  65.5k|{
 8417|  65.5k|#define SCN_VISIT(Type)                                         \
 8418|  65.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  65.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  65.5k|    }                                                           \
 8421|  65.5k|    else {                                                      \
 8422|  65.5k|        return vis(monostate_val);                              \
 8423|  65.5k|    }
 8424|       |
 8425|  65.5k|    monostate monostate_val{};
 8426|       |
 8427|  65.5k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 65.5k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 65.5k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  7.31k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 7.31k, False: 58.2k]
  ------------------
 8433|  7.31k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  7.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.31k|    }                                                           \
  |  | 8421|  7.31k|    else {                                                      \
  |  | 8422|  7.31k|        return vis(monostate_val);                              \
  |  | 8423|  7.31k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 65.5k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 65.5k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 65.5k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 65.5k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  7.31k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 7.31k, False: 58.2k]
  ------------------
 8443|  7.31k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  7.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.31k|    }                                                           \
  |  | 8421|  7.31k|    else {                                                      \
  |  | 8422|  7.31k|        return vis(monostate_val);                              \
  |  | 8423|  7.31k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 65.5k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 65.5k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  7.26k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 7.26k, False: 58.3k]
  ------------------
 8449|  7.26k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  7.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.26k|    }                                                           \
  |  | 8421|  7.26k|    else {                                                      \
  |  | 8422|  7.26k|        return vis(monostate_val);                              \
  |  | 8423|  7.26k|    }
  ------------------
 8450|  7.31k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 7.31k, False: 58.2k]
  ------------------
 8451|  7.31k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  7.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.31k|    }                                                           \
  |  | 8421|  7.31k|    else {                                                      \
  |  | 8422|  7.31k|        return vis(monostate_val);                              \
  |  | 8423|  7.31k|    }
  ------------------
 8452|  7.26k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 7.26k, False: 58.3k]
  ------------------
 8453|  7.26k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  7.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.26k|    }                                                           \
  |  | 8421|  7.26k|    else {                                                      \
  |  | 8422|  7.26k|        return vis(monostate_val);                              \
  |  | 8423|  7.26k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 65.5k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 65.5k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 65.5k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  7.31k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 7.31k, False: 58.2k]
  ------------------
 8461|  7.31k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  7.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.31k|    }                                                           \
  |  | 8421|  7.31k|    else {                                                      \
  |  | 8422|  7.31k|        return vis(monostate_val);                              \
  |  | 8423|  7.31k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 65.5k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  7.26k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 7.26k, False: 58.3k]
  ------------------
 8465|  7.26k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  7.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.26k|    }                                                           \
  |  | 8421|  7.26k|    else {                                                      \
  |  | 8422|  7.26k|        return vis(monostate_val);                              \
  |  | 8423|  7.26k|    }
  ------------------
 8466|  7.26k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 7.26k, False: 58.3k]
  ------------------
 8467|  7.26k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  7.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.26k|    }                                                           \
  |  | 8421|  7.26k|    else {                                                      \
  |  | 8422|  7.26k|        return vis(monostate_val);                              \
  |  | 8423|  7.26k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 65.5k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  7.26k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 7.26k, False: 58.3k]
  ------------------
 8471|  7.26k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  7.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.26k|    }                                                           \
  |  | 8421|  7.26k|    else {                                                      \
  |  | 8422|  7.26k|        return vis(monostate_val);                              \
  |  | 8423|  7.26k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 65.5k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 65.5k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 65.5k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 65.5k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 65.5k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  65.5k|            SCN_CLANG_POP
 8495|  65.5k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  12.7k|    {
 3330|  12.7k|        return m_iterator;
 3331|  12.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  2.31k|    {
 1430|  2.31k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.31k|    {
  437|  2.31k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.50k|    {
 1177|  2.50k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  6.81k|    {
 3334|  6.81k|        return m_sentinel;
 3335|  6.81k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    190|    {
 1476|    190|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    190|    {
  447|    190|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  5.91k|    {
 3316|  5.91k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    230|    {
 1598|    230|        return has_value();
 1599|    230|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.93k|    {
  485|  4.93k|        return m_has_value;
  486|  4.93k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    152|    {
 1653|    152|        return value();
 1654|    152|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.31k|    {
 1627|  2.31k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.31k|        return this->get_value();
 1629|  2.31k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.31k|    {
  451|  2.31k|        return m_value;
  452|  2.31k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  2.27k|    {
 1837|  2.27k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.27k|                                            std::forward<F>(f));
 1839|  2.27k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  2.27k|{
 1323|  2.27k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.27k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.27k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.27k|            return result(*std::forward<Exp>(exp));
 1327|  2.27k|        }
 1328|       |
 1329|  2.27k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.27k|        return result(unexpect, monostate{});
 1331|  2.27k|    }
 1332|  2.27k|    else {
 1333|  2.27k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.27k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.16k, False: 112]
  |  |  ------------------
  ------------------
 1335|  2.27k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.27k|                   : result(unexpect,
 1337|    112|                            trivial_invoke(std::forward<F>(f),
 1338|    112|                                           std::forward<Exp>(exp).error()));
 1339|  2.27k|    }
 1340|  2.27k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.16k|    {
 1663|  2.16k|        return std::move(value());
 1664|  2.16k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  2.16k|    {
 1430|  2.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.16k|    {
  437|  2.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.27k|    {
 1177|  2.27k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    112|    {
 1614|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    112|        return std::move(this->get_unexpected().error());
 1616|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    112|    {
 1486|    112|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  2.27k|    {
 1598|  2.27k|        return has_value();
 1599|  2.27k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.55k|    {
  485|  4.55k|        return m_has_value;
  486|  4.55k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.16k|    {
 1663|  2.16k|        return std::move(value());
 1664|  2.16k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.16k|    {
 1627|  2.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.16k|        return this->get_value();
 1629|  2.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.16k|    {
  451|  2.16k|        return m_value;
  452|  2.16k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   240k|    {
 5466|   240k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   240k|        return static_cast<std::size_t>(m_desc &
 5471|   240k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   240k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   283k|    {
 5491|   283k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   283k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  43.0k|    {
 5434|  43.0k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 43.0k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  43.0k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 43.0k]
  |  |  ------------------
  ------------------
 5442|     76|            return {};
 5443|     76|        }
 5444|       |
 5445|  43.0k|        const auto t = type(id);
 5446|  43.0k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.22k, False: 41.7k]
  |  |  ------------------
  ------------------
 5447|  1.22k|            return {};
 5448|  1.22k|        }
 5449|       |
 5450|  41.7k|        basic_scan_arg<Context> arg;
 5451|  41.7k|        arg.m_type = t;
 5452|  41.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 41.7k, False: 0]
  ------------------
 5453|  41.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  41.7k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  41.7k|        return arg;
 5459|  43.0k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  43.0k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  43.0k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  43.0k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  43.0k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  43.0k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  43.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  41.7k|    {
 5495|  41.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  41.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  82.7k|    {
 5247|  82.7k|        return m_type != detail::arg_type::none_type;
 5248|  82.7k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  4.62k|{
 8417|  4.62k|#define SCN_VISIT(Type)                                         \
 8418|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  4.62k|    }                                                           \
 8421|  4.62k|    else {                                                      \
 8422|  4.62k|        return vis(monostate_val);                              \
 8423|  4.62k|    }
 8424|       |
 8425|  4.62k|    monostate monostate_val{};
 8426|       |
 8427|  4.62k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 4.62k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.62k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    514|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 514, False: 4.11k]
  ------------------
 8433|    514|            SCN_VISIT(int);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.62k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.62k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.62k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.62k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    514|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 514, False: 4.11k]
  ------------------
 8443|    514|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 4.62k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 4.62k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    514|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 514, False: 4.11k]
  ------------------
 8449|    514|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8450|    514|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 514, False: 4.11k]
  ------------------
 8451|    514|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.62k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    514|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 514, False: 4.11k]
  ------------------
 8455|    514|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 4.62k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.62k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    514|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 514, False: 4.11k]
  ------------------
 8461|    514|            SCN_VISIT(double);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 4.62k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 4.62k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    514|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 514, False: 4.11k]
  ------------------
 8467|    514|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8468|    514|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 514, False: 4.11k]
  ------------------
 8469|    514|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8470|    514|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 514, False: 4.11k]
  ------------------
 8471|    514|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    514|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    514|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    514|    }                                                           \
  |  | 8421|    514|    else {                                                      \
  |  | 8422|    514|        return vis(monostate_val);                              \
  |  | 8423|    514|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 4.62k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 4.62k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 4.62k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 4.62k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 4.62k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  4.62k|            SCN_CLANG_POP
 8495|  4.62k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   240k|    {
 5545|   240k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   240k|    {
 8056|   240k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   240k|{
 7044|   240k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   240k|    handler.check_args_exhausted();
 7046|   240k|    return handler.get_error();
 7047|   240k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   240k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   240k|    auto begin = format.data();
 7013|   240k|    auto it = begin;
 7014|   240k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   497M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 496M, False: 78.4k]
  ------------------
 7017|   496M|        const auto ch = *it++;
 7018|   496M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 163k, False: 496M]
  ------------------
 7019|   163k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   163k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   163k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 160k, False: 3.12k]
  ------------------
 7023|   160k|                return;
 7024|   160k|            }
 7025|   163k|        }
 7026|   496M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 14.7k, False: 496M]
  ------------------
 7027|  14.7k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.26k, False: 13.5k]
  |  |  |  Branch (859:45): [True: 520, False: 14.2k]
  |  |  |  Branch (859:45): [True: 742, False: 13.5k]
  |  |  ------------------
  ------------------
 7028|  1.26k|                handler.on_error("Unmatched '}' in format string");
 7029|  1.26k|                return;
 7030|  1.26k|            }
 7031|       |
 7032|  13.5k|            handler.on_literal_text(begin, it);
 7033|  13.5k|            begin = ++it;
 7034|  13.5k|        }
 7035|   496M|    }
 7036|       |
 7037|  78.4k|    handler.on_literal_text(begin, end);
 7038|  78.4k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   163k|{
 6942|   163k|    struct id_adapter {
 6943|   163k|        constexpr void operator()()
 6944|   163k|        {
 6945|   163k|            arg_id = handler.on_arg_id();
 6946|   163k|        }
 6947|   163k|        constexpr void operator()(std::size_t id)
 6948|   163k|        {
 6949|   163k|            arg_id = handler.on_arg_id(id);
 6950|   163k|        }
 6951|       |
 6952|   163k|        constexpr void on_error(const char* msg)
 6953|   163k|        {
 6954|   163k|            SCN_UNLIKELY_ATTR
 6955|   163k|            handler.on_error(msg);
 6956|   163k|        }
 6957|       |
 6958|   163k|        Handler& handler;
 6959|   163k|        std::size_t arg_id;
 6960|   163k|    };
 6961|       |
 6962|   163k|    ++begin;
 6963|   163k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 163k]
  |  |  ------------------
  ------------------
 6964|     88|        handler.on_error("Unexpected end of replacement field");
 6965|     88|        return begin;
 6966|     88|    }
 6967|       |
 6968|   163k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 4.58k, False: 159k]
  ------------------
 6969|  4.58k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  4.58k|    }
 6971|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 159k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|   159k|    else {
 6975|   159k|        auto adapter = id_adapter{handler, 0};
 6976|   159k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 158k]
  |  |  ------------------
  ------------------
 6979|    102|            handler.on_error("Missing '}' in format string");
 6980|    102|            return begin;
 6981|    102|        }
 6982|       |
 6983|   158k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 176, False: 158k]
  ------------------
 6984|    176|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    176|        }
 6986|   158k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 38.3k, False: 120k]
  ------------------
 6987|  38.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 38.3k]
  |  |  ------------------
  ------------------
 6988|     52|                handler.on_error("Unexpected end of replacement field");
 6989|     52|                return begin;
 6990|     52|            }
 6991|  38.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  38.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.66k, False: 35.6k]
  |  |  |  Branch (859:45): [True: 0, False: 38.3k]
  |  |  |  Branch (859:45): [True: 2.66k, False: 35.6k]
  |  |  ------------------
  ------------------
 6993|  2.66k|                handler.on_error("Unknown format specifier");
 6994|  2.66k|                return begin;
 6995|  2.66k|            }
 6996|  38.3k|        }
 6997|   120k|        else {
 6998|   120k|            SCN_UNLIKELY_ATTR
 6999|   120k|            handler.on_error("Missing '}' in format string");
 7000|   120k|            return begin;
 7001|   120k|        }
 7002|   158k|    }
 7003|  40.5k|    return begin + 1;
 7004|   163k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  43.0k|    {
 8039|  43.0k|        return m_args.get(id);
 8040|  43.0k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  4.75k|    {
 8044|  4.75k|        return m_args;
 8045|  4.75k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  39.9k|    {
 8049|  39.9k|        return m_locale;
 8050|  39.9k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  42.8k|    {
 5566|  42.8k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 42.7k]
  |  |  ------------------
  ------------------
 5567|     34|            on_error(
 5568|     34|                "Cannot switch from manual to automatic argument indexing");
 5569|     34|            return 0;
 5570|     34|        }
 5571|       |
 5572|  42.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  42.7k|        do_check_arg_id(id);
 5574|  42.7k|        return id;
 5575|  42.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    144|    {
 5590|    144|        return detail::handle_error(
 5591|    144|            scan_error{scan_error::invalid_format_string, msg});
 5592|    144|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  42.9k|{
 6054|  42.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  42.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  42.9k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   159k|{
 6443|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 159k, False: 0]
  |  Branch (6444:26): [True: 120k, False: 38.2k]
  ------------------
 6445|   120k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|   120k|    }
 6447|       |
 6448|  38.2k|    handler();
 6449|  38.2k|    return begin;
 6450|   159k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|   120k|{
 6413|   120k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|   120k|    CharT c = *begin;
 6416|   120k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 72, False: 120k]
  |  Branch (6416:27): [True: 120k, False: 448]
  ------------------
 6417|   120k|        handler.on_error("Invalid argument ID");
 6418|   120k|        return begin;
 6419|   120k|    }
 6420|       |
 6421|    448|    int idx = 0;
 6422|    448|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 240, False: 208]
  ------------------
 6423|    240|        idx = parse_simple_int(begin, end);
 6424|    240|    }
 6425|    208|    else {
 6426|    208|        ++begin;
 6427|    208|    }
 6428|       |
 6429|    448|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 102, False: 346]
  |  Branch (6429:26): [True: 170, False: 176]
  |  Branch (6429:50): [True: 56, False: 114]
  ------------------
 6430|    158|        handler.on_error("Invalid argument ID");
 6431|    158|        return begin;
 6432|    158|    }
 6433|    290|    handler(idx);
 6434|       |
 6435|    290|    return begin;
 6436|    448|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|   120k|        {
 6954|   120k|            SCN_UNLIKELY_ATTR
 6955|   120k|            handler.on_error(msg);
 6956|   120k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  31.9k|{
 6392|  31.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  31.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  31.9k|    unsigned long long value = 0;
 6396|  33.4k|    do {
 6397|  33.4k|        value *= 10;
 6398|  33.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  33.4k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 33.4k]
  ------------------
 6400|  33.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  33.4k|        ++begin;
 6404|  33.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 33.1k, False: 290]
  |  Branch (6404:30): [True: 6.44k, False: 26.7k]
  |  Branch (6404:47): [True: 1.56k, False: 4.88k]
  ------------------
 6405|  31.9k|    return static_cast<int>(value);
 6406|  31.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    290|        {
 6949|    290|            arg_id = handler.on_arg_id(id);
 6950|    290|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    290|    {
 5579|    290|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 180]
  |  |  ------------------
  ------------------
 5580|    110|            on_error(
 5581|    110|                "Cannot switch from manual to automatic argument indexing");
 5582|    110|            return;
 5583|    110|        }
 5584|    180|        m_next_arg_id = -1;
 5585|    180|        do_check_arg_id(id);
 5586|    180|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  38.2k|        {
 6945|  38.2k|            arg_id = handler.on_arg_id();
 6946|  38.2k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  76.6k|    {
 5252|  76.6k|        return m_type;
 5253|  76.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  35.2k|    {
 5561|  35.2k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  35.2k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  73.5k|    {
 5550|  73.5k|        return m_format.data();
 5551|  73.5k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  38.3k|    {
 7122|  38.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  38.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  38.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  38.3k|{
 6858|  38.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  38.3k|        if (*begin == CharT{'['}) {
 6860|  38.3k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  38.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  38.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  38.3k|                return begin;
 6866|  38.3k|            }
 6867|  38.3k|            handler.on_character_set_string(set);
 6868|  38.3k|            return begin;
 6869|  38.3k|        }
 6870|  38.3k|        if (*begin == CharT{'/'}) {
 6871|  38.3k|            return parse_presentation_regex(begin, end, handler);
 6872|  38.3k|        }
 6873|  38.3k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  38.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  38.3k|            handler.on_error("Invalid type specifier in format string");
 6876|  38.3k|            return begin;
 6877|  38.3k|        }
 6878|  38.3k|        handler.on_type(type);
 6879|  38.3k|        return begin;
 6880|  38.3k|    };
 6881|       |
 6882|  38.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 37.3k, False: 972]
  |  Branch (6882:28): [True: 2.70k, False: 34.6k]
  ------------------
 6883|  38.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 268, False: 2.43k]
  |  Branch (6883:36): [True: 216, False: 52]
  ------------------
 6884|    216|        return do_presentation();
 6885|    216|    }
 6886|       |
 6887|  38.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.0k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  38.0k|    begin = parse_align(begin, end, handler);
 6893|  38.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 37.9k]
  |  |  ------------------
  ------------------
 6894|    116|        handler.on_error("Unexpected end of format string");
 6895|    116|        return begin;
 6896|    116|    }
 6897|       |
 6898|  37.9k|    begin = parse_width(begin, end, handler);
 6899|  37.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 37.8k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|  37.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 2.99k, False: 34.8k]
  ------------------
 6905|  2.99k|        ++begin;
 6906|  2.99k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.96k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  2.96k|        begin = parse_precision(begin, end, handler);
 6911|  2.96k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 2.85k]
  |  |  ------------------
  ------------------
 6912|    108|            handler.on_error("Unexpected end of format string");
 6913|    108|            return begin;
 6914|    108|        }
 6915|  2.96k|    }
 6916|       |
 6917|  37.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 406, False: 37.3k]
  ------------------
 6918|    406|        handler.on_localized();
 6919|    406|        ++begin;
 6920|    406|    }
 6921|  37.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 37.6k]
  |  |  ------------------
  ------------------
 6922|     66|        handler.on_error("Unexpected end of format string");
 6923|     66|        return begin;
 6924|     66|    }
 6925|       |
 6926|  37.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 37.6k, False: 0]
  |  Branch (6926:25): [True: 33.2k, False: 4.40k]
  ------------------
 6927|  33.2k|        do_presentation();
 6928|  33.2k|    }
 6929|  37.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.69k, False: 35.9k]
  |  |  ------------------
  ------------------
 6930|  1.69k|        handler.on_error("Unexpected end of format string");
 6931|  1.69k|        return begin;
 6932|  1.69k|    }
 6933|       |
 6934|  35.9k|    return begin;
 6935|  37.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  2.70k|{
 6507|  2.70k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 214, False: 2.48k]
  |  Branch (6507:33): [True: 180, False: 34]
  ------------------
 6508|  2.70k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 158, False: 2.36k]
  |  Branch (6508:33): [True: 88, False: 70]
  ------------------
 6509|  2.70k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  33.4k|    auto do_presentation = [&]() -> const CharT* {
 6859|  33.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 1.88k, False: 31.6k]
  ------------------
 6860|  1.88k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.88k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 626, False: 1.25k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    626|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    626|                return begin;
 6866|    626|            }
 6867|  1.25k|            handler.on_character_set_string(set);
 6868|  1.25k|            return begin;
 6869|  1.88k|        }
 6870|  31.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 28.4k, False: 3.14k]
  ------------------
 6871|  28.4k|            return parse_presentation_regex(begin, end, handler);
 6872|  28.4k|        }
 6873|  3.14k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.14k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 570, False: 2.57k]
  |  |  ------------------
  ------------------
 6875|    570|            handler.on_error("Invalid type specifier in format string");
 6876|    570|            return begin;
 6877|    570|        }
 6878|  2.57k|        handler.on_type(type);
 6879|  2.57k|        return begin;
 6880|  3.14k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  1.88k|{
 6697|  1.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  1.88k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  1.88k|    auto start = begin;
 6701|  1.88k|    ++begin;
 6702|       |
 6703|  1.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 1.84k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  1.84k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 108, False: 1.73k]
  ------------------
 6710|    108|        handler.on_charset_inverted();
 6711|    108|        ++begin;
 6712|    108|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 66]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     42|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     42|            return {};
 6717|     42|        }
 6718|     66|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 28, False: 38]
  ------------------
 6719|     28|            handler.on_charset_single(char32_t{']'});
 6720|     28|            ++begin;
 6721|     28|        }
 6722|     66|    }
 6723|  1.73k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 1.69k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  22.7k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 22.4k, False: 332]
  ------------------
 6728|  22.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  22.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 22.2k]
  |  |  ------------------
  ------------------
 6729|    178|            break;
 6730|    178|        }
 6731|       |
 6732|  22.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 1.25k, False: 21.0k]
  ------------------
 6733|  1.25k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  1.25k|        }
 6735|       |
 6736|  21.0k|        parse_presentation_set_literal(begin, end, handler);
 6737|  21.0k|    }
 6738|       |
 6739|    510|    SCN_UNLIKELY_ATTR
 6740|    510|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    510|    return {};
 6742|  1.76k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  21.0k|{
 6661|  21.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  21.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  21.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 20.8k]
  |  |  ------------------
  ------------------
 6665|    136|        return;
 6666|    136|    }
 6667|       |
 6668|  20.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 20.8k, False: 88]
  |  Branch (6668:25): [True: 520, False: 20.2k]
  |  Branch (6668:49): [True: 486, False: 34]
  ------------------
 6669|  20.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 356, False: 130]
  ------------------
 6670|    356|        ++begin;
 6671|       |
 6672|    356|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    356|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 322]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|    322|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 276]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|    276|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    276|        return;
 6686|    322|    }
 6687|       |
 6688|  20.5k|    handler.on_charset_single(cp_first);
 6689|  20.5k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  21.3k|{
 6637|  21.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  21.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  21.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.3k]
  |  |  |  Branch (859:45): [True: 0, False: 21.3k]
  |  |  |  Branch (859:45): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  21.3k|    const auto cp =
 6646|  21.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  21.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170, False: 21.2k]
  |  |  ------------------
  ------------------
 6648|    170|        handler.on_error("Invalid encoding in format string");
 6649|    170|        return invalid_code_point;
 6650|    170|    }
 6651|       |
 6652|  21.2k|    begin += len;
 6653|  21.2k|    return cp;
 6654|  21.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  1.25k|    {
 6346|  1.25k|        m_specs.charset_string_data = fmt.data();
 6347|  1.25k|        m_specs.charset_string_size = fmt.size();
 6348|  1.25k|        on_type(presentation_type::string_set);
 6349|  1.25k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  28.4k|{
 6749|  28.4k|#if !SCN_DISABLE_REGEX
 6750|  28.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  28.4k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  28.4k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  56.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  28.4k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  28.4k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  28.4k|        return begin;
 6757|  28.4k|    }
 6758|       |
 6759|  28.4k|    auto start = begin;
 6760|  28.4k|    ++begin;
 6761|       |
 6762|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 28.4k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  28.4k|    handler.on_type(presentation_type::regex);
 6768|  3.11M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 3.11M, False: 174]
  ------------------
 6769|  3.11M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 31.2k, False: 3.08M]
  ------------------
 6770|  31.2k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 28.2k, False: 3.00k]
  ------------------
 6771|  28.2k|                break;
 6772|  28.2k|            }
 6773|  3.00k|            else {
 6774|  3.00k|                handler.on_type(presentation_type::regex_escaped);
 6775|  3.00k|            }
 6776|  31.2k|        }
 6777|  3.11M|    }
 6778|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 28.2k]
  |  |  ------------------
  ------------------
 6779|    174|        handler.on_error("Unexpected end of regex in format string");
 6780|    174|        return begin;
 6781|    174|    }
 6782|       |
 6783|  28.2k|    auto regex_end = begin;
 6784|  28.2k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  28.2k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 28.2k]
  |  |  ------------------
  ------------------
 6786|     46|        handler.on_error("Invalid (empty) regex in format string");
 6787|     46|        return begin;
 6788|     46|    }
 6789|  28.2k|    handler.on_regex_pattern(regex_pattern);
 6790|  28.2k|    ++begin;
 6791|       |
 6792|  28.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 28.1k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  28.1k|    regex_flags flags{regex_flags::none};
 6798|  28.1k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  28.1k|        {{'m', regex_flags::multiline},
 6800|  28.1k|         {'s', regex_flags::singleline},
 6801|  28.1k|         {'i', regex_flags::nocase},
 6802|  28.1k|         {'n', regex_flags::nocapture}}};
 6803|  30.2k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 30.1k, False: 64]
  ------------------
 6804|  30.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 27.9k, False: 2.22k]
  ------------------
 6805|  27.9k|            break;
 6806|  27.9k|        }
 6807|  2.22k|        bool found_flag = false;
 6808|  6.47k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 6.47k, False: 144]
  ------------------
 6809|  6.47k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 4.39k, False: 2.07k]
  ------------------
 6810|  4.39k|                continue;
 6811|  4.39k|            }
 6812|  2.07k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 2.05k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  2.05k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  2.05k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 52, False: 1.99k]
  ------------------
 6818|       |                // clang-format off
 6819|     52|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     52|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  2.05k|#endif
 6830|  2.05k|            flags |= flag.second;
 6831|  2.05k|            found_flag = true;
 6832|  2.05k|            break;
 6833|  2.07k|        }
 6834|  2.19k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 144, False: 2.05k]
  ------------------
 6835|    144|            handler.on_error("Invalid flag in regex");
 6836|    144|            return begin;
 6837|    144|        }
 6838|  2.19k|    }
 6839|  28.0k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 27.9k]
  |  |  ------------------
  ------------------
 6842|     64|        handler.on_error("Unexpected end of regex in format string");
 6843|     64|        return begin;
 6844|     64|    }
 6845|       |
 6846|  27.9k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  28.0k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  28.2k|    {
 6354|  28.2k|        m_specs.charset_string_data = pattern.data();
 6355|  28.2k|        m_specs.charset_string_size = pattern.size();
 6356|  28.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  3.14k|{
 6455|  3.14k|    switch (type) {
 6456|     70|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 70, False: 3.07k]
  ------------------
 6457|    104|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 3.10k]
  ------------------
 6458|    104|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 3.05k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    106|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 106, False: 3.03k]
  ------------------
 6462|    106|            return presentation_type::int_generic;
 6463|    166|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 166, False: 2.97k]
  ------------------
 6464|    166|            return presentation_type::int_unsigned_decimal;
 6465|    142|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 142, False: 2.99k]
  ------------------
 6466|    142|            return presentation_type::int_octal;
 6467|    130|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 130, False: 3.01k]
  ------------------
 6468|    182|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 3.08k]
  ------------------
 6469|    182|            return presentation_type::int_hex;
 6470|     40|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 40, False: 3.10k]
  ------------------
 6471|     80|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 40, False: 3.10k]
  ------------------
 6472|     80|            return presentation_type::int_arbitrary_base;
 6473|    152|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 152, False: 2.98k]
  ------------------
 6474|    276|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 124, False: 3.01k]
  ------------------
 6475|    276|            return presentation_type::float_hex;
 6476|    142|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 142, False: 2.99k]
  ------------------
 6477|    176|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 3.10k]
  ------------------
 6478|    176|            return presentation_type::float_scientific;
 6479|     94|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 94, False: 3.04k]
  ------------------
 6480|    182|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 3.05k]
  ------------------
 6481|    182|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 3.10k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 3.10k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|    628|        case 's':
  ------------------
  |  Branch (6485:9): [True: 628, False: 2.51k]
  ------------------
 6486|    628|            return presentation_type::string;
 6487|    250|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 250, False: 2.89k]
  ------------------
 6488|    250|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 3.10k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 3.05k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.14k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 3.14k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    570|        default:
  ------------------
  |  Branch (6499:9): [True: 570, False: 2.57k]
  ------------------
 6500|    570|            return presentation_type::none;
 6501|  3.14k|    }
 6502|  3.14k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  38.0k|{
 6532|  38.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  38.0k|    auto check_align = [](wchar_t ch) {
 6535|  38.0k|        switch (ch) {
 6536|  38.0k|            case L'<':
 6537|  38.0k|                return align_type::left;
 6538|  38.0k|            case L'>':
 6539|  38.0k|                return align_type::right;
 6540|  38.0k|            case L'^':
 6541|  38.0k|                return align_type::center;
 6542|  38.0k|            default:
 6543|  38.0k|                return align_type::none;
 6544|  38.0k|        }
 6545|  38.0k|    };
 6546|       |
 6547|  38.0k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  38.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.0k]
  |  |  |  Branch (859:45): [True: 0, False: 38.0k]
  |  |  |  Branch (859:45): [True: 0, False: 38.0k]
  |  |  ------------------
  ------------------
 6549|  38.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  38.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  38.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  38.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  38.0k|    const auto begin_before_fill = begin;
 6559|  38.0k|    begin += potential_fill_len;
 6560|       |
 6561|  38.0k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 972, False: 37.1k]
  ------------------
 6562|    972|        return begin_before_fill;
 6563|    972|    }
 6564|       |
 6565|  37.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  37.1k|    const auto begin_after_fill = begin;
 6567|  37.1k|    ++begin;
 6568|       |
 6569|  37.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 37.1k, False: 0]
  ------------------
 6570|  37.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 37.0k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|  37.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 1.82k, False: 35.2k]
  ------------------
 6575|  1.82k|            return begin_before_fill;
 6576|  1.82k|        }
 6577|  37.0k|    }
 6578|       |
 6579|  35.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 34.6k, False: 596]
  ------------------
 6580|  34.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.14k, False: 33.5k]
  ------------------
 6581|  1.14k|            handler.on_align(potential_align_on_fill);
 6582|  1.14k|            return begin_after_fill;
 6583|  1.14k|        }
 6584|  33.5k|        return begin_before_fill;
 6585|  34.6k|    }
 6586|       |
 6587|    596|    handler.on_fill(potential_fill);
 6588|    596|    handler.on_align(potential_align_after_fill);
 6589|    596|    return begin;
 6590|  35.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  38.0k|{
 6514|  38.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  38.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  38.0k|        return 1;
 6517|  38.0k|    }
 6518|  38.0k|    else {
 6519|  38.0k|        const auto lengths =
 6520|  38.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  38.0k|            "\3\4";
 6522|  38.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  38.0k|        return len;
 6524|  38.0k|    }
 6525|  38.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  75.2k|    auto check_align = [](wchar_t ch) {
 6535|  75.2k|        switch (ch) {
 6536|    634|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 634, False: 74.5k]
  ------------------
 6537|    634|                return align_type::left;
 6538|    326|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 326, False: 74.8k]
  ------------------
 6539|    326|                return align_type::right;
 6540|    996|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 996, False: 74.2k]
  ------------------
 6541|    996|                return align_type::center;
 6542|  73.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 73.2k, False: 1.95k]
  ------------------
 6543|  73.2k|                return align_type::none;
 6544|  75.2k|        }
 6545|  75.2k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    596|    {
 6268|    596|        m_specs.fill = fill;
 6269|    596|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    596|    {
 6149|    596|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    596|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|    596|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|    596|            for (size_t i = 0; i < s.size(); ++i) {
 6153|    596|                SCN_GCC_PUSH
 6154|    596|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|    596|                m_data[i] = s[i];
 6156|    596|                SCN_GCC_POP
 6157|    596|            }
 6158|    596|            m_size = static_cast<unsigned char>(s.size());
 6159|    596|        }
 6160|    596|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|    596|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|    596|            m_data[1] =
 6163|    596|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|    596|            if (s.size() == 1) {
 6165|    596|                return;
 6166|    596|            }
 6167|    596|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|    596|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|    596|        }
 6170|    596|        else {
 6171|    596|            const auto front = static_cast<unsigned>(s.front());
 6172|    596|            m_data[0] = static_cast<char>(front);
 6173|    596|            m_data[1] = static_cast<char>(front >> 8);
 6174|    596|            m_data[2] = static_cast<char>(front >> 16);
 6175|    596|            m_data[3] = static_cast<char>(front >> 24);
 6176|    596|        }
 6177|    596|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  37.9k|{
 6597|  37.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  37.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 32.8k, False: 5.11k]
  |  Branch (6599:33): [True: 28.7k, False: 4.07k]
  ------------------
 6600|  28.7k|        int width = parse_simple_int(begin, end);
 6601|  28.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  28.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.7k, False: 0]
  |  |  ------------------
  ------------------
 6602|  28.7k|            handler.on_width(width);
 6603|  28.7k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  28.7k|    }
 6609|  37.9k|    return begin;
 6610|  37.9k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  2.96k|{
 6617|  2.96k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  2.96k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 2.93k, False: 34]
  |  Branch (6619:33): [True: 2.87k, False: 52]
  ------------------
 6620|  2.87k|        int prec = parse_simple_int(begin, end);
 6621|  2.87k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  2.87k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.87k, False: 0]
  |  |  ------------------
  ------------------
 6622|  2.87k|            handler.on_precision(prec);
 6623|  2.87k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  2.87k|    }
 6629|  2.96k|    return begin;
 6630|  2.96k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    406|    {
 7127|    406|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    406|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 368, False: 38]
  ------------------
 7129|    406|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 330, False: 38]
  ------------------
 7130|    406|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 292, False: 38]
  ------------------
 7131|    406|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 254, False: 38]
  ------------------
 7132|    254|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    254|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    254|        }
 7137|       |
 7138|    152|        Handler::on_localized();
 7139|    152|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  35.0k|{
 8417|  35.0k|#define SCN_VISIT(Type)                                         \
 8418|  35.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  35.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  35.0k|    }                                                           \
 8421|  35.0k|    else {                                                      \
 8422|  35.0k|        return vis(monostate_val);                              \
 8423|  35.0k|    }
 8424|       |
 8425|  35.0k|    monostate monostate_val{};
 8426|       |
 8427|  35.0k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 35.0k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 35.0k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  3.91k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 3.91k, False: 31.1k]
  ------------------
 8433|  3.91k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  3.91k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.91k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.91k|    }                                                           \
  |  | 8421|  3.91k|    else {                                                      \
  |  | 8422|  3.91k|        return vis(monostate_val);                              \
  |  | 8423|  3.91k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 35.0k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 35.0k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 35.0k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 35.0k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  3.91k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 3.91k, False: 31.1k]
  ------------------
 8443|  3.91k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  3.91k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.91k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.91k|    }                                                           \
  |  | 8421|  3.91k|    else {                                                      \
  |  | 8422|  3.91k|        return vis(monostate_val);                              \
  |  | 8423|  3.91k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 35.0k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 35.0k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  3.87k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 3.87k, False: 31.1k]
  ------------------
 8449|  3.87k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  3.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.87k|    }                                                           \
  |  | 8421|  3.87k|    else {                                                      \
  |  | 8422|  3.87k|        return vis(monostate_val);                              \
  |  | 8423|  3.87k|    }
  ------------------
 8450|  3.91k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 3.91k, False: 31.1k]
  ------------------
 8451|  3.91k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  3.91k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.91k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.91k|    }                                                           \
  |  | 8421|  3.91k|    else {                                                      \
  |  | 8422|  3.91k|        return vis(monostate_val);                              \
  |  | 8423|  3.91k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 35.0k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  3.87k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 3.87k, False: 31.1k]
  ------------------
 8455|  3.87k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  3.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.87k|    }                                                           \
  |  | 8421|  3.87k|    else {                                                      \
  |  | 8422|  3.87k|        return vis(monostate_val);                              \
  |  | 8423|  3.87k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 35.0k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 35.0k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  3.91k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 3.91k, False: 31.1k]
  ------------------
 8461|  3.91k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  3.91k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.91k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.91k|    }                                                           \
  |  | 8421|  3.91k|    else {                                                      \
  |  | 8422|  3.91k|        return vis(monostate_val);                              \
  |  | 8423|  3.91k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 35.0k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 35.0k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  3.87k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 3.87k, False: 31.1k]
  ------------------
 8467|  3.87k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  3.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.87k|    }                                                           \
  |  | 8421|  3.87k|    else {                                                      \
  |  | 8422|  3.87k|        return vis(monostate_val);                              \
  |  | 8423|  3.87k|    }
  ------------------
 8468|  3.87k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 3.87k, False: 31.1k]
  ------------------
 8469|  3.87k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  3.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.87k|    }                                                           \
  |  | 8421|  3.87k|    else {                                                      \
  |  | 8422|  3.87k|        return vis(monostate_val);                              \
  |  | 8423|  3.87k|    }
  ------------------
 8470|  3.87k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 3.87k, False: 31.1k]
  ------------------
 8471|  3.87k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  3.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.87k|    }                                                           \
  |  | 8421|  3.87k|    else {                                                      \
  |  | 8422|  3.87k|        return vis(monostate_val);                              \
  |  | 8423|  3.87k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 35.0k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 35.0k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 35.0k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 35.0k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 35.0k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  35.0k|            SCN_CLANG_POP
 8495|  35.0k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  4.17k|    {
 3330|  4.17k|        return m_iterator;
 3331|  4.17k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.04k|    {
 1430|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.04k|    {
  437|  1.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.04k|    {
 1177|  1.04k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  2.08k|    {
 3334|  2.08k|        return m_sentinel;
 3335|  2.08k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  2.08k|    {
 3316|  2.08k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.08k|    {
  485|  2.08k|        return m_has_value;
  486|  2.08k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.04k|    {
 1627|  1.04k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04k|        return this->get_value();
 1629|  1.04k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.04k|    {
  451|  1.04k|        return m_value;
  452|  1.04k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.04k|    {
 1837|  1.04k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.04k|                                            std::forward<F>(f));
 1839|  1.04k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.04k|{
 1323|  1.04k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.04k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.04k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.04k|            return result(*std::forward<Exp>(exp));
 1327|  1.04k|        }
 1328|       |
 1329|  1.04k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.04k|        return result(unexpect, monostate{});
 1331|  1.04k|    }
 1332|  1.04k|    else {
 1333|  1.04k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.04k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.04k|    }
 1340|  1.04k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.04k|    {
 1663|  1.04k|        return std::move(value());
 1664|  1.04k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.04k|    {
 1430|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.04k|    {
  437|  1.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.04k|    {
 1177|  1.04k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.04k|    {
 1598|  1.04k|        return has_value();
 1599|  1.04k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.08k|    {
  485|  2.08k|        return m_has_value;
  486|  2.08k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.04k|    {
 1663|  1.04k|        return std::move(value());
 1664|  1.04k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.04k|    {
 1627|  1.04k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04k|        return this->get_value();
 1629|  1.04k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.04k|    {
  451|  1.04k|        return m_value;
  452|  1.04k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   120k|{
   44|   120k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   120k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   120k|{
   60|   120k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   120k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  13.3k|{
   89|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  13.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  13.3k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  13.3k|{
  127|  13.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  13.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  13.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  13.3k|    static_cast<    \
  |  |  929|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  13.3k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   180k|{
  653|   180k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   180k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    174|{
  659|    174|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    174|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 87, False: 87]
  ------------------
  661|    174|                    : std::locale{};
  662|    174|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    930|{
 1221|    930|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    930|                                  m_nan_payload_buffer, value);
 1223|    930|    value = this->setsign(value);
 1224|    930|    return n;
 1225|    930|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    850|{
 1221|    850|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    850|                                  m_nan_payload_buffer, value);
 1223|    850|    value = this->setsign(value);
 1224|    850|    return n;
 1225|    850|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     20|{
 1461|     20|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     20|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     20|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     20|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     20|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20, False: 0]
  ------------------
 1467|     20|        SCN_UNLIKELY_ATTR
 1468|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     20|                                     "Invalid integer value");
 1470|     20|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    918|{
 1461|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 918, False: 0]
  ------------------
 1467|    918|        SCN_UNLIKELY_ATTR
 1468|    918|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    918|                                     "Invalid integer value");
 1470|    918|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    864|{
 1461|    864|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    864|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    864|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    864|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    864|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 864, False: 0]
  ------------------
 1467|    864|        SCN_UNLIKELY_ATTR
 1468|    864|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    864|                                     "Invalid integer value");
 1470|    864|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    918|{
 1461|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 918, False: 0]
  ------------------
 1467|    918|        SCN_UNLIKELY_ATTR
 1468|    918|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    918|                                     "Invalid integer value");
 1470|    918|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    850|{
 1461|    850|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    850|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    850|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    850|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    850|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 850, False: 0]
  ------------------
 1467|    850|        SCN_UNLIKELY_ATTR
 1468|    850|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    850|                                     "Invalid integer value");
 1470|    850|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    902|{
 1461|    902|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    902|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    902|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    902|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    902|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 902, False: 0]
  ------------------
 1467|    902|        SCN_UNLIKELY_ATTR
 1468|    902|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    902|                                     "Invalid integer value");
 1470|    902|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    838|{
 1461|    838|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    838|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    838|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    838|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    838|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 838, False: 0]
  ------------------
 1467|    838|        SCN_UNLIKELY_ATTR
 1468|    838|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    838|                                     "Invalid integer value");
 1470|    838|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  60.1k|{
 2184|  60.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  60.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   120k|{
 2208|   120k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   120k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.78k|{
  194|  3.78k|    return find_classic_impl(
  195|  3.78k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.78k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.78k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  24.3k|{
  202|  24.3k|    return find_classic_impl(
  203|  24.3k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  24.3k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  24.3k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    266|{
  673|    266|    return e;
  674|    266|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  60.1k|{
 2141|  60.1k|    return vscan_internal(source, format, args);
 2142|  60.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   120k|{
 2161|   120k|    return vscan_internal(source, format, args);
 2162|   120k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.78k|{
  118|  3.78k|    auto it = source.begin();
  119|       |
  120|  16.2k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 13.2k, False: 2.98k]
  ------------------
  121|  13.2k|        auto sv =
  122|  13.2k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  13.2k|                .substr(0, 8);
  124|       |
  125|  13.2k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 4.09k, False: 9.18k]
  ------------------
  126|  4.09k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  4.09k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  4.09k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 474, False: 3.61k]
  ------------------
  129|    474|                break;
  130|    474|            }
  131|  3.61k|            continue;
  132|  4.09k|        }
  133|       |
  134|  36.8k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 28.0k, False: 8.85k]
  ------------------
  135|  28.0k|            auto tmp =
  136|  28.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  28.0k|            auto res = get_next_code_point(tmp);
  138|  28.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 324, False: 27.7k]
  ------------------
  139|    324|                return it;
  140|    324|            }
  141|  27.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  27.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  27.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  27.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  27.7k|        }
  145|  9.18k|    }
  146|       |
  147|  3.45k|    return detail::make_string_view_iterator(source, it);
  148|  3.78k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  40.1k|{
  105|  40.1k|    static_assert(sizeof(*source.data()) == 1);
  106|  40.1k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  40.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  40.1k|    uint64_t word{};
  108|  40.1k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  40.1k|    return has_byte_greater(word, 127) != 0;
  111|  40.1k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  26.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  28.0k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  24.3k|{
  118|  24.3k|    auto it = source.begin();
  119|       |
  120|  33.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 26.8k, False: 6.92k]
  ------------------
  121|  26.8k|        auto sv =
  122|  26.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  26.8k|                .substr(0, 8);
  124|       |
  125|  26.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 13.6k, False: 13.1k]
  ------------------
  126|  13.6k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  13.6k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  13.6k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 10.2k, False: 3.46k]
  ------------------
  129|  10.2k|                break;
  130|  10.2k|            }
  131|  3.46k|            continue;
  132|  13.6k|        }
  133|       |
  134|  33.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 27.4k, False: 6.00k]
  ------------------
  135|  27.4k|            auto tmp =
  136|  27.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  27.4k|            auto res = get_next_code_point(tmp);
  138|  27.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 7.16k, False: 20.3k]
  ------------------
  139|  7.16k|                return it;
  140|  7.16k|            }
  141|  20.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  20.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  20.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  20.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  20.3k|        }
  145|  13.1k|    }
  146|       |
  147|  17.1k|    return detail::make_string_view_iterator(source, it);
  148|  24.3k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  33.7k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  27.4k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    930|{
 1138|    930|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 930]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    930|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 930]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    930|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 930]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    930|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 930]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    930|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    930|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 26, False: 904]
  ------------------
 1185|     26|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 1186|     26|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     26|                                         "Invalid floating-point digit");
 1188|     26|        }
 1189|     26|    }
 1190|    904|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 904, False: 0]
  |  |  ------------------
  ------------------
 1191|    904|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    904|                                     "Invalid floating-point digit");
 1193|    904|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    850|{
 1138|    850|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 850]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    850|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 850]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    850|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 850]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    850|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 850]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    850|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    850|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 838]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    838|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 838, False: 0]
  |  |  ------------------
  ------------------
 1191|    838|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    838|                                     "Invalid floating-point digit");
 1193|    838|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   120k|{
 1625|   120k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 119k, False: 396]
  ------------------
 1626|   119k|        return false;
 1627|   119k|    }
 1628|    396|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 270]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   120k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   120k|    {
 1903|   120k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   360k|    {
 1722|   360k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   120k|    {
 1853|   120k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   120k|{
 2038|   120k|    const auto beg = handler.get_ctx().begin();
 2039|   120k|    detail::parse_format_string<false>(format, handler);
 2040|   120k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 2.80k]
  |  |  ------------------
  ------------------
 2041|   117k|        return unexpected(handler.error);
 2042|   117k|    }
 2043|  2.80k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   120k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   594k|    {
 2022|   594k|        return ctx.get();
 2023|   594k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   594k|    {
 1857|   594k|        return contiguous_ctx;
 1858|   594k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   138k|    {
 1907|   188k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 55.5k, False: 133k]
  ------------------
 1908|  55.5k|            auto it = get_ctx().begin();
 1909|  55.5k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.02k, False: 54.4k]
  ------------------
 1910|  1.02k|                SCN_UNLIKELY_ATTR
 1911|  1.02k|                return on_error("Unexpected end of source");
 1912|  1.02k|            }
 1913|       |
 1914|  54.4k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  54.4k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  54.4k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.62k, False: 51.8k]
  ------------------
 1917|  2.62k|                SCN_UNLIKELY_ATTR
 1918|  2.62k|                return on_error("Invalid encoding in format string");
 1919|  2.62k|            }
 1920|  51.8k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 7.06k, False: 44.8k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  7.06k|                get_ctx().advance_to(
 1923|  7.06k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  7.06k|                auto begin_it = impl::read_while_classic_space(
 1926|  7.06k|                    detail::make_string_view_from_pointers(
 1927|  7.06k|                        detail::to_address(after_space_it),
 1928|  7.06k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  7.06k|                begin = detail::to_address(begin_it) - 1;
 1931|  7.06k|                continue;
 1932|  7.06k|            }
 1933|       |
 1934|  44.8k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.60k, False: 43.1k]
  ------------------
 1935|  1.60k|                SCN_UNLIKELY_ATTR
 1936|  1.60k|                return on_error("Unexpected literal character in source");
 1937|  1.60k|            }
 1938|  43.1k|            get_ctx().advance_to(ranges::next(it));
 1939|  43.1k|        }
 1940|   138k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.29k|    {
 1972|  6.29k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.29k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.29k|        on_visit_scan_arg(
 1976|  6.29k|            impl::default_arg_reader<context_type>{
 1977|  6.29k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.29k|            arg);
 1979|  6.29k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  75.9k|{
 1681|  75.9k|    auto arg = ctx.arg(id);
 1682|  75.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 74.4k]
  |  |  ------------------
  ------------------
 1683|  1.47k|        handler.on_error("Failed to find argument with ID");
 1684|  1.47k|    }
 1685|  75.9k|    return arg;
 1686|  75.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   118k|    {
 1797|   118k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 116k]
  |  |  ------------------
  ------------------
 1798|  2.77k|            on_error("Invalid out-of-range argument ID");
 1799|  2.77k|            return;
 1800|  2.77k|        }
 1801|       |
 1802|   116k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 116k]
  |  |  ------------------
  ------------------
 1803|    138|            return on_error("Argument with this ID has already been scanned");
 1804|    138|        }
 1805|       |
 1806|   116k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   116k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 116k, False: 0]
  |  |  ------------------
  ------------------
 1807|   116k|            visited_args_lower64 |= (1ull << id);
 1808|   116k|            return;
 1809|   116k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   116k|    {
 1782|   116k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   116k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   116k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 116k, False: 0]
  |  |  ------------------
  ------------------
 1788|   116k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   116k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   116k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.29k|    {
 1956|  6.29k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 152, False: 6.13k]
  |  Branch (1956:23): [True: 0, False: 6.13k]
  ------------------
 1957|    152|            SCN_UNLIKELY_ATTR
 1958|    152|            return;
 1959|    152|        }
 1960|       |
 1961|  6.13k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.13k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.33k, False: 1.80k]
  |  |  ------------------
  ------------------
 1963|  4.33k|            on_error(r.error());
 1964|  4.33k|        }
 1965|  1.80k|        else {
 1966|  1.80k|            get_ctx().advance_to(*r);
 1967|  1.80k|        }
 1968|  6.13k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   100k|    {
 1766|   100k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 0]
  |  |  ------------------
  ------------------
 1767|   100k|            error = err;
 1768|   100k|        }
 1769|   100k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  72.1k|    {
 1944|  72.1k|        return parse_ctx.next_arg_id();
 1945|  72.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  3.87k|    {
 1948|  3.87k|        parse_ctx.check_arg_id(id);
 1949|  3.87k|        return id;
 1950|  3.87k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  69.6k|    {
 1985|  69.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  69.6k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  69.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 69.6k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  69.6k|        auto specs = detail::format_specs{};
 1998|  69.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  69.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  69.6k|            arg.type()};
 2001|       |
 2002|  69.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  69.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.65k, False: 66.9k]
  |  Branch (2003:29): [True: 968, False: 66.0k]
  ------------------
 2004|  3.62k|            SCN_UNLIKELY_ATTR
 2005|  3.62k|            on_error("Missing '}' in format string");
 2006|  3.62k|            return parse_ctx.begin();
 2007|  3.62k|        }
 2008|  66.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 320, False: 65.7k]
  |  |  ------------------
  ------------------
 2009|    320|            return parse_ctx.begin();
 2010|    320|        }
 2011|  65.7k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  65.7k|        on_visit_scan_arg(
 2014|  65.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  65.7k|                                           get_ctx().locale()},
 2016|  65.7k|            arg);
 2017|  65.7k|        return parse_ctx.begin();
 2018|  66.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  69.6k|    {
 1701|  69.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  65.7k|    {
 1956|  65.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 65.5k]
  |  Branch (1956:23): [True: 0, False: 65.5k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|  65.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  65.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  65.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.8k, False: 5.78k]
  |  |  ------------------
  ------------------
 1963|  59.8k|            on_error(r.error());
 1964|  59.8k|        }
 1965|  5.78k|        else {
 1966|  5.78k|            get_ctx().advance_to(*r);
 1967|  5.78k|        }
 1968|  65.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   688k|    {
 1761|   688k|        SCN_UNLIKELY_ATTR
 1762|   688k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   688k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   360k|    {
 1729|   360k|        {
 1730|   360k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 360k]
  ------------------
 1731|   360k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 360k]
  ------------------
 1732|   360k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   360k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   360k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 244k, False: 116k]
  ------------------
 1736|   244k|                return on_error("Argument list not exhausted");
 1737|   244k|            }
 1738|   360k|        }
 1739|       |
 1740|   116k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 116k, False: 0]
  ------------------
 1741|   116k|            return;
 1742|   116k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   360k|    {
 1777|   360k|        return error;
 1778|   360k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   760k|    {
 1773|   760k|        return static_cast<bool>(error);
 1774|   760k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   120k|{
 2053|   120k|    const auto argcount = args.size();
 2054|   120k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 120k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   120k|    auto handler = format_handler<true, CharT>{
 2060|   120k|        ranges::subrange<const CharT*>{source.data(),
 2061|   120k|                                       source.data() + source.size()},
 2062|   120k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   120k|    return vscan_parse_format_string(format, handler);
 2064|   120k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   240k|{
 2053|   240k|    const auto argcount = args.size();
 2054|   240k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 240k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   240k|    auto handler = format_handler<true, CharT>{
 2060|   240k|        ranges::subrange<const CharT*>{source.data(),
 2061|   240k|                                       source.data() + source.size()},
 2062|   240k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   240k|    static_cast<    \
  |  |  929|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   240k|    static_cast<    \
  |  |  929|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   240k|    return vscan_parse_format_string(format, handler);
 2064|   240k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   240k|{
 1625|   240k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 229k, False: 11.1k]
  ------------------
 1626|   229k|        return false;
 1627|   229k|    }
 1628|  11.1k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.0k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   240k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   240k|    {
 1903|   240k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   240k|    {
 1853|   240k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   240k|{
 2038|   240k|    const auto beg = handler.get_ctx().begin();
 2039|   240k|    detail::parse_format_string<false>(format, handler);
 2040|   240k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 239k, False: 646]
  |  |  ------------------
  ------------------
 2041|   239k|        return unexpected(handler.error);
 2042|   239k|    }
 2043|    646|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   240k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.47G|    {
 2022|  1.47G|        return ctx.get();
 2023|  1.47G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.47G|    {
 1857|  1.47G|        return contiguous_ctx;
 1858|  1.47G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   255k|    {
 1907|   493M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 492M, False: 164k]
  ------------------
 1908|   492M|            auto it = get_ctx().begin();
 1909|   492M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 420, False: 492M]
  ------------------
 1910|    420|                SCN_UNLIKELY_ATTR
 1911|    420|                return on_error("Unexpected end of source");
 1912|    420|            }
 1913|       |
 1914|   492M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   492M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   492M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 90.0k, False: 492M]
  ------------------
 1917|  90.0k|                SCN_UNLIKELY_ATTR
 1918|  90.0k|                return on_error("Invalid encoding in format string");
 1919|  90.0k|            }
 1920|   492M|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 12.8k, False: 492M]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  12.8k|                get_ctx().advance_to(
 1923|  12.8k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  12.8k|                auto begin_it = impl::read_while_classic_space(
 1926|  12.8k|                    detail::make_string_view_from_pointers(
 1927|  12.8k|                        detail::to_address(after_space_it),
 1928|  12.8k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  12.8k|                begin = detail::to_address(begin_it) - 1;
 1931|  12.8k|                continue;
 1932|  12.8k|            }
 1933|       |
 1934|   492M|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 540, False: 492M]
  ------------------
 1935|    540|                SCN_UNLIKELY_ATTR
 1936|    540|                return on_error("Unexpected literal character in source");
 1937|    540|            }
 1938|   492M|            get_ctx().advance_to(ranges::next(it));
 1939|   492M|        }
 1940|   255k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  4.75k|    {
 1972|  4.75k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  4.75k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  4.75k|        on_visit_scan_arg(
 1976|  4.75k|            impl::default_arg_reader<context_type>{
 1977|  4.75k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  4.75k|            arg);
 1979|  4.75k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  43.0k|{
 1681|  43.0k|    auto arg = ctx.arg(id);
 1682|  43.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29k, False: 41.7k]
  |  |  ------------------
  ------------------
 1683|  1.29k|        handler.on_error("Failed to find argument with ID");
 1684|  1.29k|    }
 1685|  43.0k|    return arg;
 1686|  43.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  4.75k|    {
 1956|  4.75k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 148, False: 4.60k]
  |  Branch (1956:23): [True: 0, False: 4.60k]
  ------------------
 1957|    148|            SCN_UNLIKELY_ATTR
 1958|    148|            return;
 1959|    148|        }
 1960|       |
 1961|  4.60k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  4.60k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.29k, False: 1.31k]
  |  |  ------------------
  ------------------
 1963|  3.29k|            on_error(r.error());
 1964|  3.29k|        }
 1965|  1.31k|        else {
 1966|  1.31k|            get_ctx().advance_to(*r);
 1967|  1.31k|        }
 1968|  4.60k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  42.8k|    {
 1944|  42.8k|        return parse_ctx.next_arg_id();
 1945|  42.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    290|    {
 1948|    290|        parse_ctx.check_arg_id(id);
 1949|    290|        return id;
 1950|    290|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  38.3k|    {
 1985|  38.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  38.3k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  38.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 38.3k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  38.3k|        auto specs = detail::format_specs{};
 1998|  38.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  38.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  38.3k|            arg.type()};
 2001|       |
 2002|  38.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  38.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.12k, False: 36.1k]
  |  Branch (2003:29): [True: 758, False: 35.4k]
  ------------------
 2004|  2.88k|            SCN_UNLIKELY_ATTR
 2005|  2.88k|            on_error("Missing '}' in format string");
 2006|  2.88k|            return parse_ctx.begin();
 2007|  2.88k|        }
 2008|  35.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 35.2k]
  |  |  ------------------
  ------------------
 2009|    224|            return parse_ctx.begin();
 2010|    224|        }
 2011|  35.2k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  35.2k|        on_visit_scan_arg(
 2014|  35.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  35.2k|                                           get_ctx().locale()},
 2016|  35.2k|            arg);
 2017|  35.2k|        return parse_ctx.begin();
 2018|  35.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  38.3k|    {
 1701|  38.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  35.2k|    {
 1956|  35.2k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 180, False: 35.0k]
  |  Branch (1956:23): [True: 0, False: 35.0k]
  ------------------
 1957|    180|            SCN_UNLIKELY_ATTR
 1958|    180|            return;
 1959|    180|        }
 1960|       |
 1961|  35.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  35.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 1.75k]
  |  |  ------------------
  ------------------
 1963|  33.2k|            on_error(r.error());
 1964|  33.2k|        }
 1965|  1.75k|        else {
 1966|  1.75k|            get_ctx().advance_to(*r);
 1967|  1.75k|        }
 1968|  35.0k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  6.67k|{
 1363|  6.67k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  6.67k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  6.67k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  6.67k|            std::u32string tmp;
 1368|  6.67k|            transcode_to_string_impl_to32(src, tmp);
 1369|  6.67k|            return transcode_to_string_impl_32to16<false>(
 1370|  6.67k|                std::u32string_view{tmp}, dest);
 1371|  6.67k|        }
 1372|  6.67k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  6.67k|            return transcode_to_string_impl_to32(src, dest);
 1374|  6.67k|        }
 1375|  6.67k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  6.67k|{
 1256|  6.67k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  6.67k|    auto it = src.begin();
 1259|  1.55M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.54M, False: 6.67k]
  ------------------
 1260|  1.54M|        auto res = get_next_code_point(
 1261|  1.54M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.54M|                                                                 src.end()));
 1263|  1.54M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.1k, False: 1.49M]
  |  |  ------------------
  ------------------
 1264|  47.1k|            dest.push_back(DestCharT{0xfffd});
 1265|  47.1k|        }
 1266|  1.49M|        else {
 1267|  1.49M|            dest.push_back(res.value);
 1268|  1.49M|        }
 1269|  1.54M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.54M|    }
 1271|  6.67k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.70M|{
 1169|  1.70M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.70M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.70M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.2k, False: 1.66M]
  |  |  ------------------
  ------------------
 1173|  38.2k|        return {get_start_for_next_code_point(input),
 1174|  38.2k|                detail::invalid_code_point};
 1175|  38.2k|    }
 1176|  1.66M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.14k, False: 1.66M]
  |  |  ------------------
  ------------------
 1177|  1.14k|        return {input.end(), detail::invalid_code_point};
 1178|  1.14k|    }
 1179|       |
 1180|  1.66M|    return {input.begin() + len,
 1181|  1.66M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.66M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  38.2k|{
 1155|  38.2k|    auto it = input.begin();
 1156|   227k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 226k, False: 1.48k]
  ------------------
 1157|   226k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 36.7k, False: 189k]
  ------------------
 1158|  36.7k|            break;
 1159|  36.7k|        }
 1160|   226k|    }
 1161|  38.2k|    return it;
 1162|  38.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  48.1k|    {
  809|  48.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  48.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  48.1k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  17.7k|    {
  823|  17.7k|        return a.m_code == b.m_code;
  824|  17.7k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  61.0k|    {
 2931|  61.0k|        SCN_UNLIKELY_ATTR
 2932|  61.0k|        m_msg = msg;
 2933|  61.0k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   100k|    {
 2936|   100k|        return m_msg == nullptr;
 2937|   100k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.11k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   700k|    {
 4990|   700k|        on_charset_range(cp, cp + 1);
 4991|   700k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   704k|    {
 4995|   704k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 424k, False: 280k]
  ------------------
 4996|   424k|            return;
 4997|   424k|        }
 4998|       |
 4999|  49.2M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 49.2M, False: 278k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  49.2M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 150, False: 49.2M]
  ------------------
 5002|    150|                elem.first = begin;
 5003|    150|                return;
 5004|    150|            }
 5005|       |
 5006|  49.2M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 2.23k, False: 49.2M]
  ------------------
 5007|  2.23k|                elem.second = end;
 5008|  2.23k|                return;
 5009|  2.23k|            }
 5010|  49.2M|        }
 5011|       |
 5012|   278k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   278k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    390|    {
 5017|       |        // no-op
 5018|    390|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   712k|    {
 5032|   712k|        return static_cast<bool>(err);
 5033|   712k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.35k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  59.8k|{
  458|  59.8k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  59.8k|        static_cast<unsigned char>(ch))];
  460|  59.8k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   524k|{
  469|   524k|    return static_cast<unsigned char>(ch) <= 127;
  470|   524k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.04k|{
  474|  1.04k|#if WCHAR_MIN < 0
  475|  1.04k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.04k, False: 0]
  |  Branch (475:23): [True: 1.04k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.04k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   566k|{
  483|   566k|    return cp <= 127;
  484|   566k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  40.1k|{
  539|  40.1k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  40.1k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  49.2k|{
  784|  49.2k|    return e != eof_error::good;
  785|  49.2k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    112|{
  798|    112|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    112|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    112|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    716|{
  845|    716|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    716|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    716|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    716|    return parse_error::eof;
  847|    716|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.30k|{
  854|  4.30k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.30k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.30k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 84, False: 4.22k]
  ------------------
  859|     84|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     84|    }
  861|       |
  862|  4.22k|    return scan_error{code, msg};
  863|  4.30k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.30k|{
  868|  4.30k|    return [code, msg](parse_error err) {
  869|  4.30k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.30k|    };
  871|  4.30k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   493M|{
 1200|       |    // Pattern_White_Space property
 1201|   493M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 509k, False: 492M]
  |  Branch (1201:27): [True: 29.8k, False: 479k]
  ------------------
 1202|   493M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 5.72k, False: 493M]
  ------------------
 1203|   493M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 7.64k, False: 493M]
  ------------------
 1204|   493M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.80k, False: 493M]
  ------------------
 1205|   493M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 6.19k, False: 493M]
  ------------------
 1206|   493M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.17k, False: 493M]
  ------------------
 1207|   493M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 110, False: 493M]
  ------------------
 1208|   493M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.82k|{
 2220|  3.82k|    unsigned char running_diff{0};
 2221|  13.3k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.54k, False: 3.82k]
  ------------------
 2222|  9.54k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.54k|    }
 2224|  3.82k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.82k]
  |  Branch (2224:33): [True: 0, False: 3.82k]
  ------------------
 2225|  3.82k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   212k|{
 2303|   212k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 25.0k, False: 187k]
  ------------------
 2304|   212k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 354, False: 24.7k]
  ------------------
 2305|  25.0k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 24.6k]
  ------------------
 2306|  25.0k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 24.5k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  25.0k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 19.2k, False: 5.32k]
  |  Branch (2308:27): [True: 3.15k, False: 16.1k]
  |  Branch (2308:43): [True: 3.07k, False: 72]
  ------------------
 2309|  25.0k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 16.1k, False: 5.39k]
  |  Branch (2309:27): [True: 274, False: 15.8k]
  ------------------
 2310|  25.0k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 15.7k, False: 5.44k]
  |  Branch (2310:27): [True: 108, False: 15.6k]
  ------------------
 2311|  25.0k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 15.6k, False: 5.44k]
  |  Branch (2311:27): [True: 90, False: 15.5k]
  ------------------
 2312|  25.0k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 15.5k, False: 5.44k]
  |  Branch (2312:27): [True: 212, False: 15.3k]
  ------------------
 2313|  25.0k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 15.3k, False: 5.44k]
  |  Branch (2313:27): [True: 108, False: 15.2k]
  ------------------
 2314|  25.0k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 15.2k, False: 5.44k]
  |  Branch (2314:27): [True: 78, False: 15.1k]
  ------------------
 2315|  25.0k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 14.7k, False: 5.91k]
  |  Branch (2315:28): [True: 84, False: 14.6k]
  ------------------
 2316|  25.0k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 14.6k, False: 5.91k]
  |  Branch (2316:28): [True: 434, False: 14.2k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  25.0k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 14.4k, False: 5.71k]
  |  Branch (2318:28): [True: 126, False: 14.2k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  25.0k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 14.2k, False: 5.71k]
  |  Branch (2320:28): [True: 72, False: 14.2k]
  ------------------
 2321|  5.16k|        return 2;
 2322|  5.16k|    }
 2323|   206k|    return 1;
 2324|   212k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   155k|{
 2328|   155k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   155k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    178|{
 2343|    178|    return calculate_text_width_for_fmt_v10(cp);
 2344|    178|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  16.0k|{
 3123|  16.0k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  16.0k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  7.25k|{
 3127|  7.25k|#if WCHAR_MIN < 0
 3128|  7.25k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 7.25k, False: 0]
  |  Branch (3128:20): [True: 7.25k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  7.25k|        return char_to_int(static_cast<char>(ch));
 3133|  7.25k|    }
 3134|      0|    return 255;
 3135|  7.25k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  23.1k|{
 4271|  23.1k|    std::regex_constants::syntax_option_type result{};
 4272|  23.1k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 600, False: 22.5k]
  ------------------
 4273|    600|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    600|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    600|    }
 4281|  23.1k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 23.1k]
  ------------------
 4282|  23.1k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  23.1k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 2.97k, False: 20.1k]
  ------------------
 4288|  2.97k|        result |= std::regex_constants::icase;
 4289|  2.97k|    }
 4290|  23.1k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 18, False: 23.1k]
  ------------------
 4291|     18|        result |= std::regex_constants::nosubs;
 4292|     18|    }
 4293|  23.1k|    return result;
 4294|  23.1k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  2.17k|{
 4638|  2.17k|    std::string result{pattern};
 4639|  15.9k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 13.7k, False: 2.17k]
  ------------------
 4640|  13.7k|        result.replace(n, 2, "/");
 4641|  13.7k|        ++n;
 4642|  13.7k|    }
 4643|  2.17k|    return result;
 4644|  2.17k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    192|{
 4647|    192|    std::wstring result{pattern};
 4648|  1.01k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 822, False: 192]
  ------------------
 4649|    822|        result.replace(n, 2, L"/");
 4650|    822|        ++n;
 4651|    822|    }
 4652|    192|    return result;
 4653|    192|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  8.67k|{
 6008|  8.67k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.16k, False: 6.51k]
  ------------------
 6009|  2.16k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 1.06k, False: 1.09k]
  ------------------
 6010|  1.06k|            return {scan_error::invalid_scanned_value,
 6011|  1.06k|                    "Scanned value too narrow, width did not exceed what "
 6012|  1.06k|                    "was specified in the format string"};
 6013|  1.06k|        }
 6014|  2.16k|    }
 6015|  7.61k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.86k, False: 5.74k]
  ------------------
 6016|  1.86k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 72, False: 1.79k]
  ------------------
 6017|     72|            return {scan_error::invalid_scanned_value,
 6018|     72|                    "Scanned value too wide, width exceeded the specified "
 6019|     72|                    "precision"};
 6020|     72|        }
 6021|  1.86k|    }
 6022|  7.53k|    return {};
 6023|  7.61k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  60.4k|    {
  304|  60.4k|        ranges::advance(x, n);
  305|  60.4k|        return x;
  306|  60.4k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  60.4k|    {
  268|  60.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  60.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   120k|    {
  151|   120k|        i += n;
  152|   120k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  79.3k|    {
  108|  79.3k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  79.3k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  79.3k|    {
   87|  79.3k|        return s - i;
   88|  79.3k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.19k|    {
  304|  6.19k|        ranges::advance(x, n);
  305|  6.19k|        return x;
  306|  6.19k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.19k|    {
  268|  6.19k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.19k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.19k|    {
  151|  6.19k|        i += n;
  152|  6.19k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.86k|    {
  108|  2.86k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.86k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.86k|    {
   87|  2.86k|        return s - i;
   88|  2.86k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  7.26k|    {
 5624|  7.26k|        reader_error_handler eh{};
 5625|  7.26k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  7.26k|            detail::check_code_point_type_specs(specs, eh);
 5627|  7.26k|        }
 5628|  7.26k|        else {
 5629|  7.26k|            detail::check_char_type_specs(specs, eh);
 5630|  7.26k|        }
 5631|  7.26k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 572]
  |  |  ------------------
  ------------------
 5632|  6.69k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  6.69k|        }
 5634|    572|        return {};
 5635|  7.26k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  31.9k|    {
  763|  31.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  31.9k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  4.94k|    {
  754|  4.94k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  8.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.73k|              cvref<T> obj = *get<T>(fn);
  745|  8.73k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.73k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.73k|              }
  748|  8.73k|              else {
  749|  8.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.73k|              }
  751|  8.73k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  8.73k|    {
  684|  8.73k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.73k|            return static_cast<T*>(s.m_cp);
  686|  8.73k|        }
  687|  8.73k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.73k|            return static_cast<T*>(s.m_p);
  689|  8.73k|        }
  690|  8.73k|        else {
  691|  8.73k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.73k|        }
  693|  8.73k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  4.94k|        {
  662|  4.94k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.27M|    {
  763|  1.27M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.27M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  40.2k|    {
  754|  40.2k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   602k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   602k|              cvref<T> obj = *get<T>(fn);
  745|   602k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   602k|                  obj(static_cast<decltype(args)>(args)...);
  747|   602k|              }
  748|   602k|              else {
  749|   602k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   602k|              }
  751|   602k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   602k|    {
  684|   602k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   602k|            return static_cast<T*>(s.m_cp);
  686|   602k|        }
  687|   602k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   602k|            return static_cast<T*>(s.m_p);
  689|   602k|        }
  690|   602k|        else {
  691|   602k|            return reinterpret_cast<T*>(s.m_fp);
  692|   602k|        }
  693|   602k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  40.2k|        {
  662|  40.2k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.77k|    {
 5619|  1.77k|        return false;
 5620|  1.77k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.30k|    return [code, msg](parse_error err) {
  869|  4.30k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.30k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     82|    {
 1780|     82|        auto stdloc = loc.get<std::locale>();
 1781|     82|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     82|        grouping = numpunct.grouping();
 1783|     82|        thousands_sep =
 1784|     82|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 82]
  ------------------
 1785|     82|        decimal_point = numpunct.decimal_point();
 1786|     82|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    100|{
 1717|    100|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 100, False: 0]
  ------------------
 1718|    100|        return std::use_facet<Facet>(stdloc);
 1719|    100|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    100|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  35.3k|{
 2349|  35.3k|    size_t count{0};
 2350|  35.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  35.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  35.3k|    });
 2353|  35.3k|    return count;
 2354|  35.3k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  35.3k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  35.3k|    auto it = input.begin();
 1448|  86.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 51.4k, False: 35.3k]
  ------------------
 1449|  51.4k|        auto res = get_next_code_point(
 1450|  51.4k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  51.4k|        cb(res.value);
 1452|  51.4k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  51.4k|    }
 1454|  35.3k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  56.9k|    {
  763|  56.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  56.9k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  35.3k|    {
  754|  35.3k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  51.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.4k|              cvref<T> obj = *get<T>(fn);
  745|  51.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  51.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.4k|              }
  748|  51.4k|              else {
  749|  51.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.4k|              }
  751|  51.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  51.4k|    {
  684|  51.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  51.4k|            return static_cast<T*>(s.m_cp);
  686|  51.4k|        }
  687|  51.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  51.4k|            return static_cast<T*>(s.m_p);
  689|  51.4k|        }
  690|  51.4k|        else {
  691|  51.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  51.4k|        }
  693|  51.4k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  51.4k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  51.4k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  51.4k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  35.3k|        {
  662|  35.3k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  4.22k|    {
 1582|  4.22k|        return m_view;
 1583|  4.22k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.52k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  2.87k|    {
 2421|  2.87k|        return m_multibyte_left;
 2422|  2.87k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   304k|    {
 2426|   304k|        return *m_current;
 2427|   304k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   259k|    {
 2435|   259k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   259k|        _increment_current();
 2437|   259k|        return *this;
 2438|   259k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   259k|    {
 2668|   259k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 144k, False: 115k]
  ------------------
 2669|   144k|            auto cplen = _get_cp_length_at_current();
 2670|   144k|            m_multibyte_left = cplen - 1;
 2671|   144k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   144k|        }
 2673|   115k|        else {
 2674|   115k|            --m_multibyte_left;
 2675|   115k|        }
 2676|       |
 2677|   259k|        ++m_current;
 2678|   259k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   144k|    {
 2639|   144k|        return static_cast<difference_type>(
 2640|   144k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   144k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   144k|    {
 2645|   144k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 143k]
  |  |  ------------------
  ------------------
 2646|  1.00k|            return 0;
 2647|  1.00k|        }
 2648|       |
 2649|   143k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 110k, False: 32.4k]
  ------------------
 2650|   110k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   110k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   110k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   110k|        }
 2654|       |
 2655|  32.4k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  32.4k|                                           cplen);
 2657|  32.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 382, False: 32.0k]
  |  |  ------------------
  ------------------
 2658|    382|            return 0;
 2659|    382|        }
 2660|       |
 2661|  32.0k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  32.0k|        return static_cast<difference_type>(
 2663|  32.0k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  32.4k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  34.6k|{
 1857|  34.6k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  34.6k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  34.6k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  34.6k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 490, False: 34.1k]
  ------------------
 1862|    490|            return unexpected(eof_error::eof);
 1863|    490|        }
 1864|       |
 1865|  34.1k|        return ranges::next(range.begin(), count);
 1866|  34.6k|    }
 1867|  34.6k|    else {
 1868|  34.6k|        auto it = range.begin();
 1869|  34.6k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  34.6k|            return ranges::next(it, count);
 1871|  34.6k|        }
 1872|       |
 1873|  34.6k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  34.6k|            if (it == range.end()) {
 1875|  34.6k|                return unexpected(eof_error::eof);
 1876|  34.6k|            }
 1877|  34.6k|        }
 1878|       |
 1879|  34.6k|        return it;
 1880|  34.6k|    }
 1881|  34.6k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   143k|    {
 2531|   143k|        return !(a == b);
 2532|   143k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   148k|    {
 2523|   148k|        return a.m_current == b.m_current;
 2524|   148k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  8.69k|    {
 2430|  8.69k|        return *m_current;
 2431|  8.69k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.42k|    {
  268|  1.42k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.42k|    {
  161|  1.42k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.42k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.42k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.42k|        else {
  169|  1.42k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.42k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.42k|        }
  173|  1.42k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|  88.4k|    {
 1890|  88.4k|        return !codepoint.empty();
 1891|  88.4k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.96k|{
 1683|  1.96k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.96k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.96k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.96k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.96k|    }
 1688|  1.96k|    else {
 1689|  1.96k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.96k|    }
 1691|  1.96k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.96k|    {
 1537|  1.96k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.96k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.96k|    {
 1621|  1.96k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.96k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.96k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.96k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.96k|            m_storage.reset();
 1627|  1.96k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.96k|        }
 1629|  1.96k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.96k|                                          std::basic_string<CharT>>) {
 1631|  1.96k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.96k|            m_view = string_view_type{*m_storage};
 1633|  1.96k|        }
 1634|  1.96k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.96k|                                          typename detail::basic_scan_buffer<
 1636|  1.96k|                                              value_t>::forward_iterator> &&
 1637|  1.96k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.96k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.96k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.96k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.96k|                             detail::to_address(end_seg.end()))) {
 1642|  1.96k|                auto& str = m_storage.emplace();
 1643|  1.96k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.96k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.96k|                m_view = string_view_type{str};
 1646|  1.96k|                return;
 1647|  1.96k|            }
 1648|       |
 1649|  1.96k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.96k|                                                            end_seg.data());
 1651|  1.96k|            m_storage.reset();
 1652|  1.96k|        }
 1653|  1.96k|        else {
 1654|  1.96k|            auto& str = m_storage.emplace();
 1655|  1.96k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.96k|                str.reserve(range.size());
 1657|  1.96k|            }
 1658|  1.96k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.96k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.96k|                          std::back_inserter(str));
 1661|  1.96k|            }
 1662|  1.96k|            else {
 1663|  1.96k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.96k|                     ++it) {
 1665|  1.96k|                    str.push_back(*it);
 1666|  1.96k|                }
 1667|  1.96k|            }
 1668|  1.96k|            m_view = string_view_type{str};
 1669|  1.96k|        }
 1670|  1.96k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  24.7k|    {
 2382|  24.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   268k|    {
 2413|   268k|        return m_current;
 2414|   268k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  11.3k|    {
 2832|  11.3k|        return take_width_view{r, n};
 2833|  11.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  11.3k|    {
 2801|  11.3k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  11.3k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    332|    {
 5663|    332|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 300, False: 32]
  ------------------
 5664|    332|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    300|            return read_default(range, value, loc);
 5666|    300|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    332|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    300|    {
 5645|    300|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    300|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    300|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    300|            return code_unit_reader<char>{}.read(range, value);
 5648|    300|        }
 5649|    300|        else {
 5650|    300|            SCN_UNUSED(range);
 5651|    300|            SCN_EXPECT(false);
 5652|    300|            SCN_UNREACHABLE;
 5653|    300|        }
 5654|    300|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    300|    {
 5564|    300|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    300|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    300|        ch = *range.begin();
 5566|    300|        return it;
 5567|    300|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.24k|{
 1846|  2.24k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.24k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.24k|    return ranges::next(range.begin());
 1851|  2.24k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.24k|{
  950|  2.24k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.24k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.24k|    return eof_error::good;
  954|  2.24k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.24k|{
  944|  2.24k|    return is_range_eof(r.begin(), r.end());
  945|  2.24k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  90.7k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  90.7k|    {
  937|  90.7k|        return begin == end;
  938|  90.7k|    }
  939|  90.7k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   260k|        {
 2770|   260k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 2.87k, False: 257k]
  |  Branch (2770:39): [True: 902, False: 1.97k]
  ------------------
 2771|   260k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.26k, False: 258k]
  ------------------
 2772|   260k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   184k|    {
 2816|   184k|        return sentinel<true>{m_base.get().end()};
 2817|   184k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   233k|    {
 2717|   233k|        return view;
 2718|   233k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   184k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.28k|    {
  296|  2.28k|        ++x;
  297|  2.28k|        return x;
  298|  2.28k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  24.7k|    {
 2810|  24.7k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  24.7k|                                      m_count};
 2812|  24.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    974|{
 3326|    974|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    974|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    974|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    974|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 974]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    974|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    974|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    974|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    974|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    974|        parse_integer_base_prefix(
 3331|    974|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    974|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 974]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    974|    else {
 3343|    974|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 974]
  |  Branch (3343:13): [True: 974, False: 0]
  ------------------
 3344|    974|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 974, False: 0]
  ------------------
 3345|    974|            digits_begin_it = base_prefix_begin_it;
 3346|    974|        }
 3347|    974|    }
 3348|       |
 3349|    974|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 974, False: 0]
  ------------------
 3350|    974|        sign = sign_type::plus_sign;
 3351|    974|    }
 3352|    974|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    974|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    974|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.29k|{
 3141|  1.29k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.29k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.29k, False: 0]
  ------------------
 3143|  1.29k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.29k, False: 0]
  ------------------
 3144|  1.29k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.29k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.29k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.29k|{
 2272|  1.29k|    auto it = read_code_unit(range);
 2273|  1.29k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.59k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.59k, False: 1.29k]
  ------------------
 2278|  2.59k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.59k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.59k|    }
 2282|       |
 2283|  1.29k|    return unexpected(parse_error::error);
 2284|  1.29k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    974|{
 3293|    974|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 960]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 960]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    312|        case 16:
  ------------------
  |  Branch (3307:9): [True: 312, False: 662]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    312|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    312|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 954]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    614|        default:
  ------------------
  |  Branch (3316:9): [True: 614, False: 360]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    614|            return {range.begin(), base, false};
 3319|    974|    }
 3320|    974|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    340|{
 2291|    340|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 340, False: 0]
  ------------------
 2292|    340|        return range.begin();
 2293|    340|    }
 2294|      0|    return *result;
 2295|    340|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.35k|{
 2231|  1.35k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.35k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.35k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.35k|        if (range.size() < str.size()) {
 2236|  1.35k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.35k|        }
 2238|  1.35k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.35k|            return unexpected(parse_error::error);
 2240|  1.35k|        }
 2241|  1.35k|        return ranges::next(range.begin(), str.size());
 2242|  1.35k|    }
 2243|  1.35k|    else {
 2244|  1.35k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.35k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.35k|                return ch;
 2247|  1.35k|            }
 2248|  1.35k|            return static_cast<char_type>(ch +
 2249|  1.35k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.35k|        };
 2251|       |
 2252|  1.35k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|  1.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.15k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.15k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.15k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.15k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.15k|                    return ascii_tolower(a) ==
 2259|  1.15k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.15k|                }))) {
 2261|  1.15k|            return unexpected(parse_error::error);
 2262|  1.15k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.15k|    }
 2266|  1.35k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  2.71k|{
 1857|  2.71k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  2.71k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  2.71k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  2.71k|        if (sz < count) {
 1862|  2.71k|            return unexpected(eof_error::eof);
 1863|  2.71k|        }
 1864|       |
 1865|  2.71k|        return ranges::next(range.begin(), count);
 1866|  2.71k|    }
 1867|  2.71k|    else {
 1868|  2.71k|        auto it = range.begin();
 1869|  2.71k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 2.71k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  9.52k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.03k, False: 2.48k]
  ------------------
 1874|  7.03k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 228, False: 6.80k]
  ------------------
 1875|    228|                return unexpected(eof_error::eof);
 1876|    228|            }
 1877|  7.03k|        }
 1878|       |
 1879|  2.48k|        return it;
 1880|  2.71k|    }
 1881|  2.71k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  2.71k|{
 1095|  2.71k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  2.71k|        return r.size();
 1097|  2.71k|    }
 1098|  2.71k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  2.71k|                           ranges::const_iterator_t<Range>,
 1100|  2.71k|                           typename detail::basic_scan_buffer<
 1101|  2.71k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  2.71k|        if constexpr (ranges::common_range<Range>) {
 1103|  2.71k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  2.71k|        }
 1105|  2.71k|        else {
 1106|  2.71k|            if (r.begin().stores_parent()) {
 1107|  2.71k|                return static_cast<size_t>(
 1108|  2.71k|                    r.begin().parent()->chars_available() -
 1109|  2.71k|                    r.begin().position());
 1110|  2.71k|            }
 1111|  2.71k|            return r.begin().contiguous_segment().size();
 1112|  2.71k|        }
 1113|  2.71k|    }
 1114|  2.71k|    else {
 1115|  2.71k|        return 0;
 1116|  2.71k|    }
 1117|  2.71k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.15k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.15k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 1.10k]
  |  Branch (2245:29): [True: 1.10k, False: 0]
  ------------------
 2246|  1.15k|                return ch;
 2247|  1.15k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.15k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  88.5k|{
  944|  88.5k|    return is_range_eof(r.begin(), r.end());
  945|  88.5k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    332|{
 3251|    332|    return read_matching_string_classic_nocase(range, "0x");
 3252|    332|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    958|{
 3360|    958|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    958|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    958|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    958|            return unexpected_scan_error(
 3365|    958|                scan_error::invalid_scanned_value,
 3366|    958|                "Failed to parse integer: No digits found");
 3367|    958|        }
 3368|    958|        return range.end();
 3369|    958|    }
 3370|    958|    else {
 3371|    958|        return read_while1_code_unit(range,
 3372|    958|                                     [&](char_type ch) noexcept {
 3373|    958|                                         return char_to_int(ch) < base;
 3374|    958|                                     })
 3375|    958|            .transform_error(map_parse_error_to_scan_error(
 3376|    958|                scan_error::invalid_scanned_value,
 3377|    958|                "Failed to parse integer: No digits found"));
 3378|    958|    }
 3379|    958|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.28k|{
 1996|  1.28k|    auto it = read_while_code_unit(range, pred);
 1997|  1.28k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.28k, False: 0]
  ------------------
 1998|  1.28k|        return unexpected(parse_error::error);
 1999|  1.28k|    }
 2000|      0|    return it;
 2001|  1.28k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.28k|{
 1976|  1.28k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.28k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.28k|{
 1957|  1.28k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.28k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.28k|    }
 1960|  1.28k|    else {
 1961|  1.28k|        auto first = range.begin();
 1962|  1.28k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.28k, False: 0]
  ------------------
 1963|  1.28k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.28k, False: 0]
  ------------------
 1964|  1.28k|                return first;
 1965|  1.28k|            }
 1966|  1.28k|        }
 1967|      0|        return first;
 1968|  1.28k|    }
 1969|  1.28k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   146k|        {
 2781|   146k|            return !(y == x);
 2782|   146k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    958|    {
  754|    958|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    958|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    958|              cvref<T> obj = *get<T>(fn);
  745|    958|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    958|                  obj(static_cast<decltype(args)>(args)...);
  747|    958|              }
  748|    958|              else {
  749|    958|                  return obj(static_cast<decltype(args)>(args)...);
  750|    958|              }
  751|    958|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    958|    {
  684|    958|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    958|            return static_cast<T*>(s.m_cp);
  686|    958|        }
  687|    958|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    958|            return static_cast<T*>(s.m_p);
  689|    958|        }
  690|    958|        else {
  691|    958|            return reinterpret_cast<T*>(s.m_fp);
  692|    958|        }
  693|    958|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    958|                                     [&](char_type ch) noexcept {
 3373|    958|                                         return char_to_int(ch) < base;
 3374|    958|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    958|        {
  662|    958|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   262k|    {
 2417|   262k|        return m_count;
 2418|   262k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    234|    {
 5663|    234|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 214, False: 20]
  ------------------
 5664|    234|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 20]
  ------------------
 5665|    214|            return read_default(range, value, loc);
 5666|    214|        }
 5667|       |
 5668|     20|        reader_impl_for_int<CharT> reader{};
 5669|     20|        signed char tmp_value{};
 5670|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     20|        value = static_cast<signed char>(value);
 5672|     20|        return ret;
 5673|    234|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    898|    {
 5645|    898|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    898|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    898|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    898|            return code_unit_reader<char>{}.read(range, value);
 5648|    898|        }
 5649|    898|        else {
 5650|    898|            SCN_UNUSED(range);
 5651|    898|            SCN_EXPECT(false);
 5652|    898|            SCN_UNREACHABLE;
 5653|    898|        }
 5654|    898|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    898|    {
 5564|    898|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    898|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    898|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    898|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 898]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    898|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    898|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    898|        ch = *range.begin();
 5566|    898|        return it;
 5567|    898|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.56k|{
 1846|  6.56k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.56k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.56k|    return ranges::next(range.begin());
 1851|  6.56k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  22.6k|{
  950|  22.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.6k|    return eof_error::good;
  954|  22.6k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   517k|{
  944|   517k|    return is_range_eof(r.begin(), r.end());
  945|   517k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   573k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   573k|    {
  937|   573k|        return begin == end;
  938|   573k|    }
  939|   573k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  49.7k|    {
  296|  49.7k|        ++x;
  297|  49.7k|        return x;
  298|  49.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     20|    {
 3539|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     20|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 20]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 20]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3565|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     20|                    parse_integer_digits_without_thsep(
 3567|     20|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     20|                        prefix_result.parsed_base));
 3569|       |
 3570|     20|            auto buf = make_contiguous_buffer(
 3571|     20|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     20|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     20|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.79k|{
 3326|  2.79k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.79k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.79k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.79k|        parse_integer_base_prefix(
 3331|  2.79k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.79k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.79k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.79k|    else {
 3343|  2.79k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.79k]
  ------------------
 3344|  2.79k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.79k, False: 0]
  ------------------
 3345|  2.79k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.79k|        }
 3347|  2.79k|    }
 3348|       |
 3349|  2.79k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.79k, False: 0]
  ------------------
 3350|  2.79k|        sign = sign_type::plus_sign;
 3351|  2.79k|    }
 3352|  2.79k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.79k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.79k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.74k|{
 3141|  3.74k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.74k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.74k, False: 0]
  ------------------
 3143|  3.74k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.74k, False: 0]
  ------------------
 3144|  3.74k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.74k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.74k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.74k|{
 2272|  3.74k|    auto it = read_code_unit(range);
 2273|  3.74k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.74k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.49k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.49k, False: 3.74k]
  ------------------
 2278|  7.49k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.49k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.49k|    }
 2282|       |
 2283|  3.74k|    return unexpected(parse_error::error);
 2284|  3.74k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.79k|{
 3293|  2.79k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.78k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     38|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 38, False: 2.75k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     38|            bool zero_parsed = false;
 3302|     38|            auto it = apply_opt(
 3303|     38|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     38|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    908|        case 16:
  ------------------
  |  Branch (3307:9): [True: 908, False: 1.88k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    908|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    908|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.77k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.82k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.82k, False: 964]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.82k|            return {range.begin(), base, false};
 3319|  2.79k|    }
 3320|  2.79k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    952|{
 2291|    952|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 952, False: 0]
  ------------------
 2292|    952|        return range.begin();
 2293|    952|    }
 2294|      0|    return *result;
 2295|    952|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.83k|{
 2231|  3.83k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.83k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.83k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.83k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.82k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.82k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.82k, False: 0]
  ------------------
 2239|  3.82k|            return unexpected(parse_error::error);
 2240|  3.82k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.82k|    }
 2243|  3.83k|    else {
 2244|  3.83k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.83k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.83k|                return ch;
 2247|  3.83k|            }
 2248|  3.83k|            return static_cast<char_type>(ch +
 2249|  3.83k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.83k|        };
 2251|       |
 2252|  3.83k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.83k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.83k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.83k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.83k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.83k|                    return ascii_tolower(a) ==
 2259|  3.83k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.83k|                }))) {
 2261|  3.83k|            return unexpected(parse_error::error);
 2262|  3.83k|        }
 2263|       |
 2264|  3.83k|        return it;
 2265|  3.83k|    }
 2266|  3.83k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     50|{
 3258|     50|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 50]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     50|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 50]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     50|    return unexpected(parse_error::error);
 3268|     50|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.92k|{
 2146|  1.92k|    auto it = read_code_unit(range);
 2147|  1.92k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.92k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.92k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.92k|        return unexpected(parse_error::error);
 2154|  1.92k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.92k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    920|{
 3251|    920|    return read_matching_string_classic_nocase(range, "0x");
 3252|    920|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.75k|{
 3360|  2.75k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.75k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.75k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.75k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.75k|        return range.end();
 3369|  2.75k|    }
 3370|  2.75k|    else {
 3371|  2.75k|        return read_while1_code_unit(range,
 3372|  2.75k|                                     [&](char_type ch) noexcept {
 3373|  2.75k|                                         return char_to_int(ch) < base;
 3374|  2.75k|                                     })
 3375|  2.75k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.75k|                scan_error::invalid_scanned_value,
 3377|  2.75k|                "Failed to parse integer: No digits found"));
 3378|  2.75k|    }
 3379|  2.75k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     32|{
 3390|     32|    std::basic_string<CharT> output;
 3391|     32|    std::string thsep_indices;
 3392|     32|    auto it = range.begin();
 3393|     32|    bool digit_matched = false;
 3394|     32|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 32, False: 0]
  ------------------
 3395|     32|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 32]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     32|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 32, False: 0]
  ------------------
 3400|     32|            break;
 3401|     32|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     32|    }
 3407|     32|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3408|     32|        return unexpected_scan_error(
 3409|     32|            scan_error::invalid_scanned_value,
 3410|     32|            "Failed to parse integer: No digits found");
 3411|     32|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     32|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  14.6k|{
 1683|  14.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  14.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  14.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  14.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  14.6k|    }
 1688|  14.6k|    else {
 1689|  14.6k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  14.6k|    }
 1691|  14.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  14.6k|    {
 1490|  14.6k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  67.1k|    {
 1503|  67.1k|        return sv;
 1504|  67.1k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  2.85k|{
 5951|  2.85k|    using char_type = detail::char_t<Range>;
 5952|  2.85k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  2.85k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 2.61k, False: 240]
  ------------------
 5955|  2.61k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  2.61k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  2.61k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 2.47k, False: 132]
  ------------------
 5959|  2.47k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  2.47k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 136, False: 2.34k]
  ------------------
 5962|    136|                auto prefix_width =
 5963|    136|                    static_cast<std::ptrdiff_t>(
 5964|    136|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    136|                    ranges::distance(range.begin(), it);
 5966|    136|                return result_type{it, prefix_width};
 5967|    136|            }
 5968|  2.34k|            return result_type{it, 0};
 5969|  2.47k|        }
 5970|       |
 5971|    132|        auto max_width_view = take_width(range, max_width);
 5972|    132|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 132, False: 0]
  ------------------
 5975|    132|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    132|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    132|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 108]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    108|    auto max_width_view = take_width(range, max_width);
 5994|    108|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    108|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 108, False: 0]
  ------------------
 5997|    108|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    108|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    108|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  2.69k|{
 1976|  2.69k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.69k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.93k|{
 1957|  2.93k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.93k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.93k|    }
 1960|  2.93k|    else {
 1961|  2.93k|        auto first = range.begin();
 1962|  2.93k|        for (; first != range.end(); ++first) {
 1963|  2.93k|            if (pred(*first)) {
 1964|  2.93k|                return first;
 1965|  2.93k|            }
 1966|  2.93k|        }
 1967|  2.93k|        return first;
 1968|  2.93k|    }
 1969|  2.93k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.61k|    {
  754|  2.61k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.03k|              cvref<T> obj = *get<T>(fn);
  745|  3.03k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.03k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.03k|              }
  748|  3.03k|              else {
  749|  3.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.03k|              }
  751|  3.03k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  3.03k|    {
  684|  3.03k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.03k|            return static_cast<T*>(s.m_cp);
  686|  3.03k|        }
  687|  3.03k|        else if constexpr (std::is_object_v<T>) {
  688|  3.03k|            return static_cast<T*>(s.m_p);
  689|  3.03k|        }
  690|  3.03k|        else {
  691|  3.03k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.03k|        }
  693|  3.03k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  3.03k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.61k|        {
  667|  2.61k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    306|{
 1976|    306|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    306|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    672|{
 1957|    672|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    672|        return std::find_if(range.begin(), range.end(), pred);
 1959|    672|    }
 1960|    672|    else {
 1961|    672|        auto first = range.begin();
 1962|  13.3k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 12.9k, False: 376]
  ------------------
 1963|  12.9k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 296, False: 12.7k]
  ------------------
 1964|    296|                return first;
 1965|    296|            }
 1966|  12.9k|        }
 1967|    376|        return first;
 1968|    672|    }
 1969|    672|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    108|{
 2037|    108|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    108|    auto it = range.begin();
 2040|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 126, False: 30]
  ------------------
 2041|    126|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    126|                                           needle.size());
 2043|    126|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 96]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|     96|        static_assert(
 2047|     96|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     96|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 48]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    534|{
 2951|    534|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 534]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    534|    return read_while_classic_space(range);
 2962|    534|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    534|{
 2117|    534|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    534|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    534|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    534|        auto buf = make_contiguous_buffer(range);
 2121|    534|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    534|        return ranges::next(range.begin(),
 2123|    534|                            ranges::distance(buf.view().begin(), it));
 2124|    534|    }
 2125|    534|    else {
 2126|    534|        auto it = range.begin();
 2127|       |
 2128|    534|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    534|            auto seg = get_contiguous_beginning(range);
 2130|    534|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    534|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 534]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    534|            ranges::advance(it, seg.size());
 2135|    534|        }
 2136|       |
 2137|    534|        return read_while_code_point(
 2138|    534|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    534|    }
 2140|    534|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.42k|{
 1039|  1.42k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.42k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.42k|        return r;
 1042|  1.42k|    }
 1043|  1.42k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.42k|                           ranges::const_iterator_t<Range>,
 1045|  1.42k|                           typename detail::basic_scan_buffer<
 1046|  1.42k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.42k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.42k|            auto seg = r.begin().contiguous_segment();
 1049|  1.42k|            auto dist =
 1050|  1.42k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.42k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.42k|        }
 1053|  1.42k|        else {
 1054|  1.42k|            return r.begin().contiguous_segment();
 1055|  1.42k|        }
 1056|  1.42k|    }
 1057|  1.42k|    else {
 1058|  1.42k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.42k|    }
 1060|  1.42k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    942|{
 2082|    942|    return read_until_code_point(range, std::not_fn(pred));
 2083|    942|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  1.06k|{
 2061|  1.06k|    auto it = range.begin();
 2062|  72.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 72.0k, False: 306]
  ------------------
 2063|  72.0k|        const auto val =
 2064|  72.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  72.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  72.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 69.7k, False: 2.34k]
  |  |  ------------------
  ------------------
 2066|  69.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  69.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  69.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 762, False: 68.9k]
  ------------------
 2069|    762|                return it;
 2070|    762|            }
 2071|  69.7k|        }
 2072|  71.3k|        it = val.iterator;
 2073|  71.3k|    }
 2074|       |
 2075|    306|    return it;
 2076|  1.06k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  88.4k|{
 1899|  88.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  88.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  88.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  88.4k|    auto it = range.begin();
 1903|  88.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  88.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.56k, False: 82.9k]
  |  |  ------------------
  ------------------
 1906|  5.56k|        ++it;
 1907|  5.56k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  5.56k|        return {it, {}};
 1909|  5.56k|    }
 1910|       |
 1911|  82.9k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 74.8k, False: 8.10k]
  ------------------
 1912|  74.8k|        ++it;
 1913|  74.8k|        return {it, string_type(1, *range.begin())};
 1914|  74.8k|    }
 1915|       |
 1916|  8.10k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  8.10k|    return {it, string_type{range.begin(), it}};
 1918|  82.9k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  5.56k|{
 1155|  5.56k|    auto it = input.begin();
 1156|  11.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 11.6k, False: 168]
  ------------------
 1157|  11.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 5.39k, False: 6.26k]
  ------------------
 1158|  5.39k|            break;
 1159|  5.39k|        }
 1160|  11.6k|    }
 1161|  5.56k|    return it;
 1162|  5.56k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  8.10k|    {
  283|  8.10k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  8.10k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  8.10k|    {
  227|  8.10k|        constexpr iter_difference_t<I> zero{0};
  228|  8.10k|        iter_difference_t<I> counter{0};
  229|       |
  230|  8.10k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 8.10k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  8.10k|        else {
  237|  25.6k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 17.6k, False: 8.01k]
  |  Branch (237:34): [True: 17.5k, False: 90]
  ------------------
  238|  17.5k|                ++i;
  239|  17.5k|                ++counter;
  240|  17.5k|            }
  241|  8.10k|        }
  242|       |
  243|  8.10k|        return counter;
  244|  8.10k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    534|    {
  754|    534|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  2.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.64k|              cvref<T> obj = *get<T>(fn);
  745|  2.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.64k|              }
  748|  2.64k|              else {
  749|  2.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.64k|              }
  751|  2.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  2.64k|    {
  684|  2.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.64k|            return static_cast<T*>(s.m_cp);
  686|  2.64k|        }
  687|  2.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.64k|            return static_cast<T*>(s.m_p);
  689|  2.64k|        }
  690|  2.64k|        else {
  691|  2.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.64k|        }
  693|  2.64k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  2.64k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    534|        {
  662|    534|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.35k|{
 2951|  7.35k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.14k, False: 218]
  ------------------
 2952|  7.14k|        auto it = read_while_classic_space(range);
 2953|  7.14k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.14k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.14k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.14k|        return it;
 2959|  7.14k|    }
 2960|       |
 2961|    218|    return read_while_classic_space(range);
 2962|  7.35k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  14.4k|{
 2117|  14.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  14.4k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  14.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  14.4k|        auto buf = make_contiguous_buffer(range);
 2121|  14.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  14.4k|        return ranges::next(range.begin(),
 2123|  14.4k|                            ranges::distance(buf.view().begin(), it));
 2124|  14.4k|    }
 2125|  14.4k|    else {
 2126|  14.4k|        auto it = range.begin();
 2127|       |
 2128|  14.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  14.4k|            auto seg = get_contiguous_beginning(range);
 2130|  14.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  14.4k|                seg_it != seg.end()) {
 2132|  14.4k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  14.4k|            }
 2134|  14.4k|            ranges::advance(it, seg.size());
 2135|  14.4k|        }
 2136|       |
 2137|  14.4k|        return read_while_code_point(
 2138|  14.4k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  14.4k|    }
 2140|  14.4k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  17.3k|{
 1683|  17.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  17.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  17.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  17.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  17.3k|    }
 1688|  17.3k|    else {
 1689|  17.3k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  17.3k|    }
 1691|  17.3k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  17.3k|    {
 1490|  17.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  14.6k|    {
 3040|  14.6k|        reader_error_handler eh{};
 3041|  14.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  14.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 1.19k]
  |  |  ------------------
  ------------------
 3043|  13.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  13.4k|        }
 3045|  1.19k|        return {};
 3046|  14.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  14.6k|    {
 3051|  14.6k|        return static_cast<Derived&>(*this);
 3052|  14.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  14.6k|    {
 3485|  14.6k|        detail::check_int_type_specs(specs, eh);
 3486|  14.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.56k|    {
 3035|  2.56k|        return true;
 3036|  2.56k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    324|    {
 3539|    324|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    324|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    324|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 324]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    324|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 324]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    324|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    324|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 316, False: 8]
  |  |  ------------------
  ------------------
 3565|    316|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    316|    }                                                  \
  |  |  |  | 3671|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    250|    {
 3539|    250|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    250|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    250|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 250]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    250|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 250]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    250|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    250|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 234, False: 16]
  |  |  ------------------
  ------------------
 3565|    234|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    234|                    parse_integer_digits_without_thsep(
 3567|    234|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    234|                        prefix_result.parsed_base));
 3569|       |
 3570|    234|            auto buf = make_contiguous_buffer(
 3571|    234|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    234|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    234|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    324|    {
 3539|    324|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    324|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    324|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 324]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    324|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 324]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    324|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    324|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 316, False: 8]
  |  |  ------------------
  ------------------
 3565|    316|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    316|    }                                                  \
  |  |  |  | 3671|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    250|    {
 3539|    250|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    250|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    250|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 250]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    250|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 250]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    250|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    250|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 234, False: 16]
  |  |  ------------------
  ------------------
 3565|    234|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    234|                    parse_integer_digits_without_thsep(
 3567|    234|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    234|                        prefix_result.parsed_base));
 3569|       |
 3570|    234|            auto buf = make_contiguous_buffer(
 3571|    234|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    234|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    234|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    294|    {
 3539|    294|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    294|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    294|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 294]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    294|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 294]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    294|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    294|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 294, False: 0]
  |  |  ------------------
  ------------------
 3565|    294|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    902|    {
 3539|    902|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    902|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    902|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    902|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 902]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    902|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 902]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    902|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    902|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 902, False: 0]
  |  |  ------------------
  ------------------
 3565|    902|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    902|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    902|                    parse_integer_digits_without_thsep(
 3567|    902|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    902|                        prefix_result.parsed_base));
 3569|       |
 3570|    902|            auto buf = make_contiguous_buffer(
 3571|    902|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    902|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    902|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 902, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    902|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    902|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    902|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    902|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    902|    }                                                  \
  |  |  |  | 3671|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    902|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.31k|    {
 3040|  7.31k|        reader_error_handler eh{};
 3041|  7.31k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 618]
  |  |  ------------------
  ------------------
 3043|  6.69k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.69k|        }
 3045|    618|        return {};
 3046|  7.31k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  7.31k|    {
 3051|  7.31k|        return static_cast<Derived&>(*this);
 3052|  7.31k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  7.31k|    {
 4145|  7.31k|        detail::check_float_type_specs(specs, eh);
 4146|  7.31k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.30k|    {
 3035|  1.30k|        return true;
 3036|  1.30k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    594|    {
 4217|    594|        unsigned options{};
 4218|    594|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 34, False: 560]
  ------------------
 4219|     34|            options |= float_reader_base::allow_thsep;
 4220|     34|        }
 4221|       |
 4222|    594|        SCN_GCC_COMPAT_PUSH
 4223|    594|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    594|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 564]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 588]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     32|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 32, False: 562]
  ------------------
 4233|     32|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 588]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    520|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 520, False: 74]
  ------------------
 4240|    520|                return options | float_reader_base::allow_scientific |
 4241|    520|                       float_reader_base::allow_fixed |
 4242|    520|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 594]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    594|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    594|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    594|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    594|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.27k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.55k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    930|    {
 4057|    930|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 930, False: 0]
  ------------------
 4058|    930|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 930, False: 0]
  ------------------
 4059|    930|            return;
 4060|    930|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    796|    {
 1587|    796|        return m_storage.has_value();
 1588|    796|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    398|    {
 1592|    398|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    398|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    398|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    398|        return *m_storage;
 1594|    398|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    322|    {
  763|    322|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    322|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    322|    {
 3705|    322|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    322|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    322|        auto it = sign_result.first;
 3708|    322|        m_sign = sign_result.second;
 3709|       |
 3710|    322|        auto digits_begin = it;
 3711|    322|        auto r = ranges::subrange{it, range.end()};
 3712|    322|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    322|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    322|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    322|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    322|                SCN_TRY_ASSIGN(
 3717|    322|                    it,
 3718|    322|                    do_read_source_impl(
 3719|    322|                        r,
 3720|    322|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    322|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    322|            }
 3723|    322|            else {
 3724|    322|                auto cb = [&](const auto& rr)
 3725|    322|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    322|                    auto res = read_all(rr);
 3727|    322|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    322|                        return unexpected_scan_error(
 3729|    322|                            scan_error::invalid_scanned_value,
 3730|    322|                            "Invalid float value");
 3731|    322|                    }
 3732|    322|                    return res;
 3733|    322|                };
 3734|    322|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    322|            }
 3736|    322|        }
 3737|    322|        else {
 3738|    322|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 322, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    322|    }                                                  \
  |  | 3671|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    322|    {
 4000|    322|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    322|        const bool allowed_nonhex =
 4002|    322|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    322|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    322|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 322, False: 0]
  |  Branch (4005:45): [True: 0, False: 322]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    322|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 322]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    322|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 322, False: 0]
  |  Branch (4014:45): [True: 0, False: 322]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    322|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 322]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    322|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 306, False: 16]
  |  Branch (4021:28): [True: 6, False: 300]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    316|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 300]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    300|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 300]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    300|        m_kind = float_kind::generic;
 4052|    300|        return read_regular(range);
 4053|    300|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    322|    {
 3811|    322|        auto it = range.begin();
 3812|    322|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 322, False: 0]
  ------------------
 3813|    322|            return unexpected(r.error());
 3814|    322|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    322|    {
 3834|    322|        auto it = range.begin();
 3835|    322|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 322, False: 0]
  ------------------
 3836|    322|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    322|                scan_error::invalid_scanned_value,
 3838|    322|                "Invalid floating-point NaN value"));
 3839|    322|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    306|    {
 3804|    306|        return read_matching_string_classic_nocase(range, "0x");
 3805|    306|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    316|    {
 3944|    316|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    316|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 304, False: 12]
  |  Branch (3945:50): [True: 0, False: 304]
  ------------------
 3946|       |
 3947|    316|        auto it = ranges::begin(range);
 3948|    316|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    316|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    316|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  ------------------
  ------------------
 3952|    316|            return r.transform_error(
 3953|    316|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    316|                                              "Invalid floating-point value"));
 3955|    316|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    316|    {
 3774|    316|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  |  Branch (859:45): [True: 0, False: 316]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    316|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    316|        return read_while1_code_unit(
 3783|    316|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    316|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    316|    {
  754|    316|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    316|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    316|              cvref<T> obj = *get<T>(fn);
  745|    316|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    316|                  obj(static_cast<decltype(args)>(args)...);
  747|    316|              }
  748|    316|              else {
  749|    316|                  return obj(static_cast<decltype(args)>(args)...);
  750|    316|              }
  751|    316|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    316|    {
  684|    316|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    316|            return static_cast<T*>(s.m_cp);
  686|    316|        }
  687|    316|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    316|            return static_cast<T*>(s.m_p);
  689|    316|        }
  690|    316|        else {
  691|    316|            return reinterpret_cast<T*>(s.m_fp);
  692|    316|        }
  693|    316|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    316|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    316|        {
  662|    316|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    314|    {
 3665|    314|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    314|        return read_source_impl(range);
 3671|    314|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    956|    {
  763|    956|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    956|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    956|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     26|    {
 3679|     26|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     26|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     26|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 26]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     26|        return read_source_impl(range);
 3685|     26|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    956|    {
 3705|    956|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    956|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    956|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    956|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 956]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    956|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    956|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    956|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    956|        auto it = sign_result.first;
 3708|    956|        m_sign = sign_result.second;
 3709|       |
 3710|    956|        auto digits_begin = it;
 3711|    956|        auto r = ranges::subrange{it, range.end()};
 3712|    956|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    956|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    956|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 956]
  |  |  |  Branch (859:45): [True: 0, False: 956]
  |  |  |  Branch (859:45): [True: 0, False: 956]
  |  |  ------------------
  ------------------
 3715|    956|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    956|            else {
 3724|    956|                auto cb = [&](const auto& rr)
 3725|    956|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    956|                    auto res = read_all(rr);
 3727|    956|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    956|                        return unexpected_scan_error(
 3729|    956|                            scan_error::invalid_scanned_value,
 3730|    956|                            "Invalid float value");
 3731|    956|                    }
 3732|    956|                    return res;
 3733|    956|                };
 3734|    956|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    956|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    956|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 930]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|    956|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    956|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    930|            }
 3736|    956|        }
 3737|    930|        else {
 3738|    930|            SCN_TRY_ASSIGN(
 3739|    930|                it,
 3740|    930|                do_read_source_impl(
 3741|    930|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    930|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    930|        }
 3744|       |
 3745|    930|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    930|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 930, False: 0]
  |  Branch (3747:48): [True: 930, False: 0]
  ------------------
 3748|    930|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 930, False: 0]
  ------------------
 3749|    930|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 930, False: 0]
  ------------------
 3750|    930|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    930|        }
 3752|       |
 3753|    930|        handle_separators();
 3754|       |
 3755|    930|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 930]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    930|        return it;
 3768|    930|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    956|    {
 3811|    956|        auto it = range.begin();
 3812|    956|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 956, False: 0]
  ------------------
 3813|    956|            return unexpected(r.error());
 3814|    956|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    956|    {
 3834|    956|        auto it = range.begin();
 3835|    956|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 956, False: 0]
  ------------------
 3836|    956|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    956|                scan_error::invalid_scanned_value,
 3838|    956|                "Invalid floating-point NaN value"));
 3839|    956|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    930|    {
 3804|    930|        return read_matching_string_classic_nocase(range, "0x");
 3805|    930|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    956|    {
 4000|    956|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    956|        const bool allowed_nonhex =
 4002|    956|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    956|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    956|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 956, False: 0]
  |  Branch (4005:45): [True: 0, False: 956]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    956|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 956]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    956|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 956, False: 0]
  |  Branch (4014:45): [True: 0, False: 956]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    956|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 956]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    956|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 930, False: 26]
  |  Branch (4021:28): [True: 26, False: 904]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     26|            auto it = range.begin();
 4025|       |
 4026|     26|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 26]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     26|            else {
 4031|     26|                m_kind = float_kind::hex_without_prefix;
 4032|     26|            }
 4033|       |
 4034|     26|            return read_hex(ranges::subrange{it, range.end()});
 4035|     26|        }
 4036|    930|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 904]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    904|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 904]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    904|        m_kind = float_kind::generic;
 4052|    904|        return read_regular(range);
 4053|    904|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    930|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    930|                    auto res = read_all(rr);
 3727|    930|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    930|                    return res;
 3733|    930|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    930|{
 1839|    930|    return ranges::next(range.begin(), range.end());
 1840|    930|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    930|    {
  313|    930|        ranges::advance(x, bound);
  314|    930|        return x;
  315|    930|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    930|    {
  275|    930|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    930|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    984|    {
  190|    984|        i = std::move(bound);
  191|    984|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    930|    {
 1577|    930|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    930|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    930|    {
 1621|    930|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    930|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    930|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    930|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    930|            m_storage.reset();
 1627|    930|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    930|        }
 1629|    930|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    930|                                          std::basic_string<CharT>>) {
 1631|    930|            m_storage.emplace(SCN_FWD(range));
 1632|    930|            m_view = string_view_type{*m_storage};
 1633|    930|        }
 1634|    930|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    930|                                          typename detail::basic_scan_buffer<
 1636|    930|                                              value_t>::forward_iterator> &&
 1637|    930|                           ranges::common_range<Range>) {
 1638|    930|            auto beg_seg = range.begin().contiguous_segment();
 1639|    930|            auto end_seg = range.end().contiguous_segment();
 1640|    930|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    930|                             detail::to_address(end_seg.end()))) {
 1642|    930|                auto& str = m_storage.emplace();
 1643|    930|                str.reserve(range.end().position() - range.begin().position());
 1644|    930|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    930|                m_view = string_view_type{str};
 1646|    930|                return;
 1647|    930|            }
 1648|       |
 1649|    930|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    930|                                                            end_seg.data());
 1651|    930|            m_storage.reset();
 1652|    930|        }
 1653|    930|        else {
 1654|    930|            auto& str = m_storage.emplace();
 1655|    930|            if constexpr (ranges::sized_range<Range>) {
 1656|    930|                str.reserve(range.size());
 1657|    930|            }
 1658|    930|            if constexpr (ranges::common_range<Range>) {
 1659|    930|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    930|                          std::back_inserter(str));
 1661|    930|            }
 1662|    930|            else {
 1663|    930|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    930|                     ++it) {
 1665|    930|                    str.push_back(*it);
 1666|    930|                }
 1667|    930|            }
 1668|    930|            m_view = string_view_type{str};
 1669|    930|        }
 1670|    930|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    930|    {
 3665|    930|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    930|        return read_source_impl(range);
 3671|    930|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    930|    {
 3691|    930|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    930|        const std::ptrdiff_t sign_len =
 3694|    930|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 930]
  ------------------
 3695|       |
 3696|    930|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 930, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    930|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    930|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    322|    {
 4170|    322|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    322|#if !SCN_DISABLE_LOCALE
 4173|    322|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 314]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    314|#endif
 4182|       |
 4183|    314|        return read_impl<Range>(
 4184|    314|            range, rd,
 4185|    314|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    314|                return r.read_source(SCN_FWD(args)...);
 4187|    314|            },
 4188|    314|            value);
 4189|    322|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    322|    {
 4206|    322|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    322|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 322, False: 0]
  |  |  ------------------
  ------------------
 4208|    322|            return unexpected(r.error());
 4209|    322|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    314|    {
  754|    314|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    314|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    314|              cvref<T> obj = *get<T>(fn);
  745|    314|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    314|                  obj(static_cast<decltype(args)>(args)...);
  747|    314|              }
  748|    314|              else {
  749|    314|                  return obj(static_cast<decltype(args)>(args)...);
  750|    314|              }
  751|    314|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    314|    {
  684|    314|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    314|            return static_cast<T*>(s.m_cp);
  686|    314|        }
  687|    314|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    314|            return static_cast<T*>(s.m_p);
  689|    314|        }
  690|    314|        else {
  691|    314|            return reinterpret_cast<T*>(s.m_fp);
  692|    314|        }
  693|    314|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    314|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    314|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    314|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    314|        {
  662|    314|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    272|    {
 4170|    272|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    272|#if !SCN_DISABLE_LOCALE
 4173|    272|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 26, False: 246]
  ------------------
 4174|     26|            return read_impl<Range>(
 4175|     26|                range, rd,
 4176|     26|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     26|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     26|                },
 4179|     26|                value, loc);
 4180|     26|        }
 4181|    246|#endif
 4182|       |
 4183|    246|        return read_impl<Range>(
 4184|    246|            range, rd,
 4185|    246|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    246|                return r.read_source(SCN_FWD(args)...);
 4187|    246|            },
 4188|    246|            value);
 4189|    272|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    956|    {
 4206|    956|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    956|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 930]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|    930|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 930, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    930|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    930|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     26|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     26|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     26|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    246|    {
  754|    246|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    246|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    246|              cvref<T> obj = *get<T>(fn);
  745|    246|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    246|                  obj(static_cast<decltype(args)>(args)...);
  747|    246|              }
  748|    246|              else {
  749|    246|                  return obj(static_cast<decltype(args)>(args)...);
  750|    246|              }
  751|    246|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    246|    {
  684|    246|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    246|            return static_cast<T*>(s.m_cp);
  686|    246|        }
  687|    246|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    246|            return static_cast<T*>(s.m_p);
  689|    246|        }
  690|    246|        else {
  691|    246|            return reinterpret_cast<T*>(s.m_fp);
  692|    246|        }
  693|    246|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    246|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    246|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    246|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    246|        {
  662|    246|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  7.94k|{
 5809|  7.94k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.94k|        return reader_impl_for_bool<CharT>{};
 5811|  7.94k|    }
 5812|  7.94k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.94k|        return reader_impl_for_char<CharT>{};
 5814|  7.94k|    }
 5815|  7.94k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.94k|        return reader_impl_for_wchar<CharT>{};
 5817|  7.94k|    }
 5818|  7.94k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.94k|        return reader_impl_for_code_point<CharT>{};
 5820|  7.94k|    }
 5821|  7.94k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.94k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.94k|        return reader_impl_for_string<CharT>{};
 5824|  7.94k|    }
 5825|  7.94k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  7.94k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  7.94k|        return reader_impl_for_string<CharT>{};
 5828|  7.94k|    }
 5829|  7.94k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.94k|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.94k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.94k|    }
 5833|  7.94k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.94k|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.94k|    }
 5836|  7.94k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.94k|        return reader_impl_for_float<CharT>{};
 5838|  7.94k|    }
 5839|  7.94k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.94k|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.94k|                       !std::is_same_v<T, char32_t> &&
 5842|  7.94k|                       !std::is_same_v<T, bool>) {
 5843|  7.94k|        return reader_impl_for_int<CharT>{};
 5844|  7.94k|    }
 5845|  7.94k|    else {
 5846|  7.94k|        return reader_impl_for_monostate<CharT>{};
 5847|  7.94k|    }
 5848|  7.94k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  23.8k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  21.7k|    {
 3040|  21.7k|        reader_error_handler eh{};
 3041|  21.7k|        get_derived().check_specs_impl(specs, eh);
 3042|  21.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 21.4k]
  |  |  ------------------
  ------------------
 3043|    384|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    384|        }
 3045|  21.4k|        return {};
 3046|  21.7k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  21.7k|    {
 3051|  21.7k|        return static_cast<Derived&>(*this);
 3052|  21.7k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  21.7k|    {
 5210|  21.7k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  21.7k|        SCN_GCC_PUSH
 5213|  21.7k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  21.7k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  21.7k|        SCN_CLANG_PUSH
 5217|  21.7k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  21.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  21.7k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 378, False: 21.4k]
  ------------------
 5221|  1.55k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.55k, False: 20.2k]
  ------------------
 5222|  1.55k|                m_type = reader_type::word;
 5223|  1.55k|                break;
 5224|       |
 5225|    522|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 522, False: 21.2k]
  ------------------
 5226|    522|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 438]
  ------------------
 5227|    522|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 216, False: 222]
  ------------------
 5228|    300|                    m_type = reader_type::custom_word;
 5229|    300|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    522|                break;
 5234|      0|            }
 5235|       |
 5236|    108|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 108, False: 21.6k]
  ------------------
 5237|    108|                m_type = reader_type::character;
 5238|    108|                break;
 5239|       |
 5240|  4.27k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 4.27k, False: 17.5k]
  ------------------
 5241|  4.27k|                m_type = reader_type::character_set;
 5242|  4.27k|                break;
 5243|       |
 5244|  12.7k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 12.7k, False: 9.01k]
  ------------------
 5245|  12.7k|                m_type = reader_type::regex;
 5246|  12.7k|                break;
 5247|       |
 5248|  2.17k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 2.17k, False: 19.6k]
  ------------------
 5249|  2.17k|                m_type = reader_type::regex_escaped;
 5250|  2.17k|                break;
 5251|  21.7k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  21.7k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  28.0k|    {
 5259|  28.0k|        return m_type == reader_type::word;
 5260|  28.0k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  11.6k|{
 1132|  11.6k|    auto it = src.begin();
 1133|   802k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 793k, False: 9.15k]
  ------------------
 1134|   793k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   793k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.53k, False: 791k]
  ------------------
 1136|  1.53k|            return false;
 1137|  1.53k|        }
 1138|   791k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 264, False: 791k]
  ------------------
 1139|    264|            return false;
 1140|    264|        }
 1141|   791k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   791k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   791k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 654, False: 790k]
  ------------------
 1144|    654|            return false;
 1145|    654|        }
 1146|   790k|        it += len;
 1147|   790k|    }
 1148|  9.15k|    return true;
 1149|  11.6k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    398|{
 2993|    398|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    398|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 398, False: 0]
  ------------------
 2995|    398|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    398|    static_cast<    \
  |  |  929|    398|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    398|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    398|    }
 3001|    398|    else {
 3002|    398|        return transcode_impl(source.view(), dest);
 3003|    398|    }
 3004|       |
 3005|    398|    return {};
 3006|    398|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  4.24k|        {
 5103|  4.24k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 774, False: 3.46k]
  ------------------
 5104|    774|                return {};
 5105|    774|            }
 5106|       |
 5107|  3.46k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  3.46k|            auto it = detail::to_address(charset_string.begin());
 5109|  3.46k|            auto set = detail::parse_presentation_set(
 5110|  3.46k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  3.46k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  3.46k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.46k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  3.46k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.46k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  3.46k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  3.46k|                      nonascii.extra_ranges.end());
 5119|  3.46k|            return {};
 5120|  3.46k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   560k|        {
 5138|   560k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 66.3k, False: 494k]
  ------------------
 5139|  66.3k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  66.3k|            }
 5141|       |
 5142|   494k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   560k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  66.3k|        {
 5086|       |            // TODO: binary search?
 5087|  66.3k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 66.3k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  66.3k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  66.3k|            return std::find_if(
 5093|  66.3k|                       nonascii.extra_ranges.begin(),
 5094|  66.3k|                       nonascii.extra_ranges.end(),
 5095|  66.3k|                       [cp_val](const auto& pair) noexcept {
 5096|  66.3k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  66.3k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  66.3k|                       }) != nonascii.extra_ranges.end();
 5099|  66.3k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  15.0M|                       [cp_val](const auto& pair) noexcept {
 5096|  15.0M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 15.0M, False: 6.62k]
  ------------------
 5097|  15.0M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 65.2k, False: 14.9M]
  ------------------
 5098|  15.0M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   504k|        {
 5076|   504k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   504k|            const auto val =
 5078|   504k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   504k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   504k|                    (val % 8)) &
 5081|   504k|                   1u;
 5082|   504k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  14.3k|        {
 5129|  14.3k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.20k, False: 10.1k]
  ------------------
 5130|  4.20k|                return false;
 5131|  4.20k|            }
 5132|       |
 5133|  10.1k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  14.3k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  4.24k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.07k|    {
 5277|  1.07k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.07k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.07k|        return read_impl(range, specs, value);
 5279|  1.07k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.07k|    {
 5295|  1.07k|        SCN_CLANG_PUSH
 5296|  1.07k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.07k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 774]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 1.01k]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 1.03k]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    324|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 324, False: 748]
  ------------------
 5310|    324|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    324|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.07k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    360|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 360, False: 712]
  ------------------
 5320|    360|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    360|                    range,
 5322|    360|                    get_unescaped_regex_pattern(
 5323|    360|                        specs.charset_string<SourceCharT>()),
 5324|    360|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.07k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.07k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.07k|        }
 5331|       |
 5332|  1.07k|        SCN_CLANG_POP
 5333|  1.07k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    298|    {
 4820|    298|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    298|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    386|{
 4752|    386|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    386|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    386|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 162, False: 224]
  ------------------
 4756|    162|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    162|                                     "Invalid encoding in scanned string");
 4758|    162|    }
 4759|    224|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    224|    static_cast<    \
  |  |  929|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    224|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 224]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    224|    return SCN_MOVE(result);
  ------------------
  |  |  928|    224|    static_cast<    \
  |  |  929|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    224|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    894|{
 2088|    894|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    894|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    894|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    894|        auto buf = make_contiguous_buffer(range);
 2092|    894|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    894|        return ranges::next(range.begin(),
 2094|    894|                            ranges::distance(buf.view().begin(), it));
 2095|    894|    }
 2096|    894|    else {
 2097|    894|        auto it = range.begin();
 2098|       |
 2099|    894|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    894|            auto seg = get_contiguous_beginning(range);
 2101|    894|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    894|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 894]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    894|            ranges::advance(it, seg.size());
 2106|    894|        }
 2107|       |
 2108|    894|        return read_until_code_point(
 2109|    894|            ranges::subrange{it, range.end()},
 2110|    894|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    894|    }
 2112|    894|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    894|{
 2061|    894|    auto it = range.begin();
 2062|  17.0k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 16.3k, False: 666]
  ------------------
 2063|  16.3k|        const auto val =
 2064|  16.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  16.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  16.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.1k, False: 3.21k]
  |  |  ------------------
  ------------------
 2066|  13.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  13.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  13.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 228, False: 12.9k]
  ------------------
 2069|    228|                return it;
 2070|    228|            }
 2071|  13.1k|        }
 2072|  16.1k|        it = val.iterator;
 2073|  16.1k|    }
 2074|       |
 2075|    666|    return it;
 2076|    894|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    894|    {
  754|    894|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  13.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.1k|              cvref<T> obj = *get<T>(fn);
  745|  13.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.1k|              }
  748|  13.1k|              else {
  749|  13.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.1k|              }
  751|  13.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  13.1k|    {
  684|  13.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.1k|            return static_cast<T*>(s.m_cp);
  686|  13.1k|        }
  687|  13.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.1k|            return static_cast<T*>(s.m_p);
  689|  13.1k|        }
  690|  13.1k|        else {
  691|  13.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.1k|        }
  693|  13.1k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  13.1k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    894|        {
  662|    894|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     54|    {
 4841|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 20]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     20|        return read_string_impl(
 4851|     20|            range,
 4852|     20|            read_until_code_units(
 4853|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     20|            value);
 4855|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     60|{
 2007|     60|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     60|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     60|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     60|                           needle.end());
 2012|     60|    }
 2013|     60|    else {
 2014|     60|        auto first = range.begin();
 2015|    240|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    240|            auto it = first;
 2017|    366|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    366|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 330]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    330|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 24, False: 306]
  ------------------
 2022|     24|                    return it;
 2023|     24|                }
 2024|    306|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 180, False: 126]
  ------------------
 2025|    180|                    break;
 2026|    180|                }
 2027|    306|            }
 2028|    180|            ++first;
 2029|    180|        }
 2030|     60|    }
 2031|     60|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     34|    {
 4947|     34|        return read_impl(
 4948|     34|            range,
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
 4952|     34|            detail::priority_tag<1>{});
 4953|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    102|{
 1839|    102|    return ranges::next(range.begin(), range.end());
 1840|    102|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    102|    {
  313|    102|        ranges::advance(x, bound);
  314|    102|        return x;
  315|    102|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    102|    {
  275|    102|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    102|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    102|    {
  203|  2.38k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.28k, False: 102]
  ------------------
  204|  2.28k|            ++i;
  205|  2.28k|        }
  206|    102|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    324|    {
 5048|    324|        auto it = read_source_impl(range, {specs});
 5049|    324|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 306]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|    306|        return read_string_impl(range, *it, value);
 5054|    324|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    972|    {
 5153|    972|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    972|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    972|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    972|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 972]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    972|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    972|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 534, False: 438]
  ------------------
 5163|    534|            const auto cb = [&](char32_t cp) {
 5164|    534|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    534|            };
 5166|       |
 5167|    534|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 126, False: 408]
  ------------------
 5168|    126|                auto it = read_until_code_point(range, cb);
 5169|    126|                return check_nonempty(it, range);
 5170|    126|            }
 5171|    408|            auto it = read_while_code_point(range, cb);
 5172|    408|            return check_nonempty(it, range);
 5173|    534|        }
 5174|       |
 5175|    438|        const auto cb = [&](SourceCharT ch) {
 5176|    438|            return cb_wrapper.on_ascii_only(ch);
 5177|    438|        };
 5178|       |
 5179|    438|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 264, False: 174]
  ------------------
 5180|    264|            auto it = read_until_code_unit(range, cb);
 5181|    264|            return check_nonempty(it, range);
 5182|    264|        }
 5183|    174|        auto it = read_while_code_unit(range, cb);
 5184|    174|        return check_nonempty(it, range);
 5185|    438|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    534|    {
  754|    534|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  67.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.1k|              cvref<T> obj = *get<T>(fn);
  745|  67.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  67.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.1k|              }
  748|  67.1k|              else {
  749|  67.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.1k|              }
  751|  67.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  67.1k|    {
  684|  67.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  67.1k|            return static_cast<T*>(s.m_cp);
  686|  67.1k|        }
  687|  67.1k|        else if constexpr (std::is_object_v<T>) {
  688|  67.1k|            return static_cast<T*>(s.m_p);
  689|  67.1k|        }
  690|  67.1k|        else {
  691|  67.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  67.1k|        }
  693|  67.1k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  67.1k|            const auto cb = [&](char32_t cp) {
 5164|  67.1k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  67.1k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    534|        {
  667|    534|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    972|    {
 5191|    972|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 54, False: 918]
  ------------------
 5192|     54|            return unexpected_scan_error(
 5193|     54|                scan_error::invalid_scanned_value,
 5194|     54|                "No characters matched in [character set]");
 5195|     54|        }
 5196|       |
 5197|    918|        return it;
 5198|    972|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    438|    {
  754|    438|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|  10.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.3k|              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|  10.3k|        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|  10.3k|        }
  690|  10.3k|        else {
  691|  10.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.3k|        }
  693|  10.3k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  10.3k|        const auto cb = [&](SourceCharT ch) {
 5176|  10.3k|            return cb_wrapper.on_ascii_only(ch);
 5177|  10.3k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    438|        {
  667|    438|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    306|{
 4752|    306|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    306|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    306|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 132, False: 174]
  ------------------
 4756|    132|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    132|                                     "Invalid encoding in scanned string");
 4758|    132|    }
 4759|    174|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    174|    static_cast<    \
  |  |  929|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    174|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    174|    return SCN_MOVE(result);
  ------------------
  |  |  928|    174|    static_cast<    \
  |  |  929|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    174|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    362|    {
 4891|    362|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    362|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    362|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  1.08k|    {
 4913|  1.08k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  2.17k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  1.08k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  1.08k|            return unexpected_scan_error(
 4916|  1.08k|                scan_error::invalid_scanned_value,
 4917|  1.08k|                "Regex backend doesn't support wide strings as input");
 4918|  1.08k|        }
 4919|  1.08k|        else {
 4920|  1.08k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 1.08k, False: 0]
  ------------------
 4921|  1.08k|                return unexpected_scan_error(
 4922|  1.08k|                    scan_error::invalid_scanned_value,
 4923|  1.08k|                    "Cannot use regex with a non-contiguous source "
 4924|  1.08k|                    "range");
 4925|  1.08k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  1.08k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  1.08k|{
  959|  1.08k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  1.08k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  1.08k|        return true;
  962|  1.08k|    }
  963|  1.08k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|  1.08k|                           ranges::const_iterator_t<Range>,
  965|  1.08k|                           typename detail::basic_scan_buffer<
  966|  1.08k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  1.08k|        auto beg = r.begin();
  968|  1.08k|        if (!beg.stores_parent()) {
  969|  1.08k|            return true;
  970|  1.08k|        }
  971|  1.08k|        return beg.parent()->is_contiguous();
  972|  1.08k|    }
  973|  1.08k|    else {
  974|  1.08k|        return false;
  975|  1.08k|    }
  976|  1.08k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  6.03k|    {
 5277|  6.03k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.03k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  6.03k|        return read_impl(range, specs, value);
 5279|  6.03k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  6.03k|    {
 5295|  6.03k|        SCN_CLANG_PUSH
 5296|  6.03k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  6.03k|        switch (m_type) {
 5299|    278|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 278, False: 5.76k]
  ------------------
 5300|    278|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 5.99k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 6.03k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.09k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.09k, False: 4.94k]
  ------------------
 5310|  1.09k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.09k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  4.25k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 4.25k, False: 1.78k]
  ------------------
 5315|  4.25k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  4.25k|                    range, specs.charset_string<SourceCharT>(),
 5317|  4.25k|                    specs.regexp_flags, value);
 5318|       |
 5319|    366|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 366, False: 5.67k]
  ------------------
 5320|    366|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    366|                    range,
 5322|    366|                    get_unescaped_regex_pattern(
 5323|    366|                        specs.charset_string<SourceCharT>()),
 5324|    366|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 6.03k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  6.03k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  6.03k|        }
 5331|       |
 5332|  6.03k|        SCN_CLANG_POP
 5333|  6.03k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    962|    {
 4820|    962|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    962|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.00k|{
 4752|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 370, False: 638]
  ------------------
 4756|    370|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    370|                                     "Invalid encoding in scanned string");
 4758|    370|    }
 4759|    638|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    638|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 638]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    638|    return SCN_MOVE(result);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    638|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.89k|{
 3012|  1.89k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.89k|        dest.assign(source.view());
 3014|  1.89k|    }
 3015|  1.89k|    else {
 3016|  1.89k|        return transcode_impl(source.view(), dest);
 3017|  1.89k|    }
 3018|       |
 3019|  1.89k|    return {};
 3020|  1.89k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.88k|{
 2088|  2.88k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.88k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.88k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.88k|        auto buf = make_contiguous_buffer(range);
 2092|  2.88k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.88k|        return ranges::next(range.begin(),
 2094|  2.88k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.88k|    }
 2096|  2.88k|    else {
 2097|  2.88k|        auto it = range.begin();
 2098|       |
 2099|  2.88k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.88k|            auto seg = get_contiguous_beginning(range);
 2101|  2.88k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.88k|                seg_it != seg.end()) {
 2103|  2.88k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.88k|            }
 2105|  2.88k|            ranges::advance(it, seg.size());
 2106|  2.88k|        }
 2107|       |
 2108|  2.88k|        return read_until_code_point(
 2109|  2.88k|            ranges::subrange{it, range.end()},
 2110|  2.88k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.88k|    }
 2112|  2.88k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.09k|    {
 5048|  1.09k|        auto it = read_source_impl(range, {specs});
 5049|  1.09k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 754]
  |  |  ------------------
  ------------------
 5050|    336|            return unexpected(it.error());
 5051|    336|        }
 5052|       |
 5053|    754|        return read_string_impl(range, *it, value);
 5054|  1.09k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  3.27k|    {
 5153|  3.27k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.27k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.27k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.27k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.27k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.27k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.93k, False: 336]
  ------------------
 5163|  2.93k|            const auto cb = [&](char32_t cp) {
 5164|  2.93k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.93k|            };
 5166|       |
 5167|  2.93k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 264, False: 2.67k]
  ------------------
 5168|    264|                auto it = read_until_code_point(range, cb);
 5169|    264|                return check_nonempty(it, range);
 5170|    264|            }
 5171|  2.67k|            auto it = read_while_code_point(range, cb);
 5172|  2.67k|            return check_nonempty(it, range);
 5173|  2.93k|        }
 5174|       |
 5175|    336|        const auto cb = [&](SourceCharT ch) {
 5176|    336|            return cb_wrapper.on_ascii_only(ch);
 5177|    336|        };
 5178|       |
 5179|    336|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 186]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    186|        auto it = read_while_code_unit(range, cb);
 5184|    186|        return check_nonempty(it, range);
 5185|    336|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.93k|{
 2061|  2.93k|    auto it = range.begin();
 2062|   495k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 495k, False: 186]
  ------------------
 2063|   495k|        const auto val =
 2064|   495k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   495k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   495k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 493k, False: 1.99k]
  |  |  ------------------
  ------------------
 2066|   493k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   493k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   493k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.74k, False: 490k]
  ------------------
 2069|  2.74k|                return it;
 2070|  2.74k|            }
 2071|   493k|        }
 2072|   492k|        it = val.iterator;
 2073|   492k|    }
 2074|       |
 2075|    186|    return it;
 2076|  2.93k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   495k|{
 1899|   495k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   495k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   495k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   495k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   495k|    auto it = range.begin();
 1903|   495k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   495k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 493k]
  |  |  ------------------
  ------------------
 1906|  1.99k|        ++it;
 1907|  1.99k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.99k|        return {it, {}};
 1909|  1.99k|    }
 1910|       |
 1911|   493k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 432k, False: 60.4k]
  ------------------
 1912|   432k|        ++it;
 1913|   432k|        return {it, string_type(1, *range.begin())};
 1914|   432k|    }
 1915|       |
 1916|  60.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  60.4k|    return {it, string_type{range.begin(), it}};
 1918|   493k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.99k|{
 1155|  1.99k|    auto it = input.begin();
 1156|  4.11k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 4.06k, False: 42]
  ------------------
 1157|  4.06k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.95k, False: 2.11k]
  ------------------
 1158|  1.95k|            break;
 1159|  1.95k|        }
 1160|  4.06k|    }
 1161|  1.99k|    return it;
 1162|  1.99k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  60.4k|    {
  283|  60.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  60.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  60.4k|    {
  212|  60.4k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 54, False: 60.3k]
  ------------------
  213|     54|            auto dist = bound - i;
  214|     54|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     54|            return dist;
  216|     54|        }
  217|  60.3k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  60.3k|        return n;
  219|  60.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   120k|    {
  132|   120k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 120k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   120k|        return t;
  136|   120k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   495k|    {
 1890|   495k|        return !codepoint.empty();
 1891|   495k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.93k|    {
  754|  2.93k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   493k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   493k|              cvref<T> obj = *get<T>(fn);
  745|   493k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   493k|                  obj(static_cast<decltype(args)>(args)...);
  747|   493k|              }
  748|   493k|              else {
  749|   493k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   493k|              }
  751|   493k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   493k|    {
  684|   493k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   493k|            return static_cast<T*>(s.m_cp);
  686|   493k|        }
  687|   493k|        else if constexpr (std::is_object_v<T>) {
  688|   493k|            return static_cast<T*>(s.m_p);
  689|   493k|        }
  690|   493k|        else {
  691|   493k|            return reinterpret_cast<T*>(s.m_fp);
  692|   493k|        }
  693|   493k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   493k|            const auto cb = [&](char32_t cp) {
 5164|   493k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   493k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.93k|        {
  667|  2.93k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  3.27k|    {
 5191|  3.27k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.00k, False: 2.26k]
  ------------------
 5192|  1.00k|            return unexpected_scan_error(
 5193|  1.00k|                scan_error::invalid_scanned_value,
 5194|  1.00k|                "No characters matched in [character set]");
 5195|  1.00k|        }
 5196|       |
 5197|  2.26k|        return it;
 5198|  3.27k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.67k|{
 2082|  2.67k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.67k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.04k|              cvref<T> obj = *get<T>(fn);
  745|  4.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.04k|              }
  748|  4.04k|              else {
  749|  4.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.04k|              }
  751|  4.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.04k|    {
  684|  4.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.04k|            return static_cast<T*>(s.m_cp);
  686|  4.04k|        }
  687|  4.04k|        else if constexpr (std::is_object_v<T>) {
  688|  4.04k|            return static_cast<T*>(s.m_p);
  689|  4.04k|        }
  690|  4.04k|        else {
  691|  4.04k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.04k|        }
  693|  4.04k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.04k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.04k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.04k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    336|        {
  667|    336|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.40k|{
 4752|  1.40k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.40k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.40k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 154, False: 1.25k]
  ------------------
 4756|    154|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    154|                                     "Invalid encoding in scanned string");
 4758|    154|    }
 4759|  1.25k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.25k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.25k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.25k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  4.62k|    {
 4891|  4.62k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  4.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.97k, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.97k|    }                                                  \
  |  |  |  | 3671|  4.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    652|        return read_string_impl(range, it, value);
 4893|  4.62k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  13.8k|    {
 4913|  13.8k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  27.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  13.8k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  13.8k|            return unexpected_scan_error(
 4916|  13.8k|                scan_error::invalid_scanned_value,
 4917|  13.8k|                "Regex backend doesn't support wide strings as input");
 4918|  13.8k|        }
 4919|  13.8k|        else {
 4920|  13.8k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 13.8k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  13.8k|            auto input = get_as_contiguous(range);
 4928|  13.8k|            SCN_TRY(it,
  ------------------
  |  | 3672|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.9k, False: 1.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.9k|    }                                                  \
  |  |  |  | 3671|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.95k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.95k|            return ranges::next(range.begin(),
 4931|  1.95k|                                ranges::distance(input.begin(), it));
 4932|  13.8k|        }
 4933|  13.8k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  13.8k|{
  959|  13.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  13.8k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  13.8k|        return true;
  962|  13.8k|    }
  963|  13.8k|    else if constexpr (std::is_same_v<
  964|  13.8k|                           ranges::const_iterator_t<Range>,
  965|  13.8k|                           typename detail::basic_scan_buffer<
  966|  13.8k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  13.8k|        auto beg = r.begin();
  968|  13.8k|        if (!beg.stores_parent()) {
  969|  13.8k|            return true;
  970|  13.8k|        }
  971|  13.8k|        return beg.parent()->is_contiguous();
  972|  13.8k|    }
  973|  13.8k|    else {
  974|  13.8k|        return false;
  975|  13.8k|    }
  976|  13.8k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  13.8k|{
 1065|  13.8k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  13.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  13.8k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  13.8k|        return r;
 1070|  13.8k|    }
 1071|  13.8k|    else if constexpr (std::is_same_v<
 1072|  13.8k|                           ranges::const_iterator_t<Range>,
 1073|  13.8k|                           typename detail::basic_scan_buffer<
 1074|  13.8k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  13.8k|        if constexpr (ranges::common_range<Range>) {
 1076|  13.8k|            return detail::make_string_view_from_pointers(
 1077|  13.8k|                r.begin().to_contiguous_segment_iterator(),
 1078|  13.8k|                r.end().to_contiguous_segment_iterator());
 1079|  13.8k|        }
 1080|  13.8k|        else {
 1081|  13.8k|            return r.begin().contiguous_segment();
 1082|  13.8k|        }
 1083|  13.8k|    }
 1084|  13.8k|    else {
 1085|  13.8k|        SCN_EXPECT(false);
 1086|  13.8k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  13.8k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  13.8k|    }
 1090|  13.8k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  13.8k|{
  981|  13.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  13.8k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  13.8k|        return true;
  984|  13.8k|    }
  985|  13.8k|    else if constexpr (std::is_same_v<
  986|  13.8k|                           ranges::const_iterator_t<Range>,
  987|  13.8k|                           typename detail::basic_scan_buffer<
  988|  13.8k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  13.8k|        auto beg = r.begin();
  990|  13.8k|        if (beg.contiguous_segment().empty()) {
  991|  13.8k|            return false;
  992|  13.8k|        }
  993|  13.8k|        if constexpr (ranges::common_range<Range>) {
  994|  13.8k|            return beg.contiguous_segment().end() ==
  995|  13.8k|                   ranges::end(r).contiguous_segment().end();
  996|  13.8k|        }
  997|  13.8k|        else {
  998|  13.8k|            if (beg.stores_parent()) {
  999|  13.8k|                return beg.contiguous_segment().end() ==
 1000|  13.8k|                       beg.parent()->current_view().end();
 1001|  13.8k|            }
 1002|  13.8k|            return true;
 1003|  13.8k|        }
 1004|  13.8k|    }
 1005|  13.8k|    else {
 1006|  13.8k|        return false;
 1007|  13.8k|    }
 1008|  13.8k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  13.8k|{
 4346|  13.8k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  13.8k|                  ranges::borrowed_range<Input> &&
 4348|  13.8k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  13.8k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  13.8k|    std::basic_regex<CharT> re{};
 4352|  13.8k|    try {
 4353|  13.8k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  13.8k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  13.8k|                                     re_flags | std::regex_constants::nosubs};
 4356|  13.8k|    }
 4357|  13.8k|    catch (const std::regex_error& err) {
 4358|  8.06k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  8.06k|                                     "Invalid regex");
 4360|  8.06k|    }
 4361|       |
 4362|  5.80k|    std::match_results<const CharT*> matches{};
 4363|  5.80k|    try {
 4364|  5.80k|        bool found = std::regex_search(input.data(),
 4365|  5.80k|                                       input.data() + input.size(), matches, re,
 4366|  5.80k|                                       std::regex_constants::match_continuous);
 4367|  5.80k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 3.85k, False: 1.95k]
  |  Branch (4367:23): [True: 0, False: 1.95k]
  ------------------
 4368|  3.61k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  3.61k|                                         "Regular expression didn't match");
 4370|  3.61k|        }
 4371|  5.80k|    }
 4372|  5.80k|    catch (const std::regex_error& err) {
 4373|    234|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    234|                                     "Regex matching failed with an error");
 4375|    234|    }
 4376|       |
 4377|  1.95k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  5.80k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  7.94k|{
 5809|  7.94k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.94k|        return reader_impl_for_bool<CharT>{};
 5811|  7.94k|    }
 5812|  7.94k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.94k|        return reader_impl_for_char<CharT>{};
 5814|  7.94k|    }
 5815|  7.94k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.94k|        return reader_impl_for_wchar<CharT>{};
 5817|  7.94k|    }
 5818|  7.94k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.94k|        return reader_impl_for_code_point<CharT>{};
 5820|  7.94k|    }
 5821|  7.94k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.94k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.94k|        return reader_impl_for_string<CharT>{};
 5824|  7.94k|    }
 5825|  7.94k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  7.94k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  7.94k|        return reader_impl_for_string<CharT>{};
 5828|  7.94k|    }
 5829|  7.94k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.94k|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.94k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.94k|    }
 5833|  7.94k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.94k|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.94k|    }
 5836|  7.94k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.94k|        return reader_impl_for_float<CharT>{};
 5838|  7.94k|    }
 5839|  7.94k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.94k|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.94k|                       !std::is_same_v<T, char32_t> &&
 5842|  7.94k|                       !std::is_same_v<T, bool>) {
 5843|  7.94k|        return reader_impl_for_int<CharT>{};
 5844|  7.94k|    }
 5845|  7.94k|    else {
 5846|  7.94k|        return reader_impl_for_monostate<CharT>{};
 5847|  7.94k|    }
 5848|  7.94k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    398|{
 2993|    398|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    398|        if (source.stores_allocated_string()) {
 2995|    398|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    398|        }
 2997|    398|        else {
 2998|    398|            dest.assign(source.view());
 2999|    398|        }
 3000|    398|    }
 3001|    398|    else {
 3002|    398|        return transcode_impl(source.view(), dest);
 3003|    398|    }
 3004|       |
 3005|      0|    return {};
 3006|    398|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.28k|{
 2968|  2.28k|    dst.clear();
 2969|  2.28k|    transcode_valid_to_string(src, dst);
 2970|  2.28k|    return {};
 2971|  2.28k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.28k|{
 1403|  2.28k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.28k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.28k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.28k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.28k|            std::u32string tmp;
 1410|  2.28k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.28k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.28k|                std::u32string_view{tmp}, dest);
 1413|  2.28k|        }
 1414|  2.28k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.28k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.28k|        }
 1417|  2.28k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.28k|{
 1277|  2.28k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.28k|    auto it = src.begin();
 1280|   191k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 188k, False: 2.28k]
  ------------------
 1281|   188k|        auto res = get_next_code_point_valid(
 1282|   188k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   188k|                                                                 src.end()));
 1284|   188k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   188k|        dest.push_back(res.value);
 1286|   188k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   188k|    }
 1288|  2.28k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   188k|{
 1189|   188k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   188k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   188k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   188k|    return {input.begin() + len,
 1195|   188k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   188k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.07k|    {
 5277|  1.07k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.07k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.07k|        return read_impl(range, specs, value);
 5279|  1.07k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.07k|    {
 5295|  1.07k|        SCN_CLANG_PUSH
 5296|  1.07k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.07k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 774]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 1.01k]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 1.03k]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    324|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 324, False: 748]
  ------------------
 5310|    324|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    324|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.07k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    360|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 360, False: 712]
  ------------------
 5320|    360|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    360|                    range,
 5322|    360|                    get_unescaped_regex_pattern(
 5323|    360|                        specs.charset_string<SourceCharT>()),
 5324|    360|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.07k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.07k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.07k|        }
 5331|       |
 5332|  1.07k|        SCN_CLANG_POP
 5333|  1.07k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    298|    {
 4820|    298|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    298|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    386|{
 4752|    386|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    386|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    386|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 162, False: 224]
  ------------------
 4756|    162|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    162|                                     "Invalid encoding in scanned string");
 4758|    162|    }
 4759|    224|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    224|    static_cast<    \
  |  |  929|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    224|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 224]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    224|    return SCN_MOVE(result);
  ------------------
  |  |  928|    224|    static_cast<    \
  |  |  929|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    224|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     54|    {
 4841|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 20]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     20|        return read_string_impl(
 4851|     20|            range,
 4852|     20|            read_until_code_units(
 4853|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     20|            value);
 4855|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     34|    {
 4947|     34|        return read_impl(
 4948|     34|            range,
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
 4952|     34|            detail::priority_tag<1>{});
 4953|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    324|    {
 5048|    324|        auto it = read_source_impl(range, {specs});
 5049|    324|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 306]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|    306|        return read_string_impl(range, *it, value);
 5054|    324|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    306|{
 4752|    306|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    306|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    306|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 132, False: 174]
  ------------------
 4756|    132|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    132|                                     "Invalid encoding in scanned string");
 4758|    132|    }
 4759|    174|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    174|    static_cast<    \
  |  |  929|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    174|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    174|    return SCN_MOVE(result);
  ------------------
  |  |  928|    174|    static_cast<    \
  |  |  929|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    174|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    362|    {
 4891|    362|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    362|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    362|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  6.03k|    {
 5277|  6.03k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.03k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  6.03k|        return read_impl(range, specs, value);
 5279|  6.03k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  6.03k|    {
 5295|  6.03k|        SCN_CLANG_PUSH
 5296|  6.03k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  6.03k|        switch (m_type) {
 5299|    278|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 278, False: 5.76k]
  ------------------
 5300|    278|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 5.99k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 6.03k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.09k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.09k, False: 4.94k]
  ------------------
 5310|  1.09k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.09k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  4.25k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 4.25k, False: 1.78k]
  ------------------
 5315|  4.25k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  4.25k|                    range, specs.charset_string<SourceCharT>(),
 5317|  4.25k|                    specs.regexp_flags, value);
 5318|       |
 5319|    366|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 366, False: 5.67k]
  ------------------
 5320|    366|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    366|                    range,
 5322|    366|                    get_unescaped_regex_pattern(
 5323|    366|                        specs.charset_string<SourceCharT>()),
 5324|    366|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 6.03k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  6.03k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  6.03k|        }
 5331|       |
 5332|  6.03k|        SCN_CLANG_POP
 5333|  6.03k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    962|    {
 4820|    962|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    962|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.00k|{
 4752|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 370, False: 638]
  ------------------
 4756|    370|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    370|                                     "Invalid encoding in scanned string");
 4758|    370|    }
 4759|    638|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    638|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 638]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    638|    return SCN_MOVE(result);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    638|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.89k|{
 3012|  1.89k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.89k|        dest.assign(source.view());
 3014|  1.89k|    }
 3015|  1.89k|    else {
 3016|  1.89k|        return transcode_impl(source.view(), dest);
 3017|  1.89k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.89k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.09k|    {
 5048|  1.09k|        auto it = read_source_impl(range, {specs});
 5049|  1.09k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 754]
  |  |  ------------------
  ------------------
 5050|    336|            return unexpected(it.error());
 5051|    336|        }
 5052|       |
 5053|    754|        return read_string_impl(range, *it, value);
 5054|  1.09k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.40k|{
 4752|  1.40k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.40k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.40k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 154, False: 1.25k]
  ------------------
 4756|    154|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    154|                                     "Invalid encoding in scanned string");
 4758|    154|    }
 4759|  1.25k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.25k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.25k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.25k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  4.62k|    {
 4891|  4.62k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  4.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.97k, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.97k|    }                                                  \
  |  |  |  | 3671|  4.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    652|        return read_string_impl(range, it, value);
 4893|  4.62k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  7.94k|{
 5809|  7.94k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.94k|        return reader_impl_for_bool<CharT>{};
 5811|  7.94k|    }
 5812|  7.94k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.94k|        return reader_impl_for_char<CharT>{};
 5814|  7.94k|    }
 5815|  7.94k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.94k|        return reader_impl_for_wchar<CharT>{};
 5817|  7.94k|    }
 5818|  7.94k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.94k|        return reader_impl_for_code_point<CharT>{};
 5820|  7.94k|    }
 5821|  7.94k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.94k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.94k|        return reader_impl_for_string<CharT>{};
 5824|  7.94k|    }
 5825|  7.94k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  7.94k|                       std::is_same_v<T, std::wstring>) {
 5827|  7.94k|        return reader_impl_for_string<CharT>{};
 5828|  7.94k|    }
 5829|  7.94k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.94k|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.94k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.94k|    }
 5833|  7.94k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.94k|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.94k|    }
 5836|  7.94k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.94k|        return reader_impl_for_float<CharT>{};
 5838|  7.94k|    }
 5839|  7.94k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.94k|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.94k|                       !std::is_same_v<T, char32_t> &&
 5842|  7.94k|                       !std::is_same_v<T, bool>) {
 5843|  7.94k|        return reader_impl_for_int<CharT>{};
 5844|  7.94k|    }
 5845|  7.94k|    else {
 5846|  7.94k|        return reader_impl_for_monostate<CharT>{};
 5847|  7.94k|    }
 5848|  7.94k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.07k|    {
 5277|  1.07k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.07k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.07k|        return read_impl(range, specs, value);
 5279|  1.07k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.07k|    {
 5295|  1.07k|        SCN_CLANG_PUSH
 5296|  1.07k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.07k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 774]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 1.01k]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 1.03k]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    324|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 324, False: 748]
  ------------------
 5310|    324|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    324|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.07k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    360|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 360, False: 712]
  ------------------
 5320|    360|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    360|                    range,
 5322|    360|                    get_unescaped_regex_pattern(
 5323|    360|                        specs.charset_string<SourceCharT>()),
 5324|    360|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.07k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.07k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.07k|        }
 5331|       |
 5332|  1.07k|        SCN_CLANG_POP
 5333|  1.07k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    298|    {
 4827|    298|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    298|                                     value);
 4829|    298|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    386|{
 4773|    386|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    386|    auto src = [&]() {
 4776|    386|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    386|            return make_contiguous_buffer(
 4778|    386|                ranges::subrange{range.begin().base(), result.base()});
 4779|    386|        }
 4780|    386|        else {
 4781|    386|            return make_contiguous_buffer(
 4782|    386|                ranges::subrange{range.begin(), result});
 4783|    386|        }
 4784|    386|    }();
 4785|    386|    using src_type = decltype(src);
 4786|       |
 4787|    386|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    386|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    386|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    386|                                     "Cannot read a string_view from "
 4796|    386|                                     "this source range (would require "
 4797|    386|                                     "transcoding)");
 4798|    386|    }
 4799|    386|    else {
 4800|    386|        const auto view = src.view();
 4801|    386|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    386|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 162, False: 224]
  ------------------
 4804|    162|            return unexpected_scan_error(
 4805|    162|                scan_error::invalid_scanned_value,
 4806|    162|                "Invalid encoding in scanned string_view");
 4807|    162|        }
 4808|       |
 4809|    224|        return SCN_MOVE(result);
  ------------------
  |  |  928|    224|    static_cast<    \
  |  |  929|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    386|    }
 4811|    386|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    386|    auto src = [&]() {
 4776|    386|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    386|            return make_contiguous_buffer(
 4778|    386|                ranges::subrange{range.begin().base(), result.base()});
 4779|    386|        }
 4780|    386|        else {
 4781|    386|            return make_contiguous_buffer(
 4782|    386|                ranges::subrange{range.begin(), result});
 4783|    386|        }
 4784|    386|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     54|    {
 4863|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 20]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     20|        return read_string_view_impl(
 4873|     20|            range,
 4874|     20|            read_until_code_units(
 4875|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     20|            value);
 4877|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     34|    {
 4959|     34|        return read_impl(
 4960|     34|            range,
 4961|     34|            [&](const auto& rng) {
 4962|     34|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     34|            },
 4964|     34|            detail::priority_tag<1>{});
 4965|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     34|            [&](const auto& rng) {
 4962|     34|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     34|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    324|    {
 5062|    324|        auto it = read_source_impl(range, {specs});
 5063|    324|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 306]
  |  |  ------------------
  ------------------
 5064|     18|            return unexpected(it.error());
 5065|     18|        }
 5066|       |
 5067|    306|        return read_string_view_impl(range, *it, value);
 5068|    324|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    306|{
 4773|    306|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    306|    auto src = [&]() {
 4776|    306|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    306|            return make_contiguous_buffer(
 4778|    306|                ranges::subrange{range.begin().base(), result.base()});
 4779|    306|        }
 4780|    306|        else {
 4781|    306|            return make_contiguous_buffer(
 4782|    306|                ranges::subrange{range.begin(), result});
 4783|    306|        }
 4784|    306|    }();
 4785|    306|    using src_type = decltype(src);
 4786|       |
 4787|    306|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    306|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    306|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    306|                                     "Cannot read a string_view from "
 4796|    306|                                     "this source range (would require "
 4797|    306|                                     "transcoding)");
 4798|    306|    }
 4799|    306|    else {
 4800|    306|        const auto view = src.view();
 4801|    306|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    306|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 132, False: 174]
  ------------------
 4804|    132|            return unexpected_scan_error(
 4805|    132|                scan_error::invalid_scanned_value,
 4806|    132|                "Invalid encoding in scanned string_view");
 4807|    132|        }
 4808|       |
 4809|    174|        return SCN_MOVE(result);
  ------------------
  |  |  928|    174|    static_cast<    \
  |  |  929|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    306|    }
 4811|    306|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    306|    auto src = [&]() {
 4776|    306|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    306|            return make_contiguous_buffer(
 4778|    306|                ranges::subrange{range.begin().base(), result.base()});
 4779|    306|        }
 4780|    306|        else {
 4781|    306|            return make_contiguous_buffer(
 4782|    306|                ranges::subrange{range.begin(), result});
 4783|    306|        }
 4784|    306|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    362|    {
 4902|    362|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    362|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    362|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  6.03k|    {
 5277|  6.03k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.03k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  6.03k|        return read_impl(range, specs, value);
 5279|  6.03k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  6.03k|    {
 5295|  6.03k|        SCN_CLANG_PUSH
 5296|  6.03k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  6.03k|        switch (m_type) {
 5299|    278|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 278, False: 5.76k]
  ------------------
 5300|    278|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 5.99k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 6.03k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.09k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.09k, False: 4.94k]
  ------------------
 5310|  1.09k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.09k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  4.25k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 4.25k, False: 1.78k]
  ------------------
 5315|  4.25k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  4.25k|                    range, specs.charset_string<SourceCharT>(),
 5317|  4.25k|                    specs.regexp_flags, value);
 5318|       |
 5319|    366|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 366, False: 5.67k]
  ------------------
 5320|    366|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    366|                    range,
 5322|    366|                    get_unescaped_regex_pattern(
 5323|    366|                        specs.charset_string<SourceCharT>()),
 5324|    366|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 6.03k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  6.03k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  6.03k|        }
 5331|       |
 5332|  6.03k|        SCN_CLANG_POP
 5333|  6.03k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    962|    {
 4827|    962|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    962|                                     value);
 4829|    962|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.00k|{
 4773|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.00k|    auto src = [&]() {
 4776|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.00k|            return make_contiguous_buffer(
 4778|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.00k|        }
 4780|  1.00k|        else {
 4781|  1.00k|            return make_contiguous_buffer(
 4782|  1.00k|                ranges::subrange{range.begin(), result});
 4783|  1.00k|        }
 4784|  1.00k|    }();
 4785|  1.00k|    using src_type = decltype(src);
 4786|       |
 4787|  1.00k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.00k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.00k|                                     "Cannot read a string_view from "
 4796|  1.00k|                                     "this source range (would require "
 4797|  1.00k|                                     "transcoding)");
 4798|  1.00k|    }
 4799|  1.00k|    else {
 4800|  1.00k|        const auto view = src.view();
 4801|  1.00k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.00k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 370, False: 638]
  ------------------
 4804|    370|            return unexpected_scan_error(
 4805|    370|                scan_error::invalid_scanned_value,
 4806|    370|                "Invalid encoding in scanned string_view");
 4807|    370|        }
 4808|       |
 4809|    638|        return SCN_MOVE(result);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.00k|    }
 4811|  1.00k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.00k|    auto src = [&]() {
 4776|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.00k|            return make_contiguous_buffer(
 4778|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.00k|        }
 4780|  1.00k|        else {
 4781|  1.00k|            return make_contiguous_buffer(
 4782|  1.00k|                ranges::subrange{range.begin(), result});
 4783|  1.00k|        }
 4784|  1.00k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  1.09k|    {
 5062|  1.09k|        auto it = read_source_impl(range, {specs});
 5063|  1.09k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 754]
  |  |  ------------------
  ------------------
 5064|    336|            return unexpected(it.error());
 5065|    336|        }
 5066|       |
 5067|    754|        return read_string_view_impl(range, *it, value);
 5068|  1.09k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.40k|{
 4773|  1.40k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.40k|    auto src = [&]() {
 4776|  1.40k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.40k|            return make_contiguous_buffer(
 4778|  1.40k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.40k|        }
 4780|  1.40k|        else {
 4781|  1.40k|            return make_contiguous_buffer(
 4782|  1.40k|                ranges::subrange{range.begin(), result});
 4783|  1.40k|        }
 4784|  1.40k|    }();
 4785|  1.40k|    using src_type = decltype(src);
 4786|       |
 4787|  1.40k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.40k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.40k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.40k|                                     "Cannot read a string_view from "
 4796|  1.40k|                                     "this source range (would require "
 4797|  1.40k|                                     "transcoding)");
 4798|  1.40k|    }
 4799|  1.40k|    else {
 4800|  1.40k|        const auto view = src.view();
 4801|  1.40k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.40k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 154, False: 1.25k]
  ------------------
 4804|    154|            return unexpected_scan_error(
 4805|    154|                scan_error::invalid_scanned_value,
 4806|    154|                "Invalid encoding in scanned string_view");
 4807|    154|        }
 4808|       |
 4809|  1.25k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.40k|    }
 4811|  1.40k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.40k|    auto src = [&]() {
 4776|  1.40k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.40k|            return make_contiguous_buffer(
 4778|  1.40k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.40k|        }
 4780|  1.40k|        else {
 4781|  1.40k|            return make_contiguous_buffer(
 4782|  1.40k|                ranges::subrange{range.begin(), result});
 4783|  1.40k|        }
 4784|  1.40k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  4.62k|    {
 4902|  4.62k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  4.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.97k, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.97k|    }                                                  \
  |  |  |  | 3671|  4.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    652|        return read_string_view_impl(range, it, value);
 4904|  4.62k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  3.87k|    {
 5624|  3.87k|        reader_error_handler eh{};
 5625|  3.87k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  3.87k|            detail::check_code_point_type_specs(specs, eh);
 5627|  3.87k|        }
 5628|  3.87k|        else {
 5629|  3.87k|            detail::check_char_type_specs(specs, eh);
 5630|  3.87k|        }
 5631|  3.87k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 506]
  |  |  ------------------
  ------------------
 5632|  3.37k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  3.37k|        }
 5634|    506|        return {};
 5635|  3.87k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  7.56k|    {
  763|  7.56k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.56k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.49k|    {
  754|  1.49k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  2.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.60k|              cvref<T> obj = *get<T>(fn);
  745|  2.60k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.60k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.60k|              }
  748|  2.60k|              else {
  749|  2.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.60k|              }
  751|  2.60k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.60k|    {
  684|  2.60k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.60k|            return static_cast<T*>(s.m_cp);
  686|  2.60k|        }
  687|  2.60k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.60k|            return static_cast<T*>(s.m_p);
  689|  2.60k|        }
  690|  2.60k|        else {
  691|  2.60k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.60k|        }
  693|  2.60k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.49k|        {
  662|  1.49k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.48k|    {
 5619|  1.48k|        return false;
 5620|  1.48k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     64|    {
 1780|     64|        auto stdloc = loc.get<std::locale>();
 1781|     64|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     64|        grouping = numpunct.grouping();
 1783|     64|        thousands_sep =
 1784|     64|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 64]
  ------------------
 1785|     64|        decimal_point = numpunct.decimal_point();
 1786|     64|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     74|{
 1717|     74|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 74, False: 0]
  ------------------
 1718|     74|        return std::use_facet<Facet>(stdloc);
 1719|     74|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     74|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.84k|{
 2349|  3.84k|    size_t count{0};
 2350|  3.84k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.84k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.84k|    });
 2353|  3.84k|    return count;
 2354|  3.84k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.84k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.84k|    auto it = input.begin();
 1448|  9.31k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 5.46k, False: 3.84k]
  ------------------
 1449|  5.46k|        auto res = get_next_code_point(
 1450|  5.46k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  5.46k|        cb(res.value);
 1452|  5.46k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  5.46k|    }
 1454|  3.84k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   492M|{
 1169|   492M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   492M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   492M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   492M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   492M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   492M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   492M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   492M|    return {input.begin() + len,
 1181|   492M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   492M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.84k|    {
  754|  3.84k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  5.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.46k|              cvref<T> obj = *get<T>(fn);
  745|  5.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.46k|              }
  748|  5.46k|              else {
  749|  5.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.46k|              }
  751|  5.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  5.46k|    {
  684|  5.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.46k|            return static_cast<T*>(s.m_cp);
  686|  5.46k|        }
  687|  5.46k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.46k|            return static_cast<T*>(s.m_p);
  689|  5.46k|        }
  690|  5.46k|        else {
  691|  5.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.46k|        }
  693|  5.46k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  5.46k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  5.46k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  5.46k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.84k|        {
  662|  3.84k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.15k|    {
 1582|  2.15k|        return m_view;
 1583|  2.15k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.43k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    312|    {
 2421|    312|        return m_multibyte_left;
 2422|    312|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  58.5k|    {
 2426|  58.5k|        return *m_current;
 2427|  58.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  39.2k|    {
 2435|  39.2k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  39.2k|        _increment_current();
 2437|  39.2k|        return *this;
 2438|  39.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  39.2k|    {
 2668|  39.2k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 39.2k, False: 0]
  ------------------
 2669|  39.2k|            auto cplen = _get_cp_length_at_current();
 2670|  39.2k|            m_multibyte_left = cplen - 1;
 2671|  39.2k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  39.2k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  39.2k|        ++m_current;
 2678|  39.2k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  39.2k|    {
 2639|  39.2k|        return static_cast<difference_type>(
 2640|  39.2k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  39.2k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  39.2k|    {
 2645|  39.2k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  39.2k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 39.2k, False: 0]
  ------------------
 2650|  39.2k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  39.2k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  39.2k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  39.2k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.24k|{
 1857|  5.24k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.24k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.24k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.24k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 130, False: 5.11k]
  ------------------
 1862|    130|            return unexpected(eof_error::eof);
 1863|    130|        }
 1864|       |
 1865|  5.11k|        return ranges::next(range.begin(), count);
 1866|  5.24k|    }
 1867|  5.24k|    else {
 1868|  5.24k|        auto it = range.begin();
 1869|  5.24k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.24k|            return ranges::next(it, count);
 1871|  5.24k|        }
 1872|       |
 1873|  5.24k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.24k|            if (it == range.end()) {
 1875|  5.24k|                return unexpected(eof_error::eof);
 1876|  5.24k|            }
 1877|  5.24k|        }
 1878|       |
 1879|  5.24k|        return it;
 1880|  5.24k|    }
 1881|  5.24k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  14.4k|    {
 2531|  14.4k|        return !(a == b);
 2532|  14.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  15.1k|    {
 2523|  15.1k|        return a.m_current == b.m_current;
 2524|  15.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  2.28k|    {
 2430|  2.28k|        return *m_current;
 2431|  2.28k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  18.9k|    {
 1890|  18.9k|        return !codepoint.empty();
 1891|  18.9k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    374|{
 1683|    374|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    374|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    374|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    374|        return string_view_wrapper{SCN_FWD(range)};
 1687|    374|    }
 1688|    374|    else {
 1689|    374|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    374|    }
 1691|    374|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    374|    {
 1537|    374|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    374|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    374|    {
 1621|    374|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    374|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    374|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    374|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    374|            m_storage.reset();
 1627|    374|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    374|        }
 1629|    374|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    374|                                          std::basic_string<CharT>>) {
 1631|    374|            m_storage.emplace(SCN_FWD(range));
 1632|    374|            m_view = string_view_type{*m_storage};
 1633|    374|        }
 1634|    374|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    374|                                          typename detail::basic_scan_buffer<
 1636|    374|                                              value_t>::forward_iterator> &&
 1637|    374|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    374|            auto beg_seg = range.begin().contiguous_segment();
 1639|    374|            auto end_seg = range.end().contiguous_segment();
 1640|    374|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    374|                             detail::to_address(end_seg.end()))) {
 1642|    374|                auto& str = m_storage.emplace();
 1643|    374|                str.reserve(range.end().position() - range.begin().position());
 1644|    374|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    374|                m_view = string_view_type{str};
 1646|    374|                return;
 1647|    374|            }
 1648|       |
 1649|    374|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    374|                                                            end_seg.data());
 1651|    374|            m_storage.reset();
 1652|    374|        }
 1653|    374|        else {
 1654|    374|            auto& str = m_storage.emplace();
 1655|    374|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    374|                str.reserve(range.size());
 1657|    374|            }
 1658|    374|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    374|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    374|                          std::back_inserter(str));
 1661|    374|            }
 1662|    374|            else {
 1663|    374|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    374|                     ++it) {
 1665|    374|                    str.push_back(*it);
 1666|    374|                }
 1667|    374|            }
 1668|    374|            m_view = string_view_type{str};
 1669|    374|        }
 1670|    374|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  9.63k|    {
 2382|  9.63k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  53.5k|    {
 2413|  53.5k|        return m_current;
 2414|  53.5k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  12.8k|{
 2117|  12.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  12.8k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  12.8k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  12.8k|        auto buf = make_contiguous_buffer(range);
 2121|  12.8k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  12.8k|        return ranges::next(range.begin(),
 2123|  12.8k|                            ranges::distance(buf.view().begin(), it));
 2124|  12.8k|    }
 2125|  12.8k|    else {
 2126|  12.8k|        auto it = range.begin();
 2127|       |
 2128|  12.8k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  12.8k|            auto seg = get_contiguous_beginning(range);
 2130|  12.8k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  12.8k|                seg_it != seg.end()) {
 2132|  12.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  12.8k|            }
 2134|  12.8k|            ranges::advance(it, seg.size());
 2135|  12.8k|        }
 2136|       |
 2137|  12.8k|        return read_while_code_point(
 2138|  12.8k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  12.8k|    }
 2140|  12.8k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  12.8k|{
 2082|  12.8k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  12.8k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  12.8k|{
 2061|  12.8k|    auto it = range.begin();
 2062|  17.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 17.1k, False: 892]
  ------------------
 2063|  17.1k|        const auto val =
 2064|  17.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  17.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.1k, False: 0]
  |  |  ------------------
  ------------------
 2066|  17.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  17.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  17.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 11.9k, False: 5.12k]
  ------------------
 2069|  11.9k|                return it;
 2070|  11.9k|            }
 2071|  17.1k|        }
 2072|  5.12k|        it = val.iterator;
 2073|  5.12k|    }
 2074|       |
 2075|    892|    return it;
 2076|  12.8k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  72.2k|{
 1899|  72.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  72.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  72.2k|    auto it = range.begin();
 1903|  72.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  72.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.2k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  72.2k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 72.2k, False: 0]
  ------------------
 1912|  72.2k|        ++it;
 1913|  72.2k|        return {it, string_type(1, *range.begin())};
 1914|  72.2k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  72.2k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  92.0k|{
  944|  92.0k|    return is_range_eof(r.begin(), r.end());
  945|  92.0k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   493M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   493M|    {
  937|   493M|        return begin == end;
  938|   493M|    }
  939|   493M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    850|    {
  190|    850|        i = std::move(bound);
  191|    850|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  72.2k|    {
 1890|  72.2k|        return !codepoint.empty();
 1891|  72.2k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  12.8k|    {
  754|  12.8k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  17.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.1k|              cvref<T> obj = *get<T>(fn);
  745|  17.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.1k|              }
  748|  17.1k|              else {
  749|  17.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.1k|              }
  751|  17.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  17.1k|    {
  684|  17.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.1k|            return static_cast<T*>(s.m_cp);
  686|  17.1k|        }
  687|  17.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.1k|            return static_cast<T*>(s.m_p);
  689|  17.1k|        }
  690|  17.1k|        else {
  691|  17.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.1k|        }
  693|  17.1k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  17.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  12.8k|        {
  662|  12.8k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  19.8k|{
  950|  19.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.8k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  19.8k|    return eof_error::good;
  954|  19.8k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  3.44k|    {
 2832|  3.44k|        return take_width_view{r, n};
 2833|  3.44k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  3.44k|    {
 2801|  3.44k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  3.44k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    168|    {
 5699|    168|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 140, False: 28]
  ------------------
 5700|    168|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 28]
  ------------------
 5701|    140|            return read_default(range, value, loc);
 5702|    140|        }
 5703|       |
 5704|     28|        reader_impl_for_int<CharT> reader{};
 5705|     28|        using integer_type =
 5706|     28|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     28|        integer_type tmp_value{};
 5708|     28|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     28|        value = static_cast<integer_type>(value);
 5710|     28|        return ret;
 5711|    168|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    140|    {
 5683|    140|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    140|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    140|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    140|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    140|        }
 5687|    140|        else {
 5688|    140|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    140|        }
 5690|    140|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    140|    {
 5564|    140|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    140|        ch = *range.begin();
 5566|    140|        return it;
 5567|    140|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.18k|{
 1846|  1.18k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.18k|    return ranges::next(range.begin());
 1851|  1.18k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.18k|{
  950|  1.18k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.18k|    return eof_error::good;
  954|  1.18k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.18k|{
  944|  1.18k|    return is_range_eof(r.begin(), r.end());
  945|  1.18k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  20.1k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  20.1k|    {
  937|  20.1k|        return begin == end;
  938|  20.1k|    }
  939|  20.1k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  51.2k|        {
 2770|  51.2k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 312, False: 50.9k]
  |  Branch (2770:39): [True: 312, False: 0]
  ------------------
 2771|  51.2k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 336, False: 50.6k]
  ------------------
 2772|  51.2k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  11.9k|    {
 2816|  11.9k|        return sentinel<true>{m_base.get().end()};
 2817|  11.9k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  31.2k|    {
 2717|  31.2k|        return view;
 2718|  31.2k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  11.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.21k|    {
  296|  1.21k|        ++x;
  297|  1.21k|        return x;
  298|  1.21k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  9.63k|    {
 2810|  9.63k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  9.63k|                                      m_count};
 2812|  9.63k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    202|    {
 3539|    202|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    202|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    202|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 202]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    202|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 202]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    202|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    202|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 196, False: 6]
  |  |  ------------------
  ------------------
 3565|    196|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 196, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    196|    }                                                  \
  |  |  |  | 3671|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      6|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      6|            localized_number_formatting_options<CharT>{loc};
 3586|      6|#endif
 3587|       |
 3588|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    520|{
 3326|    520|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    520|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    520|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    520|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 520]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    520|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    520|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    520|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    520|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    520|        parse_integer_base_prefix(
 3331|    520|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    520|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 520]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    520|    else {
 3343|    520|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 520]
  |  Branch (3343:13): [True: 520, False: 0]
  ------------------
 3344|    520|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 520, False: 0]
  ------------------
 3345|    520|            digits_begin_it = base_prefix_begin_it;
 3346|    520|        }
 3347|    520|    }
 3348|       |
 3349|    520|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 520, False: 0]
  ------------------
 3350|    520|        sign = sign_type::plus_sign;
 3351|    520|    }
 3352|    520|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    520|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    520|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    694|{
 3141|    694|    auto r = read_one_of_code_unit(range, "+-");
 3142|    694|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 694, False: 0]
  ------------------
 3143|    694|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 694, False: 0]
  ------------------
 3144|    694|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    694|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    694|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    694|{
 2272|    694|    auto it = read_code_unit(range);
 2273|    694|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    694|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 694]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.38k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.38k, False: 694]
  ------------------
 2278|  1.38k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.38k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.38k|    }
 2282|       |
 2283|    694|    return unexpected(parse_error::error);
 2284|    694|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    520|{
 3293|    520|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 514]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     24|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 24, False: 496]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     24|            bool zero_parsed = false;
 3302|     24|            auto it = apply_opt(
 3303|     24|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     24|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    150|        case 16:
  ------------------
  |  Branch (3307:9): [True: 150, False: 370]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    150|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    150|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 508]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    328|        default:
  ------------------
  |  Branch (3316:9): [True: 328, False: 192]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    328|            return {range.begin(), base, false};
 3319|    520|    }
 3320|    520|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    180|{
 2291|    180|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 180, False: 0]
  ------------------
 2292|    180|        return range.begin();
 2293|    180|    }
 2294|      0|    return *result;
 2295|    180|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    722|{
 2231|    722|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    722|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    722|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    722|        if (range.size() < str.size()) {
 2236|    722|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    722|        }
 2238|    722|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    722|            return unexpected(parse_error::error);
 2240|    722|        }
 2241|    722|        return ranges::next(range.begin(), str.size());
 2242|    722|    }
 2243|    722|    else {
 2244|    722|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    722|            if (ch < 'A' || ch > 'Z') {
 2246|    722|                return ch;
 2247|    722|            }
 2248|    722|            return static_cast<char_type>(ch +
 2249|    722|                                          static_cast<char_type>('a' - 'A'));
 2250|    722|        };
 2251|       |
 2252|    722|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    722|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    722|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    722|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    722|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 74, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     74|    }                                                  \
  |  |  |  | 3671|    722|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    648|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    648|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    648|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 648, False: 0]
  |  |  ------------------
  ------------------
 2257|    648|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    648|                    return ascii_tolower(a) ==
 2259|    648|                           static_cast<detail::char_t<Range>>(b);
 2260|    648|                }))) {
 2261|    648|            return unexpected(parse_error::error);
 2262|    648|        }
 2263|       |
 2264|      0|        return it;
 2265|    648|    }
 2266|    722|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    722|{
 1857|    722|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    722|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    722|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    722|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    722|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    722|        if (sz < count) {
 1862|    722|            return unexpected(eof_error::eof);
 1863|    722|        }
 1864|       |
 1865|    722|        return ranges::next(range.begin(), count);
 1866|    722|    }
 1867|    722|    else {
 1868|    722|        auto it = range.begin();
 1869|    722|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 722]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.42k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.77k, False: 648]
  ------------------
 1874|  1.77k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 74, False: 1.70k]
  ------------------
 1875|     74|                return unexpected(eof_error::eof);
 1876|     74|            }
 1877|  1.77k|        }
 1878|       |
 1879|    648|        return it;
 1880|    722|    }
 1881|    722|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    722|{
 1095|    722|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    722|        return r.size();
 1097|    722|    }
 1098|    722|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    722|                           ranges::const_iterator_t<Range>,
 1100|    722|                           typename detail::basic_scan_buffer<
 1101|    722|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    722|        if constexpr (ranges::common_range<Range>) {
 1103|    722|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    722|        }
 1105|    722|        else {
 1106|    722|            if (r.begin().stores_parent()) {
 1107|    722|                return static_cast<size_t>(
 1108|    722|                    r.begin().parent()->chars_available() -
 1109|    722|                    r.begin().position());
 1110|    722|            }
 1111|    722|            return r.begin().contiguous_segment().size();
 1112|    722|        }
 1113|    722|    }
 1114|    722|    else {
 1115|    722|        return 0;
 1116|    722|    }
 1117|    722|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    648|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    648|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 22, False: 626]
  |  Branch (2245:29): [True: 626, False: 0]
  ------------------
 2246|    648|                return ch;
 2247|    648|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    648|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     36|{
 3258|     36|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 36]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     36|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 36]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     36|    return unexpected(parse_error::error);
 3268|     36|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     36|{
 2146|     36|    auto it = read_code_unit(range);
 2147|     36|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     36|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 2152|     36|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     36|        return unexpected(parse_error::error);
 2154|     36|    }
 2155|       |
 2156|      0|    return *it;
 2157|     36|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     36|{
 1846|     36|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     36|    return ranges::next(range.begin());
 1851|     36|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     36|{
  950|     36|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     36|    return eof_error::good;
  954|     36|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  18.9k|{
  944|  18.9k|    return is_range_eof(r.begin(), r.end());
  945|  18.9k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    162|{
 3251|    162|    return read_matching_string_classic_nocase(range, "0x");
 3252|    162|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    508|{
 3360|    508|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    508|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    508|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    508|            return unexpected_scan_error(
 3365|    508|                scan_error::invalid_scanned_value,
 3366|    508|                "Failed to parse integer: No digits found");
 3367|    508|        }
 3368|    508|        return range.end();
 3369|    508|    }
 3370|    508|    else {
 3371|    508|        return read_while1_code_unit(range,
 3372|    508|                                     [&](char_type ch) noexcept {
 3373|    508|                                         return char_to_int(ch) < base;
 3374|    508|                                     })
 3375|    508|            .transform_error(map_parse_error_to_scan_error(
 3376|    508|                scan_error::invalid_scanned_value,
 3377|    508|                "Failed to parse integer: No digits found"));
 3378|    508|    }
 3379|    508|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    682|{
 1996|    682|    auto it = read_while_code_unit(range, pred);
 1997|    682|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 682, False: 0]
  ------------------
 1998|    682|        return unexpected(parse_error::error);
 1999|    682|    }
 2000|      0|    return it;
 2001|    682|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    682|{
 1976|    682|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    682|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    682|{
 1957|    682|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    682|        return std::find_if(range.begin(), range.end(), pred);
 1959|    682|    }
 1960|    682|    else {
 1961|    682|        auto first = range.begin();
 1962|    682|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 682, False: 0]
  ------------------
 1963|    682|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 682, False: 0]
  ------------------
 1964|    682|                return first;
 1965|    682|            }
 1966|    682|        }
 1967|      0|        return first;
 1968|    682|    }
 1969|    682|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  23.8k|        {
 2781|  23.8k|            return !(y == x);
 2782|  23.8k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    508|    {
  754|    508|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    508|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    508|              cvref<T> obj = *get<T>(fn);
  745|    508|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    508|                  obj(static_cast<decltype(args)>(args)...);
  747|    508|              }
  748|    508|              else {
  749|    508|                  return obj(static_cast<decltype(args)>(args)...);
  750|    508|              }
  751|    508|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    508|    {
  684|    508|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    508|            return static_cast<T*>(s.m_cp);
  686|    508|        }
  687|    508|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    508|            return static_cast<T*>(s.m_p);
  689|    508|        }
  690|    508|        else {
  691|    508|            return reinterpret_cast<T*>(s.m_fp);
  692|    508|        }
  693|    508|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    508|                                     [&](char_type ch) noexcept {
 3373|    508|                                         return char_to_int(ch) < base;
 3374|    508|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    508|        {
  662|    508|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     12|{
 3390|     12|    std::basic_string<CharT> output;
 3391|     12|    std::string thsep_indices;
 3392|     12|    auto it = range.begin();
 3393|     12|    bool digit_matched = false;
 3394|     12|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 12, False: 0]
  ------------------
 3395|     12|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 12]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     12|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 12, False: 0]
  ------------------
 3400|     12|            break;
 3401|     12|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     12|    }
 3407|     12|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3408|     12|        return unexpected_scan_error(
 3409|     12|            scan_error::invalid_scanned_value,
 3410|     12|            "Failed to parse integer: No digits found");
 3411|     12|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     12|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  51.8k|    {
 2417|  51.8k|        return m_count;
 2418|  51.8k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    336|    {
 5699|    336|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 322, False: 14]
  ------------------
 5700|    336|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 14]
  ------------------
 5701|    322|            return read_default(range, value, loc);
 5702|    322|        }
 5703|       |
 5704|     14|        reader_impl_for_int<CharT> reader{};
 5705|     14|        using integer_type =
 5706|     14|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     14|        integer_type tmp_value{};
 5708|     14|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     14|        value = static_cast<integer_type>(value);
 5710|     14|        return ret;
 5711|    336|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    836|    {
 5683|    836|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    836|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    836|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    836|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    836|        }
 5687|    836|        else {
 5688|    836|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    836|        }
 5690|    836|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    836|    {
 5564|    836|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    836|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    836|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    836|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 836]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    836|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    836|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    836|        ch = *range.begin();
 5566|    836|        return it;
 5567|    836|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.05k|{
 1846|  6.05k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.05k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.05k|    return ranges::next(range.begin());
 1851|  6.05k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   492M|    {
  296|   492M|        ++x;
  297|   492M|        return x;
  298|   492M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    370|    {
 3539|    370|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    370|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    370|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 370]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    370|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 370]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    370|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    370|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 350, False: 20]
  |  |  ------------------
  ------------------
 3565|    350|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    350|                    parse_integer_digits_without_thsep(
 3567|    350|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    350|                        prefix_result.parsed_base));
 3569|       |
 3570|    350|            auto buf = make_contiguous_buffer(
 3571|    350|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    350|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 350, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    350|    }                                                  \
  |  |  |  | 3671|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    350|        }
 3580|       |
 3581|     20|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     20|            localized_number_formatting_options<CharT>{loc};
 3586|     20|#endif
 3587|       |
 3588|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.59k|{
 3326|  2.59k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.59k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.59k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.59k|        parse_integer_base_prefix(
 3331|  2.59k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.59k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.59k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.59k|    else {
 3343|  2.59k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.59k]
  ------------------
 3344|  2.59k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.59k, False: 0]
  ------------------
 3345|  2.59k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.59k|        }
 3347|  2.59k|    }
 3348|       |
 3349|  2.59k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.59k, False: 0]
  ------------------
 3350|  2.59k|        sign = sign_type::plus_sign;
 3351|  2.59k|    }
 3352|  2.59k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.59k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.59k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.45k|{
 3141|  3.45k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.45k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.45k, False: 0]
  ------------------
 3143|  3.45k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.45k, False: 0]
  ------------------
 3144|  3.45k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.45k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.45k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.45k|{
 2272|  3.45k|    auto it = read_code_unit(range);
 2273|  3.45k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  6.90k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.90k, False: 3.45k]
  ------------------
 2278|  6.90k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 6.90k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  6.90k|    }
 2282|       |
 2283|  3.45k|    return unexpected(parse_error::error);
 2284|  3.45k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.59k|{
 3293|  2.59k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.58k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 2.58k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    864|        case 16:
  ------------------
  |  Branch (3307:9): [True: 864, False: 1.72k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    864|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    864|                    false};
 3311|       |
 3312|     10|        case 0:
  ------------------
  |  Branch (3312:9): [True: 10, False: 2.58k]
  ------------------
 3313|       |            // detect base
 3314|     10|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.70k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.70k, False: 890]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.70k|            return {range.begin(), base, false};
 3319|  2.59k|    }
 3320|  2.59k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    880|{
 2291|    880|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 880, False: 0]
  ------------------
 2292|    880|        return range.begin();
 2293|    880|    }
 2294|      0|    return *result;
 2295|    880|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     16|{
 3244|     16|    return read_matching_string_classic_nocase(range, "0b");
 3245|     16|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.47k|{
 2231|  3.47k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.47k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.47k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.47k|        if (range.size() < str.size()) {
 2236|  3.47k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.47k|        }
 2238|  3.47k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.47k|            return unexpected(parse_error::error);
 2240|  3.47k|        }
 2241|  3.47k|        return ranges::next(range.begin(), str.size());
 2242|  3.47k|    }
 2243|  3.47k|    else {
 2244|  3.47k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.47k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.47k|                return ch;
 2247|  3.47k|            }
 2248|  3.47k|            return static_cast<char_type>(ch +
 2249|  3.47k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.47k|        };
 2251|       |
 2252|  3.47k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  3.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.47k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.47k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.47k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.47k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.47k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.47k|                    return ascii_tolower(a) ==
 2259|  3.47k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.47k|                }))) {
 2261|  3.47k|            return unexpected(parse_error::error);
 2262|  3.47k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.47k|    }
 2266|  3.47k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.47k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.47k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 14, False: 3.45k]
  |  Branch (2245:29): [True: 3.45k, False: 0]
  ------------------
 2246|  3.47k|                return ch;
 2247|  3.47k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.47k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.76k|{
 2146|  1.76k|    auto it = read_code_unit(range);
 2147|  1.76k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.76k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.76k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.76k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.76k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.76k|        return unexpected(parse_error::error);
 2154|  1.76k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.76k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    874|{
 3251|    874|    return read_matching_string_classic_nocase(range, "0x");
 3252|    874|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     10|{
 3274|     10|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 10]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     10|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 10]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     10|    {
 3281|     10|        bool zero_parsed{false};
 3282|     10|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 10]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     10|    }
 3286|     10|    return {range.begin(), 10, false};
 3287|     10|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.55k|{
 3360|  2.55k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.55k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.55k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.55k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.55k|        return range.end();
 3369|  2.55k|    }
 3370|  2.55k|    else {
 3371|  2.55k|        return read_while1_code_unit(range,
 3372|  2.55k|                                     [&](char_type ch) noexcept {
 3373|  2.55k|                                         return char_to_int(ch) < base;
 3374|  2.55k|                                     })
 3375|  2.55k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.55k|                scan_error::invalid_scanned_value,
 3377|  2.55k|                "Failed to parse integer: No digits found"));
 3378|  2.55k|    }
 3379|  2.55k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     40|{
 3390|     40|    std::basic_string<CharT> output;
 3391|     40|    std::string thsep_indices;
 3392|     40|    auto it = range.begin();
 3393|     40|    bool digit_matched = false;
 3394|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 40, False: 0]
  ------------------
 3395|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 40]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 40, False: 0]
  ------------------
 3400|     40|            break;
 3401|     40|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     40|    }
 3407|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3408|     40|        return unexpected_scan_error(
 3409|     40|            scan_error::invalid_scanned_value,
 3410|     40|            "Failed to parse integer: No digits found");
 3411|     40|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     40|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  10.6k|{
 1683|  10.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  10.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  10.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  10.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  10.6k|    }
 1688|  10.6k|    else {
 1689|  10.6k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  10.6k|    }
 1691|  10.6k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  10.6k|    {
 1490|  10.6k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  12.3k|    {
 1503|  12.3k|        return sv;
 1504|  12.3k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    354|{
 5951|    354|    using char_type = detail::char_t<Range>;
 5952|    354|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    354|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 354, False: 0]
  ------------------
 5955|    354|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    354|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    354|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 304, False: 50]
  ------------------
 5959|    304|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    304|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 262]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    262|            return result_type{it, 0};
 5969|    304|        }
 5970|       |
 5971|     50|        auto max_width_view = take_width(range, max_width);
 5972|     50|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     50|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 50, False: 0]
  ------------------
 5975|     50|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     50|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     50|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    426|{
 1976|    426|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    426|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    516|{
 1957|    516|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    516|        return std::find_if(range.begin(), range.end(), pred);
 1959|    516|    }
 1960|    516|    else {
 1961|    516|        auto first = range.begin();
 1962|    516|        for (; first != range.end(); ++first) {
 1963|    516|            if (pred(*first)) {
 1964|    516|                return first;
 1965|    516|            }
 1966|    516|        }
 1967|    516|        return first;
 1968|    516|    }
 1969|    516|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    354|    {
  754|    354|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    460|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    460|              cvref<T> obj = *get<T>(fn);
  745|    460|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    460|                  obj(static_cast<decltype(args)>(args)...);
  747|    460|              }
  748|    460|              else {
  749|    460|                  return obj(static_cast<decltype(args)>(args)...);
  750|    460|              }
  751|    460|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    460|    {
  684|    460|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    460|            return static_cast<T*>(s.m_cp);
  686|    460|        }
  687|    460|        else if constexpr (std::is_object_v<T>) {
  688|    460|            return static_cast<T*>(s.m_p);
  689|    460|        }
  690|    460|        else {
  691|    460|            return reinterpret_cast<T*>(s.m_fp);
  692|    460|        }
  693|    460|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    460|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    354|        {
  667|    354|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     50|{
 1976|     50|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     50|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    110|{
 1957|    110|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    110|        return std::find_if(range.begin(), range.end(), pred);
 1959|    110|    }
 1960|    110|    else {
 1961|    110|        auto first = range.begin();
 1962|    834|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 772, False: 62]
  ------------------
 1963|    772|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 48, False: 724]
  ------------------
 1964|     48|                return first;
 1965|     48|            }
 1966|    772|        }
 1967|     62|        return first;
 1968|    110|    }
 1969|    110|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    118|{
 2951|    118|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 118]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    118|    return read_while_classic_space(range);
 2962|    118|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    118|{
 2117|    118|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    118|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    118|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    118|        auto buf = make_contiguous_buffer(range);
 2121|    118|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    118|        return ranges::next(range.begin(),
 2123|    118|                            ranges::distance(buf.view().begin(), it));
 2124|    118|    }
 2125|    118|    else {
 2126|    118|        auto it = range.begin();
 2127|       |
 2128|    118|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    118|            auto seg = get_contiguous_beginning(range);
 2130|    118|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    118|                seg_it != seg.end()) {
 2132|    118|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    118|            }
 2134|    118|            ranges::advance(it, seg.size());
 2135|    118|        }
 2136|       |
 2137|    118|        return read_while_code_point(
 2138|    118|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    118|    }
 2140|    118|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    118|{
 2082|    118|    return read_until_code_point(range, std::not_fn(pred));
 2083|    118|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    118|{
 2061|    118|    auto it = range.begin();
 2062|    118|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 118, False: 0]
  ------------------
 2063|    118|        const auto val =
 2064|    118|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    118|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    118|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 118, False: 0]
  |  |  ------------------
  ------------------
 2066|    118|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    118|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    118|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 118, False: 0]
  ------------------
 2069|    118|                return it;
 2070|    118|            }
 2071|    118|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    118|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  18.9k|{
 1899|  18.9k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  18.9k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  18.9k|    auto it = range.begin();
 1903|  18.9k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  18.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.9k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  18.9k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 18.9k, False: 0]
  ------------------
 1912|  18.9k|        ++it;
 1913|  18.9k|        return {it, string_type(1, *range.begin())};
 1914|  18.9k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  18.9k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    118|    {
  754|    118|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    118|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    118|              cvref<T> obj = *get<T>(fn);
  745|    118|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    118|                  obj(static_cast<decltype(args)>(args)...);
  747|    118|              }
  748|    118|              else {
  749|    118|                  return obj(static_cast<decltype(args)>(args)...);
  750|    118|              }
  751|    118|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    118|    {
  684|    118|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    118|            return static_cast<T*>(s.m_cp);
  686|    118|        }
  687|    118|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    118|            return static_cast<T*>(s.m_p);
  689|    118|        }
  690|    118|        else {
  691|    118|            return reinterpret_cast<T*>(s.m_fp);
  692|    118|        }
  693|    118|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    118|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    118|        {
  662|    118|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.15k|{
 2951|  7.15k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.58k, False: 576]
  ------------------
 2952|  6.58k|        auto it = read_while_classic_space(range);
 2953|  6.58k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.58k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.58k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.58k|        return it;
 2959|  6.58k|    }
 2960|       |
 2961|    576|    return read_while_classic_space(range);
 2962|  7.15k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  20.0k|{
 2117|  20.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  20.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  20.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  20.0k|        auto buf = make_contiguous_buffer(range);
 2121|  20.0k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  20.0k|        return ranges::next(range.begin(),
 2123|  20.0k|                            ranges::distance(buf.view().begin(), it));
 2124|  20.0k|    }
 2125|  20.0k|    else {
 2126|  20.0k|        auto it = range.begin();
 2127|       |
 2128|  20.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  20.0k|            auto seg = get_contiguous_beginning(range);
 2130|  20.0k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  20.0k|                seg_it != seg.end()) {
 2132|  20.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  20.0k|            }
 2134|  20.0k|            ranges::advance(it, seg.size());
 2135|  20.0k|        }
 2136|       |
 2137|  20.0k|        return read_while_code_point(
 2138|  20.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  20.0k|    }
 2140|  20.0k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  20.3k|{
 2082|  20.3k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  20.3k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  22.8k|{
 2061|  22.8k|    auto it = range.begin();
 2062|  57.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 55.1k, False: 2.78k]
  ------------------
 2063|  55.1k|        const auto val =
 2064|  55.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  55.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  55.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 55.1k, False: 0]
  |  |  ------------------
  ------------------
 2066|  55.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  55.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  55.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 20.0k, False: 35.0k]
  ------------------
 2069|  20.0k|                return it;
 2070|  20.0k|            }
 2071|  55.1k|        }
 2072|  35.0k|        it = val.iterator;
 2073|  35.0k|    }
 2074|       |
 2075|  2.78k|    return it;
 2076|  22.8k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  20.0k|    {
  754|  20.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  21.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.8k|              cvref<T> obj = *get<T>(fn);
  745|  21.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.8k|              }
  748|  21.8k|              else {
  749|  21.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.8k|              }
  751|  21.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  21.8k|    {
  684|  21.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.8k|            return static_cast<T*>(s.m_cp);
  686|  21.8k|        }
  687|  21.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.8k|            return static_cast<T*>(s.m_p);
  689|  21.8k|        }
  690|  21.8k|        else {
  691|  21.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.8k|        }
  693|  21.8k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  21.8k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  20.0k|        {
  662|  20.0k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.82k|    {
 3040|  7.82k|        reader_error_handler eh{};
 3041|  7.82k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.82k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.75k, False: 1.06k]
  |  |  ------------------
  ------------------
 3043|  6.75k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.75k|        }
 3045|  1.06k|        return {};
 3046|  7.82k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  7.82k|    {
 3051|  7.82k|        return static_cast<Derived&>(*this);
 3052|  7.82k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  7.82k|    {
 3485|  7.82k|        detail::check_int_type_specs(specs, eh);
 3486|  7.82k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.09k|    {
 3035|  2.09k|        return true;
 3036|  2.09k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    174|    {
 3539|    174|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    174|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    174|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 174]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    174|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 174]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    174|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    174|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 168, False: 6]
  |  |  ------------------
  ------------------
 3565|    168|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    168|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      6|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      6|            localized_number_formatting_options<CharT>{loc};
 3586|      6|#endif
 3587|       |
 3588|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    356|    {
 3539|    356|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    356|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    356|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 356]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    356|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 356]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    356|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    356|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 336, False: 20]
  |  |  ------------------
  ------------------
 3565|    336|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    336|                    parse_integer_digits_without_thsep(
 3567|    336|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    336|                        prefix_result.parsed_base));
 3569|       |
 3570|    336|            auto buf = make_contiguous_buffer(
 3571|    336|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    336|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 336, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    336|    }                                                  \
  |  |  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    336|        }
 3580|       |
 3581|     20|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     20|            localized_number_formatting_options<CharT>{loc};
 3586|     20|#endif
 3587|       |
 3588|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    144|    {
 3539|    144|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    144|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    144|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 144]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    144|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 144]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    144|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    144|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 144, False: 0]
  |  |  ------------------
  ------------------
 3565|    144|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    144|    }                                                  \
  |  |  |  | 3671|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    838|    {
 3539|    838|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    838|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    838|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    838|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 838]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    838|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    838|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    838|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    838|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 838]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    838|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 838]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    838|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    838|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 838, False: 0]
  |  |  ------------------
  ------------------
 3565|    838|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    838|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    838|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    838|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 838]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    838|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    838|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    838|                    parse_integer_digits_without_thsep(
 3567|    838|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    838|                        prefix_result.parsed_base));
 3569|       |
 3570|    838|            auto buf = make_contiguous_buffer(
 3571|    838|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    838|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    838|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    838|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    838|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 838, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    838|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    838|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    838|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    838|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    838|    }                                                  \
  |  |  |  | 3671|    838|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    838|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.91k|    {
 3040|  3.91k|        reader_error_handler eh{};
 3041|  3.91k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.91k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.39k, False: 520]
  |  |  ------------------
  ------------------
 3043|  3.39k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  3.39k|        }
 3045|    520|        return {};
 3046|  3.91k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  3.91k|    {
 3051|  3.91k|        return static_cast<Derived&>(*this);
 3052|  3.91k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.91k|    {
 4145|  3.91k|        detail::check_float_type_specs(specs, eh);
 4146|  3.91k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.03k|    {
 3035|  1.03k|        return true;
 3036|  1.03k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    518|    {
 4217|    518|        unsigned options{};
 4218|    518|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 12, False: 506]
  ------------------
 4219|     12|            options |= float_reader_base::allow_thsep;
 4220|     12|        }
 4221|       |
 4222|    518|        SCN_GCC_COMPAT_PUSH
 4223|    518|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    518|        switch (specs.type) {
 4226|     12|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 12, False: 506]
  ------------------
 4227|     12|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     12|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 12, False: 506]
  ------------------
 4230|     12|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     24|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 24, False: 494]
  ------------------
 4233|     24|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 518]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    470|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 470, False: 48]
  ------------------
 4240|    470|                return options | float_reader_base::allow_scientific |
 4241|    470|                       float_reader_base::allow_fixed |
 4242|    470|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 518]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    518|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    518|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    518|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    518|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.03k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.06k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    850|    {
 4057|    850|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 850, False: 0]
  ------------------
 4058|    850|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 850, False: 0]
  ------------------
 4059|    850|            return;
 4060|    850|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    156|    {
 1587|    156|        return m_storage.has_value();
 1588|    156|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     78|    {
 1592|     78|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     78|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     78|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     78|        return *m_storage;
 1594|     78|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    174|    {
  763|    174|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    174|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    174|    {
 3705|    174|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    174|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    174|        auto it = sign_result.first;
 3708|    174|        m_sign = sign_result.second;
 3709|       |
 3710|    174|        auto digits_begin = it;
 3711|    174|        auto r = ranges::subrange{it, range.end()};
 3712|    174|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    174|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    174|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    174|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    174|                SCN_TRY_ASSIGN(
 3717|    174|                    it,
 3718|    174|                    do_read_source_impl(
 3719|    174|                        r,
 3720|    174|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    174|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    174|            }
 3723|    174|            else {
 3724|    174|                auto cb = [&](const auto& rr)
 3725|    174|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    174|                    auto res = read_all(rr);
 3727|    174|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    174|                        return unexpected_scan_error(
 3729|    174|                            scan_error::invalid_scanned_value,
 3730|    174|                            "Invalid float value");
 3731|    174|                    }
 3732|    174|                    return res;
 3733|    174|                };
 3734|    174|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    174|            }
 3736|    174|        }
 3737|    174|        else {
 3738|    174|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 174, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    174|    }                                                  \
  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    174|    {
 4000|    174|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    174|        const bool allowed_nonhex =
 4002|    174|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    174|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    174|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 174, False: 0]
  |  Branch (4005:45): [True: 0, False: 174]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    174|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 174]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    174|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 174, False: 0]
  |  Branch (4014:45): [True: 0, False: 174]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    174|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 174]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    174|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 158, False: 16]
  |  Branch (4021:28): [True: 12, False: 146]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    162|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 146]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    146|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    146|        m_kind = float_kind::generic;
 4052|    146|        return read_regular(range);
 4053|    146|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    174|    {
 3811|    174|        auto it = range.begin();
 3812|    174|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 174, False: 0]
  ------------------
 3813|    174|            return unexpected(r.error());
 3814|    174|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    174|    {
 3834|    174|        auto it = range.begin();
 3835|    174|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 174, False: 0]
  ------------------
 3836|    174|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    174|                scan_error::invalid_scanned_value,
 3838|    174|                "Invalid floating-point NaN value"));
 3839|    174|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    158|    {
 3804|    158|        return read_matching_string_classic_nocase(range, "0x");
 3805|    158|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     12|    {
 3904|     12|        auto it = range.begin();
 3905|       |
 3906|     12|        std::ptrdiff_t digits_count = 0;
 3907|     12|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     12|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3909|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     12|                scan_error::invalid_scanned_value,
 3911|     12|                "Invalid hexadecimal floating-point value"));
 3912|     12|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     12|    {
 3789|     12|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     12|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     12|        return read_while1_code_unit(
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     12|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    162|    {
 3944|    162|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    162|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 156, False: 6]
  |  Branch (3945:50): [True: 10, False: 146]
  ------------------
 3946|       |
 3947|    162|        auto it = ranges::begin(range);
 3948|    162|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    162|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    162|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  ------------------
  ------------------
 3952|    162|            return r.transform_error(
 3953|    162|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    162|                                              "Invalid floating-point value"));
 3955|    162|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    162|    {
 3774|    162|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  Branch (859:45): [True: 0, False: 162]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    162|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    162|        return read_while1_code_unit(
 3783|    162|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    162|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    162|    {
  754|    162|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    162|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    162|              cvref<T> obj = *get<T>(fn);
  745|    162|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    162|                  obj(static_cast<decltype(args)>(args)...);
  747|    162|              }
  748|    162|              else {
  749|    162|                  return obj(static_cast<decltype(args)>(args)...);
  750|    162|              }
  751|    162|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    162|    {
  684|    162|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    162|            return static_cast<T*>(s.m_cp);
  686|    162|        }
  687|    162|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    162|            return static_cast<T*>(s.m_p);
  689|    162|        }
  690|    162|        else {
  691|    162|            return reinterpret_cast<T*>(s.m_fp);
  692|    162|        }
  693|    162|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    162|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    162|        {
  662|    162|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    168|    {
 3665|    168|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    168|        return read_source_impl(range);
 3671|    168|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    858|    {
  763|    858|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    858|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    858|    {
 3705|    858|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    858|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    858|        auto it = sign_result.first;
 3708|    858|        m_sign = sign_result.second;
 3709|       |
 3710|    858|        auto digits_begin = it;
 3711|    858|        auto r = ranges::subrange{it, range.end()};
 3712|    858|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    858|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    858|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 858]
  |  |  |  Branch (859:45): [True: 0, False: 858]
  |  |  |  Branch (859:45): [True: 0, False: 858]
  |  |  ------------------
  ------------------
 3715|    858|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    858|            else {
 3724|    858|                auto cb = [&](const auto& rr)
 3725|    858|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    858|                    auto res = read_all(rr);
 3727|    858|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    858|                        return unexpected_scan_error(
 3729|    858|                            scan_error::invalid_scanned_value,
 3730|    858|                            "Invalid float value");
 3731|    858|                    }
 3732|    858|                    return res;
 3733|    858|                };
 3734|    858|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 850]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      8|    }                                                  \
  |  | 3671|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    850|            }
 3736|    858|        }
 3737|    850|        else {
 3738|    850|            SCN_TRY_ASSIGN(
 3739|    850|                it,
 3740|    850|                do_read_source_impl(
 3741|    850|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    850|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    850|        }
 3744|       |
 3745|    850|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    850|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 850, False: 0]
  |  Branch (3747:48): [True: 850, False: 0]
  ------------------
 3748|    850|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 850, False: 0]
  ------------------
 3749|    850|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 850, False: 0]
  ------------------
 3750|    850|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    850|        }
 3752|       |
 3753|    850|        handle_separators();
 3754|       |
 3755|    850|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 850]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    850|        return it;
 3768|    850|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    858|    {
 3811|    858|        auto it = range.begin();
 3812|    858|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 858, False: 0]
  ------------------
 3813|    858|            return unexpected(r.error());
 3814|    858|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    858|    {
 3834|    858|        auto it = range.begin();
 3835|    858|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 858, False: 0]
  ------------------
 3836|    858|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    858|                scan_error::invalid_scanned_value,
 3838|    858|                "Invalid floating-point NaN value"));
 3839|    858|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    850|    {
 3804|    850|        return read_matching_string_classic_nocase(range, "0x");
 3805|    850|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      8|{
 1996|      8|    auto it = read_while_code_unit(range, pred);
 1997|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 8, False: 0]
  ------------------
 1998|      8|        return unexpected(parse_error::error);
 1999|      8|    }
 2000|      0|    return it;
 2001|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      8|    {
 3944|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 6]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      8|        auto it = ranges::begin(range);
 3948|      8|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3952|      8|            return r.transform_error(
 3953|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      8|                                              "Invalid floating-point value"));
 3955|      8|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      8|    {
 3774|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      8|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      8|        return read_while1_code_unit(
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    858|    {
 4000|    858|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    858|        const bool allowed_nonhex =
 4002|    858|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    858|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    858|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 858, False: 0]
  |  Branch (4005:45): [True: 0, False: 858]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    858|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 858]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    858|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 858, False: 0]
  |  Branch (4014:45): [True: 0, False: 858]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    858|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 858]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    858|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 850, False: 8]
  |  Branch (4021:28): [True: 12, False: 838]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    846|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 838]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    838|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 838]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    838|        m_kind = float_kind::generic;
 4052|    838|        return read_regular(range);
 4053|    838|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    850|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    850|                    auto res = read_all(rr);
 3727|    850|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 850]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    850|                    return res;
 3733|    850|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    850|{
 1839|    850|    return ranges::next(range.begin(), range.end());
 1840|    850|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    850|    {
  313|    850|        ranges::advance(x, bound);
  314|    850|        return x;
  315|    850|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    850|    {
  275|    850|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    850|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    850|    {
 1577|    850|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    850|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    850|    {
 1621|    850|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    850|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    850|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    850|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    850|            m_storage.reset();
 1627|    850|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    850|        }
 1629|    850|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    850|                                          std::basic_string<CharT>>) {
 1631|    850|            m_storage.emplace(SCN_FWD(range));
 1632|    850|            m_view = string_view_type{*m_storage};
 1633|    850|        }
 1634|    850|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    850|                                          typename detail::basic_scan_buffer<
 1636|    850|                                              value_t>::forward_iterator> &&
 1637|    850|                           ranges::common_range<Range>) {
 1638|    850|            auto beg_seg = range.begin().contiguous_segment();
 1639|    850|            auto end_seg = range.end().contiguous_segment();
 1640|    850|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    850|                             detail::to_address(end_seg.end()))) {
 1642|    850|                auto& str = m_storage.emplace();
 1643|    850|                str.reserve(range.end().position() - range.begin().position());
 1644|    850|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    850|                m_view = string_view_type{str};
 1646|    850|                return;
 1647|    850|            }
 1648|       |
 1649|    850|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    850|                                                            end_seg.data());
 1651|    850|            m_storage.reset();
 1652|    850|        }
 1653|    850|        else {
 1654|    850|            auto& str = m_storage.emplace();
 1655|    850|            if constexpr (ranges::sized_range<Range>) {
 1656|    850|                str.reserve(range.size());
 1657|    850|            }
 1658|    850|            if constexpr (ranges::common_range<Range>) {
 1659|    850|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    850|                          std::back_inserter(str));
 1661|    850|            }
 1662|    850|            else {
 1663|    850|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    850|                     ++it) {
 1665|    850|                    str.push_back(*it);
 1666|    850|                }
 1667|    850|            }
 1668|    850|            m_view = string_view_type{str};
 1669|    850|        }
 1670|    850|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    852|    {
 3665|    852|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 852]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    852|        return read_source_impl(range);
 3671|    852|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    850|    {
 3691|    850|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    850|        const std::ptrdiff_t sign_len =
 3694|    850|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 850]
  ------------------
 3695|       |
 3696|    850|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 850, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    850|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    850|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    850|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    850|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    850|    }                                                  \
  |  |  |  | 3671|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    850|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    174|    {
 4170|    174|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    174|#if !SCN_DISABLE_LOCALE
 4173|    174|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 168]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|    168|#endif
 4182|       |
 4183|    168|        return read_impl<Range>(
 4184|    168|            range, rd,
 4185|    168|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    168|                return r.read_source(SCN_FWD(args)...);
 4187|    168|            },
 4188|    168|            value);
 4189|    174|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    174|    {
 4206|    174|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    174|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 0]
  |  |  ------------------
  ------------------
 4208|    174|            return unexpected(r.error());
 4209|    174|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    168|    {
  754|    168|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    168|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    168|              cvref<T> obj = *get<T>(fn);
  745|    168|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    168|                  obj(static_cast<decltype(args)>(args)...);
  747|    168|              }
  748|    168|              else {
  749|    168|                  return obj(static_cast<decltype(args)>(args)...);
  750|    168|              }
  751|    168|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    168|    {
  684|    168|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    168|            return static_cast<T*>(s.m_cp);
  686|    168|        }
  687|    168|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    168|            return static_cast<T*>(s.m_p);
  689|    168|        }
  690|    168|        else {
  691|    168|            return reinterpret_cast<T*>(s.m_fp);
  692|    168|        }
  693|    168|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    168|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    168|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    168|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    168|        {
  662|    168|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    344|    {
 4170|    344|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    344|#if !SCN_DISABLE_LOCALE
 4173|    344|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 338]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|    338|#endif
 4182|       |
 4183|    338|        return read_impl<Range>(
 4184|    338|            range, rd,
 4185|    338|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    338|                return r.read_source(SCN_FWD(args)...);
 4187|    338|            },
 4188|    338|            value);
 4189|    344|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    858|    {
 4206|    858|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    858|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 850]
  |  |  ------------------
  ------------------
 4208|      8|            return unexpected(r.error());
 4209|      8|        }
 4210|       |
 4211|    850|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 850, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    850|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    850|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    850|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    850|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    850|    }                                                  \
  |  |  |  | 3671|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    850|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    338|    {
  754|    338|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    338|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    338|              cvref<T> obj = *get<T>(fn);
  745|    338|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    338|                  obj(static_cast<decltype(args)>(args)...);
  747|    338|              }
  748|    338|              else {
  749|    338|                  return obj(static_cast<decltype(args)>(args)...);
  750|    338|              }
  751|    338|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    338|    {
  684|    338|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    338|            return static_cast<T*>(s.m_cp);
  686|    338|        }
  687|    338|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    338|            return static_cast<T*>(s.m_p);
  689|    338|        }
  690|    338|        else {
  691|    338|            return reinterpret_cast<T*>(s.m_fp);
  692|    338|        }
  693|    338|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    338|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    338|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    338|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    338|        {
  662|    338|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  4.39k|{
 5809|  4.39k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  4.39k|        return reader_impl_for_bool<CharT>{};
 5811|  4.39k|    }
 5812|  4.39k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  4.39k|        return reader_impl_for_char<CharT>{};
 5814|  4.39k|    }
 5815|  4.39k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  4.39k|        return reader_impl_for_wchar<CharT>{};
 5817|  4.39k|    }
 5818|  4.39k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  4.39k|        return reader_impl_for_code_point<CharT>{};
 5820|  4.39k|    }
 5821|  4.39k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  4.39k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  4.39k|        return reader_impl_for_string<CharT>{};
 5824|  4.39k|    }
 5825|  4.39k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  4.39k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  4.39k|        return reader_impl_for_string<CharT>{};
 5828|  4.39k|    }
 5829|  4.39k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  4.39k|                       std::is_same_v<T, wregex_matches>) {
 5831|  4.39k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  4.39k|    }
 5833|  4.39k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  4.39k|        return reader_impl_for_voidptr<CharT>{};
 5835|  4.39k|    }
 5836|  4.39k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  4.39k|        return reader_impl_for_float<CharT>{};
 5838|  4.39k|    }
 5839|  4.39k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  4.39k|                       !std::is_same_v<T, wchar_t> &&
 5841|  4.39k|                       !std::is_same_v<T, char32_t> &&
 5842|  4.39k|                       !std::is_same_v<T, bool>) {
 5843|  4.39k|        return reader_impl_for_int<CharT>{};
 5844|  4.39k|    }
 5845|  4.39k|    else {
 5846|  4.39k|        return reader_impl_for_monostate<CharT>{};
 5847|  4.39k|    }
 5848|  4.39k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  13.1k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  11.6k|    {
 3040|  11.6k|        reader_error_handler eh{};
 3041|  11.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  11.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282, False: 11.3k]
  |  |  ------------------
  ------------------
 3043|    282|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    282|        }
 3045|  11.3k|        return {};
 3046|  11.6k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  11.6k|    {
 3051|  11.6k|        return static_cast<Derived&>(*this);
 3052|  11.6k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  11.6k|    {
 5210|  11.6k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  11.6k|        SCN_GCC_PUSH
 5213|  11.6k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  11.6k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  11.6k|        SCN_CLANG_PUSH
 5217|  11.6k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  11.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  11.6k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 276, False: 11.3k]
  ------------------
 5221|  1.39k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.39k, False: 10.2k]
  ------------------
 5222|  1.39k|                m_type = reader_type::word;
 5223|  1.39k|                break;
 5224|       |
 5225|    198|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 198, False: 11.4k]
  ------------------
 5226|    198|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 66, False: 132]
  ------------------
 5227|    198|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 84, False: 48]
  ------------------
 5228|    150|                    m_type = reader_type::custom_word;
 5229|    150|                }
 5230|     48|                else {
 5231|     48|                    m_type = reader_type::word;
 5232|     48|                }
 5233|    198|                break;
 5234|      0|            }
 5235|       |
 5236|     66|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 66, False: 11.5k]
  ------------------
 5237|     66|                m_type = reader_type::character;
 5238|     66|                break;
 5239|       |
 5240|    396|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 396, False: 11.2k]
  ------------------
 5241|    396|                m_type = reader_type::character_set;
 5242|    396|                break;
 5243|       |
 5244|  9.10k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.10k, False: 2.52k]
  ------------------
 5245|  9.10k|                m_type = reader_type::regex;
 5246|  9.10k|                break;
 5247|       |
 5248|    192|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 192, False: 11.4k]
  ------------------
 5249|    192|                m_type = reader_type::regex_escaped;
 5250|    192|                break;
 5251|  11.6k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  11.6k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  14.0k|    {
 5259|  14.0k|        return m_type == reader_type::word;
 5260|  14.0k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  5.52k|{
 1132|  5.52k|    auto it = src.begin();
 1133|  44.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 41.1k, False: 3.68k]
  ------------------
 1134|  41.1k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  41.1k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 41.1k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  41.1k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 41.1k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  41.1k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  41.1k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  41.1k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.83k, False: 39.3k]
  ------------------
 1144|  1.83k|            return false;
 1145|  1.83k|        }
 1146|  39.3k|        it += len;
 1147|  39.3k|    }
 1148|  3.68k|    return true;
 1149|  5.52k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     78|{
 2993|     78|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     78|        if (source.stores_allocated_string()) {
 2995|     78|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     78|        }
 2997|     78|        else {
 2998|     78|            dest.assign(source.view());
 2999|     78|        }
 3000|     78|    }
 3001|     78|    else {
 3002|     78|        return transcode_impl(source.view(), dest);
 3003|     78|    }
 3004|       |
 3005|      0|    return {};
 3006|     78|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    922|{
 2968|    922|    dst.clear();
 2969|    922|    transcode_valid_to_string(src, dst);
 2970|    922|    return {};
 2971|    922|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    922|{
 1403|    922|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    922|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    922|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    922|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    922|            std::u32string tmp;
 1410|    922|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    922|            return transcode_to_string_impl_32to16<true>(
 1412|    922|                std::u32string_view{tmp}, dest);
 1413|    922|        }
 1414|    922|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    922|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    922|        }
 1417|    922|    }
 1418|    922|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    922|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    922|            std::u32string tmp;
 1421|    922|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    922|            return transcode_to_string_impl_32to8<true>(
 1423|    922|                std::u32string_view{tmp}, dest);
 1424|    922|        }
 1425|    922|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    922|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    922|        }
 1428|    922|    }
 1429|    922|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    922|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    922|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    922|        }
 1433|    922|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    922|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    922|        }
 1436|    922|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    922|{
 1294|    922|    static_assert(sizeof(SourceCharT) == 4);
 1295|    922|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  7.16k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 7.16k, False: 922]
  ------------------
 1298|  7.16k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  7.16k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  7.16k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 6.13k, False: 1.02k]
  ------------------
 1306|  6.13k|            dest.push_back(static_cast<char>(cp));
 1307|  6.13k|        }
 1308|  1.02k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 196, False: 832]
  ------------------
 1309|    196|            dest.push_back(
 1310|    196|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    196|            dest.push_back(
 1312|    196|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    196|        }
 1314|    832|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 378, False: 454]
  ------------------
 1315|    378|            dest.push_back(
 1316|    378|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    378|            dest.push_back(static_cast<char>(
 1318|    378|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    378|            dest.push_back(
 1320|    378|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    378|        }
 1322|    454|        else {
 1323|    454|            dest.push_back(
 1324|    454|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    454|            dest.push_back(static_cast<char>(
 1326|    454|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    454|            dest.push_back(static_cast<char>(
 1328|    454|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    454|            dest.push_back(
 1330|    454|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    454|        }
 1332|  7.16k|    }
 1333|    922|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    396|        {
 5103|    396|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 114, False: 282]
  ------------------
 5104|    114|                return {};
 5105|    114|            }
 5106|       |
 5107|    282|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    282|            auto it = detail::to_address(charset_string.begin());
 5109|    282|            auto set = detail::parse_presentation_set(
 5110|    282|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    282|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    282|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    282|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    282|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    282|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    282|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    282|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    282|            std::sort(nonascii.extra_ranges.begin(),
 5118|    282|                      nonascii.extra_ranges.end());
 5119|    282|            return {};
 5120|    282|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  5.63k|        {
 5138|  5.63k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 708, False: 4.92k]
  ------------------
 5139|    708|                return helper.is_char_set_in_extra_literals(cp);
 5140|    708|            }
 5141|       |
 5142|  4.92k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  5.63k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|    708|        {
 5086|       |            // TODO: binary search?
 5087|    708|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 708]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|    708|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|    708|            return std::find_if(
 5093|    708|                       nonascii.extra_ranges.begin(),
 5094|    708|                       nonascii.extra_ranges.end(),
 5095|    708|                       [cp_val](const auto& pair) noexcept {
 5096|    708|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|    708|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|    708|                       }) != nonascii.extra_ranges.end();
 5099|    708|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  2.38k|                       [cp_val](const auto& pair) noexcept {
 5096|  2.38k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 2.38k, False: 0]
  ------------------
 5097|  2.38k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 708, False: 1.68k]
  ------------------
 5098|  2.38k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  5.97k|        {
 5076|  5.97k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  5.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  5.97k|            const auto val =
 5078|  5.97k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  5.97k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  5.97k|                    (val % 8)) &
 5081|  5.97k|                   1u;
 5082|  5.97k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  1.04k|        {
 5129|  1.04k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 0, False: 1.04k]
  ------------------
 5130|      0|                return false;
 5131|      0|            }
 5132|       |
 5133|  1.04k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  1.04k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    396|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    198|    {
 5277|    198|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    198|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    198|        return read_impl(range, specs, value);
 5279|    198|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    198|    {
 5295|    198|        SCN_CLANG_PUSH
 5296|    198|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    198|        switch (m_type) {
 5299|    144|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 144, False: 54]
  ------------------
 5300|    144|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 178]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     20|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 20, False: 178]
  ------------------
 5307|     20|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 198]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 188]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 194]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 198]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    198|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    198|        }
 5331|       |
 5332|    198|        SCN_CLANG_POP
 5333|    198|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    144|    {
 4820|    144|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    144|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    184|{
 4752|    184|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    184|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    184|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 106, False: 78]
  ------------------
 4756|    106|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    106|                                     "Invalid encoding in scanned string");
 4758|    106|    }
 4759|     78|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     78|    static_cast<    \
  |  |  929|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     78|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     78|    return SCN_MOVE(result);
  ------------------
  |  |  928|     78|    static_cast<    \
  |  |  929|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     78|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    432|{
 2088|    432|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    432|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    432|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    432|        auto buf = make_contiguous_buffer(range);
 2092|    432|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    432|        return ranges::next(range.begin(),
 2094|    432|                            ranges::distance(buf.view().begin(), it));
 2095|    432|    }
 2096|    432|    else {
 2097|    432|        auto it = range.begin();
 2098|       |
 2099|    432|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    432|            auto seg = get_contiguous_beginning(range);
 2101|    432|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    432|                seg_it != seg.end()) {
 2103|    432|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    432|            }
 2105|    432|            ranges::advance(it, seg.size());
 2106|    432|        }
 2107|       |
 2108|    432|        return read_until_code_point(
 2109|    432|            ranges::subrange{it, range.end()},
 2110|    432|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    432|    }
 2112|    432|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    432|{
 2061|    432|    auto it = range.begin();
 2062|  19.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 18.7k, False: 390]
  ------------------
 2063|  18.7k|        const auto val =
 2064|  18.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  18.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  18.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.7k, False: 0]
  |  |  ------------------
  ------------------
 2066|  18.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  18.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  18.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 42, False: 18.7k]
  ------------------
 2069|     42|                return it;
 2070|     42|            }
 2071|  18.7k|        }
 2072|  18.7k|        it = val.iterator;
 2073|  18.7k|    }
 2074|       |
 2075|    390|    return it;
 2076|    432|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    432|    {
  754|    432|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  18.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.7k|              cvref<T> obj = *get<T>(fn);
  745|  18.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.7k|              }
  748|  18.7k|              else {
  749|  18.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.7k|              }
  751|  18.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  18.7k|    {
  684|  18.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.7k|            return static_cast<T*>(s.m_cp);
  686|  18.7k|        }
  687|  18.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.7k|            return static_cast<T*>(s.m_p);
  689|  18.7k|        }
  690|  18.7k|        else {
  691|  18.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.7k|        }
  693|  18.7k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  18.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    432|        {
  662|    432|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|    232|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    232|                  obj(static_cast<decltype(args)>(args)...);
  747|    232|              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    232|    {
  684|    232|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    232|            return static_cast<T*>(s.m_cp);
  686|    232|        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    232|            return static_cast<T*>(s.m_p);
  689|    232|        }
  690|    232|        else {
  691|    232|            return reinterpret_cast<T*>(s.m_fp);
  692|    232|        }
  693|    232|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    232|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     20|    {
 4947|     20|        return read_impl(
 4948|     20|            range,
 4949|     20|            [&](const auto& rng) {
 4950|     20|                return read_string_impl(rng, read_all(rng), value);
 4951|     20|            },
 4952|     20|            detail::priority_tag<1>{});
 4953|     20|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     20|    {
 4974|     20|        return read_cb(range);
 4975|     20|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     20|            [&](const auto& rng) {
 4950|     20|                return read_string_impl(rng, read_all(rng), value);
 4951|     20|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     60|{
 1839|     60|    return ranges::next(range.begin(), range.end());
 1840|     60|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     60|    {
  313|     60|        ranges::advance(x, bound);
  314|     60|        return x;
  315|     60|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     60|    {
  275|     60|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     60|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     60|    {
  203|    768|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 708, False: 60]
  ------------------
  204|    708|            ++i;
  205|    708|        }
  206|     60|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     14|    {
 4891|     14|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     14|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     42|    {
 4913|     42|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     84|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     42|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     42|            return unexpected_scan_error(
 4916|     42|                scan_error::invalid_scanned_value,
 4917|     42|                "Regex backend doesn't support wide strings as input");
 4918|     42|        }
 4919|     42|        else {
 4920|     42|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 42, False: 0]
  ------------------
 4921|     42|                return unexpected_scan_error(
 4922|     42|                    scan_error::invalid_scanned_value,
 4923|     42|                    "Cannot use regex with a non-contiguous source "
 4924|     42|                    "range");
 4925|     42|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     42|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     42|{
  959|     42|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     42|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     42|        return true;
  962|     42|    }
  963|     42|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     42|                           ranges::const_iterator_t<Range>,
  965|     42|                           typename detail::basic_scan_buffer<
  966|     42|                               detail::char_t<Range>>::forward_iterator>) {
  967|     42|        auto beg = r.begin();
  968|     42|        if (!beg.stores_parent()) {
  969|     42|            return true;
  970|     42|        }
  971|     42|        return beg.parent()->is_contiguous();
  972|     42|    }
  973|     42|    else {
  974|     42|        return false;
  975|     42|    }
  976|     42|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  3.58k|    {
 5277|  3.58k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.58k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.58k|        return read_impl(range, specs, value);
 5279|  3.58k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  3.58k|    {
 5295|  3.58k|        SCN_CLANG_PUSH
 5296|  3.58k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.58k|        switch (m_type) {
 5299|    334|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 334, False: 3.24k]
  ------------------
 5300|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 3.55k]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.58k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 132, False: 3.44k]
  ------------------
 5310|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    132|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.02k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.02k, False: 556]
  ------------------
 5315|  3.02k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.02k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.02k|                    specs.regexp_flags, value);
 5318|       |
 5319|     60|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 60, False: 3.52k]
  ------------------
 5320|     60|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     60|                    range,
 5322|     60|                    get_unescaped_regex_pattern(
 5323|     60|                        specs.charset_string<SourceCharT>()),
 5324|     60|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.58k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.58k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.58k|        }
 5331|       |
 5332|  3.58k|        SCN_CLANG_POP
 5333|  3.58k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    848|    {
 4820|    848|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    848|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    878|{
 4752|    878|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    878|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    878|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 290, False: 588]
  ------------------
 4756|    290|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    290|                                     "Invalid encoding in scanned string");
 4758|    290|    }
 4759|    588|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    588|    static_cast<    \
  |  |  929|    588|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    588|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    588|    return SCN_MOVE(result);
  ------------------
  |  |  928|    588|    static_cast<    \
  |  |  929|    588|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    588|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    844|{
 3012|    844|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    844|        dest.assign(source.view());
 3014|    844|    }
 3015|    844|    else {
 3016|    844|        return transcode_impl(source.view(), dest);
 3017|    844|    }
 3018|       |
 3019|      0|    return {};
 3020|    844|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.54k|{
 2088|  2.54k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.54k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.54k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.54k|        auto buf = make_contiguous_buffer(range);
 2092|  2.54k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.54k|        return ranges::next(range.begin(),
 2094|  2.54k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.54k|    }
 2096|  2.54k|    else {
 2097|  2.54k|        auto it = range.begin();
 2098|       |
 2099|  2.54k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.54k|            auto seg = get_contiguous_beginning(range);
 2101|  2.54k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.54k|                seg_it != seg.end()) {
 2103|  2.54k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.54k|            }
 2105|  2.54k|            ranges::advance(it, seg.size());
 2106|  2.54k|        }
 2107|       |
 2108|  2.54k|        return read_until_code_point(
 2109|  2.54k|            ranges::subrange{it, range.end()},
 2110|  2.54k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.54k|    }
 2112|  2.54k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.54k|    {
  754|  2.54k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  27.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.6k|              cvref<T> obj = *get<T>(fn);
  745|  27.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.6k|              }
  748|  27.6k|              else {
  749|  27.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.6k|              }
  751|  27.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  27.6k|    {
  684|  27.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.6k|            return static_cast<T*>(s.m_cp);
  686|  27.6k|        }
  687|  27.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.6k|            return static_cast<T*>(s.m_p);
  689|  27.6k|        }
  690|  27.6k|        else {
  691|  27.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.6k|        }
  693|  27.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  27.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.54k|        {
  662|  2.54k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     30|    {
 4841|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 0]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    550|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    550|              cvref<T> obj = *get<T>(fn);
  745|    550|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    550|                  obj(static_cast<decltype(args)>(args)...);
  747|    550|              }
  748|    550|              else {
  749|    550|                  return obj(static_cast<decltype(args)>(args)...);
  750|    550|              }
  751|    550|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    550|    {
  684|    550|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    550|            return static_cast<T*>(s.m_cp);
  686|    550|        }
  687|    550|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    550|            return static_cast<T*>(s.m_p);
  689|    550|        }
  690|    550|        else {
  691|    550|            return reinterpret_cast<T*>(s.m_fp);
  692|    550|        }
  693|    550|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    550|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    132|    {
 5048|    132|        auto it = read_source_impl(range, {specs});
 5049|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 110]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    110|        return read_string_impl(range, *it, value);
 5054|    132|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    396|    {
 5153|    396|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    396|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    396|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    396|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    396|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 282, False: 114]
  ------------------
 5163|    282|            const auto cb = [&](char32_t cp) {
 5164|    282|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    282|            };
 5166|       |
 5167|    282|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 282]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|    282|            auto it = read_while_code_point(range, cb);
 5172|    282|            return check_nonempty(it, range);
 5173|    282|        }
 5174|       |
 5175|    114|        const auto cb = [&](SourceCharT ch) {
 5176|    114|            return cb_wrapper.on_ascii_only(ch);
 5177|    114|        };
 5178|       |
 5179|    114|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 114]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|    114|        auto it = read_while_code_unit(range, cb);
 5184|    114|        return check_nonempty(it, range);
 5185|    114|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    282|    {
  754|    282|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  5.63k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.63k|              cvref<T> obj = *get<T>(fn);
  745|  5.63k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.63k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.63k|              }
  748|  5.63k|              else {
  749|  5.63k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.63k|              }
  751|  5.63k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  5.63k|    {
  684|  5.63k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.63k|            return static_cast<T*>(s.m_cp);
  686|  5.63k|        }
  687|  5.63k|        else if constexpr (std::is_object_v<T>) {
  688|  5.63k|            return static_cast<T*>(s.m_p);
  689|  5.63k|        }
  690|  5.63k|        else {
  691|  5.63k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.63k|        }
  693|  5.63k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  5.63k|            const auto cb = [&](char32_t cp) {
 5164|  5.63k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  5.63k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    282|        {
  667|    282|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    396|    {
 5191|    396|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 66, False: 330]
  ------------------
 5192|     66|            return unexpected_scan_error(
 5193|     66|                scan_error::invalid_scanned_value,
 5194|     66|                "No characters matched in [character set]");
 5195|     66|        }
 5196|       |
 5197|    330|        return it;
 5198|    396|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|    114|    {
  754|    114|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04k|              cvref<T> obj = *get<T>(fn);
  745|  1.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.04k|              }
  748|  1.04k|              else {
  749|  1.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04k|              }
  751|  1.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.04k|    {
  684|  1.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.04k|            return static_cast<T*>(s.m_cp);
  686|  1.04k|        }
  687|  1.04k|        else if constexpr (std::is_object_v<T>) {
  688|  1.04k|            return static_cast<T*>(s.m_p);
  689|  1.04k|        }
  690|  1.04k|        else {
  691|  1.04k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.04k|        }
  693|  1.04k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  1.04k|        const auto cb = [&](SourceCharT ch) {
 5176|  1.04k|            return cb_wrapper.on_ascii_only(ch);
 5177|  1.04k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|    114|        {
  667|    114|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    472|{
 4752|    472|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    472|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    472|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 216, False: 256]
  ------------------
 4756|    216|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    216|                                     "Invalid encoding in scanned string");
 4758|    216|    }
 4759|    256|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    256|    static_cast<    \
  |  |  929|    256|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    256|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    256|    return SCN_MOVE(result);
  ------------------
  |  |  928|    256|    static_cast<    \
  |  |  929|    256|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    256|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.08k|    {
 4891|  3.08k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.72k|    }                                                  \
  |  |  |  | 3671|  3.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    362|        return read_string_impl(range, it, value);
 4893|  3.08k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  9.25k|    {
 4913|  9.25k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  18.5k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  9.25k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  9.25k|            return unexpected_scan_error(
 4916|  9.25k|                scan_error::invalid_scanned_value,
 4917|  9.25k|                "Regex backend doesn't support wide strings as input");
 4918|  9.25k|        }
 4919|  9.25k|        else {
 4920|  9.25k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 9.25k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  9.25k|            auto input = get_as_contiguous(range);
 4928|  9.25k|            SCN_TRY(it,
  ------------------
  |  | 3672|  9.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.16k, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.16k|    }                                                  \
  |  |  |  | 3671|  9.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.08k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.08k|            return ranges::next(range.begin(),
 4931|  1.08k|                                ranges::distance(input.begin(), it));
 4932|  9.25k|        }
 4933|  9.25k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  9.25k|{
  959|  9.25k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  9.25k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  9.25k|        return true;
  962|  9.25k|    }
  963|  9.25k|    else if constexpr (std::is_same_v<
  964|  9.25k|                           ranges::const_iterator_t<Range>,
  965|  9.25k|                           typename detail::basic_scan_buffer<
  966|  9.25k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  9.25k|        auto beg = r.begin();
  968|  9.25k|        if (!beg.stores_parent()) {
  969|  9.25k|            return true;
  970|  9.25k|        }
  971|  9.25k|        return beg.parent()->is_contiguous();
  972|  9.25k|    }
  973|  9.25k|    else {
  974|  9.25k|        return false;
  975|  9.25k|    }
  976|  9.25k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  9.25k|{
 1065|  9.25k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  9.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  9.25k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  9.25k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  9.25k|        return r;
 1070|  9.25k|    }
 1071|  9.25k|    else if constexpr (std::is_same_v<
 1072|  9.25k|                           ranges::const_iterator_t<Range>,
 1073|  9.25k|                           typename detail::basic_scan_buffer<
 1074|  9.25k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  9.25k|        if constexpr (ranges::common_range<Range>) {
 1076|  9.25k|            return detail::make_string_view_from_pointers(
 1077|  9.25k|                r.begin().to_contiguous_segment_iterator(),
 1078|  9.25k|                r.end().to_contiguous_segment_iterator());
 1079|  9.25k|        }
 1080|  9.25k|        else {
 1081|  9.25k|            return r.begin().contiguous_segment();
 1082|  9.25k|        }
 1083|  9.25k|    }
 1084|  9.25k|    else {
 1085|  9.25k|        SCN_EXPECT(false);
 1086|  9.25k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  9.25k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  9.25k|    }
 1090|  9.25k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  9.25k|{
  981|  9.25k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  9.25k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  9.25k|        return true;
  984|  9.25k|    }
  985|  9.25k|    else if constexpr (std::is_same_v<
  986|  9.25k|                           ranges::const_iterator_t<Range>,
  987|  9.25k|                           typename detail::basic_scan_buffer<
  988|  9.25k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  9.25k|        auto beg = r.begin();
  990|  9.25k|        if (beg.contiguous_segment().empty()) {
  991|  9.25k|            return false;
  992|  9.25k|        }
  993|  9.25k|        if constexpr (ranges::common_range<Range>) {
  994|  9.25k|            return beg.contiguous_segment().end() ==
  995|  9.25k|                   ranges::end(r).contiguous_segment().end();
  996|  9.25k|        }
  997|  9.25k|        else {
  998|  9.25k|            if (beg.stores_parent()) {
  999|  9.25k|                return beg.contiguous_segment().end() ==
 1000|  9.25k|                       beg.parent()->current_view().end();
 1001|  9.25k|            }
 1002|  9.25k|            return true;
 1003|  9.25k|        }
 1004|  9.25k|    }
 1005|  9.25k|    else {
 1006|  9.25k|        return false;
 1007|  9.25k|    }
 1008|  9.25k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  9.25k|{
 4346|  9.25k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  9.25k|                  ranges::borrowed_range<Input> &&
 4348|  9.25k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  9.25k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  9.25k|    std::basic_regex<CharT> re{};
 4352|  9.25k|    try {
 4353|  9.25k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  9.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  9.25k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  9.25k|                                     re_flags | std::regex_constants::nosubs};
 4356|  9.25k|    }
 4357|  9.25k|    catch (const std::regex_error& err) {
 4358|  3.85k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  3.85k|                                     "Invalid regex");
 4360|  3.85k|    }
 4361|       |
 4362|  5.39k|    std::match_results<const CharT*> matches{};
 4363|  5.39k|    try {
 4364|  5.39k|        bool found = std::regex_search(input.data(),
 4365|  5.39k|                                       input.data() + input.size(), matches, re,
 4366|  5.39k|                                       std::regex_constants::match_continuous);
 4367|  5.39k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 4.30k, False: 1.08k]
  |  Branch (4367:23): [True: 0, False: 1.08k]
  ------------------
 4368|  4.30k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  4.30k|                                         "Regular expression didn't match");
 4370|  4.30k|        }
 4371|  5.39k|    }
 4372|  5.39k|    catch (const std::regex_error& err) {
 4373|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      0|                                     "Regex matching failed with an error");
 4375|      0|    }
 4376|       |
 4377|  1.08k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  5.39k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  4.39k|{
 5809|  4.39k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  4.39k|        return reader_impl_for_bool<CharT>{};
 5811|  4.39k|    }
 5812|  4.39k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  4.39k|        return reader_impl_for_char<CharT>{};
 5814|  4.39k|    }
 5815|  4.39k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  4.39k|        return reader_impl_for_wchar<CharT>{};
 5817|  4.39k|    }
 5818|  4.39k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  4.39k|        return reader_impl_for_code_point<CharT>{};
 5820|  4.39k|    }
 5821|  4.39k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  4.39k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  4.39k|        return reader_impl_for_string<CharT>{};
 5824|  4.39k|    }
 5825|  4.39k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  4.39k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  4.39k|        return reader_impl_for_string<CharT>{};
 5828|  4.39k|    }
 5829|  4.39k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  4.39k|                       std::is_same_v<T, wregex_matches>) {
 5831|  4.39k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  4.39k|    }
 5833|  4.39k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  4.39k|        return reader_impl_for_voidptr<CharT>{};
 5835|  4.39k|    }
 5836|  4.39k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  4.39k|        return reader_impl_for_float<CharT>{};
 5838|  4.39k|    }
 5839|  4.39k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  4.39k|                       !std::is_same_v<T, wchar_t> &&
 5841|  4.39k|                       !std::is_same_v<T, char32_t> &&
 5842|  4.39k|                       !std::is_same_v<T, bool>) {
 5843|  4.39k|        return reader_impl_for_int<CharT>{};
 5844|  4.39k|    }
 5845|  4.39k|    else {
 5846|  4.39k|        return reader_impl_for_monostate<CharT>{};
 5847|  4.39k|    }
 5848|  4.39k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     78|{
 2993|     78|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     78|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 78, False: 0]
  ------------------
 2995|     78|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     78|    static_cast<    \
  |  |  929|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     78|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     78|    }
 3001|     78|    else {
 3002|     78|        return transcode_impl(source.view(), dest);
 3003|     78|    }
 3004|       |
 3005|     78|    return {};
 3006|     78|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    198|    {
 5277|    198|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    198|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    198|        return read_impl(range, specs, value);
 5279|    198|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    198|    {
 5295|    198|        SCN_CLANG_PUSH
 5296|    198|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    198|        switch (m_type) {
 5299|    144|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 144, False: 54]
  ------------------
 5300|    144|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 178]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     20|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 20, False: 178]
  ------------------
 5307|     20|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 198]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 188]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 194]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 198]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    198|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    198|        }
 5331|       |
 5332|    198|        SCN_CLANG_POP
 5333|    198|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    144|    {
 4820|    144|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    144|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    184|{
 4752|    184|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    184|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    184|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 106, False: 78]
  ------------------
 4756|    106|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    106|                                     "Invalid encoding in scanned string");
 4758|    106|    }
 4759|     78|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     78|    static_cast<    \
  |  |  929|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     78|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     78|    return SCN_MOVE(result);
  ------------------
  |  |  928|     78|    static_cast<    \
  |  |  929|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     78|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|    232|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    232|                  obj(static_cast<decltype(args)>(args)...);
  747|    232|              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    232|    {
  684|    232|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    232|            return static_cast<T*>(s.m_cp);
  686|    232|        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    232|            return static_cast<T*>(s.m_p);
  689|    232|        }
  690|    232|        else {
  691|    232|            return reinterpret_cast<T*>(s.m_fp);
  692|    232|        }
  693|    232|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    232|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     20|    {
 4947|     20|        return read_impl(
 4948|     20|            range,
 4949|     20|            [&](const auto& rng) {
 4950|     20|                return read_string_impl(rng, read_all(rng), value);
 4951|     20|            },
 4952|     20|            detail::priority_tag<1>{});
 4953|     20|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     20|    {
 4974|     20|        return read_cb(range);
 4975|     20|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     20|            [&](const auto& rng) {
 4950|     20|                return read_string_impl(rng, read_all(rng), value);
 4951|     20|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     14|    {
 4891|     14|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     14|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  3.58k|    {
 5277|  3.58k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.58k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.58k|        return read_impl(range, specs, value);
 5279|  3.58k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  3.58k|    {
 5295|  3.58k|        SCN_CLANG_PUSH
 5296|  3.58k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.58k|        switch (m_type) {
 5299|    334|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 334, False: 3.24k]
  ------------------
 5300|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 3.55k]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.58k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 132, False: 3.44k]
  ------------------
 5310|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    132|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.02k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.02k, False: 556]
  ------------------
 5315|  3.02k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.02k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.02k|                    specs.regexp_flags, value);
 5318|       |
 5319|     60|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 60, False: 3.52k]
  ------------------
 5320|     60|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     60|                    range,
 5322|     60|                    get_unescaped_regex_pattern(
 5323|     60|                        specs.charset_string<SourceCharT>()),
 5324|     60|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.58k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.58k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.58k|        }
 5331|       |
 5332|  3.58k|        SCN_CLANG_POP
 5333|  3.58k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    848|    {
 4820|    848|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    848|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    878|{
 4752|    878|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    878|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    878|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 290, False: 588]
  ------------------
 4756|    290|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    290|                                     "Invalid encoding in scanned string");
 4758|    290|    }
 4759|    588|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    588|    static_cast<    \
  |  |  929|    588|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    588|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    588|    return SCN_MOVE(result);
  ------------------
  |  |  928|    588|    static_cast<    \
  |  |  929|    588|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    588|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    844|{
 3012|    844|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    844|        dest.assign(source.view());
 3014|    844|    }
 3015|    844|    else {
 3016|    844|        return transcode_impl(source.view(), dest);
 3017|    844|    }
 3018|       |
 3019|    844|    return {};
 3020|    844|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     30|    {
 4841|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 0]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    550|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    550|              cvref<T> obj = *get<T>(fn);
  745|    550|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    550|                  obj(static_cast<decltype(args)>(args)...);
  747|    550|              }
  748|    550|              else {
  749|    550|                  return obj(static_cast<decltype(args)>(args)...);
  750|    550|              }
  751|    550|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    550|    {
  684|    550|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    550|            return static_cast<T*>(s.m_cp);
  686|    550|        }
  687|    550|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    550|            return static_cast<T*>(s.m_p);
  689|    550|        }
  690|    550|        else {
  691|    550|            return reinterpret_cast<T*>(s.m_fp);
  692|    550|        }
  693|    550|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    550|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    132|    {
 5048|    132|        auto it = read_source_impl(range, {specs});
 5049|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 110]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    110|        return read_string_impl(range, *it, value);
 5054|    132|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    472|{
 4752|    472|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    472|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    472|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 216, False: 256]
  ------------------
 4756|    216|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    216|                                     "Invalid encoding in scanned string");
 4758|    216|    }
 4759|    256|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    256|    static_cast<    \
  |  |  929|    256|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    256|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    256|    return SCN_MOVE(result);
  ------------------
  |  |  928|    256|    static_cast<    \
  |  |  929|    256|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    256|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.08k|    {
 4891|  3.08k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.72k|    }                                                  \
  |  |  |  | 3671|  3.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    362|        return read_string_impl(range, it, value);
 4893|  3.08k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  4.39k|{
 5809|  4.39k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  4.39k|        return reader_impl_for_bool<CharT>{};
 5811|  4.39k|    }
 5812|  4.39k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  4.39k|        return reader_impl_for_char<CharT>{};
 5814|  4.39k|    }
 5815|  4.39k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  4.39k|        return reader_impl_for_wchar<CharT>{};
 5817|  4.39k|    }
 5818|  4.39k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  4.39k|        return reader_impl_for_code_point<CharT>{};
 5820|  4.39k|    }
 5821|  4.39k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  4.39k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  4.39k|        return reader_impl_for_string<CharT>{};
 5824|  4.39k|    }
 5825|  4.39k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  4.39k|                       std::is_same_v<T, std::wstring>) {
 5827|  4.39k|        return reader_impl_for_string<CharT>{};
 5828|  4.39k|    }
 5829|  4.39k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  4.39k|                       std::is_same_v<T, wregex_matches>) {
 5831|  4.39k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  4.39k|    }
 5833|  4.39k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  4.39k|        return reader_impl_for_voidptr<CharT>{};
 5835|  4.39k|    }
 5836|  4.39k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  4.39k|        return reader_impl_for_float<CharT>{};
 5838|  4.39k|    }
 5839|  4.39k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  4.39k|                       !std::is_same_v<T, wchar_t> &&
 5841|  4.39k|                       !std::is_same_v<T, char32_t> &&
 5842|  4.39k|                       !std::is_same_v<T, bool>) {
 5843|  4.39k|        return reader_impl_for_int<CharT>{};
 5844|  4.39k|    }
 5845|  4.39k|    else {
 5846|  4.39k|        return reader_impl_for_monostate<CharT>{};
 5847|  4.39k|    }
 5848|  4.39k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    198|    {
 5277|    198|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    198|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    198|        return read_impl(range, specs, value);
 5279|    198|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    198|    {
 5295|    198|        SCN_CLANG_PUSH
 5296|    198|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    198|        switch (m_type) {
 5299|    144|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 144, False: 54]
  ------------------
 5300|    144|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 178]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     20|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 20, False: 178]
  ------------------
 5307|     20|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 198]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 188]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 194]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 198]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    198|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    198|        }
 5331|       |
 5332|    198|        SCN_CLANG_POP
 5333|    198|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    144|    {
 4827|    144|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    144|                                     value);
 4829|    144|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    184|{
 4773|    184|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    184|    auto src = [&]() {
 4776|    184|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    184|            return make_contiguous_buffer(
 4778|    184|                ranges::subrange{range.begin().base(), result.base()});
 4779|    184|        }
 4780|    184|        else {
 4781|    184|            return make_contiguous_buffer(
 4782|    184|                ranges::subrange{range.begin(), result});
 4783|    184|        }
 4784|    184|    }();
 4785|    184|    using src_type = decltype(src);
 4786|       |
 4787|    184|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    184|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    184|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    184|                                     "Cannot read a string_view from "
 4796|    184|                                     "this source range (would require "
 4797|    184|                                     "transcoding)");
 4798|    184|    }
 4799|    184|    else {
 4800|    184|        const auto view = src.view();
 4801|    184|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    184|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 106, False: 78]
  ------------------
 4804|    106|            return unexpected_scan_error(
 4805|    106|                scan_error::invalid_scanned_value,
 4806|    106|                "Invalid encoding in scanned string_view");
 4807|    106|        }
 4808|       |
 4809|     78|        return SCN_MOVE(result);
  ------------------
  |  |  928|     78|    static_cast<    \
  |  |  929|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    184|    }
 4811|    184|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    184|    auto src = [&]() {
 4776|    184|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    184|            return make_contiguous_buffer(
 4778|    184|                ranges::subrange{range.begin().base(), result.base()});
 4779|    184|        }
 4780|    184|        else {
 4781|    184|            return make_contiguous_buffer(
 4782|    184|                ranges::subrange{range.begin(), result});
 4783|    184|        }
 4784|    184|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     20|    {
 4863|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 20, False: 0]
  ------------------
 4864|     20|            return read_string_view_impl(
 4865|     20|                range,
 4866|     20|                read_until_code_unit(
 4867|     20|                    range,
 4868|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     20|                        SourceCharT ch) { return ch == until; }),
 4870|     20|                value);
 4871|     20|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|    232|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    232|                  obj(static_cast<decltype(args)>(args)...);
  747|    232|              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    232|    {
  684|    232|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    232|            return static_cast<T*>(s.m_cp);
  686|    232|        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    232|            return static_cast<T*>(s.m_p);
  689|    232|        }
  690|    232|        else {
  691|    232|            return reinterpret_cast<T*>(s.m_fp);
  692|    232|        }
  693|    232|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    232|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     20|    {
 4959|     20|        return read_impl(
 4960|     20|            range,
 4961|     20|            [&](const auto& rng) {
 4962|     20|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     20|            },
 4964|     20|            detail::priority_tag<1>{});
 4965|     20|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     20|    {
 4974|     20|        return read_cb(range);
 4975|     20|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     20|            [&](const auto& rng) {
 4962|     20|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     20|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     14|    {
 4902|     14|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     14|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  3.58k|    {
 5277|  3.58k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.58k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.58k|        return read_impl(range, specs, value);
 5279|  3.58k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  3.58k|    {
 5295|  3.58k|        SCN_CLANG_PUSH
 5296|  3.58k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.58k|        switch (m_type) {
 5299|    334|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 334, False: 3.24k]
  ------------------
 5300|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 3.55k]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.58k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 132, False: 3.44k]
  ------------------
 5310|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    132|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.02k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.02k, False: 556]
  ------------------
 5315|  3.02k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.02k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.02k|                    specs.regexp_flags, value);
 5318|       |
 5319|     60|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 60, False: 3.52k]
  ------------------
 5320|     60|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     60|                    range,
 5322|     60|                    get_unescaped_regex_pattern(
 5323|     60|                        specs.charset_string<SourceCharT>()),
 5324|     60|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.58k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.58k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.58k|        }
 5331|       |
 5332|  3.58k|        SCN_CLANG_POP
 5333|  3.58k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    848|    {
 4827|    848|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    848|                                     value);
 4829|    848|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    878|{
 4773|    878|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    878|    auto src = [&]() {
 4776|    878|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    878|            return make_contiguous_buffer(
 4778|    878|                ranges::subrange{range.begin().base(), result.base()});
 4779|    878|        }
 4780|    878|        else {
 4781|    878|            return make_contiguous_buffer(
 4782|    878|                ranges::subrange{range.begin(), result});
 4783|    878|        }
 4784|    878|    }();
 4785|    878|    using src_type = decltype(src);
 4786|       |
 4787|    878|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    878|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    878|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    878|                                     "Cannot read a string_view from "
 4796|    878|                                     "this source range (would require "
 4797|    878|                                     "transcoding)");
 4798|    878|    }
 4799|    878|    else {
 4800|    878|        const auto view = src.view();
 4801|    878|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    878|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 290, False: 588]
  ------------------
 4804|    290|            return unexpected_scan_error(
 4805|    290|                scan_error::invalid_scanned_value,
 4806|    290|                "Invalid encoding in scanned string_view");
 4807|    290|        }
 4808|       |
 4809|    588|        return SCN_MOVE(result);
  ------------------
  |  |  928|    588|    static_cast<    \
  |  |  929|    588|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    878|    }
 4811|    878|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    878|    auto src = [&]() {
 4776|    878|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    878|            return make_contiguous_buffer(
 4778|    878|                ranges::subrange{range.begin().base(), result.base()});
 4779|    878|        }
 4780|    878|        else {
 4781|    878|            return make_contiguous_buffer(
 4782|    878|                ranges::subrange{range.begin(), result});
 4783|    878|        }
 4784|    878|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     30|    {
 4863|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 0]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    550|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    550|              cvref<T> obj = *get<T>(fn);
  745|    550|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    550|                  obj(static_cast<decltype(args)>(args)...);
  747|    550|              }
  748|    550|              else {
  749|    550|                  return obj(static_cast<decltype(args)>(args)...);
  750|    550|              }
  751|    550|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    550|    {
  684|    550|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    550|            return static_cast<T*>(s.m_cp);
  686|    550|        }
  687|    550|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    550|            return static_cast<T*>(s.m_p);
  689|    550|        }
  690|    550|        else {
  691|    550|            return reinterpret_cast<T*>(s.m_fp);
  692|    550|        }
  693|    550|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    550|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    132|    {
 5062|    132|        auto it = read_source_impl(range, {specs});
 5063|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 110]
  |  |  ------------------
  ------------------
 5064|     22|            return unexpected(it.error());
 5065|     22|        }
 5066|       |
 5067|    110|        return read_string_view_impl(range, *it, value);
 5068|    132|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    472|{
 4773|    472|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    472|    auto src = [&]() {
 4776|    472|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    472|            return make_contiguous_buffer(
 4778|    472|                ranges::subrange{range.begin().base(), result.base()});
 4779|    472|        }
 4780|    472|        else {
 4781|    472|            return make_contiguous_buffer(
 4782|    472|                ranges::subrange{range.begin(), result});
 4783|    472|        }
 4784|    472|    }();
 4785|    472|    using src_type = decltype(src);
 4786|       |
 4787|    472|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    472|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    472|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    472|                                     "Cannot read a string_view from "
 4796|    472|                                     "this source range (would require "
 4797|    472|                                     "transcoding)");
 4798|    472|    }
 4799|    472|    else {
 4800|    472|        const auto view = src.view();
 4801|    472|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    472|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 216, False: 256]
  ------------------
 4804|    216|            return unexpected_scan_error(
 4805|    216|                scan_error::invalid_scanned_value,
 4806|    216|                "Invalid encoding in scanned string_view");
 4807|    216|        }
 4808|       |
 4809|    256|        return SCN_MOVE(result);
  ------------------
  |  |  928|    256|    static_cast<    \
  |  |  929|    256|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    472|    }
 4811|    472|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    472|    auto src = [&]() {
 4776|    472|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    472|            return make_contiguous_buffer(
 4778|    472|                ranges::subrange{range.begin().base(), result.base()});
 4779|    472|        }
 4780|    472|        else {
 4781|    472|            return make_contiguous_buffer(
 4782|    472|                ranges::subrange{range.begin(), result});
 4783|    472|        }
 4784|    472|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.08k|    {
 4902|  3.08k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.72k|    }                                                  \
  |  |  |  | 3671|  3.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    362|        return read_string_view_impl(range, it, value);
 4904|  3.08k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  7.06k|{
 1683|  7.06k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  7.06k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  7.06k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  7.06k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  7.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  7.06k|    }
 1688|  7.06k|    else {
 1689|  7.06k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  7.06k|    }
 1691|  7.06k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  7.06k|    {
 1490|  7.06k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    930|    {
 4100|    930|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 930]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    930|        return std::copysign(value, T{1.0});
 4104|    930|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    850|    {
 4100|    850|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 850]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    850|        return std::copysign(value, T{1.0});
 4104|    850|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.15k|{
 5795|  6.15k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.15k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.15k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 684, False: 5.47k]
  ------------------
 5800|    684|        return range.begin();
 5801|    684|    }
 5802|       |
 5803|  5.47k|    return skip_classic_whitespace(range);
 5804|  6.15k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    684|    {
 3528|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    684|        return read_default_with_base(range, value, 10);
 3530|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    684|    {
 3528|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    684|        return read_default_with_base(range, value, 10);
 3530|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.20k|    {
 5748|  1.20k|        return true;
 5749|  1.20k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    902|    {
 5765|    902|        detail::format_specs specs{};
 5766|    902|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    902|        std::uintptr_t intvalue{};
 5769|    902|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    902|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 902, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    902|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    902|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    902|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    902|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    902|    }                                                  \
  |  |  |  | 3671|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    902|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.46k|    {
 3035|  1.46k|        return true;
 3036|  1.46k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    684|    {
 5504|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    684|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    684|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.19k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.02k|    {
 5355|  1.02k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.02k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.02k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 918, False: 110]
  ------------------
 5359|    918|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 918]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    918|            else {
 5363|    918|                err = r.error();
 5364|    918|            }
 5365|    918|        }
 5366|       |
 5367|  1.02k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.00k, False: 20]
  ------------------
 5368|  1.00k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.00k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.00k|            else {
 5372|  1.00k|                err = r.error();
 5373|  1.00k|            }
 5374|  1.00k|        }
 5375|       |
 5376|  1.02k|        return unexpected(err);
 5377|  1.02k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    936|    {
 5384|    936|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 936]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    936|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 936]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    936|        return unexpected_scan_error(
 5394|    936|            scan_error::invalid_scanned_value,
 5395|    936|            "Failed to read numeric boolean value: No match");
 5396|    936|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.00k|    {
 5402|  1.00k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.00k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.00k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.00k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.00k|        return unexpected_scan_error(
 5412|  1.00k|            scan_error::invalid_scanned_value,
 5413|  1.00k|            "Failed to read textual boolean value: No match");
 5414|  1.00k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.01k|{
 2194|  2.01k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.91k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.91k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.91k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.91k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.91k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.91k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.91k|            return unexpected(parse_error::error);
 2202|  1.91k|        }
 2203|      0|        return it;
 2204|  1.91k|    }
 2205|  1.91k|    else {
 2206|  1.91k|        auto range_it = range.begin();
 2207|  1.91k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.91k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.91k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.91k|                return unexpected(parse_error::error);
 2211|  1.91k|            }
 2212|  1.91k|        }
 2213|  1.91k|        return it;
 2214|  1.91k|    }
 2215|  1.91k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    684|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.19k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    684|    {
 4152|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    684|        float_reader<CharT> rd{};
 4155|    684|        return read_impl<Range>(
 4156|    684|            range, rd,
 4157|    684|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    684|                return r.read_source(SCN_FWD(args)...);
 4159|    684|            },
 4160|    684|            value);
 4161|    684|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    684|    {
  754|    684|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    684|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    684|              cvref<T> obj = *get<T>(fn);
  745|    684|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    684|                  obj(static_cast<decltype(args)>(args)...);
  747|    684|              }
  748|    684|              else {
  749|    684|                  return obj(static_cast<decltype(args)>(args)...);
  750|    684|              }
  751|    684|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    684|    {
  684|    684|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    684|            return static_cast<T*>(s.m_cp);
  686|    684|        }
  687|    684|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    684|            return static_cast<T*>(s.m_p);
  689|    684|        }
  690|    684|        else {
  691|    684|            return reinterpret_cast<T*>(s.m_fp);
  692|    684|        }
  693|    684|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    684|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    684|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    684|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    684|        {
  662|    684|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    684|    {
 5266|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    684|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    684|    {
 5266|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    684|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    684|    {
 5871|    684|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    684|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    684|                          basic_contiguous_scan_context<char_type>>) {
 5875|    684|            auto rd = make_reader<T, char_type>();
 5876|    684|            return impl(rd, range, value);
 5877|    684|        }
 5878|    684|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    684|            auto rd = make_reader<T, char_type>();
 5880|    684|            if (!is_segment_contiguous(range)) {
 5881|    684|                return impl(rd, range, value);
 5882|    684|            }
 5883|    684|            auto crange = get_as_contiguous(range);
 5884|    684|            SCN_TRY(it, impl(rd, crange, value));
 5885|    684|            return ranges::next(range.begin(),
 5886|    684|                                ranges::distance(crange.begin(), it));
 5887|    684|        }
 5888|    684|        else {
 5889|    684|            SCN_EXPECT(false);
 5890|    684|            SCN_UNREACHABLE;
 5891|    684|        }
 5892|    684|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    684|    {
 5863|    684|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    684|                        .transform_error(make_eof_scan_error));
 5865|    684|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    684|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    684|    {
 5266|    684|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    684|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    684|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   120k|    {
 2879|   120k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   257k|    {
 2883|   257k|        return m_current;
 2884|   257k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   192k|    {
 2888|   192k|        return m_range.end();
 2889|   192k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  54.4k|{
 1221|       |    // TODO: optimize
 1222|  54.4k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  54.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  54.4k|    auto res = get_next_code_point(str);
 1224|  54.4k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  54.4k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  57.8k|    {
 2903|  57.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  57.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  57.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  57.8k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 57.8k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  57.8k|        }
 2909|  57.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  57.8k|    static_cast<    \
  |  |  929|  57.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  57.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  79.0k|    {
 2893|  79.0k|        return ranges::subrange{begin(), end()};
 2894|  79.0k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  7.06k|{
 2117|  7.06k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  7.06k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  7.06k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  7.06k|        auto buf = make_contiguous_buffer(range);
 2121|  7.06k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  7.06k|        return ranges::next(range.begin(),
 2123|  7.06k|                            ranges::distance(buf.view().begin(), it));
 2124|  7.06k|    }
 2125|  7.06k|    else {
 2126|  7.06k|        auto it = range.begin();
 2127|       |
 2128|  7.06k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  7.06k|            auto seg = get_contiguous_beginning(range);
 2130|  7.06k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  7.06k|                seg_it != seg.end()) {
 2132|  7.06k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  7.06k|            }
 2134|  7.06k|            ranges::advance(it, seg.size());
 2135|  7.06k|        }
 2136|       |
 2137|  7.06k|        return read_while_code_point(
 2138|  7.06k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  7.06k|    }
 2140|  7.06k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  5.39k|    {
 6037|  5.39k|        const bool need_skipped_width =
 6038|  5.39k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 172, False: 5.21k]
  |  Branch (6038:33): [True: 5.21k, False: 0]
  ------------------
 6039|  5.39k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  5.39k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 394, False: 4.99k]
  ------------------
 6043|  5.39k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 504, False: 4.49k]
  ------------------
 6044|    898|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    898|                             need_skipped_width);
 6046|    898|        }
 6047|  4.49k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 4.23k, False: 256]
  |  Branch (6047:56): [True: 2.27k, False: 1.96k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.27k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 2.27k, False: 0]
  ------------------
 6051|  2.27k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  2.27k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  2.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 2.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|  2.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  2.16k|                                  .transform_error(make_eof_scan_error));
 6054|  2.16k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  2.27k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  2.21k|        return result_type{rng.begin(), 0};
 6070|  4.49k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    898|{
 5951|    898|    using char_type = detail::char_t<Range>;
 5952|    898|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    898|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 668, False: 230]
  ------------------
 5955|    668|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    668|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    668|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 668]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    668|        auto max_width_view = take_width(range, max_width);
 5972|    668|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    668|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 668, False: 0]
  ------------------
 5975|    668|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    668|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    668|    }
 5979|       |
 5980|    230|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    230|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 230]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    230|    auto max_width_view = take_width(range, max_width);
 5994|    230|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    230|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 230, False: 0]
  ------------------
 5997|    230|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    230|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    230|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    668|    {
  754|    668|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|    838|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    838|              cvref<T> obj = *get<T>(fn);
  745|    838|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    838|                  obj(static_cast<decltype(args)>(args)...);
  747|    838|              }
  748|    838|              else {
  749|    838|                  return obj(static_cast<decltype(args)>(args)...);
  750|    838|              }
  751|    838|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    838|    {
  684|    838|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    838|            return static_cast<T*>(s.m_cp);
  686|    838|        }
  687|    838|        else if constexpr (std::is_object_v<T>) {
  688|    838|            return static_cast<T*>(s.m_p);
  689|    838|        }
  690|    838|        else {
  691|    838|            return reinterpret_cast<T*>(s.m_fp);
  692|    838|        }
  693|    838|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|    838|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    668|        {
  667|    668|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    668|{
 1976|    668|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    668|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    668|{
 1957|    668|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    668|        return std::find_if(range.begin(), range.end(), pred);
 1959|    668|    }
 1960|    668|    else {
 1961|    668|        auto first = range.begin();
 1962|    916|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 838, False: 78]
  ------------------
 1963|    838|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 590, False: 248]
  ------------------
 1964|    590|                return first;
 1965|    590|            }
 1966|    838|        }
 1967|     78|        return first;
 1968|    668|    }
 1969|    668|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  5.45k|    {
 2810|  5.45k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  5.45k|                                      m_count};
 2812|  5.45k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  21.4k|    {
 2717|  21.4k|        return view;
 2718|  21.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  5.45k|    {
 2382|  5.45k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  5.65k|        {
 2781|  5.65k|            return !(y == x);
 2782|  5.65k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  12.0k|        {
 2770|  12.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 584, False: 11.5k]
  |  Branch (2770:39): [True: 380, False: 204]
  ------------------
 2771|  12.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 11.7k]
  ------------------
 2772|  12.0k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    584|    {
 2421|    584|        return m_multibyte_left;
 2422|    584|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  10.5k|    {
 2816|  10.5k|        return sentinel<true>{m_base.get().end()};
 2817|  10.5k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  10.5k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  8.41k|    {
 2426|  8.41k|        return *m_current;
 2427|  8.41k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  6.93k|    {
 2435|  6.93k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  6.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  6.93k|        _increment_current();
 2437|  6.93k|        return *this;
 2438|  6.93k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  6.93k|    {
 2668|  6.93k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 4.96k, False: 1.96k]
  ------------------
 2669|  4.96k|            auto cplen = _get_cp_length_at_current();
 2670|  4.96k|            m_multibyte_left = cplen - 1;
 2671|  4.96k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  4.96k|        }
 2673|  1.96k|        else {
 2674|  1.96k|            --m_multibyte_left;
 2675|  1.96k|        }
 2676|       |
 2677|  6.93k|        ++m_current;
 2678|  6.93k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  4.96k|    {
 2639|  4.96k|        return static_cast<difference_type>(
 2640|  4.96k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  4.96k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  4.96k|    {
 2645|  4.96k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  4.96k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 3.72k, False: 1.24k]
  ------------------
 2650|  3.72k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  3.72k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  3.72k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  3.72k|        }
 2654|       |
 2655|  1.24k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.24k|                                           cplen);
 2657|  1.24k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.24k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.24k|        return static_cast<difference_type>(
 2663|  1.24k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.24k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    230|{
 2037|    230|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    230|    auto it = range.begin();
 2040|    230|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 230, False: 0]
  ------------------
 2041|    230|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    230|                                           needle.size());
 2043|    230|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 78, False: 152]
  ------------------
 2044|     78|            return it;
 2045|     78|        }
 2046|    152|        static_assert(
 2047|    152|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    152|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 152, False: 0]
  ------------------
 2049|    152|            return it;
 2050|    152|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    230|{
 1857|    230|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    230|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    230|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    230|        if (sz < count) {
 1862|    230|            return unexpected(eof_error::eof);
 1863|    230|        }
 1864|       |
 1865|    230|        return ranges::next(range.begin(), count);
 1866|    230|    }
 1867|    230|    else {
 1868|    230|        auto it = range.begin();
 1869|    230|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 230]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    906|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 754, False: 152]
  ------------------
 1874|    754|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 676]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|    754|        }
 1878|       |
 1879|    152|        return it;
 1880|    230|    }
 1881|    230|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    230|{
 1095|    230|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    230|        return r.size();
 1097|    230|    }
 1098|    230|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    230|                           ranges::const_iterator_t<Range>,
 1100|    230|                           typename detail::basic_scan_buffer<
 1101|    230|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    230|        if constexpr (ranges::common_range<Range>) {
 1103|    230|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    230|        }
 1105|    230|        else {
 1106|    230|            if (r.begin().stores_parent()) {
 1107|    230|                return static_cast<size_t>(
 1108|    230|                    r.begin().parent()->chars_available() -
 1109|    230|                    r.begin().position());
 1110|    230|            }
 1111|    230|            return r.begin().contiguous_segment().size();
 1112|    230|        }
 1113|    230|    }
 1114|    230|    else {
 1115|    230|        return 0;
 1116|    230|    }
 1117|    230|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.27k|    {
  268|  2.27k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.27k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.27k|    {
  161|  2.27k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.27k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.27k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.27k|        else {
  169|  2.27k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.27k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.27k|        }
  173|  2.27k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  2.89k|    {
 2531|  2.89k|        return !(a == b);
 2532|  2.89k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  2.89k|    {
 2523|  2.89k|        return a.m_current == b.m_current;
 2524|  2.89k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  3.17k|    {
 2832|  3.17k|        return take_width_view{r, n};
 2833|  3.17k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  3.17k|    {
 2801|  3.17k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  3.17k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.27k|{
 2951|  2.27k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.27k, False: 0]
  ------------------
 2952|  2.27k|        auto it = read_while_classic_space(range);
 2953|  2.27k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.27k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.16k]
  |  |  ------------------
  ------------------
 2955|    112|            return unexpected(e);
 2956|    112|        }
 2957|       |
 2958|  2.16k|        return it;
 2959|  2.27k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.27k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.27k|{
 2117|  2.27k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.27k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.27k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.27k|        auto buf = make_contiguous_buffer(range);
 2121|  2.27k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.27k|        return ranges::next(range.begin(),
 2123|  2.27k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.27k|    }
 2125|  2.27k|    else {
 2126|  2.27k|        auto it = range.begin();
 2127|       |
 2128|  2.27k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.27k|            auto seg = get_contiguous_beginning(range);
 2130|  2.27k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.27k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.27k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.27k|            ranges::advance(it, seg.size());
 2135|  2.27k|        }
 2136|       |
 2137|  2.27k|        return read_while_code_point(
 2138|  2.27k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.27k|    }
 2140|  2.27k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  2.27k|{
 1039|  2.27k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.27k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.27k|        return r;
 1042|  2.27k|    }
 1043|  2.27k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.27k|                           ranges::const_iterator_t<Range>,
 1045|  2.27k|                           typename detail::basic_scan_buffer<
 1046|  2.27k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.27k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.27k|            auto seg = r.begin().contiguous_segment();
 1049|  2.27k|            auto dist =
 1050|  2.27k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.27k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.27k|        }
 1053|  2.27k|        else {
 1054|  2.27k|            return r.begin().contiguous_segment();
 1055|  2.27k|        }
 1056|  2.27k|    }
 1057|  2.27k|    else {
 1058|  2.27k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.27k|    }
 1060|  2.27k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.27k|{
 2082|  2.27k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.27k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.27k|{
 2061|  2.27k|    auto it = range.begin();
 2062|  3.51k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.40k, False: 112]
  ------------------
 2063|  3.40k|        const auto val =
 2064|  3.40k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.40k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.40k, False: 0]
  |  |  ------------------
  ------------------
 2066|  3.40k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.40k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.40k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.16k, False: 1.24k]
  ------------------
 2069|  2.16k|                return it;
 2070|  2.16k|            }
 2071|  3.40k|        }
 2072|  1.24k|        it = val.iterator;
 2073|  1.24k|    }
 2074|       |
 2075|    112|    return it;
 2076|  2.27k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  3.40k|{
 1899|  3.40k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.40k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.40k|    auto it = range.begin();
 1903|  3.40k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.40k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.40k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  3.40k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.02k, False: 376]
  ------------------
 1912|  3.02k|        ++it;
 1913|  3.02k|        return {it, string_type(1, *range.begin())};
 1914|  3.02k|    }
 1915|       |
 1916|    376|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    376|    return {it, string_type{range.begin(), it}};
 1918|  3.40k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  5.68k|{
  944|  5.68k|    return is_range_eof(r.begin(), r.end());
  945|  5.68k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  5.68k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.68k|    {
  937|  5.68k|        return begin == end;
  938|  5.68k|    }
  939|  5.68k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    376|    {
  283|    376|        return n - fn::impl_i_n_s(i, n, bound);
  284|    376|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    376|    {
  227|    376|        constexpr iter_difference_t<I> zero{0};
  228|    376|        iter_difference_t<I> counter{0};
  229|       |
  230|    376|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 376]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    376|        else {
  237|  1.37k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 994, False: 376]
  |  Branch (237:34): [True: 994, False: 0]
  ------------------
  238|    994|                ++i;
  239|    994|                ++counter;
  240|    994|            }
  241|    376|        }
  242|       |
  243|    376|        return counter;
  244|    376|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  3.40k|    {
 1890|  3.40k|        return !codepoint.empty();
 1891|  3.40k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.27k|    {
  754|  2.27k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.40k|              cvref<T> obj = *get<T>(fn);
  745|  3.40k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.40k|              }
  748|  3.40k|              else {
  749|  3.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.40k|              }
  751|  3.40k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.40k|    {
  684|  3.40k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.40k|            return static_cast<T*>(s.m_cp);
  686|  3.40k|        }
  687|  3.40k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.40k|            return static_cast<T*>(s.m_p);
  689|  3.40k|        }
  690|  3.40k|        else {
  691|  3.40k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.40k|        }
  693|  3.40k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.40k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.27k|        {
  662|  2.27k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.27k|{
  950|  2.27k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.16k]
  |  |  ------------------
  ------------------
  951|    112|        return eof_error::eof;
  952|    112|    }
  953|  2.16k|    return eof_error::good;
  954|  2.27k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  14.7k|    {
 2413|  14.7k|        return m_current;
 2414|  14.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  15.1k|    {
 2417|  15.1k|        return m_count;
 2418|  15.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  19.7k|    {
 6037|  19.7k|        const bool need_skipped_width =
 6038|  19.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.71k, False: 17.9k]
  |  Branch (6038:33): [True: 0, False: 17.9k]
  ------------------
 6039|  19.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  19.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 200, False: 19.5k]
  ------------------
 6043|  19.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 2.23k, False: 17.2k]
  ------------------
 6044|  2.43k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  2.43k|                             need_skipped_width);
 6046|  2.43k|        }
 6047|  17.2k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 16.8k, False: 396]
  |  Branch (6047:56): [True: 1.66k, False: 15.2k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.66k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.66k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.33k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.33k|                            make_eof_scan_error));
 6058|       |
 6059|  3.33k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.05k, False: 618]
  ------------------
 6060|  1.05k|                return result_type{
 6061|  1.05k|                    it,
 6062|  1.05k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.05k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.05k|                                             .view())};
 6065|  1.05k|            }
 6066|    618|            return result_type{it, 0};
 6067|  3.33k|        }
 6068|       |
 6069|  15.6k|        return result_type{rng.begin(), 0};
 6070|  17.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  5.09k|    {
 6079|  5.09k|        const bool need_skipped_width =
 6080|  5.09k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 416, False: 4.67k]
  |  Branch (6080:33): [True: 1.23k, False: 3.44k]
  ------------------
 6081|  5.09k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  5.09k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 190, False: 4.90k]
  ------------------
 6084|  5.09k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 306, False: 4.59k]
  ------------------
 6085|    496|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 220, False: 276]
  ------------------
 6086|    496|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 78, False: 142]
  ------------------
 6087|     78|                return result_type{rng.begin(), 0};
 6088|     78|            }
 6089|    418|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    418|                             specs.fill, need_skipped_width);
 6091|    496|        }
 6092|  4.59k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 4.42k, False: 174]
  ------------------
 6093|  4.59k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 4.06k, False: 354]
  ------------------
 6094|  4.59k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 246, False: 3.82k]
  |  Branch (6094:35): [True: 222, False: 24]
  ------------------
 6095|  4.06k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 624, False: 3.22k]
  ------------------
 6096|  3.84k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 530, False: 94]
  ------------------
 6097|    752|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 534, False: 218]
  ------------------
 6098|    534|                const auto initial_width =
 6099|    534|                    specs.precision - prefix_width - value_width;
 6100|    534|                auto max_width_view = take_width(rng, initial_width);
 6101|    534|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    534|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    534|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    534|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    534|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    534|                                  .transform_error(make_eof_scan_error));
 6103|    534|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    534|            }
 6105|    436|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    436|                            make_eof_scan_error));
 6107|       |
 6108|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 218, False: 0]
  ------------------
 6109|    218|                return result_type{
 6110|    218|                    it,
 6111|    218|                    calculate_text_width(make_contiguous_buffer(
 6112|    218|                                             ranges::subrange{rng.begin(), it})
 6113|    218|                                             .view())};
 6114|    218|            }
 6115|      0|            return result_type{it, 0};
 6116|    436|        }
 6117|  3.84k|        return result_type{rng.begin(), 0};
 6118|  4.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  7.31k|    {
 6193|  7.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.31k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.31k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.31k|            auto rd = make_reader<T, char_type>();
 6198|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.72k, False: 596]
  |  |  ------------------
  ------------------
 6199|  6.72k|                return unexpected(e);
 6200|  6.72k|            }
 6201|       |
 6202|    596|            return impl(rd, range, value);
 6203|  7.31k|        }
 6204|  7.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.31k|            auto rd = make_reader<T, char_type>();
 6206|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.31k|                return unexpected(e);
 6208|  7.31k|            }
 6209|       |
 6210|  7.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.31k|                specs.width != 0) {
 6212|  7.31k|                return impl(rd, range, value);
 6213|  7.31k|            }
 6214|       |
 6215|  7.31k|            auto crange = get_as_contiguous(range);
 6216|  7.31k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.31k|            return ranges::next(range.begin(),
 6218|  7.31k|                                ranges::distance(crange.begin(), it));
 6219|  7.31k|        }
 6220|  7.31k|        else {
 6221|  7.31k|            SCN_EXPECT(false);
 6222|  7.31k|            SCN_UNREACHABLE;
 6223|  7.31k|        }
 6224|  7.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    596|    {
 6124|    596|        const bool need_skipped_width =
 6125|    596|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 170, False: 426]
  |  Branch (6125:33): [True: 340, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    596|        auto it = rng.begin();
 6129|    596|        std::ptrdiff_t prefix_width = 0;
 6130|    596|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 346, False: 250]
  ------------------
 6131|    346|            auto max_width_view = take_width(rng, specs.precision);
 6132|    346|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    330|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    330|            it = prefix_result.first.base();
 6135|    330|            prefix_width = prefix_result.second;
 6136|    330|        }
 6137|    250|        else {
 6138|    250|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    250|            std::tie(it, prefix_width) = prefix_result;
 6140|    250|        }
 6141|    580|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    580|        std::ptrdiff_t value_width = 0;
 6145|    580|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 330, False: 250]
  ------------------
 6146|    330|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 324]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    324|            const auto initial_width = specs.precision - prefix_width;
 6154|    324|            auto max_width_view =
 6155|    324|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    324|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 324, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    324|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    250|        else {
 6161|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    250|    }                                                  \
  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  7.31k|    {
 6193|  7.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.31k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.31k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.31k|            auto rd = make_reader<T, char_type>();
 6198|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.72k, False: 596]
  |  |  ------------------
  ------------------
 6199|  6.72k|                return unexpected(e);
 6200|  6.72k|            }
 6201|       |
 6202|    596|            return impl(rd, range, value);
 6203|  7.31k|        }
 6204|  7.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.31k|            auto rd = make_reader<T, char_type>();
 6206|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.31k|                return unexpected(e);
 6208|  7.31k|            }
 6209|       |
 6210|  7.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.31k|                specs.width != 0) {
 6212|  7.31k|                return impl(rd, range, value);
 6213|  7.31k|            }
 6214|       |
 6215|  7.31k|            auto crange = get_as_contiguous(range);
 6216|  7.31k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.31k|            return ranges::next(range.begin(),
 6218|  7.31k|                                ranges::distance(crange.begin(), it));
 6219|  7.31k|        }
 6220|  7.31k|        else {
 6221|  7.31k|            SCN_EXPECT(false);
 6222|  7.31k|            SCN_UNREACHABLE;
 6223|  7.31k|        }
 6224|  7.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    596|    {
 6124|    596|        const bool need_skipped_width =
 6125|    596|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 170, False: 426]
  |  Branch (6125:33): [True: 340, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    596|        auto it = rng.begin();
 6129|    596|        std::ptrdiff_t prefix_width = 0;
 6130|    596|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 346, False: 250]
  ------------------
 6131|    346|            auto max_width_view = take_width(rng, specs.precision);
 6132|    346|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    330|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    330|            it = prefix_result.first.base();
 6135|    330|            prefix_width = prefix_result.second;
 6136|    330|        }
 6137|    250|        else {
 6138|    250|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    250|            std::tie(it, prefix_width) = prefix_result;
 6140|    250|        }
 6141|    580|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    580|        std::ptrdiff_t value_width = 0;
 6145|    580|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 330, False: 250]
  ------------------
 6146|    330|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 324]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    324|            const auto initial_width = specs.precision - prefix_width;
 6154|    324|            auto max_width_view =
 6155|    324|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    324|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 324, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    324|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    250|        else {
 6161|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    250|    }                                                  \
  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  7.26k|    {
 6193|  7.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.26k|            auto rd = make_reader<T, char_type>();
 6198|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.74k, False: 524]
  |  |  ------------------
  ------------------
 6199|  6.74k|                return unexpected(e);
 6200|  6.74k|            }
 6201|       |
 6202|    524|            return impl(rd, range, value);
 6203|  7.26k|        }
 6204|  7.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.26k|            auto rd = make_reader<T, char_type>();
 6206|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.26k|                return unexpected(e);
 6208|  7.26k|            }
 6209|       |
 6210|  7.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.26k|                specs.width != 0) {
 6212|  7.26k|                return impl(rd, range, value);
 6213|  7.26k|            }
 6214|       |
 6215|  7.26k|            auto crange = get_as_contiguous(range);
 6216|  7.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.26k|            return ranges::next(range.begin(),
 6218|  7.26k|                                ranges::distance(crange.begin(), it));
 6219|  7.26k|        }
 6220|  7.26k|        else {
 6221|  7.26k|            SCN_EXPECT(false);
 6222|  7.26k|            SCN_UNREACHABLE;
 6223|  7.26k|        }
 6224|  7.26k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  7.26k|    {
 5753|  7.26k|        reader_error_handler eh{};
 5754|  7.26k|        detail::check_pointer_type_specs(specs, eh);
 5755|  7.26k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.74k, False: 524]
  |  |  ------------------
  ------------------
 5756|  6.74k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  6.74k|        }
 5758|    524|        return {};
 5759|  7.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    524|    {
 6124|    524|        const bool need_skipped_width =
 6125|    524|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 166, False: 358]
  |  Branch (6125:33): [True: 300, False: 58]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    524|        auto it = rng.begin();
 6129|    524|        std::ptrdiff_t prefix_width = 0;
 6130|    524|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 306, False: 218]
  ------------------
 6131|    306|            auto max_width_view = take_width(rng, specs.precision);
 6132|    306|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    298|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    298|            it = prefix_result.first.base();
 6135|    298|            prefix_width = prefix_result.second;
 6136|    298|        }
 6137|    218|        else {
 6138|    218|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    218|            std::tie(it, prefix_width) = prefix_result;
 6140|    218|        }
 6141|    516|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    516|        std::ptrdiff_t value_width = 0;
 6145|    516|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 298, False: 218]
  ------------------
 6146|    298|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 294]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    294|            const auto initial_width = specs.precision - prefix_width;
 6154|    294|            auto max_width_view =
 6155|    294|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    294|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    218|        else {
 6161|    218|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 218, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    218|    }                                                  \
  |  | 3671|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    294|    {
 5782|    294|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    294|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    294|        return read_default(range, value, loc);
 5784|    294|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    294|    {
 5765|    294|        detail::format_specs specs{};
 5766|    294|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    294|        std::uintptr_t intvalue{};
 5769|    294|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    294|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    218|    {
 5782|    218|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    218|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    218|        return read_default(range, value, loc);
 5784|    218|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  7.31k|    {
 6193|  7.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.31k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.31k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.31k|            auto rd = make_reader<T, char_type>();
 6198|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.53k, False: 778]
  |  |  ------------------
  ------------------
 6199|  6.53k|                return unexpected(e);
 6200|  6.53k|            }
 6201|       |
 6202|    778|            return impl(rd, range, value);
 6203|  7.31k|        }
 6204|  7.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.31k|            auto rd = make_reader<T, char_type>();
 6206|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.31k|                return unexpected(e);
 6208|  7.31k|            }
 6209|       |
 6210|  7.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.31k|                specs.width != 0) {
 6212|  7.31k|                return impl(rd, range, value);
 6213|  7.31k|            }
 6214|       |
 6215|  7.31k|            auto crange = get_as_contiguous(range);
 6216|  7.31k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.31k|            return ranges::next(range.begin(),
 6218|  7.31k|                                ranges::distance(crange.begin(), it));
 6219|  7.31k|        }
 6220|  7.31k|        else {
 6221|  7.31k|            SCN_EXPECT(false);
 6222|  7.31k|            SCN_UNREACHABLE;
 6223|  7.31k|        }
 6224|  7.31k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.31k|    {
 3040|  7.31k|        reader_error_handler eh{};
 3041|  7.31k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.53k, False: 778]
  |  |  ------------------
  ------------------
 3043|  6.53k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.53k|        }
 3045|    778|        return {};
 3046|  7.31k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  7.31k|    {
 3051|  7.31k|        return static_cast<Derived&>(*this);
 3052|  7.31k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  7.31k|    {
 5497|  7.31k|        detail::check_bool_type_specs(specs, eh);
 5498|  7.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    778|    {
 6124|    778|        const bool need_skipped_width =
 6125|    778|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 598]
  |  Branch (6125:33): [True: 406, False: 192]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    778|        auto it = rng.begin();
 6129|    778|        std::ptrdiff_t prefix_width = 0;
 6130|    778|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 414, False: 364]
  ------------------
 6131|    414|            auto max_width_view = take_width(rng, specs.precision);
 6132|    414|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    414|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    414|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    414|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    414|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    414|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    394|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    394|            it = prefix_result.first.base();
 6135|    394|            prefix_width = prefix_result.second;
 6136|    394|        }
 6137|    364|        else {
 6138|    364|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    364|            std::tie(it, prefix_width) = prefix_result;
 6140|    364|        }
 6141|    758|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    758|        std::ptrdiff_t value_width = 0;
 6145|    758|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 394, False: 364]
  ------------------
 6146|    394|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 388]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    388|            const auto initial_width = specs.precision - prefix_width;
 6154|    388|            auto max_width_view =
 6155|    388|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    388|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 388, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    388|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    388|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    388|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    388|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    388|    }                                                  \
  |  |  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    364|        else {
 6161|    364|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 364, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    364|    }                                                  \
  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    388|    {
 5516|    388|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    388|#if !SCN_DISABLE_LOCALE
 5519|    388|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 376]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    376|#endif
 5523|       |
 5524|    376|        return rd.read_classic(range, value);
 5525|    388|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    752|    {
 5529|    752|        SCN_GCC_COMPAT_PUSH
 5530|    752|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    752|        switch (specs.type) {
 5533|    174|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 174, False: 578]
  ------------------
 5534|    174|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 742]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 742]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 746]
  ------------------
 5539|     34|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 8, False: 744]
  ------------------
 5540|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 20, False: 732]
  ------------------
 5541|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 748]
  ------------------
 5542|     58|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    520|            default:
  ------------------
  |  Branch (5544:13): [True: 520, False: 232]
  ------------------
 5545|    520|                return bool_reader_base::allow_text |
 5546|    520|                       bool_reader_base::allow_numeric;
 5547|    752|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    752|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    326|    {
 5384|    326|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 326]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    326|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 326]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    326|        return unexpected_scan_error(
 5394|    326|            scan_error::invalid_scanned_value,
 5395|    326|            "Failed to read numeric boolean value: No match");
 5396|    326|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    652|{
 2146|    652|    auto it = read_code_unit(range);
 2147|    652|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    652|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  ------------------
  ------------------
 2152|    652|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    652|        return unexpected(parse_error::error);
 2154|    652|    }
 2155|       |
 2156|      0|    return *it;
 2157|    652|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    724|{
 1857|    724|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    724|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    724|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    724|        if (sz < count) {
 1862|    724|            return unexpected(eof_error::eof);
 1863|    724|        }
 1864|       |
 1865|    724|        return ranges::next(range.begin(), count);
 1866|    724|    }
 1867|    724|    else {
 1868|    724|        auto it = range.begin();
 1869|    724|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 724]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.61k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.02k, False: 582]
  ------------------
 1874|  3.02k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 142, False: 2.88k]
  ------------------
 1875|    142|                return unexpected(eof_error::eof);
 1876|    142|            }
 1877|  3.02k|        }
 1878|       |
 1879|    582|        return it;
 1880|    724|    }
 1881|    724|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    724|{
 1095|    724|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    724|        return r.size();
 1097|    724|    }
 1098|    724|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    724|                           ranges::const_iterator_t<Range>,
 1100|    724|                           typename detail::basic_scan_buffer<
 1101|    724|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    724|        if constexpr (ranges::common_range<Range>) {
 1103|    724|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    724|        }
 1105|    724|        else {
 1106|    724|            if (r.begin().stores_parent()) {
 1107|    724|                return static_cast<size_t>(
 1108|    724|                    r.begin().parent()->chars_available() -
 1109|    724|                    r.begin().position());
 1110|    724|            }
 1111|    724|            return r.begin().contiguous_segment().size();
 1112|    724|        }
 1113|    724|    }
 1114|    724|    else {
 1115|    724|        return 0;
 1116|    724|    }
 1117|    724|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    376|    {
 5355|    376|        scan_error err{scan_error::invalid_scanned_value,
 5356|    376|                       "Failed to read boolean"};
 5357|       |
 5358|    376|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 316, False: 60]
  ------------------
 5359|    316|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 316]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    316|            else {
 5363|    316|                err = r.error();
 5364|    316|            }
 5365|    316|        }
 5366|       |
 5367|    376|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 352, False: 24]
  ------------------
 5368|    352|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 352]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    352|            else {
 5372|    352|                err = r.error();
 5373|    352|            }
 5374|    352|        }
 5375|       |
 5376|    376|        return unexpected(err);
 5377|    376|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    352|    {
 5402|    352|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 352]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    352|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 352]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    352|        return unexpected_scan_error(
 5412|    352|            scan_error::invalid_scanned_value,
 5413|    352|            "Failed to read textual boolean value: No match");
 5414|    352|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    704|{
 2194|    704|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    130|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    574|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    574|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    574|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    574|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    574|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 574, False: 0]
  |  |  ------------------
  ------------------
 2201|    574|            return unexpected(parse_error::error);
 2202|    574|        }
 2203|      0|        return it;
 2204|    574|    }
 2205|    574|    else {
 2206|    574|        auto range_it = range.begin();
 2207|    574|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    574|            if (SCN_UNLIKELY(*range_it !=
 2209|    574|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    574|                return unexpected(parse_error::error);
 2211|    574|            }
 2212|    574|        }
 2213|    574|        return it;
 2214|    574|    }
 2215|    574|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    364|    {
 5516|    364|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    364|#if !SCN_DISABLE_LOCALE
 5519|    364|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 20, False: 344]
  ------------------
 5520|     20|            return rd.read_localized(range, loc, value);
 5521|     20|        }
 5522|    344|#endif
 5523|       |
 5524|    344|        return rd.read_classic(range, value);
 5525|    364|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     20|    {
 5428|     20|        scan_error err{scan_error::invalid_scanned_value,
 5429|     20|                       "Failed to read boolean"};
 5430|       |
 5431|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 18, False: 2]
  ------------------
 5432|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 18]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     18|            else {
 5436|     18|                err = r.error();
 5437|     18|            }
 5438|     18|        }
 5439|       |
 5440|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 12]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     20|        return unexpected(err);
 5457|     20|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  7.26k|    {
 6193|  7.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.26k|            auto rd = make_reader<T, char_type>();
 6198|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 572]
  |  |  ------------------
  ------------------
 6199|  6.69k|                return unexpected(e);
 6200|  6.69k|            }
 6201|       |
 6202|    572|            return impl(rd, range, value);
 6203|  7.26k|        }
 6204|  7.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.26k|            auto rd = make_reader<T, char_type>();
 6206|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.26k|                return unexpected(e);
 6208|  7.26k|            }
 6209|       |
 6210|  7.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.26k|                specs.width != 0) {
 6212|  7.26k|                return impl(rd, range, value);
 6213|  7.26k|            }
 6214|       |
 6215|  7.26k|            auto crange = get_as_contiguous(range);
 6216|  7.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.26k|            return ranges::next(range.begin(),
 6218|  7.26k|                                ranges::distance(crange.begin(), it));
 6219|  7.26k|        }
 6220|  7.26k|        else {
 6221|  7.26k|            SCN_EXPECT(false);
 6222|  7.26k|            SCN_UNREACHABLE;
 6223|  7.26k|        }
 6224|  7.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    572|    {
 6124|    572|        const bool need_skipped_width =
 6125|    572|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 168, False: 404]
  |  Branch (6125:33): [True: 332, False: 72]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    572|        auto it = rng.begin();
 6129|    572|        std::ptrdiff_t prefix_width = 0;
 6130|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 338, False: 234]
  ------------------
 6131|    338|            auto max_width_view = take_width(rng, specs.precision);
 6132|    338|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|    234|        else {
 6138|    234|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    234|            std::tie(it, prefix_width) = prefix_result;
 6140|    234|        }
 6141|    572|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    572|        std::ptrdiff_t value_width = 0;
 6145|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 234]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 332]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    332|            const auto initial_width = specs.precision - prefix_width;
 6154|    332|            auto max_width_view =
 6155|    332|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    332|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    300|            it = w_it.base();
 6158|    300|            value_width = initial_width - w_it.count();
 6159|    300|        }
 6160|    234|        else {
 6161|    234|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 214]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    214|                                             specs, value, loc));
 6163|       |
 6164|    214|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 158, False: 56]
  ------------------
 6165|    158|                value_width = calculate_text_width(
 6166|    158|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    158|                        .view());
 6168|    158|            }
 6169|    214|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    514|        std::ptrdiff_t postfix_width = 0;
 6173|    514|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 514, False: 0]
  ------------------
 6174|    514|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    514|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    514|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    514|                                 value_width));
 6178|    514|            std::tie(it, postfix_width) = postfix_result;
 6179|    514|        }
 6180|       |
 6181|    514|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    514|                                                 value_width, postfix_width);
 6183|    514|            !e) {
  ------------------
  |  Branch (6183:13): [True: 146, False: 368]
  ------------------
 6184|    146|            return unexpected(e);
 6185|    146|        }
 6186|       |
 6187|    368|        return it;
 6188|    514|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  7.31k|    {
 6193|  7.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.31k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.31k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.31k|            auto rd = make_reader<T, char_type>();
 6198|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 618]
  |  |  ------------------
  ------------------
 6199|  6.69k|                return unexpected(e);
 6200|  6.69k|            }
 6201|       |
 6202|    618|            return impl(rd, range, value);
 6203|  7.31k|        }
 6204|  7.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.31k|            auto rd = make_reader<T, char_type>();
 6206|  7.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.31k|                return unexpected(e);
 6208|  7.31k|            }
 6209|       |
 6210|  7.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.31k|                specs.width != 0) {
 6212|  7.31k|                return impl(rd, range, value);
 6213|  7.31k|            }
 6214|       |
 6215|  7.31k|            auto crange = get_as_contiguous(range);
 6216|  7.31k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.31k|            return ranges::next(range.begin(),
 6218|  7.31k|                                ranges::distance(crange.begin(), it));
 6219|  7.31k|        }
 6220|  7.31k|        else {
 6221|  7.31k|            SCN_EXPECT(false);
 6222|  7.31k|            SCN_UNREACHABLE;
 6223|  7.31k|        }
 6224|  7.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    618|    {
 6124|    618|        const bool need_skipped_width =
 6125|    618|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 176, False: 442]
  |  Branch (6125:33): [True: 338, False: 104]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    618|        auto it = rng.begin();
 6129|    618|        std::ptrdiff_t prefix_width = 0;
 6130|    618|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 346, False: 272]
  ------------------
 6131|    346|            auto max_width_view = take_width(rng, specs.precision);
 6132|    346|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    330|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    330|            it = prefix_result.first.base();
 6135|    330|            prefix_width = prefix_result.second;
 6136|    330|        }
 6137|    272|        else {
 6138|    272|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    272|            std::tie(it, prefix_width) = prefix_result;
 6140|    272|        }
 6141|    602|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    602|        std::ptrdiff_t value_width = 0;
 6145|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 330, False: 272]
  ------------------
 6146|    330|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 322]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    322|            const auto initial_width = specs.precision - prefix_width;
 6154|    322|            auto max_width_view =
 6155|    322|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    322|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 322, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    322|    }                                                  \
  |  |  |  | 3671|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    272|        else {
 6161|    272|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    272|    }                                                  \
  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  7.26k|    {
 6193|  7.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.26k|            auto rd = make_reader<T, char_type>();
 6198|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 7.13k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  7.13k|            return impl(rd, range, value);
 6203|  7.26k|        }
 6204|  7.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.26k|            auto rd = make_reader<T, char_type>();
 6206|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.26k|                return unexpected(e);
 6208|  7.26k|            }
 6209|       |
 6210|  7.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.26k|                specs.width != 0) {
 6212|  7.26k|                return impl(rd, range, value);
 6213|  7.26k|            }
 6214|       |
 6215|  7.26k|            auto crange = get_as_contiguous(range);
 6216|  7.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.26k|            return ranges::next(range.begin(),
 6218|  7.26k|                                ranges::distance(crange.begin(), it));
 6219|  7.26k|        }
 6220|  7.26k|        else {
 6221|  7.26k|            SCN_EXPECT(false);
 6222|  7.26k|            SCN_UNREACHABLE;
 6223|  7.26k|        }
 6224|  7.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  7.13k|    {
 6124|  7.13k|        const bool need_skipped_width =
 6125|  7.13k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 284, False: 6.85k]
  |  Branch (6125:33): [True: 1.05k, False: 5.79k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  7.13k|        auto it = rng.begin();
 6129|  7.13k|        std::ptrdiff_t prefix_width = 0;
 6130|  7.13k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.09k, False: 6.03k]
  ------------------
 6131|  1.09k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.09k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.08k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.08k|            it = prefix_result.first.base();
 6135|  1.08k|            prefix_width = prefix_result.second;
 6136|  1.08k|        }
 6137|  6.03k|        else {
 6138|  6.03k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  6.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  6.03k|            std::tie(it, prefix_width) = prefix_result;
 6140|  6.03k|        }
 6141|  7.12k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  7.12k|        std::ptrdiff_t value_width = 0;
 6145|  7.12k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.08k, False: 6.03k]
  ------------------
 6146|  1.08k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 1.07k]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|  1.07k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.07k|            auto max_width_view =
 6155|  1.07k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.07k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 674, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    674|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    674|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    674|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    674|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    674|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    398|            it = w_it.base();
 6158|    398|            value_width = initial_width - w_it.count();
 6159|    398|        }
 6160|  6.03k|        else {
 6161|  6.03k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.52k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.52k|    }                                                  \
  |  | 3671|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.51k|                                             specs, value, loc));
 6163|       |
 6164|  1.51k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 202, False: 1.31k]
  ------------------
 6165|    202|                value_width = calculate_text_width(
 6166|    202|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    202|                        .view());
 6168|    202|            }
 6169|  1.51k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.91k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.91k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.52k, False: 386]
  ------------------
 6174|  1.52k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.52k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.52k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.52k|                                 value_width));
 6178|  1.52k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.52k|        }
 6180|       |
 6181|  1.91k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.91k|                                                 value_width, postfix_width);
 6183|  1.91k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 108, False: 1.80k]
  ------------------
 6184|    108|            return unexpected(e);
 6185|    108|        }
 6186|       |
 6187|  1.80k|        return it;
 6188|  1.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  7.26k|    {
 6193|  7.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.26k|            auto rd = make_reader<T, char_type>();
 6198|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 7.13k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  7.13k|            return impl(rd, range, value);
 6203|  7.26k|        }
 6204|  7.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.26k|            auto rd = make_reader<T, char_type>();
 6206|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.26k|                return unexpected(e);
 6208|  7.26k|            }
 6209|       |
 6210|  7.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.26k|                specs.width != 0) {
 6212|  7.26k|                return impl(rd, range, value);
 6213|  7.26k|            }
 6214|       |
 6215|  7.26k|            auto crange = get_as_contiguous(range);
 6216|  7.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.26k|            return ranges::next(range.begin(),
 6218|  7.26k|                                ranges::distance(crange.begin(), it));
 6219|  7.26k|        }
 6220|  7.26k|        else {
 6221|  7.26k|            SCN_EXPECT(false);
 6222|  7.26k|            SCN_UNREACHABLE;
 6223|  7.26k|        }
 6224|  7.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  7.13k|    {
 6124|  7.13k|        const bool need_skipped_width =
 6125|  7.13k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 284, False: 6.85k]
  |  Branch (6125:33): [True: 1.05k, False: 5.79k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  7.13k|        auto it = rng.begin();
 6129|  7.13k|        std::ptrdiff_t prefix_width = 0;
 6130|  7.13k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.09k, False: 6.03k]
  ------------------
 6131|  1.09k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.09k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.08k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.08k|            it = prefix_result.first.base();
 6135|  1.08k|            prefix_width = prefix_result.second;
 6136|  1.08k|        }
 6137|  6.03k|        else {
 6138|  6.03k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  6.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  6.03k|            std::tie(it, prefix_width) = prefix_result;
 6140|  6.03k|        }
 6141|  7.12k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  7.12k|        std::ptrdiff_t value_width = 0;
 6145|  7.12k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.08k, False: 6.03k]
  ------------------
 6146|  1.08k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 1.07k]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|  1.07k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.07k|            auto max_width_view =
 6155|  1.07k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.07k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 674, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    674|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    674|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    674|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    674|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    674|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    398|            it = w_it.base();
 6158|    398|            value_width = initial_width - w_it.count();
 6159|    398|        }
 6160|  6.03k|        else {
 6161|  6.03k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.52k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.52k|    }                                                  \
  |  | 3671|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.51k|                                             specs, value, loc));
 6163|       |
 6164|  1.51k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 202, False: 1.31k]
  ------------------
 6165|    202|                value_width = calculate_text_width(
 6166|    202|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    202|                        .view());
 6168|    202|            }
 6169|  1.51k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.91k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.91k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.52k, False: 386]
  ------------------
 6174|  1.52k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.52k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.52k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.52k|                                 value_width));
 6178|  1.52k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.52k|        }
 6180|       |
 6181|  1.91k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.91k|                                                 value_width, postfix_width);
 6183|  1.91k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 108, False: 1.80k]
  ------------------
 6184|    108|            return unexpected(e);
 6185|    108|        }
 6186|       |
 6187|  1.80k|        return it;
 6188|  1.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  7.26k|    {
 6193|  7.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.26k|            auto rd = make_reader<T, char_type>();
 6198|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 7.13k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  7.13k|            return impl(rd, range, value);
 6203|  7.26k|        }
 6204|  7.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.26k|            auto rd = make_reader<T, char_type>();
 6206|  7.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.26k|                return unexpected(e);
 6208|  7.26k|            }
 6209|       |
 6210|  7.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.26k|                specs.width != 0) {
 6212|  7.26k|                return impl(rd, range, value);
 6213|  7.26k|            }
 6214|       |
 6215|  7.26k|            auto crange = get_as_contiguous(range);
 6216|  7.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.26k|            return ranges::next(range.begin(),
 6218|  7.26k|                                ranges::distance(crange.begin(), it));
 6219|  7.26k|        }
 6220|  7.26k|        else {
 6221|  7.26k|            SCN_EXPECT(false);
 6222|  7.26k|            SCN_UNREACHABLE;
 6223|  7.26k|        }
 6224|  7.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  7.13k|    {
 6124|  7.13k|        const bool need_skipped_width =
 6125|  7.13k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 284, False: 6.85k]
  |  Branch (6125:33): [True: 1.05k, False: 5.79k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  7.13k|        auto it = rng.begin();
 6129|  7.13k|        std::ptrdiff_t prefix_width = 0;
 6130|  7.13k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.09k, False: 6.03k]
  ------------------
 6131|  1.09k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.09k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.08k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.08k|            it = prefix_result.first.base();
 6135|  1.08k|            prefix_width = prefix_result.second;
 6136|  1.08k|        }
 6137|  6.03k|        else {
 6138|  6.03k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  6.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  6.03k|            std::tie(it, prefix_width) = prefix_result;
 6140|  6.03k|        }
 6141|  7.12k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  7.12k|        std::ptrdiff_t value_width = 0;
 6145|  7.12k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.08k, False: 6.03k]
  ------------------
 6146|  1.08k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 1.07k]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|  1.07k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.07k|            auto max_width_view =
 6155|  1.07k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.07k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 674, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    674|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    674|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    674|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    674|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    674|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    398|            it = w_it.base();
 6158|    398|            value_width = initial_width - w_it.count();
 6159|    398|        }
 6160|  6.03k|        else {
 6161|  6.03k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.52k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.52k|    }                                                  \
  |  | 3671|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.51k|                                             specs, value, loc));
 6163|       |
 6164|  1.51k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 202, False: 1.31k]
  ------------------
 6165|    202|                value_width = calculate_text_width(
 6166|    202|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    202|                        .view());
 6168|    202|            }
 6169|  1.51k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.91k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.91k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.52k, False: 386]
  ------------------
 6174|  1.52k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.52k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.52k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.52k|                                 value_width));
 6178|  1.52k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.52k|        }
 6180|       |
 6181|  1.91k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.91k|                                                 value_width, postfix_width);
 6183|  1.91k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 108, False: 1.80k]
  ------------------
 6184|    108|            return unexpected(e);
 6185|    108|        }
 6186|       |
 6187|  1.80k|        return it;
 6188|  1.91k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.62k|{
 5795|  4.62k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.62k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.62k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 514, False: 4.11k]
  ------------------
 5800|    514|        return range.begin();
 5801|    514|    }
 5802|       |
 5803|  4.11k|    return skip_classic_whitespace(range);
 5804|  4.62k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    514|    {
 3528|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    514|        return read_default_with_base(range, value, 10);
 3530|    514|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    514|    {
 3492|    514|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    514|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    514|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    514|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    514|                return unexpected_scan_error(
 3498|    514|                    scan_error::invalid_scanned_value,
 3499|    514|                    "Unexpected '-' sign when parsing an "
 3500|    514|                    "unsigned value");
 3501|    514|            }
 3502|    514|        }
 3503|       |
 3504|    514|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 514]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.02k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.02k|                parse_integer_digits_without_thsep(
 3511|  1.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.02k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.02k|        auto buf = make_contiguous_buffer(
 3515|  1.02k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.02k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 514, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    514|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    514|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    514|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    514|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    514|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.02k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    514|    {
 3528|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    514|        return read_default_with_base(range, value, 10);
 3530|    514|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    514|    {
 3492|    514|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    514|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    514|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    514|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 514]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    514|        }
 3503|       |
 3504|    514|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 514]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.02k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.02k|                parse_integer_digits_without_thsep(
 3511|  1.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.02k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.02k|        auto buf = make_contiguous_buffer(
 3515|  1.02k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.02k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 514, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    514|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    514|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    514|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    514|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    514|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.02k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|    984|    {
 5748|    984|        return true;
 5749|    984|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    838|    {
 5765|    838|        detail::format_specs specs{};
 5766|    838|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    838|        std::uintptr_t intvalue{};
 5769|    838|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    838|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    838|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    838|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 838, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    838|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    838|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    838|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    838|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    838|    }                                                  \
  |  |  |  | 3671|    838|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    838|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.11k|    {
 3035|  1.11k|        return true;
 3036|  1.11k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    514|    {
 5504|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    514|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    514|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    892|    {
 5355|    892|        scan_error err{scan_error::invalid_scanned_value,
 5356|    892|                       "Failed to read boolean"};
 5357|       |
 5358|    892|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 850, False: 42]
  ------------------
 5359|    850|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 850]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    850|            else {
 5363|    850|                err = r.error();
 5364|    850|            }
 5365|    850|        }
 5366|       |
 5367|    892|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 878, False: 14]
  ------------------
 5368|    878|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 878]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    878|            else {
 5372|    878|                err = r.error();
 5373|    878|            }
 5374|    878|        }
 5375|       |
 5376|    892|        return unexpected(err);
 5377|    892|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    872|    {
 5384|    872|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 872]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    872|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 872]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    872|        return unexpected_scan_error(
 5394|    872|            scan_error::invalid_scanned_value,
 5395|    872|            "Failed to read numeric boolean value: No match");
 5396|    872|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    878|    {
 5402|    878|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 878]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    878|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 878]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    878|        return unexpected_scan_error(
 5412|    878|            scan_error::invalid_scanned_value,
 5413|    878|            "Failed to read textual boolean value: No match");
 5414|    878|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.75k|{
 2194|  1.75k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    124|    }                                                  \
  |  |  |  | 3671|  1.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.63k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.63k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.63k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.63k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.63k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.63k|            return unexpected(parse_error::error);
 2202|  1.63k|        }
 2203|  1.63k|        return it;
 2204|  1.63k|    }
 2205|  1.63k|    else {
 2206|  1.63k|        auto range_it = range.begin();
 2207|  1.63k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.63k, False: 0]
  ------------------
 2208|  1.63k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.63k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.63k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.63k|                return unexpected(parse_error::error);
 2211|  1.63k|            }
 2212|  1.63k|        }
 2213|      0|        return it;
 2214|  1.63k|    }
 2215|  1.63k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    514|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    514|    {
 4152|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    514|        float_reader<CharT> rd{};
 4155|    514|        return read_impl<Range>(
 4156|    514|            range, rd,
 4157|    514|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    514|                return r.read_source(SCN_FWD(args)...);
 4159|    514|            },
 4160|    514|            value);
 4161|    514|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    514|    {
  754|    514|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    514|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    514|              cvref<T> obj = *get<T>(fn);
  745|    514|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    514|                  obj(static_cast<decltype(args)>(args)...);
  747|    514|              }
  748|    514|              else {
  749|    514|                  return obj(static_cast<decltype(args)>(args)...);
  750|    514|              }
  751|    514|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    514|    {
  684|    514|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    514|            return static_cast<T*>(s.m_cp);
  686|    514|        }
  687|    514|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    514|            return static_cast<T*>(s.m_p);
  689|    514|        }
  690|    514|        else {
  691|    514|            return reinterpret_cast<T*>(s.m_fp);
  692|    514|        }
  693|    514|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    514|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    514|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    514|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    514|        {
  662|    514|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    514|    {
 5266|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    514|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    514|    {
 5266|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    514|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    514|    {
 5871|    514|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    514|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    514|                          basic_contiguous_scan_context<char_type>>) {
 5875|    514|            auto rd = make_reader<T, char_type>();
 5876|    514|            return impl(rd, range, value);
 5877|    514|        }
 5878|    514|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    514|            auto rd = make_reader<T, char_type>();
 5880|    514|            if (!is_segment_contiguous(range)) {
 5881|    514|                return impl(rd, range, value);
 5882|    514|            }
 5883|    514|            auto crange = get_as_contiguous(range);
 5884|    514|            SCN_TRY(it, impl(rd, crange, value));
 5885|    514|            return ranges::next(range.begin(),
 5886|    514|                                ranges::distance(crange.begin(), it));
 5887|    514|        }
 5888|    514|        else {
 5889|    514|            SCN_EXPECT(false);
 5890|    514|            SCN_UNREACHABLE;
 5891|    514|        }
 5892|    514|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    514|    {
 5863|    514|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    514|                        .transform_error(make_eof_scan_error));
 5865|    514|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    514|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    514|    {
 5266|    514|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    514|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    514|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    514|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   240k|    {
 2879|   240k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   493M|    {
 2883|   493M|        return m_current;
 2884|   493M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   985M|    {
 2888|   985M|        return m_range.end();
 2889|   985M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   492M|{
 1221|       |    // TODO: optimize
 1222|   492M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   492M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   492M|    auto res = get_next_code_point(str);
 1224|   492M|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   492M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   492M|    {
 2903|   492M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   492M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   492M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   492M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 492M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   492M|        }
 2909|   492M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   492M|    static_cast<    \
  |  |  929|   492M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   492M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  52.8k|    {
 2893|  52.8k|        return ranges::subrange{begin(), end()};
 2894|  52.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.65k|    {
 6037|  1.65k|        const bool need_skipped_width =
 6038|  1.65k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 88, False: 1.56k]
  |  Branch (6038:33): [True: 1.56k, False: 0]
  ------------------
 6039|  1.65k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.65k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 1.57k]
  ------------------
 6043|  1.65k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 268, False: 1.31k]
  ------------------
 6044|    340|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    340|                             need_skipped_width);
 6046|    340|        }
 6047|  1.31k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.25k, False: 60]
  |  Branch (6047:56): [True: 1.04k, False: 206]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.04k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.04k, False: 0]
  ------------------
 6051|  1.04k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.04k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.04k|                                  .transform_error(make_eof_scan_error));
 6054|  1.04k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.04k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    266|        return result_type{rng.begin(), 0};
 6070|  1.31k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    340|{
 5951|    340|    using char_type = detail::char_t<Range>;
 5952|    340|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    340|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 340, False: 0]
  ------------------
 5955|    340|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    340|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    340|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 340]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    340|        auto max_width_view = take_width(range, max_width);
 5972|    340|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    340|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 340, False: 0]
  ------------------
 5975|    340|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    340|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    340|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    340|    {
  754|    340|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    414|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    414|              cvref<T> obj = *get<T>(fn);
  745|    414|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    414|                  obj(static_cast<decltype(args)>(args)...);
  747|    414|              }
  748|    414|              else {
  749|    414|                  return obj(static_cast<decltype(args)>(args)...);
  750|    414|              }
  751|    414|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    414|    {
  684|    414|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    414|            return static_cast<T*>(s.m_cp);
  686|    414|        }
  687|    414|        else if constexpr (std::is_object_v<T>) {
  688|    414|            return static_cast<T*>(s.m_p);
  689|    414|        }
  690|    414|        else {
  691|    414|            return reinterpret_cast<T*>(s.m_fp);
  692|    414|        }
  693|    414|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    414|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    340|        {
  667|    340|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    340|{
 1976|    340|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    340|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    340|{
 1957|    340|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    340|        return std::find_if(range.begin(), range.end(), pred);
 1959|    340|    }
 1960|    340|    else {
 1961|    340|        auto first = range.begin();
 1962|    438|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 414, False: 24]
  ------------------
 1963|    414|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 316, False: 98]
  ------------------
 1964|    316|                return first;
 1965|    316|            }
 1966|    414|        }
 1967|     24|        return first;
 1968|    340|    }
 1969|    340|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  2.42k|    {
 2810|  2.42k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  2.42k|                                      m_count};
 2812|  2.42k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  8.42k|    {
 2717|  8.42k|        return view;
 2718|  8.42k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  2.42k|    {
 2382|  2.42k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.48k|        {
 2781|  1.48k|            return !(y == x);
 2782|  1.48k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  3.57k|        {
 2770|  3.57k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 24, False: 3.54k]
  |  Branch (2770:39): [True: 24, False: 0]
  ------------------
 2771|  3.57k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 3.54k]
  ------------------
 2772|  3.57k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     24|    {
 2421|     24|        return m_multibyte_left;
 2422|     24|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  3.57k|    {
 2816|  3.57k|        return sentinel<true>{m_base.get().end()};
 2817|  3.57k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  3.57k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  2.50k|    {
 2426|  2.50k|        return *m_current;
 2427|  2.50k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.14k|    {
 2435|  1.14k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.14k|        _increment_current();
 2437|  1.14k|        return *this;
 2438|  1.14k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.14k|    {
 2668|  1.14k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.14k, False: 0]
  ------------------
 2669|  1.14k|            auto cplen = _get_cp_length_at_current();
 2670|  1.14k|            m_multibyte_left = cplen - 1;
 2671|  1.14k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.14k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.14k|        ++m_current;
 2678|  1.14k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.14k|    {
 2639|  1.14k|        return static_cast<difference_type>(
 2640|  1.14k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.14k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.14k|    {
 2645|  1.14k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.14k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.14k, False: 0]
  ------------------
 2650|  1.14k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.14k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.14k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.14k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.38k|    {
 2832|  1.38k|        return take_width_view{r, n};
 2833|  1.38k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.38k|    {
 2801|  1.38k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.38k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.04k|{
 2951|  1.04k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.04k, False: 0]
  ------------------
 2952|  1.04k|        auto it = read_while_classic_space(range);
 2953|  1.04k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.04k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.04k|        return it;
 2959|  1.04k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.04k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.04k|{
 2117|  1.04k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.04k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.04k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.04k|        auto buf = make_contiguous_buffer(range);
 2121|  1.04k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.04k|        return ranges::next(range.begin(),
 2123|  1.04k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.04k|    }
 2125|  1.04k|    else {
 2126|  1.04k|        auto it = range.begin();
 2127|       |
 2128|  1.04k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.04k|            auto seg = get_contiguous_beginning(range);
 2130|  1.04k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.04k|                seg_it != seg.end()) {
 2132|  1.04k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.04k|            }
 2134|  1.04k|            ranges::advance(it, seg.size());
 2135|  1.04k|        }
 2136|       |
 2137|  1.04k|        return read_while_code_point(
 2138|  1.04k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.04k|    }
 2140|  1.04k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.04k|{
 2082|  1.04k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.04k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.04k|{
 2061|  1.04k|    auto it = range.begin();
 2062|  1.04k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.04k, False: 0]
  ------------------
 2063|  1.04k|        const auto val =
 2064|  1.04k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.04k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.04k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.04k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.04k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.04k, False: 0]
  ------------------
 2069|  1.04k|                return it;
 2070|  1.04k|            }
 2071|  1.04k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.04k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.04k|{
 1899|  1.04k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.04k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.04k|    auto it = range.begin();
 1903|  1.04k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.04k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.04k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.04k, False: 0]
  ------------------
 1912|  1.04k|        ++it;
 1913|  1.04k|        return {it, string_type(1, *range.begin())};
 1914|  1.04k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.04k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.08k|{
  944|  2.08k|    return is_range_eof(r.begin(), r.end());
  945|  2.08k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.08k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.08k|    {
  937|  2.08k|        return begin == end;
  938|  2.08k|    }
  939|  2.08k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.04k|    {
 1890|  1.04k|        return !codepoint.empty();
 1891|  1.04k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.04k|    {
  754|  1.04k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04k|              cvref<T> obj = *get<T>(fn);
  745|  1.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.04k|              }
  748|  1.04k|              else {
  749|  1.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04k|              }
  751|  1.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.04k|    {
  684|  1.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.04k|            return static_cast<T*>(s.m_cp);
  686|  1.04k|        }
  687|  1.04k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.04k|            return static_cast<T*>(s.m_p);
  689|  1.04k|        }
  690|  1.04k|        else {
  691|  1.04k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.04k|        }
  693|  1.04k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.04k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.04k|        {
  662|  1.04k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.04k|{
  950|  1.04k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.04k|    return eof_error::good;
  954|  1.04k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  4.93k|    {
 2413|  4.93k|        return m_current;
 2414|  4.93k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  4.95k|    {
 2417|  4.95k|        return m_count;
 2418|  4.95k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  12.8k|    {
 6037|  12.8k|        const bool need_skipped_width =
 6038|  12.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 10.5k, False: 2.30k]
  |  Branch (6038:33): [True: 0, False: 2.30k]
  ------------------
 6039|  12.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  12.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 12.7k]
  ------------------
 6043|  12.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 164, False: 12.6k]
  ------------------
 6044|    236|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    236|                             need_skipped_width);
 6046|    236|        }
 6047|  12.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 12.3k, False: 236]
  |  Branch (6047:56): [True: 2.46k, False: 9.91k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.46k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.46k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.93k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.93k|                            make_eof_scan_error));
 6058|       |
 6059|  4.93k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.96k, False: 508]
  ------------------
 6060|  1.96k|                return result_type{
 6061|  1.96k|                    it,
 6062|  1.96k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.96k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.96k|                                             .view())};
 6065|  1.96k|            }
 6066|    508|            return result_type{it, 0};
 6067|  4.93k|        }
 6068|       |
 6069|  10.1k|        return result_type{rng.begin(), 0};
 6070|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.66k|    {
 6079|  1.66k|        const bool need_skipped_width =
 6080|  1.66k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 808, False: 860]
  |  Branch (6080:33): [True: 252, False: 608]
  ------------------
 6081|  1.66k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.66k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 64, False: 1.60k]
  ------------------
 6084|  1.66k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 104, False: 1.50k]
  ------------------
 6085|    168|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 82, False: 86]
  ------------------
 6086|    168|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 50, False: 32]
  ------------------
 6087|     50|                return result_type{rng.begin(), 0};
 6088|     50|            }
 6089|    118|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    118|                             specs.fill, need_skipped_width);
 6091|    168|        }
 6092|  1.50k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.47k, False: 22]
  ------------------
 6093|  1.50k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.20k, False: 276]
  ------------------
 6094|  1.50k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 592, False: 610]
  |  Branch (6094:35): [True: 576, False: 16]
  ------------------
 6095|  1.20k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 144, False: 482]
  ------------------
 6096|    694|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 118, False: 26]
  ------------------
 6097|    694|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 118, False: 576]
  ------------------
 6098|    118|                const auto initial_width =
 6099|    118|                    specs.precision - prefix_width - value_width;
 6100|    118|                auto max_width_view = take_width(rng, initial_width);
 6101|    118|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    118|                                  .transform_error(make_eof_scan_error));
 6103|    118|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    118|            }
 6105|  1.15k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 576]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    576|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  1.15k|                            make_eof_scan_error));
 6107|       |
 6108|  1.15k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 576, False: 0]
  ------------------
 6109|    576|                return result_type{
 6110|    576|                    it,
 6111|    576|                    calculate_text_width(make_contiguous_buffer(
 6112|    576|                                             ranges::subrange{rng.begin(), it})
 6113|    576|                                             .view())};
 6114|    576|            }
 6115|      0|            return result_type{it, 0};
 6116|  1.15k|        }
 6117|    806|        return result_type{rng.begin(), 0};
 6118|  1.50k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  3.91k|    {
 6193|  3.91k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.91k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.91k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.91k|            auto rd = make_reader<T, char_type>();
 6198|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 532]
  |  |  ------------------
  ------------------
 6199|  3.37k|                return unexpected(e);
 6200|  3.37k|            }
 6201|       |
 6202|    532|            return impl(rd, range, value);
 6203|  3.91k|        }
 6204|  3.91k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.91k|            auto rd = make_reader<T, char_type>();
 6206|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.91k|                return unexpected(e);
 6208|  3.91k|            }
 6209|       |
 6210|  3.91k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.91k|                specs.width != 0) {
 6212|  3.91k|                return impl(rd, range, value);
 6213|  3.91k|            }
 6214|       |
 6215|  3.91k|            auto crange = get_as_contiguous(range);
 6216|  3.91k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.91k|            return ranges::next(range.begin(),
 6218|  3.91k|                                ranges::distance(crange.begin(), it));
 6219|  3.91k|        }
 6220|  3.91k|        else {
 6221|  3.91k|            SCN_EXPECT(false);
 6222|  3.91k|            SCN_UNREACHABLE;
 6223|  3.91k|        }
 6224|  3.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    532|    {
 6124|    532|        const bool need_skipped_width =
 6125|    532|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 258, False: 274]
  |  Branch (6125:33): [True: 168, False: 106]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    532|        auto it = rng.begin();
 6129|    532|        std::ptrdiff_t prefix_width = 0;
 6130|    532|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 176, False: 356]
  ------------------
 6131|    176|            auto max_width_view = take_width(rng, specs.precision);
 6132|    176|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    176|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    176|            it = prefix_result.first.base();
 6135|    176|            prefix_width = prefix_result.second;
 6136|    176|        }
 6137|    356|        else {
 6138|    356|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    356|            std::tie(it, prefix_width) = prefix_result;
 6140|    356|        }
 6141|    532|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    532|        std::ptrdiff_t value_width = 0;
 6145|    532|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 176, False: 356]
  ------------------
 6146|    176|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 174]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    174|            const auto initial_width = specs.precision - prefix_width;
 6154|    174|            auto max_width_view =
 6155|    174|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    174|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    356|        else {
 6161|    356|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    356|    }                                                  \
  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  3.91k|    {
 6193|  3.91k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.91k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.91k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.91k|            auto rd = make_reader<T, char_type>();
 6198|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 532]
  |  |  ------------------
  ------------------
 6199|  3.37k|                return unexpected(e);
 6200|  3.37k|            }
 6201|       |
 6202|    532|            return impl(rd, range, value);
 6203|  3.91k|        }
 6204|  3.91k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.91k|            auto rd = make_reader<T, char_type>();
 6206|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.91k|                return unexpected(e);
 6208|  3.91k|            }
 6209|       |
 6210|  3.91k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.91k|                specs.width != 0) {
 6212|  3.91k|                return impl(rd, range, value);
 6213|  3.91k|            }
 6214|       |
 6215|  3.91k|            auto crange = get_as_contiguous(range);
 6216|  3.91k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.91k|            return ranges::next(range.begin(),
 6218|  3.91k|                                ranges::distance(crange.begin(), it));
 6219|  3.91k|        }
 6220|  3.91k|        else {
 6221|  3.91k|            SCN_EXPECT(false);
 6222|  3.91k|            SCN_UNREACHABLE;
 6223|  3.91k|        }
 6224|  3.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    532|    {
 6124|    532|        const bool need_skipped_width =
 6125|    532|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 258, False: 274]
  |  Branch (6125:33): [True: 168, False: 106]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    532|        auto it = rng.begin();
 6129|    532|        std::ptrdiff_t prefix_width = 0;
 6130|    532|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 176, False: 356]
  ------------------
 6131|    176|            auto max_width_view = take_width(rng, specs.precision);
 6132|    176|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    176|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    176|            it = prefix_result.first.base();
 6135|    176|            prefix_width = prefix_result.second;
 6136|    176|        }
 6137|    356|        else {
 6138|    356|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    356|            std::tie(it, prefix_width) = prefix_result;
 6140|    356|        }
 6141|    532|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    532|        std::ptrdiff_t value_width = 0;
 6145|    532|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 176, False: 356]
  ------------------
 6146|    176|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 174]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    174|            const auto initial_width = specs.precision - prefix_width;
 6154|    174|            auto max_width_view =
 6155|    174|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    174|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    356|        else {
 6161|    356|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    356|    }                                                  \
  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  3.87k|    {
 6193|  3.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.87k|            auto rd = make_reader<T, char_type>();
 6198|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.40k, False: 470]
  |  |  ------------------
  ------------------
 6199|  3.40k|                return unexpected(e);
 6200|  3.40k|            }
 6201|       |
 6202|    470|            return impl(rd, range, value);
 6203|  3.87k|        }
 6204|  3.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.87k|            auto rd = make_reader<T, char_type>();
 6206|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.87k|                return unexpected(e);
 6208|  3.87k|            }
 6209|       |
 6210|  3.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.87k|                specs.width != 0) {
 6212|  3.87k|                return impl(rd, range, value);
 6213|  3.87k|            }
 6214|       |
 6215|  3.87k|            auto crange = get_as_contiguous(range);
 6216|  3.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.87k|            return ranges::next(range.begin(),
 6218|  3.87k|                                ranges::distance(crange.begin(), it));
 6219|  3.87k|        }
 6220|  3.87k|        else {
 6221|  3.87k|            SCN_EXPECT(false);
 6222|  3.87k|            SCN_UNREACHABLE;
 6223|  3.87k|        }
 6224|  3.87k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  3.87k|    {
 5753|  3.87k|        reader_error_handler eh{};
 5754|  3.87k|        detail::check_pointer_type_specs(specs, eh);
 5755|  3.87k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.40k, False: 470]
  |  |  ------------------
  ------------------
 5756|  3.40k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  3.40k|        }
 5758|    470|        return {};
 5759|  3.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    470|    {
 6124|    470|        const bool need_skipped_width =
 6125|    470|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 256, False: 214]
  |  Branch (6125:33): [True: 138, False: 76]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    470|        auto it = rng.begin();
 6129|    470|        std::ptrdiff_t prefix_width = 0;
 6130|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 146, False: 324]
  ------------------
 6131|    146|            auto max_width_view = take_width(rng, specs.precision);
 6132|    146|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    146|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    146|            it = prefix_result.first.base();
 6135|    146|            prefix_width = prefix_result.second;
 6136|    146|        }
 6137|    324|        else {
 6138|    324|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    324|            std::tie(it, prefix_width) = prefix_result;
 6140|    324|        }
 6141|    470|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    470|        std::ptrdiff_t value_width = 0;
 6145|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 146, False: 324]
  ------------------
 6146|    146|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 144]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    144|            const auto initial_width = specs.precision - prefix_width;
 6154|    144|            auto max_width_view =
 6155|    144|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    144|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    144|    }                                                  \
  |  |  |  | 3671|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    324|        else {
 6161|    324|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 324, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    324|    }                                                  \
  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    144|    {
 5782|    144|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    144|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    144|        return read_default(range, value, loc);
 5784|    144|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    144|    {
 5765|    144|        detail::format_specs specs{};
 5766|    144|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    144|        std::uintptr_t intvalue{};
 5769|    144|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    144|    }                                                  \
  |  |  |  | 3671|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    144|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    324|    {
 5782|    324|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    324|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    324|        return read_default(range, value, loc);
 5784|    324|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  3.91k|    {
 6193|  3.91k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.91k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.91k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.91k|            auto rd = make_reader<T, char_type>();
 6198|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 602]
  |  |  ------------------
  ------------------
 6199|  3.30k|                return unexpected(e);
 6200|  3.30k|            }
 6201|       |
 6202|    602|            return impl(rd, range, value);
 6203|  3.91k|        }
 6204|  3.91k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.91k|            auto rd = make_reader<T, char_type>();
 6206|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.91k|                return unexpected(e);
 6208|  3.91k|            }
 6209|       |
 6210|  3.91k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.91k|                specs.width != 0) {
 6212|  3.91k|                return impl(rd, range, value);
 6213|  3.91k|            }
 6214|       |
 6215|  3.91k|            auto crange = get_as_contiguous(range);
 6216|  3.91k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.91k|            return ranges::next(range.begin(),
 6218|  3.91k|                                ranges::distance(crange.begin(), it));
 6219|  3.91k|        }
 6220|  3.91k|        else {
 6221|  3.91k|            SCN_EXPECT(false);
 6222|  3.91k|            SCN_UNREACHABLE;
 6223|  3.91k|        }
 6224|  3.91k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.91k|    {
 3040|  3.91k|        reader_error_handler eh{};
 3041|  3.91k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.91k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 602]
  |  |  ------------------
  ------------------
 3043|  3.30k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  3.30k|        }
 3045|    602|        return {};
 3046|  3.91k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  3.91k|    {
 3051|  3.91k|        return static_cast<Derived&>(*this);
 3052|  3.91k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  3.91k|    {
 5497|  3.91k|        detail::check_bool_type_specs(specs, eh);
 5498|  3.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    602|    {
 6124|    602|        const bool need_skipped_width =
 6125|    602|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 268, False: 334]
  |  Branch (6125:33): [True: 190, False: 144]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    602|        auto it = rng.begin();
 6129|    602|        std::ptrdiff_t prefix_width = 0;
 6130|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 200, False: 402]
  ------------------
 6131|    200|            auto max_width_view = take_width(rng, specs.precision);
 6132|    200|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    200|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    200|            it = prefix_result.first.base();
 6135|    200|            prefix_width = prefix_result.second;
 6136|    200|        }
 6137|    402|        else {
 6138|    402|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    402|            std::tie(it, prefix_width) = prefix_result;
 6140|    402|        }
 6141|    602|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    602|        std::ptrdiff_t value_width = 0;
 6145|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 200, False: 402]
  ------------------
 6146|    200|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 198]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    198|            const auto initial_width = specs.precision - prefix_width;
 6154|    198|            auto max_width_view =
 6155|    198|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    198|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    402|        else {
 6161|    402|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 402, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    402|    }                                                  \
  |  | 3671|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    198|    {
 5516|    198|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    198|#if !SCN_DISABLE_LOCALE
 5519|    198|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 6, False: 192]
  ------------------
 5520|      6|            return rd.read_localized(range, loc, value);
 5521|      6|        }
 5522|    192|#endif
 5523|       |
 5524|    192|        return rd.read_classic(range, value);
 5525|    198|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    600|    {
 5529|    600|        SCN_GCC_COMPAT_PUSH
 5530|    600|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    600|        switch (specs.type) {
 5533|     68|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 68, False: 532]
  ------------------
 5534|     68|                return bool_reader_base::allow_text;
 5535|       |
 5536|      8|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 8, False: 592]
  ------------------
 5537|     14|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 6, False: 594]
  ------------------
 5538|     20|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 594]
  ------------------
 5539|     34|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 14, False: 586]
  ------------------
 5540|     46|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 12, False: 588]
  ------------------
 5541|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 16, False: 584]
  ------------------
 5542|     62|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    470|            default:
  ------------------
  |  Branch (5544:13): [True: 470, False: 130]
  ------------------
 5545|    470|                return bool_reader_base::allow_text |
 5546|    470|                       bool_reader_base::allow_numeric;
 5547|    600|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    600|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|      6|    {
 5428|      6|        scan_error err{scan_error::invalid_scanned_value,
 5429|      6|                       "Failed to read boolean"};
 5430|       |
 5431|      6|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 6, False: 0]
  ------------------
 5432|      6|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 6]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|      6|            else {
 5436|      6|                err = r.error();
 5437|      6|            }
 5438|      6|        }
 5439|       |
 5440|      6|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 6, False: 0]
  ------------------
 5441|      6|            auto stdloc = loc.get<std::locale>();
 5442|      6|            const auto& numpunct =
 5443|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      6|            const auto truename = numpunct.truename();
 5445|      6|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      6|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 6]
  ------------------
 5448|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      6|            else {
 5452|      6|                err = r.error();
 5453|      6|            }
 5454|      6|        }
 5455|       |
 5456|      6|        return unexpected(err);
 5457|      6|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    174|    {
 5384|    174|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 174]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    174|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 174]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    174|        return unexpected_scan_error(
 5394|    174|            scan_error::invalid_scanned_value,
 5395|    174|            "Failed to read numeric boolean value: No match");
 5396|    174|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    348|{
 2146|    348|    auto it = read_code_unit(range);
 2147|    348|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    348|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 348, False: 0]
  |  |  ------------------
  ------------------
 2152|    348|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    348|        return unexpected(parse_error::error);
 2154|    348|    }
 2155|       |
 2156|      0|    return *it;
 2157|    348|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|      6|    {
 5468|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      6|        const auto shorter = std::pair{
 5470|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 6, False: 0]
  ------------------
 5471|      6|        const auto longer = std::pair{
 5472|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 6]
  ------------------
 5473|       |
 5474|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 6]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 6]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      6|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      6|                                     "read_textual: No match");
 5485|      6|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     12|{
 2179|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      6|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2185|      6|        return unexpected(parse_error::error);
 2186|      6|    }
 2187|      0|    return it;
 2188|      6|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    340|{
 1857|    340|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    340|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    340|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    340|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    340|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    340|        if (sz < count) {
 1862|    340|            return unexpected(eof_error::eof);
 1863|    340|        }
 1864|       |
 1865|    340|        return ranges::next(range.begin(), count);
 1866|    340|    }
 1867|    340|    else {
 1868|    340|        auto it = range.begin();
 1869|    340|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 340]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.73k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.45k, False: 278]
  ------------------
 1874|  1.45k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 62, False: 1.39k]
  ------------------
 1875|     62|                return unexpected(eof_error::eof);
 1876|     62|            }
 1877|  1.45k|        }
 1878|       |
 1879|    278|        return it;
 1880|    340|    }
 1881|    340|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    340|{
 1095|    340|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    340|        return r.size();
 1097|    340|    }
 1098|    340|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    340|                           ranges::const_iterator_t<Range>,
 1100|    340|                           typename detail::basic_scan_buffer<
 1101|    340|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    340|        if constexpr (ranges::common_range<Range>) {
 1103|    340|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    340|        }
 1105|    340|        else {
 1106|    340|            if (r.begin().stores_parent()) {
 1107|    340|                return static_cast<size_t>(
 1108|    340|                    r.begin().parent()->chars_available() -
 1109|    340|                    r.begin().position());
 1110|    340|            }
 1111|    340|            return r.begin().contiguous_segment().size();
 1112|    340|        }
 1113|    340|    }
 1114|    340|    else {
 1115|    340|        return 0;
 1116|    340|    }
 1117|    340|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    192|    {
 5355|    192|        scan_error err{scan_error::invalid_scanned_value,
 5356|    192|                       "Failed to read boolean"};
 5357|       |
 5358|    192|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 168, False: 24]
  ------------------
 5359|    168|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 168]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    168|            else {
 5363|    168|                err = r.error();
 5364|    168|            }
 5365|    168|        }
 5366|       |
 5367|    192|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 164, False: 28]
  ------------------
 5368|    164|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 164]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    164|            else {
 5372|    164|                err = r.error();
 5373|    164|            }
 5374|    164|        }
 5375|       |
 5376|    192|        return unexpected(err);
 5377|    192|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    164|    {
 5402|    164|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 164]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    164|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 164]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    164|        return unexpected_scan_error(
 5412|    164|            scan_error::invalid_scanned_value,
 5413|    164|            "Failed to read textual boolean value: No match");
 5414|    164|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    328|{
 2194|    328|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     56|    }                                                  \
  |  |  |  | 3671|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    272|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    272|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    272|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    272|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    272|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    272|            return unexpected(parse_error::error);
 2202|    272|        }
 2203|    272|        return it;
 2204|    272|    }
 2205|    272|    else {
 2206|    272|        auto range_it = range.begin();
 2207|    272|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 272, False: 0]
  ------------------
 2208|    272|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  ------------------
  ------------------
 2209|    272|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    272|                return unexpected(parse_error::error);
 2211|    272|            }
 2212|    272|        }
 2213|      0|        return it;
 2214|    272|    }
 2215|    272|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    402|    {
 5516|    402|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    402|#if !SCN_DISABLE_LOCALE
 5519|    402|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 24, False: 378]
  ------------------
 5520|     24|            return rd.read_localized(range, loc, value);
 5521|     24|        }
 5522|    378|#endif
 5523|       |
 5524|    378|        return rd.read_classic(range, value);
 5525|    402|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     24|    {
 5428|     24|        scan_error err{scan_error::invalid_scanned_value,
 5429|     24|                       "Failed to read boolean"};
 5430|       |
 5431|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 22, False: 2]
  ------------------
 5432|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 22]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     22|            else {
 5436|     22|                err = r.error();
 5437|     22|            }
 5438|     22|        }
 5439|       |
 5440|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 4, False: 20]
  ------------------
 5441|      4|            auto stdloc = loc.get<std::locale>();
 5442|      4|            const auto& numpunct =
 5443|      4|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      4|            const auto truename = numpunct.truename();
 5445|      4|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      4|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 4]
  ------------------
 5448|      4|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      4|            else {
 5452|      4|                err = r.error();
 5453|      4|            }
 5454|      4|        }
 5455|       |
 5456|     24|        return unexpected(err);
 5457|     24|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|      4|    {
 5468|      4|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      4|        const auto shorter = std::pair{
 5470|      4|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 4, False: 0]
  ------------------
 5471|      4|        const auto longer = std::pair{
 5472|      4|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 4]
  ------------------
 5473|       |
 5474|      4|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 4]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      4|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 4]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      4|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      4|                                     "read_textual: No match");
 5485|      4|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|      8|{
 2179|      8|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      6|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2185|      6|        return unexpected(parse_error::error);
 2186|      6|    }
 2187|      0|    return it;
 2188|      6|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  3.87k|    {
 6193|  3.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.87k|            auto rd = make_reader<T, char_type>();
 6198|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 506]
  |  |  ------------------
  ------------------
 6199|  3.37k|                return unexpected(e);
 6200|  3.37k|            }
 6201|       |
 6202|    506|            return impl(rd, range, value);
 6203|  3.87k|        }
 6204|  3.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.87k|            auto rd = make_reader<T, char_type>();
 6206|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.87k|                return unexpected(e);
 6208|  3.87k|            }
 6209|       |
 6210|  3.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.87k|                specs.width != 0) {
 6212|  3.87k|                return impl(rd, range, value);
 6213|  3.87k|            }
 6214|       |
 6215|  3.87k|            auto crange = get_as_contiguous(range);
 6216|  3.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.87k|            return ranges::next(range.begin(),
 6218|  3.87k|                                ranges::distance(crange.begin(), it));
 6219|  3.87k|        }
 6220|  3.87k|        else {
 6221|  3.87k|            SCN_EXPECT(false);
 6222|  3.87k|            SCN_UNREACHABLE;
 6223|  3.87k|        }
 6224|  3.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    506|    {
 6124|    506|        const bool need_skipped_width =
 6125|    506|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 258, False: 248]
  |  Branch (6125:33): [True: 162, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    506|        auto it = rng.begin();
 6129|    506|        std::ptrdiff_t prefix_width = 0;
 6130|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 170, False: 336]
  ------------------
 6131|    170|            auto max_width_view = take_width(rng, specs.precision);
 6132|    170|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    170|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    170|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    170|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 170]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    170|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    170|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    170|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    170|            it = prefix_result.first.base();
 6135|    170|            prefix_width = prefix_result.second;
 6136|    170|        }
 6137|    336|        else {
 6138|    336|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    336|            std::tie(it, prefix_width) = prefix_result;
 6140|    336|        }
 6141|    506|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    506|        std::ptrdiff_t value_width = 0;
 6145|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 170, False: 336]
  ------------------
 6146|    170|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 168]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    168|            const auto initial_width = specs.precision - prefix_width;
 6154|    168|            auto max_width_view =
 6155|    168|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    168|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    140|            it = w_it.base();
 6158|    140|            value_width = initial_width - w_it.count();
 6159|    140|        }
 6160|    336|        else {
 6161|    336|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 14, False: 322]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     14|    }                                                  \
  |  | 3671|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    322|                                             specs, value, loc));
 6163|       |
 6164|    322|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 248, False: 74]
  ------------------
 6165|    248|                value_width = calculate_text_width(
 6166|    248|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    248|                        .view());
 6168|    248|            }
 6169|    322|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    462|        std::ptrdiff_t postfix_width = 0;
 6173|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 462, False: 0]
  ------------------
 6174|    462|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    462|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    462|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    462|                                 value_width));
 6178|    462|            std::tie(it, postfix_width) = postfix_result;
 6179|    462|        }
 6180|       |
 6181|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    462|                                                 value_width, postfix_width);
 6183|    462|            !e) {
  ------------------
  |  Branch (6183:13): [True: 246, False: 216]
  ------------------
 6184|    246|            return unexpected(e);
 6185|    246|        }
 6186|       |
 6187|    216|        return it;
 6188|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  3.91k|    {
 6193|  3.91k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.91k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.91k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.91k|            auto rd = make_reader<T, char_type>();
 6198|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.39k, False: 520]
  |  |  ------------------
  ------------------
 6199|  3.39k|                return unexpected(e);
 6200|  3.39k|            }
 6201|       |
 6202|    520|            return impl(rd, range, value);
 6203|  3.91k|        }
 6204|  3.91k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.91k|            auto rd = make_reader<T, char_type>();
 6206|  3.91k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.91k|                return unexpected(e);
 6208|  3.91k|            }
 6209|       |
 6210|  3.91k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.91k|                specs.width != 0) {
 6212|  3.91k|                return impl(rd, range, value);
 6213|  3.91k|            }
 6214|       |
 6215|  3.91k|            auto crange = get_as_contiguous(range);
 6216|  3.91k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.91k|            return ranges::next(range.begin(),
 6218|  3.91k|                                ranges::distance(crange.begin(), it));
 6219|  3.91k|        }
 6220|  3.91k|        else {
 6221|  3.91k|            SCN_EXPECT(false);
 6222|  3.91k|            SCN_UNREACHABLE;
 6223|  3.91k|        }
 6224|  3.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    520|    {
 6124|    520|        const bool need_skipped_width =
 6125|    520|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 262, False: 258]
  |  Branch (6125:33): [True: 166, False: 92]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    520|        auto it = rng.begin();
 6129|    520|        std::ptrdiff_t prefix_width = 0;
 6130|    520|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 176, False: 344]
  ------------------
 6131|    176|            auto max_width_view = take_width(rng, specs.precision);
 6132|    176|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    176|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    176|            it = prefix_result.first.base();
 6135|    176|            prefix_width = prefix_result.second;
 6136|    176|        }
 6137|    344|        else {
 6138|    344|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    344|            std::tie(it, prefix_width) = prefix_result;
 6140|    344|        }
 6141|    520|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    520|        std::ptrdiff_t value_width = 0;
 6145|    520|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 176, False: 344]
  ------------------
 6146|    176|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 174]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    174|            const auto initial_width = specs.precision - prefix_width;
 6154|    174|            auto max_width_view =
 6155|    174|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    174|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    344|        else {
 6161|    344|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 344, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    344|    }                                                  \
  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.87k|    {
 6193|  3.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.87k|            auto rd = make_reader<T, char_type>();
 6198|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 3.78k]
  |  |  ------------------
  ------------------
 6199|     94|                return unexpected(e);
 6200|     94|            }
 6201|       |
 6202|  3.78k|            return impl(rd, range, value);
 6203|  3.87k|        }
 6204|  3.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.87k|            auto rd = make_reader<T, char_type>();
 6206|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.87k|                return unexpected(e);
 6208|  3.87k|            }
 6209|       |
 6210|  3.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.87k|                specs.width != 0) {
 6212|  3.87k|                return impl(rd, range, value);
 6213|  3.87k|            }
 6214|       |
 6215|  3.87k|            auto crange = get_as_contiguous(range);
 6216|  3.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.87k|            return ranges::next(range.begin(),
 6218|  3.87k|                                ranges::distance(crange.begin(), it));
 6219|  3.87k|        }
 6220|  3.87k|        else {
 6221|  3.87k|            SCN_EXPECT(false);
 6222|  3.87k|            SCN_UNREACHABLE;
 6223|  3.87k|        }
 6224|  3.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  3.78k|    {
 6124|  3.78k|        const bool need_skipped_width =
 6125|  3.78k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 3.02k, False: 754]
  |  Branch (6125:33): [True: 190, False: 564]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.78k|        auto it = rng.begin();
 6129|  3.78k|        std::ptrdiff_t prefix_width = 0;
 6130|  3.78k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 202, False: 3.58k]
  ------------------
 6131|    202|            auto max_width_view = take_width(rng, specs.precision);
 6132|    202|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    202|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    202|            it = prefix_result.first.base();
 6135|    202|            prefix_width = prefix_result.second;
 6136|    202|        }
 6137|  3.58k|        else {
 6138|  3.58k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.58k|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.58k|        }
 6141|  3.78k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.78k|        std::ptrdiff_t value_width = 0;
 6145|  3.78k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 202, False: 3.58k]
  ------------------
 6146|    202|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 198]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    198|            const auto initial_width = specs.precision - prefix_width;
 6154|    198|            auto max_width_view =
 6155|    198|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    198|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    120|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     78|            it = w_it.base();
 6158|     78|            value_width = initial_width - w_it.count();
 6159|     78|        }
 6160|  3.58k|        else {
 6161|  3.58k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.00k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.00k|    }                                                  \
  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    576|                                             specs, value, loc));
 6163|       |
 6164|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 354, False: 222]
  ------------------
 6165|    354|                value_width = calculate_text_width(
 6166|    354|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    354|                        .view());
 6168|    354|            }
 6169|    576|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    654|        std::ptrdiff_t postfix_width = 0;
 6173|    654|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 402, False: 252]
  ------------------
 6174|    402|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    402|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    402|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    402|                                 value_width));
 6178|    402|            std::tie(it, postfix_width) = postfix_result;
 6179|    402|        }
 6180|       |
 6181|    654|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    654|                                                 value_width, postfix_width);
 6183|    654|            !e) {
  ------------------
  |  Branch (6183:13): [True: 140, False: 514]
  ------------------
 6184|    140|            return unexpected(e);
 6185|    140|        }
 6186|       |
 6187|    514|        return it;
 6188|    654|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.87k|    {
 6193|  3.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.87k|            auto rd = make_reader<T, char_type>();
 6198|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 3.78k]
  |  |  ------------------
  ------------------
 6199|     94|                return unexpected(e);
 6200|     94|            }
 6201|       |
 6202|  3.78k|            return impl(rd, range, value);
 6203|  3.87k|        }
 6204|  3.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.87k|            auto rd = make_reader<T, char_type>();
 6206|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.87k|                return unexpected(e);
 6208|  3.87k|            }
 6209|       |
 6210|  3.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.87k|                specs.width != 0) {
 6212|  3.87k|                return impl(rd, range, value);
 6213|  3.87k|            }
 6214|       |
 6215|  3.87k|            auto crange = get_as_contiguous(range);
 6216|  3.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.87k|            return ranges::next(range.begin(),
 6218|  3.87k|                                ranges::distance(crange.begin(), it));
 6219|  3.87k|        }
 6220|  3.87k|        else {
 6221|  3.87k|            SCN_EXPECT(false);
 6222|  3.87k|            SCN_UNREACHABLE;
 6223|  3.87k|        }
 6224|  3.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  3.78k|    {
 6124|  3.78k|        const bool need_skipped_width =
 6125|  3.78k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 3.02k, False: 754]
  |  Branch (6125:33): [True: 190, False: 564]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.78k|        auto it = rng.begin();
 6129|  3.78k|        std::ptrdiff_t prefix_width = 0;
 6130|  3.78k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 202, False: 3.58k]
  ------------------
 6131|    202|            auto max_width_view = take_width(rng, specs.precision);
 6132|    202|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    202|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    202|            it = prefix_result.first.base();
 6135|    202|            prefix_width = prefix_result.second;
 6136|    202|        }
 6137|  3.58k|        else {
 6138|  3.58k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.58k|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.58k|        }
 6141|  3.78k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.78k|        std::ptrdiff_t value_width = 0;
 6145|  3.78k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 202, False: 3.58k]
  ------------------
 6146|    202|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 198]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    198|            const auto initial_width = specs.precision - prefix_width;
 6154|    198|            auto max_width_view =
 6155|    198|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    198|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    120|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     78|            it = w_it.base();
 6158|     78|            value_width = initial_width - w_it.count();
 6159|     78|        }
 6160|  3.58k|        else {
 6161|  3.58k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.00k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.00k|    }                                                  \
  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    576|                                             specs, value, loc));
 6163|       |
 6164|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 354, False: 222]
  ------------------
 6165|    354|                value_width = calculate_text_width(
 6166|    354|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    354|                        .view());
 6168|    354|            }
 6169|    576|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    654|        std::ptrdiff_t postfix_width = 0;
 6173|    654|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 402, False: 252]
  ------------------
 6174|    402|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    402|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    402|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    402|                                 value_width));
 6178|    402|            std::tie(it, postfix_width) = postfix_result;
 6179|    402|        }
 6180|       |
 6181|    654|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    654|                                                 value_width, postfix_width);
 6183|    654|            !e) {
  ------------------
  |  Branch (6183:13): [True: 140, False: 514]
  ------------------
 6184|    140|            return unexpected(e);
 6185|    140|        }
 6186|       |
 6187|    514|        return it;
 6188|    654|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.87k|    {
 6193|  3.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.87k|            auto rd = make_reader<T, char_type>();
 6198|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 3.78k]
  |  |  ------------------
  ------------------
 6199|     94|                return unexpected(e);
 6200|     94|            }
 6201|       |
 6202|  3.78k|            return impl(rd, range, value);
 6203|  3.87k|        }
 6204|  3.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.87k|            auto rd = make_reader<T, char_type>();
 6206|  3.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.87k|                return unexpected(e);
 6208|  3.87k|            }
 6209|       |
 6210|  3.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.87k|                specs.width != 0) {
 6212|  3.87k|                return impl(rd, range, value);
 6213|  3.87k|            }
 6214|       |
 6215|  3.87k|            auto crange = get_as_contiguous(range);
 6216|  3.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.87k|            return ranges::next(range.begin(),
 6218|  3.87k|                                ranges::distance(crange.begin(), it));
 6219|  3.87k|        }
 6220|  3.87k|        else {
 6221|  3.87k|            SCN_EXPECT(false);
 6222|  3.87k|            SCN_UNREACHABLE;
 6223|  3.87k|        }
 6224|  3.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  3.78k|    {
 6124|  3.78k|        const bool need_skipped_width =
 6125|  3.78k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 3.02k, False: 754]
  |  Branch (6125:33): [True: 190, False: 564]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.78k|        auto it = rng.begin();
 6129|  3.78k|        std::ptrdiff_t prefix_width = 0;
 6130|  3.78k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 202, False: 3.58k]
  ------------------
 6131|    202|            auto max_width_view = take_width(rng, specs.precision);
 6132|    202|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    202|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    202|            it = prefix_result.first.base();
 6135|    202|            prefix_width = prefix_result.second;
 6136|    202|        }
 6137|  3.58k|        else {
 6138|  3.58k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.58k|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.58k|        }
 6141|  3.78k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.78k|        std::ptrdiff_t value_width = 0;
 6145|  3.78k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 202, False: 3.58k]
  ------------------
 6146|    202|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 198]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    198|            const auto initial_width = specs.precision - prefix_width;
 6154|    198|            auto max_width_view =
 6155|    198|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    198|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    120|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     78|            it = w_it.base();
 6158|     78|            value_width = initial_width - w_it.count();
 6159|     78|        }
 6160|  3.58k|        else {
 6161|  3.58k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.00k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.00k|    }                                                  \
  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    576|                                             specs, value, loc));
 6163|       |
 6164|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 354, False: 222]
  ------------------
 6165|    354|                value_width = calculate_text_width(
 6166|    354|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    354|                        .view());
 6168|    354|            }
 6169|    576|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    654|        std::ptrdiff_t postfix_width = 0;
 6173|    654|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 402, False: 252]
  ------------------
 6174|    402|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    402|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    402|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    402|                                 value_width));
 6178|    402|            std::tie(it, postfix_width) = postfix_result;
 6179|    402|        }
 6180|       |
 6181|    654|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    654|                                                 value_width, postfix_width);
 6183|    654|            !e) {
  ------------------
  |  Branch (6183:13): [True: 140, False: 514]
  ------------------
 6184|    140|            return unexpected(e);
 6185|    140|        }
 6186|       |
 6187|    514|        return it;
 6188|    654|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    684|    {
 3492|    684|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    684|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    684|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    684|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    684|                return unexpected_scan_error(
 3498|    684|                    scan_error::invalid_scanned_value,
 3499|    684|                    "Unexpected '-' sign when parsing an "
 3500|    684|                    "unsigned value");
 3501|    684|            }
 3502|    684|        }
 3503|       |
 3504|    684|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 684]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.36k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.36k|                parse_integer_digits_without_thsep(
 3511|  1.36k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.36k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.36k|        auto buf = make_contiguous_buffer(
 3515|  1.36k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.36k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 684, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    684|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    684|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    684|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    684|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    684|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    684|    {
 3492|    684|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    684|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    684|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    684|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 684]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    684|        }
 3503|       |
 3504|    684|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 684]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.36k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.36k|                parse_integer_digits_without_thsep(
 3511|  1.36k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.36k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.36k|        auto buf = make_contiguous_buffer(
 3515|  1.36k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.36k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 684, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    684|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    684|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    684|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    684|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    684|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.36k|    }

LLVMFuzzerTestOneInput:
   68|  6.67k|{
   69|  6.67k|    scn::fuzz::run(data, size);
   70|  6.67k|    return 0;
   71|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  6.67k|{
   52|  6.67k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 6.67k]
  |  Branch (52:35): [True: 0, False: 6.67k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  6.67k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  6.67k|    run_for_source(sv);
   59|  6.67k|    run_for_source(wsv_reinterpret);
   60|  6.67k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 6.67k, False: 0]
  ------------------
   61|  6.67k|        run_for_source(wsv_transcode);
   62|  6.67k|    }
   63|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  6.67k|{
   37|  6.67k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  6.67k|    run_for_type<char_type>(source);
   40|  6.67k|    run_for_type<int>(source);
   41|  6.67k|    run_for_type<unsigned>(source);
   42|  6.67k|    run_for_type<double>(source);
   43|  6.67k|    run_for_type<bool>(source);
   44|  6.67k|    run_for_type<void*>(source);
   45|  6.67k|    run_for_type<std::string>(source);
   46|  6.67k|    run_for_type<std::wstring>(source);
   47|  6.67k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  6.67k|{
   25|  6.67k|    {
   26|  6.67k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.67k|    }
   28|  6.67k|    {
   29|  6.67k|        auto _ =
   30|  6.67k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.67k|    }
   32|  6.67k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  13.3k|{
   37|  13.3k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  13.3k|    run_for_type<char_type>(source);
   40|  13.3k|    run_for_type<int>(source);
   41|  13.3k|    run_for_type<unsigned>(source);
   42|  13.3k|    run_for_type<double>(source);
   43|  13.3k|    run_for_type<bool>(source);
   44|  13.3k|    run_for_type<void*>(source);
   45|  13.3k|    run_for_type<std::string>(source);
   46|  13.3k|    run_for_type<std::wstring>(source);
   47|  13.3k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  13.3k|{
   25|  13.3k|    {
   26|  13.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  13.3k|    }
   28|  13.3k|    {
   29|  13.3k|        auto _ =
   30|  13.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  13.3k|    }
   32|  13.3k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  6.67k|{
   52|  6.67k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  6.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  6.67k|    string_buffer.resize(size);
   56|  6.67k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  6.67k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  6.67k|    const auto wsv_reinterpret_size =
   61|  6.67k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 90, False: 6.58k]
  ------------------
   62|  6.67k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  6.67k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  6.67k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  6.67k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  6.67k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  6.67k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  6.67k|}

