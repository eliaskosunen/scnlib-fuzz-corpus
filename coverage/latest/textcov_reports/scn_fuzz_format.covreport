_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  8.91M|{
 4068|  8.91M|    if constexpr (sizeof(U) == 1) {
 4069|  8.91M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  8.91M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  8.91M|{
 4032|  8.91M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  8.91M|    SCN_GCC_COMPAT_PUSH
 4035|  8.91M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  8.91M|    constexpr char lengths[] =
 4037|  8.91M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  8.91M|        "\1\1\1\1\1\1\1\1"
 4039|  8.91M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  8.91M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  8.91M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  8.91M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  8.91M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  8.91M|    SCN_GCC_COMPAT_POP
 4046|  8.91M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  8.29M|{
 4274|  8.29M|    if constexpr (sizeof(CharT) == 1) {
 4275|  8.29M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  8.29M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  8.29M|{
 4087|  8.29M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  8.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  8.29M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  8.29M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  8.29M|    };
 4092|       |
 4093|  8.29M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 7.48M, False: 811k]
  ------------------
 4094|  7.48M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 6, False: 7.48M]
  ------------------
 4095|      6|            SCN_UNLIKELY_ATTR
 4096|      6|            return invalid_code_point;
 4097|      6|        }
 4098|  7.48M|        return static_cast<char32_t>(input[0]);
 4099|  7.48M|    }
 4100|       |
 4101|   811k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 760k, False: 50.5k]
  ------------------
 4102|   760k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 760k]
  ------------------
 4103|      0|            SCN_UNLIKELY_ATTR
 4104|      0|            return invalid_code_point;
 4105|      0|        }
 4106|   760k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 19.8k, False: 740k]
  ------------------
 4107|  19.8k|            SCN_UNLIKELY_ATTR
 4108|  19.8k|            return invalid_code_point;
 4109|  19.8k|        }
 4110|       |
 4111|   740k|        char32_t cp{};
 4112|   740k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   740k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   740k|        return cp;
 4115|   760k|    }
 4116|       |
 4117|  50.5k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 34.1k, False: 16.3k]
  ------------------
 4118|  34.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 0, False: 34.1k]
  ------------------
 4119|      0|            SCN_UNLIKELY_ATTR
 4120|      0|            return invalid_code_point;
 4121|      0|        }
 4122|  34.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 9.62k, False: 24.5k]
  ------------------
 4123|  34.1k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 231, False: 24.3k]
  ------------------
 4124|  9.85k|            SCN_UNLIKELY_ATTR
 4125|  9.85k|            return invalid_code_point;
 4126|  9.85k|        }
 4127|       |
 4128|  24.3k|        char32_t cp{};
 4129|  24.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  24.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  24.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  24.3k|        return cp;
 4133|  34.1k|    }
 4134|       |
 4135|  16.3k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 16.3k, False: 0]
  ------------------
 4136|  16.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 16.3k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  16.3k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 1.15k, False: 15.2k]
  ------------------
 4141|  1.15k|            SCN_UNLIKELY_ATTR
 4142|  1.15k|            return invalid_code_point;
 4143|  1.15k|        }
 4144|  15.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 14.7k, False: 467]
  ------------------
 4145|  15.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 96, False: 371]
  ------------------
 4146|  15.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 211, False: 160]
  ------------------
 4147|  15.0k|            SCN_UNLIKELY_ATTR
 4148|  15.0k|            return invalid_code_point;
 4149|  15.0k|        }
 4150|       |
 4151|    160|        char32_t cp{};
 4152|    160|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    160|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    160|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    160|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    160|        return cp;
 4157|  15.2k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   835k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   835k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   835k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.34M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.34M|    else {
 3966|  4.34M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.34M|                                       to_address(first), to_address(last)))};
 3968|  4.34M|    }
 3969|  4.34M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  13.0M|{
  316|  13.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  13.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  13.0M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  13.1M|{
  294|  13.1M|    return p;
  295|  13.1M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  3.30M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  3.30M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  3.30M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  3.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  3.30M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  3.30M|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6107|  54.8k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  54.8k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6038|  6.09k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.09k, False: 0]
  |  |  ------------------
  ------------------
 9317|  6.09k|        out = unexpected(in.error());
 9318|  6.09k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  6.09k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  54.8k|    {
 1740|  54.8k|        return has_value();
 1741|  54.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   109k|    {
  490|   109k|        return m_has_value;
  491|   109k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  54.6k|    {
 1746|  54.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  54.6k|        return this->get_unexpected().error();
 1748|  54.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  54.6k|    {
  473|  54.6k|        return m_unexpected;
  474|  54.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.60M|    {
  365|  1.60M|        return m_unexpected;
  366|  1.60M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   777k|        : m_unexpected(std::forward<Err>(e))
  350|   777k|    {
  351|   777k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   777k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   777k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  6.09k|        : base(unexpect, std::move(e.error())),
 1616|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.09k|    {
 1618|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.09k|          m_has_value(false)
  451|  6.09k|    {
  452|  6.09k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   974k|        : m_unexpected(std::forward<Args>(args)...)
  359|   974k|    {
  360|   974k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   974k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   974k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.09k|    {
 1316|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1556|  6.09k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  902|  6.09k|    {
  903|  6.09k|        assign_common(std::move(other));
  904|  6.09k|        return *this;
  905|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  6.09k|    {
  950|  6.09k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.09k, False: 0]
  ------------------
  951|  6.09k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.09k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.09k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.09k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.09k|    {
  456|  6.09k|        return m_value;
  457|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  6.09k|    {
 1046|  6.09k|        this->destroy_value();
 1047|  6.09k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.09k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.09k|    {
  504|  6.09k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.09k|                                  std::forward<Args>(args)...);
  506|  6.09k|        m_has_value = false;
  507|  6.09k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   164k|{
  396|   164k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   164k|        T(std::forward<Args>(args)...);
  398|   164k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.09k|    {
  473|  6.09k|        return m_unexpected;
  474|  6.09k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.09k|    {
  481|  6.09k|        return std::move(m_unexpected);
  482|  6.09k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6138|    216|    {
 6139|    216|        m_range = std::forward<Other>(r);
 6140|    216|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|    216|    {
 1795|    216|        return value();
 1796|    216|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|    216|    {
 1769|    216|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    216|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    216|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    216|        return this->get_value();
 1771|    216|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|    216|    {
  456|    216|        return m_value;
  457|    216|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9154|  27.4k|{
 9155|  27.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|  27.4k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9091|  27.4k|{
 9092|  27.4k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|  27.4k|    auto result = vscan_impl(buffer, format, args);
 9095|  27.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.3k, False: 108]
  |  |  ------------------
  ------------------
 9096|  27.3k|        return unexpected(result.error());
 9097|  27.3k|    }
 9098|    108|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|  27.4k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5074|  54.8k|{
 5075|  54.8k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  54.8k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  54.8k|                  "\n"
 5079|  54.8k|                  "Unsupported range type given as input to a scanning "
 5080|  54.8k|                  "function.\n"
 5081|  54.8k|                  "A range needs to have a character type (value type) "
 5082|  54.8k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  54.8k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  54.8k|                  "to be included.\n"
 5085|  54.8k|                  "See the scnlib documentation for more details.");
 5086|  54.8k|    static_assert(
 5087|  54.8k|        !std::is_same_v<T, custom_char_traits>,
 5088|  54.8k|        "\n"
 5089|  54.8k|        "Unsupported range type given as input to a scanning "
 5090|  54.8k|        "function.\n"
 5091|  54.8k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  54.8k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  54.8k|        "not supported.");
 5094|  54.8k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  54.8k|                  "\n"
 5096|  54.8k|                  "Unsupported range type given as input to a scanning "
 5097|  54.8k|                  "function.\n"
 5098|  54.8k|                  "file_marker_found cannot be used as an "
 5099|  54.8k|                  "source range type to scn::scan.\n"
 5100|  54.8k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  54.8k|                  "and do not provide an explicit source range, "
 5102|  54.8k|                  "or use scn::scan with a FILE* directly.");
 5103|  54.8k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  54.8k|                  "\n"
 5105|  54.8k|                  "Unsupported range type given as input to a scanning "
 5106|  54.8k|                  "function.\n"
 5107|  54.8k|                  "In order to be scannable, a range needs to satisfy "
 5108|  54.8k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  54.8k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  54.8k|                  "\n"
 5111|  54.8k|                  "Unsupported range type given as input to a scanning "
 5112|  54.8k|                  "function.\n"
 5113|  54.8k|                  "A range needs to model forward_range and have a valid "
 5114|  54.8k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  54.8k|                  "Examples of scannable ranges are std::string, "
 5116|  54.8k|                  "std::string_view, "
 5117|  54.8k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  54.8k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  54.8k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  54.8k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4966|  54.8k|{
 4967|  54.8k|    if constexpr (is_valid_char_type<CharT>) {
 4968|  54.8k|        return r;
 4969|       |        // return make_string_scan_buffer(r);
 4970|       |    }
 4971|       |    else {
 4972|       |        return invalid_char_type{};
 4973|       |    }
 4974|  54.8k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   164k|    {
 1740|   164k|        return has_value();
 1741|   164k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   330k|    {
  490|   330k|        return m_has_value;
  491|   330k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   164k|    {
 1746|   164k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   164k|        return this->get_unexpected().error();
 1748|   164k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   164k|    {
  473|   164k|        return m_unexpected;
  474|   164k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  54.6k|        : base(unexpect, std::move(e.error())),
 1616|  54.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  54.6k|    {
 1618|  54.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  54.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  54.6k|          m_has_value(false)
  451|  54.6k|    {
  452|  54.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  54.8k|    {
 1316|  54.8k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6368|    216|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|    216|                      ranges::iterator_t<SourceRange>>) {
 6371|    216|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|    216|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    216|    {
 2869|    216|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    216|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    216|    {
 2850|    216|        return decay_copy(t.begin());
 2851|    216|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   115k|{
 2094|   115k|    return SCN_FWD(t);
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   115k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6355|    216|{
 6356|    216|    return ranges::end(source);
 6357|    216|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|    216|    {
 2926|    216|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|    216|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|    216|    {
 2908|    216|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|    216|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   879k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   879k|    static_cast<    \
  |  |  935|   879k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   879k|    static_cast<    \
  |  |  935|   879k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   879k|    {
 3466|   879k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|    222|    {
 1795|    222|        return value();
 1796|    222|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|    222|    {
 1769|    222|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    222|        return this->get_value();
 1771|    222|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|    222|    {
  456|    222|        return m_value;
  457|    222|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    216|        : base(std::in_place, std::forward<U>(val)),
 1570|    216|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    216|    {
 1572|    216|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|    216|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    216|    {
  442|    216|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5518|  6.09k|{
 5519|  6.09k|    constexpr bool default_constructible_constraint =
 5520|  6.09k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  6.09k|    static_assert(default_constructible_constraint,
 5522|  6.09k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  6.09k|    constexpr bool destructible_constraint =
 5525|  6.09k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  6.09k|    static_assert(destructible_constraint,
 5527|  6.09k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  6.09k|    constexpr bool non_reference_constraint =
 5530|  6.09k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  6.09k|    static_assert(non_reference_constraint,
 5532|  6.09k|                  "Scan argument types must not be references");
 5533|       |
 5534|  6.09k|    constexpr bool movable_constraint =
 5535|  6.09k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  6.09k|    static_assert(movable_constraint,
 5537|  6.09k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  6.09k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  6.09k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  6.09k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5372|  6.09k|    {
 5373|       |        if constexpr (std::is_same_v<char_type, char> &&
 5374|  6.09k|                      !is_type_disabled<char_type>) {
 5375|  6.09k|            return val;
 5376|       |        }
 5377|       |        else if constexpr (is_type_disabled<char_type>) {
 5378|       |            return unscannable_disabled{val};
 5379|       |        }
 5380|       |        else {
 5381|       |            SCN_UNUSED(val);
 5382|       |            return unscannable_char{};
 5383|       |        }
 5384|  6.09k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5472|  6.09k|{
 5473|  6.09k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  6.09k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  6.09k|    constexpr bool scannable_char =
 5477|  6.09k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  6.09k|    static_assert(scannable_char,
 5479|  6.09k|                  "Cannot scan an argument of an unsupported character "
 5480|  6.09k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  6.09k|    constexpr bool scannable_const =
 5483|  6.09k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  6.09k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  6.09k|    constexpr bool scannable_disabled =
 5487|  6.09k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  6.09k|    static_assert(scannable_disabled,
 5489|  6.09k|                  "Cannot scan an argument that has been disabled by "
 5490|  6.09k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  6.09k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  6.09k|    static_assert(
 5494|  6.09k|        scannable,
 5495|  6.09k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  6.09k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  6.09k|    return arg_value{arg};
 5499|  6.09k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5256|  6.09k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  6.09k|    {
 5258|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1814|  6.09k|    {
 1815|  6.09k|        return &value();
 1816|  6.09k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  6.09k|    {
 1769|  6.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.09k|        return this->get_value();
 1771|  6.09k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6047|  6.09k|    {
 6048|  6.09k|        return m_values;
 6049|  6.09k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 5881|  54.8k|        : m_desc(desc), m_builtin_values(data)
 5882|  54.8k|    {
 5883|  54.8k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8134|  54.8k|{
 8135|  54.8k|    return s;
 8136|  54.8k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8111|  54.8k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9172|  27.4k|{
 9173|  27.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|  27.4k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9107|  27.4k|{
 9108|  27.4k|#if !SCN_DISABLE_LOCALE
 9109|  27.4k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|  27.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|  27.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|  27.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|  27.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.3k, False: 108]
  |  |  ------------------
  ------------------
 9116|  27.3k|        return unexpected(result.error());
 9117|  27.3k|    }
 9118|    108|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|  27.4k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.09k, False: 0]
  |  |  ------------------
  ------------------
 9317|  6.09k|        out = unexpected(in.error());
 9318|  6.09k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  6.09k|        : base(unexpect, std::move(e.error())),
 1616|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.09k|    {
 1618|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.09k|          m_has_value(false)
  451|  6.09k|    {
  452|  6.09k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.09k|    {
 1316|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  6.09k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  6.09k|    {
  903|  6.09k|        assign_common(std::move(other));
  904|  6.09k|        return *this;
  905|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  6.09k|    {
  950|  6.09k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.09k, False: 0]
  ------------------
  951|  6.09k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.09k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.09k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.09k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.09k|    {
  456|  6.09k|        return m_value;
  457|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  6.09k|    {
 1046|  6.09k|        this->destroy_value();
 1047|  6.09k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.09k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.09k|    {
  504|  6.09k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.09k|                                  std::forward<Args>(args)...);
  506|  6.09k|        m_has_value = false;
  507|  6.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.09k|    {
  473|  6.09k|        return m_unexpected;
  474|  6.09k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.09k|    {
  481|  6.09k|        return std::move(m_unexpected);
  482|  6.09k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  6.09k|    {
 1815|  6.09k|        return &value();
 1816|  6.09k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  6.09k|    {
 1769|  6.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.09k|        return this->get_value();
 1771|  6.09k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.09k, False: 0]
  |  |  ------------------
  ------------------
 9317|  6.09k|        out = unexpected(in.error());
 9318|  6.09k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  6.09k|        : base(unexpect, std::move(e.error())),
 1616|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.09k|    {
 1618|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.09k|          m_has_value(false)
  451|  6.09k|    {
  452|  6.09k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.09k|    {
 1316|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  6.09k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  6.09k|    {
  903|  6.09k|        assign_common(std::move(other));
  904|  6.09k|        return *this;
  905|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  6.09k|    {
  950|  6.09k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.09k, False: 0]
  ------------------
  951|  6.09k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.09k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.09k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.09k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.09k|    {
  456|  6.09k|        return m_value;
  457|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  6.09k|    {
 1046|  6.09k|        this->destroy_value();
 1047|  6.09k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.09k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.09k|    {
  504|  6.09k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.09k|                                  std::forward<Args>(args)...);
  506|  6.09k|        m_has_value = false;
  507|  6.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.09k|    {
  473|  6.09k|        return m_unexpected;
  474|  6.09k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.09k|    {
  481|  6.09k|        return std::move(m_unexpected);
  482|  6.09k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  6.09k|    {
 1815|  6.09k|        return &value();
 1816|  6.09k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  6.09k|    {
 1769|  6.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.09k|        return this->get_value();
 1771|  6.09k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.09k, False: 0]
  |  |  ------------------
  ------------------
 9317|  6.09k|        out = unexpected(in.error());
 9318|  6.09k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  6.09k|        : base(unexpect, std::move(e.error())),
 1616|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.09k|    {
 1618|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.09k|          m_has_value(false)
  451|  6.09k|    {
  452|  6.09k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.09k|    {
 1316|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  6.09k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  6.09k|    {
  903|  6.09k|        assign_common(std::move(other));
  904|  6.09k|        return *this;
  905|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  6.09k|    {
  950|  6.09k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.09k, False: 0]
  ------------------
  951|  6.09k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.09k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.09k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.09k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.09k|    {
  456|  6.09k|        return m_value;
  457|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  6.09k|    {
 1046|  6.09k|        this->destroy_value();
 1047|  6.09k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.09k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.09k|    {
  504|  6.09k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.09k|                                  std::forward<Args>(args)...);
  506|  6.09k|        m_has_value = false;
  507|  6.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.09k|    {
  473|  6.09k|        return m_unexpected;
  474|  6.09k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.09k|    {
  481|  6.09k|        return std::move(m_unexpected);
  482|  6.09k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  6.09k|    {
 1815|  6.09k|        return &value();
 1816|  6.09k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  6.09k|    {
 1769|  6.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.09k|        return this->get_value();
 1771|  6.09k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.09k, False: 0]
  |  |  ------------------
  ------------------
 9317|  6.09k|        out = unexpected(in.error());
 9318|  6.09k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  6.09k|        : base(unexpect, std::move(e.error())),
 1616|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.09k|    {
 1618|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.09k|          m_has_value(false)
  451|  6.09k|    {
  452|  6.09k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.09k|    {
 1316|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  6.09k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  6.09k|    {
  903|  6.09k|        assign_common(std::move(other));
  904|  6.09k|        return *this;
  905|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  6.09k|    {
  950|  6.09k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.09k, False: 0]
  ------------------
  951|  6.09k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.09k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.09k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.09k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.09k|    {
  456|  6.09k|        return m_value;
  457|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  6.09k|    {
 1046|  6.09k|        this->destroy_value();
 1047|  6.09k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.09k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.09k|    {
  504|  6.09k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.09k|                                  std::forward<Args>(args)...);
  506|  6.09k|        m_has_value = false;
  507|  6.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.09k|    {
  473|  6.09k|        return m_unexpected;
  474|  6.09k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.09k|    {
  481|  6.09k|        return std::move(m_unexpected);
  482|  6.09k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  6.09k|    {
 1815|  6.09k|        return &value();
 1816|  6.09k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  6.09k|    {
 1769|  6.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.09k|        return this->get_value();
 1771|  6.09k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.09k, False: 0]
  |  |  ------------------
  ------------------
 9317|  6.09k|        out = unexpected(in.error());
 9318|  6.09k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  6.09k|        : base(unexpect, std::move(e.error())),
 1616|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.09k|    {
 1618|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  6.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.09k|          m_has_value(false)
  451|  6.09k|    {
  452|  6.09k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.09k|    {
 1316|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  6.09k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  6.09k|    {
  903|  6.09k|        assign_common(std::move(other));
  904|  6.09k|        return *this;
  905|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  6.09k|    {
  950|  6.09k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.09k, False: 0]
  ------------------
  951|  6.09k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.09k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.09k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.09k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.09k|    {
  456|  6.09k|        return m_value;
  457|  6.09k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  6.09k|    {
 1046|  6.09k|        this->destroy_value();
 1047|  6.09k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.09k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  6.09k|    {
  504|  6.09k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.09k|                                  std::forward<Args>(args)...);
  506|  6.09k|        m_has_value = false;
  507|  6.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.09k|    {
  473|  6.09k|        return m_unexpected;
  474|  6.09k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.09k|    {
  481|  6.09k|        return std::move(m_unexpected);
  482|  6.09k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  6.09k|    {
 1815|  6.09k|        return &value();
 1816|  6.09k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  6.09k|    {
 1769|  6.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.09k|        return this->get_value();
 1771|  6.09k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  6.09k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  6.09k|    {
  613|  6.09k|        construct();
  614|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  6.09k|    {
  694|  6.09k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  6.09k|        m_has_value = true;
  696|  6.09k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  6.09k|{
  396|  6.09k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  6.09k|        T(std::forward<Args>(args)...);
  398|  6.09k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  18.3k|    {
  718|  18.3k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  18.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  18.3k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.02k, False: 72]
  |  |  ------------------
  ------------------
 9317|  6.02k|        out = unexpected(in.error());
 9318|  6.02k|    }
 9319|     72|    else {
 9320|     72|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     72|    static_cast<    \
  |  |  935|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|     72|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  6.02k|        : base(unexpect, std::move(e.error())),
 1616|  6.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.02k|    {
 1618|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  6.02k|        : m_has_value(false)
  637|  6.02k|    {
  638|  6.02k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  6.02k|    {
  701|  6.02k|        scn::detail::construct_at(unexpected_ptr(),
  702|  6.02k|                                  std::forward<Args>(args)...);
  703|  6.02k|        m_has_value = false;
  704|  6.02k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  36.4k|{
  396|  36.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  36.4k|        T(std::forward<Args>(args)...);
  398|  36.4k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  30.1k|    {
  730|  30.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  30.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  30.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.02k|    {
 1316|  6.02k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  6.02k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  6.02k|    {
  903|  6.02k|        assign_common(std::move(other));
  904|  6.02k|        return *this;
  905|  6.02k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  6.02k|    {
  950|  6.02k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.02k, False: 0]
  ------------------
  951|  6.02k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.02k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.02k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.02k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  30.3k|    {
  687|  30.3k|        return m_has_value;
  688|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  6.16k|    {
  653|  6.16k|        return *value_ptr();
  654|  6.16k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  6.02k|    {
 1046|  6.02k|        this->destroy_value();
 1047|  6.02k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  6.09k|    {
  708|  6.09k|        scn::detail::destroy_at(value_ptr());
  709|  6.09k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  6.09k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  6.09k|    else {
  408|  6.09k|        p->~T();
  409|  6.09k|    }
  410|  6.09k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6271|  6.09k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  6.02k|    {
  701|  6.02k|        scn::detail::construct_at(unexpected_ptr(),
  702|  6.02k|                                  std::forward<Args>(args)...);
  703|  6.02k|        m_has_value = false;
  704|  6.02k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  6.02k|    {
  678|  6.02k|        return std::move(*unexpected_ptr());
  679|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  12.0k|    {
  712|  12.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  12.0k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  72.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  72.8k|    else {
  408|  72.8k|        p->~T();
  409|  72.8k|    }
  410|  72.8k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  6.16k|    {
 1815|  6.16k|        return &value();
 1816|  6.16k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  6.16k|    {
 1769|  6.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.16k|        return this->get_value();
 1771|  6.16k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  12.1k|    {
  643|  12.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 72, False: 12.0k]
  ------------------
  644|     72|            destroy_value();
  645|     72|        }
  646|  12.0k|        else {
  647|  12.0k|            destroy_unexpected();
  648|  12.0k|        }
  649|  12.1k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  6.09k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  6.09k|    {
  613|  6.09k|        construct();
  614|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  6.09k|    {
  694|  6.09k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  6.09k|        m_has_value = true;
  696|  6.09k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  6.09k|{
  396|  6.09k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  6.09k|        T(std::forward<Args>(args)...);
  398|  6.09k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6038|  18.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  18.3k|    {
  718|  18.3k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  18.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  18.3k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.02k, False: 72]
  |  |  ------------------
  ------------------
 9317|  6.02k|        out = unexpected(in.error());
 9318|  6.02k|    }
 9319|     72|    else {
 9320|     72|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     72|    static_cast<    \
  |  |  935|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|     72|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  6.02k|        : base(unexpect, std::move(e.error())),
 1616|  6.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.02k|    {
 1618|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  6.02k|        : m_has_value(false)
  637|  6.02k|    {
  638|  6.02k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  6.02k|    {
  701|  6.02k|        scn::detail::construct_at(unexpected_ptr(),
  702|  6.02k|                                  std::forward<Args>(args)...);
  703|  6.02k|        m_has_value = false;
  704|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  30.1k|    {
  730|  30.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  30.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  30.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.02k|    {
 1316|  6.02k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  6.02k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  6.02k|    {
  903|  6.02k|        assign_common(std::move(other));
  904|  6.02k|        return *this;
  905|  6.02k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  6.02k|    {
  950|  6.02k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.02k, False: 0]
  ------------------
  951|  6.02k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.02k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.02k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.02k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  30.3k|    {
  687|  30.3k|        return m_has_value;
  688|  30.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  6.16k|    {
  653|  6.16k|        return *value_ptr();
  654|  6.16k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  6.02k|    {
 1046|  6.02k|        this->destroy_value();
 1047|  6.02k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  6.09k|    {
  708|  6.09k|        scn::detail::destroy_at(value_ptr());
  709|  6.09k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  6.09k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  6.09k|    else {
  408|  6.09k|        p->~T();
  409|  6.09k|    }
  410|  6.09k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6271|  6.09k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  6.02k|    {
  701|  6.02k|        scn::detail::construct_at(unexpected_ptr(),
  702|  6.02k|                                  std::forward<Args>(args)...);
  703|  6.02k|        m_has_value = false;
  704|  6.02k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  6.02k|    {
  678|  6.02k|        return std::move(*unexpected_ptr());
  679|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  12.0k|    {
  712|  12.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  12.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5518|  18.2k|{
 5519|  18.2k|    constexpr bool default_constructible_constraint =
 5520|  18.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  18.2k|    static_assert(default_constructible_constraint,
 5522|  18.2k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  18.2k|    constexpr bool destructible_constraint =
 5525|  18.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  18.2k|    static_assert(destructible_constraint,
 5527|  18.2k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  18.2k|    constexpr bool non_reference_constraint =
 5530|  18.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  18.2k|    static_assert(non_reference_constraint,
 5532|  18.2k|                  "Scan argument types must not be references");
 5533|       |
 5534|  18.2k|    constexpr bool movable_constraint =
 5535|  18.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  18.2k|    static_assert(movable_constraint,
 5537|  18.2k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  18.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  18.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  18.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5472|  18.2k|{
 5473|  18.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  18.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  18.2k|    constexpr bool scannable_char =
 5477|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  18.2k|    static_assert(scannable_char,
 5479|  18.2k|                  "Cannot scan an argument of an unsupported character "
 5480|  18.2k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  18.2k|    constexpr bool scannable_const =
 5483|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  18.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  18.2k|    constexpr bool scannable_disabled =
 5487|  18.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  18.2k|    static_assert(scannable_disabled,
 5489|  18.2k|                  "Cannot scan an argument that has been disabled by "
 5490|  18.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  18.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  18.2k|    static_assert(
 5494|  18.2k|        scannable,
 5495|  18.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  18.2k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  18.2k|    return arg_value{arg};
 5499|  18.2k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5256|  18.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  18.2k|    {
 5258|  18.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  6.16k|    {
 1815|  6.16k|        return &value();
 1816|  6.16k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  6.16k|    {
 1769|  6.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.16k|        return this->get_value();
 1771|  6.16k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6047|  18.2k|    {
 6048|  18.2k|        return m_values;
 6049|  18.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  12.1k|    {
  643|  12.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 72, False: 12.0k]
  ------------------
  644|     72|            destroy_value();
  645|     72|        }
  646|  12.0k|        else {
  647|  12.0k|            destroy_unexpected();
  648|  12.0k|        }
  649|  12.1k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9374|  3.04k|{
 9375|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9376|  3.04k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|  3.04k|                                   make_scan_args(result->values())));
 9378|  3.04k|    return result;
 9379|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9330|  6.09k|{
 9331|  6.09k|    return scan_result_type<Source, Args...>();
 9332|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  6.09k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.09k|        : m_value(T{}), m_has_value(true)
  427|  6.09k|    {
  428|  6.09k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6264|  6.09k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6038|  6.09k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9315|  6.09k|{
 9316|  6.09k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.02k, False: 72]
  |  |  ------------------
  ------------------
 9317|  6.02k|        out = unexpected(in.error());
 9318|  6.02k|    }
 9319|     72|    else {
 9320|     72|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     72|    static_cast<    \
  |  |  935|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|     72|    }
 9322|  6.09k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  6.02k|        : base(unexpect, std::move(e.error())),
 1616|  6.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.02k|    {
 1618|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  6.02k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.02k|          m_has_value(false)
  451|  6.02k|    {
  452|  6.02k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.02k|    {
 1316|  6.02k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  6.02k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  6.02k|    {
  903|  6.02k|        assign_common(std::move(other));
  904|  6.02k|        return *this;
  905|  6.02k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  6.02k|    {
  950|  6.02k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 6.02k, False: 0]
  ------------------
  951|  6.02k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 6.02k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  6.02k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  6.02k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.2k|    {
  490|  18.2k|        return m_has_value;
  491|  18.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.16k|    {
  456|  6.16k|        return m_value;
  457|  6.16k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  6.02k|    {
 1046|  6.02k|        this->destroy_value();
 1047|  6.02k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  6.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.02k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  6.02k|    {
  504|  6.02k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.02k|                                  std::forward<Args>(args)...);
  506|  6.02k|        m_has_value = false;
  507|  6.02k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.02k|    {
  473|  6.02k|        return m_unexpected;
  474|  6.02k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.02k|    {
  481|  6.02k|        return std::move(m_unexpected);
  482|  6.02k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8461|  6.09k|    {
 8462|  6.09k|        return m_str;
 8463|  6.09k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  6.09k|{
 5804|  6.09k|    detail::check_scan_arg_types<Args...>();
 5805|  6.09k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  6.09k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5518|  6.09k|{
 5519|  6.09k|    constexpr bool default_constructible_constraint =
 5520|  6.09k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  6.09k|    static_assert(default_constructible_constraint,
 5522|  6.09k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  6.09k|    constexpr bool destructible_constraint =
 5525|  6.09k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  6.09k|    static_assert(destructible_constraint,
 5527|  6.09k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  6.09k|    constexpr bool non_reference_constraint =
 5530|  6.09k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  6.09k|    static_assert(non_reference_constraint,
 5532|  6.09k|                  "Scan argument types must not be references");
 5533|       |
 5534|  6.09k|    constexpr bool movable_constraint =
 5535|  6.09k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  6.09k|    static_assert(movable_constraint,
 5537|  6.09k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  6.09k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  6.09k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  6.09k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 5779|  6.09k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  6.09k|    {
 5781|  6.09k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  6.09k|    {
 5789|  6.09k|        return {detail::make_arg<
 5790|  6.09k|            kind, Context,
 5791|  6.09k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  6.09k|                                 typename Context::char_type>::value>(args)...};
 5793|  6.09k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5568|  6.09k|{
 5569|  6.09k|    return make_value<Context>(value).ref_value;
 5570|  6.09k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5503|  6.09k|{
 5504|  6.09k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.09k|                                  needs_context_tag>) {
 5508|  6.09k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.09k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5342|  6.09k|    {                                                                        \
 5343|  6.09k|        return val;                                                          \
 5344|  6.09k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5472|  6.09k|{
 5473|  6.09k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  6.09k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  6.09k|    constexpr bool scannable_char =
 5477|  6.09k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  6.09k|    static_assert(scannable_char,
 5479|  6.09k|                  "Cannot scan an argument of an unsupported character "
 5480|  6.09k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  6.09k|    constexpr bool scannable_const =
 5483|  6.09k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  6.09k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  6.09k|    constexpr bool scannable_disabled =
 5487|  6.09k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  6.09k|    static_assert(scannable_disabled,
 5489|  6.09k|                  "Cannot scan an argument that has been disabled by "
 5490|  6.09k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  6.09k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  6.09k|    static_assert(
 5494|  6.09k|        scannable,
 5495|  6.09k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  6.09k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  6.09k|    return arg_value{arg};
 5499|  6.09k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5256|  6.09k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  6.09k|    {
 5258|  6.09k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  6.16k|    {
 1815|  6.16k|        return &value();
 1816|  6.16k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  6.16k|    {
 1769|  6.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.16k|        return this->get_value();
 1771|  6.16k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6047|  6.09k|    {
 6048|  6.09k|        return m_values;
 6049|  6.09k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  6.09k|        : basic_scan_args(store.desc, store.args.data())
 5830|  6.09k|    {
 5831|  6.09k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|  6.09k|        : m_str(r.str)
 8457|  6.09k|    {
 8458|  6.09k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9443|  3.04k|{
 9444|  3.04k|    auto result = make_scan_result<Source, Args...>();
 9445|  3.04k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|  3.04k|                                   make_scan_args(result->values())));
 9447|  3.04k|    return result;
 9448|  3.04k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6107|   109k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   109k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6038|  12.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  12.1k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   109k|    {
 1740|   109k|        return has_value();
 1741|   109k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   219k|    {
  490|   219k|        return m_has_value;
  491|   219k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   109k|    {
 1746|   109k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   109k|        return this->get_unexpected().error();
 1748|   109k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   109k|    {
  473|   109k|        return m_unexpected;
  474|   109k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6138|      6|    {
 6139|      6|        m_range = std::forward<Other>(r);
 6140|      6|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|      6|    {
 1795|      6|        return value();
 1796|      6|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|      6|    {
 1769|      6|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      6|        return this->get_value();
 1771|      6|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|      6|    {
  456|      6|        return m_value;
  457|      6|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9091|  54.8k|{
 9092|  54.8k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|  54.8k|    auto result = vscan_impl(buffer, format, args);
 9095|  54.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 54.8k, False: 3]
  |  |  ------------------
  ------------------
 9096|  54.8k|        return unexpected(result.error());
 9097|  54.8k|    }
 9098|      3|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      3|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|  54.8k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5074|   109k|{
 5075|   109k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   109k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   109k|                  "\n"
 5079|   109k|                  "Unsupported range type given as input to a scanning "
 5080|   109k|                  "function.\n"
 5081|   109k|                  "A range needs to have a character type (value type) "
 5082|   109k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   109k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   109k|                  "to be included.\n"
 5085|   109k|                  "See the scnlib documentation for more details.");
 5086|   109k|    static_assert(
 5087|   109k|        !std::is_same_v<T, custom_char_traits>,
 5088|   109k|        "\n"
 5089|   109k|        "Unsupported range type given as input to a scanning "
 5090|   109k|        "function.\n"
 5091|   109k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   109k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   109k|        "not supported.");
 5094|   109k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   109k|                  "\n"
 5096|   109k|                  "Unsupported range type given as input to a scanning "
 5097|   109k|                  "function.\n"
 5098|   109k|                  "file_marker_found cannot be used as an "
 5099|   109k|                  "source range type to scn::scan.\n"
 5100|   109k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   109k|                  "and do not provide an explicit source range, "
 5102|   109k|                  "or use scn::scan with a FILE* directly.");
 5103|   109k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   109k|                  "\n"
 5105|   109k|                  "Unsupported range type given as input to a scanning "
 5106|   109k|                  "function.\n"
 5107|   109k|                  "In order to be scannable, a range needs to satisfy "
 5108|   109k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   109k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   109k|                  "\n"
 5111|   109k|                  "Unsupported range type given as input to a scanning "
 5112|   109k|                  "function.\n"
 5113|   109k|                  "A range needs to model forward_range and have a valid "
 5114|   109k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   109k|                  "Examples of scannable ranges are std::string, "
 5116|   109k|                  "std::string_view, "
 5117|   109k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   109k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   109k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   109k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4966|   109k|{
 4967|   109k|    if constexpr (is_valid_char_type<CharT>) {
 4968|   109k|        return r;
 4969|       |        // return make_string_scan_buffer(r);
 4970|       |    }
 4971|       |    else {
 4972|       |        return invalid_char_type{};
 4973|       |    }
 4974|   109k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   109k|        : base(unexpect, std::move(e.error())),
 1616|   109k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   109k|    {
 1618|   109k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   109k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   109k|          m_has_value(false)
  451|   109k|    {
  452|   109k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   109k|    {
 1316|   109k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6368|      6|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|      6|                      ranges::iterator_t<SourceRange>>) {
 6371|      6|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|      6|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|      6|    {
 2869|      6|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|      6|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|      6|    {
 2850|      6|        return decay_copy(t.begin());
 2851|      6|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   228k|{
 2094|   228k|    return SCN_FWD(t);
  ------------------
  |  |  936|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   228k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6355|      6|{
 6356|      6|    return ranges::end(source);
 6357|      6|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|      6|    {
 2926|      6|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|      6|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|      6|    {
 2908|      6|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|      6|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   293k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   293k|    {
 3466|   293k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|      6|        : base(std::in_place, std::forward<U>(val)),
 1570|      6|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      6|    {
 1572|      6|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|      6|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      6|    {
  442|      6|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5518|  12.1k|{
 5519|  12.1k|    constexpr bool default_constructible_constraint =
 5520|  12.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  12.1k|    static_assert(default_constructible_constraint,
 5522|  12.1k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  12.1k|    constexpr bool destructible_constraint =
 5525|  12.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  12.1k|    static_assert(destructible_constraint,
 5527|  12.1k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  12.1k|    constexpr bool non_reference_constraint =
 5530|  12.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  12.1k|    static_assert(non_reference_constraint,
 5532|  12.1k|                  "Scan argument types must not be references");
 5533|       |
 5534|  12.1k|    constexpr bool movable_constraint =
 5535|  12.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  12.1k|    static_assert(movable_constraint,
 5537|  12.1k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  12.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  12.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5472|  12.1k|{
 5473|  12.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  12.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  12.1k|    constexpr bool scannable_char =
 5477|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  12.1k|    static_assert(scannable_char,
 5479|  12.1k|                  "Cannot scan an argument of an unsupported character "
 5480|  12.1k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  12.1k|    constexpr bool scannable_const =
 5483|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  12.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  12.1k|    constexpr bool scannable_disabled =
 5487|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  12.1k|    static_assert(scannable_disabled,
 5489|  12.1k|                  "Cannot scan an argument that has been disabled by "
 5490|  12.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  12.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  12.1k|    static_assert(
 5494|  12.1k|        scannable,
 5495|  12.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  12.1k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  12.1k|    return arg_value{arg};
 5499|  12.1k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5256|  12.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  12.1k|    {
 5258|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6047|  12.1k|    {
 6048|  12.1k|        return m_values;
 6049|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 5881|   109k|        : m_desc(desc), m_builtin_values(data)
 5882|   109k|    {
 5883|   109k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8139|   109k|{
 8140|   109k|    return s;
 8141|   109k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8111|   109k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9107|  54.8k|{
 9108|  54.8k|#if !SCN_DISABLE_LOCALE
 9109|  54.8k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|  54.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|  54.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|  54.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|  54.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 54.8k, False: 3]
  |  |  ------------------
  ------------------
 9116|  54.8k|        return unexpected(result.error());
 9117|  54.8k|    }
 9118|      3|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      3|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|  54.8k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      0|    else {
 9320|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      0|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  12.1k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  12.1k|    {
  613|  12.1k|        construct();
  614|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  12.1k|    {
  694|  12.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  12.1k|        m_has_value = true;
  696|  12.1k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  12.1k|{
  396|  12.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  12.1k|        T(std::forward<Args>(args)...);
  398|  12.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  36.5k|    {
  718|  36.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  36.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  36.5k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 2]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      2|    else {
 9320|      2|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      2|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.1k|        : m_has_value(false)
  637|  12.1k|    {
  638|  12.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  12.1k|    {
  701|  12.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.1k|                                  std::forward<Args>(args)...);
  703|  12.1k|        m_has_value = false;
  704|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  60.9k|    {
  730|  60.9k|        return reinterpret_cast<unexpected<E>*>(
  731|  60.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  60.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  60.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  60.9k|    {
  687|  60.9k|        return m_has_value;
  688|  60.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  12.1k|    {
  653|  12.1k|        return *value_ptr();
  654|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  12.1k|    {
  708|  12.1k|        scn::detail::destroy_at(value_ptr());
  709|  12.1k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  12.1k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  12.1k|    else {
  408|  12.1k|        p->~T();
  409|  12.1k|    }
  410|  12.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6271|  12.1k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.1k|    {
  701|  12.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.1k|                                  std::forward<Args>(args)...);
  703|  12.1k|        m_has_value = false;
  704|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.1k|    {
  678|  12.1k|        return std::move(*unexpected_ptr());
  679|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.3k|    {
  712|  24.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  24.3k|    {
  643|  24.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 2, False: 24.3k]
  ------------------
  644|      2|            destroy_value();
  645|      2|        }
  646|  24.3k|        else {
  647|  24.3k|            destroy_unexpected();
  648|  24.3k|        }
  649|  24.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  12.1k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  12.1k|    {
  613|  12.1k|        construct();
  614|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  12.1k|    {
  694|  12.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  12.1k|        m_has_value = true;
  696|  12.1k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  12.1k|{
  396|  12.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  12.1k|        T(std::forward<Args>(args)...);
  398|  12.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  36.5k|    {
  718|  36.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  36.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  36.5k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 2]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      2|    else {
 9320|      2|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      2|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.1k|        : m_has_value(false)
  637|  12.1k|    {
  638|  12.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  12.1k|    {
  701|  12.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.1k|                                  std::forward<Args>(args)...);
  703|  12.1k|        m_has_value = false;
  704|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  60.9k|    {
  730|  60.9k|        return reinterpret_cast<unexpected<E>*>(
  731|  60.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  60.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  60.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  60.9k|    {
  687|  60.9k|        return m_has_value;
  688|  60.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  12.1k|    {
  653|  12.1k|        return *value_ptr();
  654|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  12.1k|    {
  708|  12.1k|        scn::detail::destroy_at(value_ptr());
  709|  12.1k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  12.1k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  12.1k|    else {
  408|  12.1k|        p->~T();
  409|  12.1k|    }
  410|  12.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6271|  12.1k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.1k|    {
  701|  12.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.1k|                                  std::forward<Args>(args)...);
  703|  12.1k|        m_has_value = false;
  704|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.1k|    {
  678|  12.1k|        return std::move(*unexpected_ptr());
  679|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.3k|    {
  712|  24.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  24.3k|    {
  643|  24.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 2, False: 24.3k]
  ------------------
  644|      2|            destroy_value();
  645|      2|        }
  646|  24.3k|        else {
  647|  24.3k|            destroy_unexpected();
  648|  24.3k|        }
  649|  24.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9330|  12.1k|{
 9331|  12.1k|    return scan_result_type<Source, Args...>();
 9332|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  12.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  12.1k|        : m_value(T{}), m_has_value(true)
  427|  12.1k|    {
  428|  12.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6264|  12.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6038|  12.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9315|  12.1k|{
 9316|  12.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 2]
  |  |  ------------------
  ------------------
 9317|  12.1k|        out = unexpected(in.error());
 9318|  12.1k|    }
 9319|      2|    else {
 9320|      2|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|      2|    }
 9322|  12.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1k|    {
 1316|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  12.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  12.1k|    {
  903|  12.1k|        assign_common(std::move(other));
  904|  12.1k|        return *this;
  905|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  12.1k|    {
  950|  12.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.1k, False: 0]
  ------------------
  951|  12.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  36.5k|    {
  490|  36.5k|        return m_has_value;
  491|  36.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  12.1k|    {
  456|  12.1k|        return m_value;
  457|  12.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  12.1k|    {
 1046|  12.1k|        this->destroy_value();
 1047|  12.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  12.1k|    {
  504|  12.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.1k|                                  std::forward<Args>(args)...);
  506|  12.1k|        m_has_value = false;
  507|  12.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.1k|    {
  473|  12.1k|        return m_unexpected;
  474|  12.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.1k|    {
  481|  12.1k|        return std::move(m_unexpected);
  482|  12.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8461|  12.1k|    {
 8462|  12.1k|        return m_str;
 8463|  12.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  12.1k|{
 5804|  12.1k|    detail::check_scan_arg_types<Args...>();
 5805|  12.1k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  12.1k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5518|  12.1k|{
 5519|  12.1k|    constexpr bool default_constructible_constraint =
 5520|  12.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  12.1k|    static_assert(default_constructible_constraint,
 5522|  12.1k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  12.1k|    constexpr bool destructible_constraint =
 5525|  12.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  12.1k|    static_assert(destructible_constraint,
 5527|  12.1k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  12.1k|    constexpr bool non_reference_constraint =
 5530|  12.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  12.1k|    static_assert(non_reference_constraint,
 5532|  12.1k|                  "Scan argument types must not be references");
 5533|       |
 5534|  12.1k|    constexpr bool movable_constraint =
 5535|  12.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  12.1k|    static_assert(movable_constraint,
 5537|  12.1k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  12.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  12.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  12.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 5779|  12.1k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  12.1k|    {
 5781|  12.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  12.1k|    {
 5789|  12.1k|        return {detail::make_arg<
 5790|  12.1k|            kind, Context,
 5791|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5792|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5793|  12.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5568|  12.1k|{
 5569|  12.1k|    return make_value<Context>(value).ref_value;
 5570|  12.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5503|  12.1k|{
 5504|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  12.1k|                                  needs_context_tag>) {
 5508|  12.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  12.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5342|  12.1k|    {                                                                        \
 5343|  12.1k|        return val;                                                          \
 5344|  12.1k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5472|  12.1k|{
 5473|  12.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  12.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  12.1k|    constexpr bool scannable_char =
 5477|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  12.1k|    static_assert(scannable_char,
 5479|  12.1k|                  "Cannot scan an argument of an unsupported character "
 5480|  12.1k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  12.1k|    constexpr bool scannable_const =
 5483|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  12.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  12.1k|    constexpr bool scannable_disabled =
 5487|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  12.1k|    static_assert(scannable_disabled,
 5489|  12.1k|                  "Cannot scan an argument that has been disabled by "
 5490|  12.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  12.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  12.1k|    static_assert(
 5494|  12.1k|        scannable,
 5495|  12.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  12.1k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  12.1k|    return arg_value{arg};
 5499|  12.1k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5256|  12.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  12.1k|    {
 5258|  12.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  12.1k|    {
 1815|  12.1k|        return &value();
 1816|  12.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  12.1k|    {
 1769|  12.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  12.1k|        return this->get_value();
 1771|  12.1k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6047|  12.1k|    {
 6048|  12.1k|        return m_values;
 6049|  12.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  12.1k|        : basic_scan_args(store.desc, store.args.data())
 5830|  12.1k|    {
 5831|  12.1k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  12.1k|        : m_str(r.str)
 8457|  12.1k|    {
 8458|  12.1k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   347k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   347k|    {
 3742|   347k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   347k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   347k|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|    244|    {
 3753|    244|        return m_code;
 3754|    244|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  4.23M|    {
  572|  4.23M|        return m_has_value;
  573|  4.23M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   201k|    {
  555|   201k|        return m_unexpected;
  556|   201k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   200k|    {
 1746|   200k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   200k|        return this->get_unexpected().error();
 1748|   200k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6626|  2.32k|    {
 6627|  2.32k|        return m_size;
 6628|  2.32k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6667|    232|    {
 6668|    232|        SCN_GCC_COMPAT_PUSH
 6669|    232|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6670|    232|        switch (type) {
 6671|     88|            case presentation_type::none:
  ------------------
  |  Branch (6671:13): [True: 88, False: 144]
  ------------------
 6672|     88|                return 10;
 6673|      0|            case presentation_type::int_generic:
  ------------------
  |  Branch (6673:13): [True: 0, False: 232]
  ------------------
 6674|      0|                return 0;
 6675|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6675:13): [True: 0, False: 232]
  ------------------
 6676|      0|                return arbitrary_base;
 6677|       |
 6678|      0|            case presentation_type::int_binary:
  ------------------
  |  Branch (6678:13): [True: 0, False: 232]
  ------------------
 6679|      0|                return 2;
 6680|      0|            case presentation_type::int_octal:
  ------------------
  |  Branch (6680:13): [True: 0, False: 232]
  ------------------
 6681|      0|                return 8;
 6682|      0|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6682:13): [True: 0, False: 232]
  ------------------
 6683|      0|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6683:13): [True: 0, False: 232]
  ------------------
 6684|      0|                return 10;
 6685|    144|            case presentation_type::int_hex:
  ------------------
  |  Branch (6685:13): [True: 144, False: 88]
  ------------------
 6686|    144|                return 16;
 6687|       |
 6688|      0|            default:
  ------------------
  |  Branch (6688:13): [True: 0, False: 232]
  ------------------
 6689|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6690|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6691|    232|        }
 6692|    232|        SCN_GCC_COMPAT_POP
 6693|    232|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 6705|  54.1k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 6708|  7.12k|    {
 6709|  7.12k|        m_specs.align = align;
 6710|  7.12k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 6728|  13.0k|    {
 6729|  13.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 13.0k]
  |  Branch (6729:39): [True: 0, False: 0]
  ------------------
 6730|       |            // clang-format off
 6731|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6732|       |            // clang-format on
 6733|      0|        }
 6734|       |
 6735|  13.0k|        m_specs.width = width;
 6736|  13.0k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 6738|  1.58k|    {
 6739|  1.58k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6739:13): [True: 0, False: 1.58k]
  ------------------
 6740|       |            // clang-format off
 6741|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6742|       |            // clang-format on
 6743|      0|        }
 6744|       |
 6745|  1.58k|        m_specs.precision = prec;
 6746|  1.58k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 6749|   173k|    {
 6750|   173k|        m_specs.type = type;
 6751|   173k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 6754|  2.66M|    {
 6755|  2.66M|        const auto cp_value = static_cast<unsigned>(cp);
 6756|  2.66M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  864|  2.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.29M, False: 369k]
  |  |  ------------------
  ------------------
 6757|  2.29M|            m_specs.charset_literals[cp_value / 8] |=
 6758|  2.29M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6759|  2.29M|        }
 6760|   369k|        else {
 6761|   369k|            m_specs.charset_has_nonascii = true;
 6762|   369k|        }
 6763|  2.66M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 6766|  7.36k|    {
 6767|  7.36k|        const auto begin_value = static_cast<unsigned>(begin);
 6768|  7.36k|        const auto end_value = static_cast<unsigned>(end);
 6769|  7.36k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  7.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6770|       |
 6771|  7.36k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  7.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.04k, False: 2.32k]
  |  |  ------------------
  ------------------
 6772|       |            // No need to bit-twiddle with a mask, because with the
 6773|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6774|  5.04k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  5.04k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6775|   248k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6775:40): [True: 243k, False: 5.04k]
  ------------------
 6776|   243k|                m_specs.charset_literals[v / 8] |=
 6777|   243k|                    static_cast<unsigned char>(1ul << (v % 8));
 6778|   243k|            }
 6779|  5.04k|        }
 6780|  2.32k|        else {
 6781|  2.32k|            m_specs.charset_has_nonascii = true;
 6782|  2.32k|        }
 6783|  7.36k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 6786|    108|    {
 6787|    108|        m_specs.charset_is_inverted = true;
 6788|    108|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6805|  47.7k|    {
 6806|  47.7k|        m_specs.regexp_flags = flags;
 6807|  47.7k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 6811|    340|    {
 6812|    340|        SCN_UNLIKELY_ATTR
 6813|    340|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 6814|    340|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 6822|  2.72M|    {
 6823|  2.72M|        return m_error;
 6824|  2.72M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   196k|{
 3918|   196k|    return unexpected(scan_error{c, m});
 3919|   196k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4168|   255k|{
 4169|   255k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4170|       |
 4171|   255k|    const auto is_trailing_code_unit = [](char ch) {
 4172|   255k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|   255k|    };
 4174|       |
 4175|   255k|    if (input.size() == 1) {
  ------------------
  |  Branch (4175:9): [True: 222k, False: 33.6k]
  ------------------
 4176|   222k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  930|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|   222k|        return static_cast<char32_t>(input[0]);
 4178|   222k|    }
 4179|       |
 4180|  33.6k|    if (input.size() == 2) {
  ------------------
  |  Branch (4180:9): [True: 31.6k, False: 1.94k]
  ------------------
 4181|  31.6k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  930|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|  31.6k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4183|       |
 4184|  31.6k|        char32_t cp{};
 4185|  31.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4186|  31.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4187|  31.6k|        return cp;
 4188|  31.6k|    }
 4189|       |
 4190|  1.94k|    if (input.size() == 3) {
  ------------------
  |  Branch (4190:9): [True: 1.93k, False: 8]
  ------------------
 4191|  1.93k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  930|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|  1.93k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|  1.93k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4194|       |
 4195|  1.93k|        char32_t cp{};
 4196|  1.93k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4197|  1.93k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4198|  1.93k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4199|  1.93k|        return cp;
 4200|  1.93k|    }
 4201|       |
 4202|      8|    if (input.size() == 4) {
  ------------------
  |  Branch (4202:9): [True: 8, False: 0]
  ------------------
 4203|      8|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|      8|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|      8|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|      8|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|      8|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4208|       |
 4209|      8|        char32_t cp{};
 4210|      8|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4211|      8|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4212|      8|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4213|      8|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4214|      8|        return cp;
 4215|      8|    }
 4216|       |
 4217|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4218|       |    // gcc 7 thinks we'll get here, even when we won't
 4219|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|      0|#endif
 4221|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4222|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   224M|{
 4308|       |    // Pattern_White_Space property
 4309|   224M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 115k, False: 224M]
  |  Branch (4309:27): [True: 6.61k, False: 108k]
  ------------------
 4310|   224M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 54, False: 224M]
  ------------------
 4311|   224M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 1.91k, False: 224M]
  ------------------
 4312|   224M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 0, False: 224M]
  ------------------
 4313|   224M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 18, False: 224M]
  ------------------
 4314|   224M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 36, False: 224M]
  ------------------
 4315|   224M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 224M]
  ------------------
 4316|   224M|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6556|  73.2k|{
 6557|  73.2k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6558|  73.2k|                                    static_cast<unsigned>(b));
 6559|  73.2k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6561|  11.0k|{
 6562|  11.0k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6563|  11.0k|                                    static_cast<unsigned>(b));
 6564|  11.0k|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6576|  11.0k|{
 6577|  11.0k|    return a = a | b;
 6578|  11.0k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|    232|    {
 1756|    232|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    232|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    232|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    232|        return std::move(this->get_unexpected().error());
 1758|    232|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7591|  11.9k|{
 7592|  11.9k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.8k, False: 88]
  |  |  ------------------
  ------------------
 7593|  11.8k|        return handler.on_error("Invalid type specifier for integer type");
 7594|  11.8k|    }
 7595|     88|    if (specs.localized) {
  ------------------
  |  Branch (7595:9): [True: 0, False: 88]
  ------------------
 7596|      0|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7597|       |            // clang-format off
 7598|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7599|       |            // clang-format on
 7600|      0|            return;
 7601|      0|        }
 7602|      0|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7603|       |            // clang-format off
 7604|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7605|       |            // clang-format on
 7606|      0|        }
 7607|      0|    }
 7608|     88|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   164k|{
 2094|   164k|    return SCN_FWD(t);
  ------------------
  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   164k|}
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7635|  5.97k|{
 7636|  5.97k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7636:9): [True: 5.93k, False: 44]
  ------------------
 7637|  5.97k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7637:10): [True: 0, False: 5.93k]
  ------------------
 7638|  5.93k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7638:10): [True: 5.93k, False: 0]
  ------------------
 7639|  5.93k|        SCN_UNLIKELY_ATTR
 7640|  5.93k|        return handler.on_error("Invalid type specifier for float type");
 7641|  5.93k|    }
 7642|  5.97k|}
_ZNK3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.0k|    {
  490|  31.0k|        return m_has_value;
  491|  31.0k|    }
_ZNK3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1739|  15.5k|    {
 1740|  15.5k|        return has_value();
 1741|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  455|  15.5k|    {
  456|  15.5k|        return m_value;
  457|  15.5k|    }
_ZNR3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  15.5k|    {
 1769|  15.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  15.5k|        return this->get_value();
 1771|  15.5k|    }
_ZNO3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  15.5k|    {
 1805|  15.5k|        return std::move(value());
 1806|  15.5k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  4.02M|    {
 1740|  4.02M|        return has_value();
 1741|  4.02M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7647|  17.9k|{
 7648|  17.9k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7648:9): [True: 132, False: 17.7k]
  ------------------
 7649|  17.9k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7649:9): [True: 12, False: 17.7k]
  ------------------
 7650|  17.9k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7650:9): [True: 1.86k, False: 15.9k]
  ------------------
 7651|  17.9k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7651:9): [True: 12.7k, False: 3.16k]
  ------------------
 7652|  17.9k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7652:9): [True: 3.16k, False: 0]
  ------------------
 7653|  17.9k|        return;
 7654|  17.9k|    }
 7655|      0|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 0]
  ------------------
 7656|      0|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7657|       |            // clang-format off
 7658|      0|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7659|       |            // clang-format on
 7660|      0|        }
 7661|      0|        return;
 7662|      0|    }
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid type specifier for string");
 7665|      0|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7681|  5.97k|{
 7682|  5.97k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7682:9): [True: 5.93k, False: 44]
  ------------------
 7683|  5.97k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7683:9): [True: 5.92k, False: 4]
  ------------------
 7684|  5.97k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7684:9): [True: 5.92k, False: 0]
  ------------------
 7685|  5.97k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7685:9): [True: 5.92k, False: 0]
  ------------------
 7686|  5.97k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7686:9): [True: 5.92k, False: 0]
  ------------------
 7687|  5.97k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7687:9): [True: 5.92k, False: 0]
  ------------------
 7688|  5.97k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7688:9): [True: 5.92k, False: 0]
  ------------------
 7689|  5.97k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7689:9): [True: 5.92k, False: 0]
  ------------------
 7690|  5.92k|        SCN_UNLIKELY_ATTR
 7691|  5.92k|        return handler.on_error("Invalid type specifier for boolean");
 7692|  5.92k|    }
 7693|  5.97k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7613|  5.97k|{
 7614|  5.97k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7614:9): [True: 5.93k, False: 44]
  ------------------
 7615|  5.97k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7615:9): [True: 0, False: 44]
  ------------------
 7616|  5.93k|        SCN_UNLIKELY_ATTR
 7617|  5.93k|        return handler.on_error("Invalid type specifier for character type");
 7618|  5.93k|    }
 7619|  5.97k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7670|  5.97k|{
 7671|  5.97k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7671:9): [True: 5.93k, False: 44]
  ------------------
 7672|  5.97k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7672:9): [True: 5.93k, False: 0]
  ------------------
 7673|  5.93k|        SCN_UNLIKELY_ATTR
 7674|  5.93k|        return handler.on_error("Invalid type specifier for pointer");
 7675|  5.93k|    }
 7676|  5.97k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  37.6k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  37.6k|    else {
 3981|  37.6k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  37.6k|    }
 3983|  37.6k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   224M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   224M|    else {
 3981|   224M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   224M|    }
 3983|   224M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  2.33M|    {
 3480|  2.33M|        return m_iterator;
 3481|  2.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  2.31M|    {
 3484|  2.31M|        return m_sentinel;
 3485|  2.31M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   504k|    {
 3480|   504k|        return m_iterator;
 3481|   504k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   449M|    {
 3484|   449M|        return m_sentinel;
 3485|   449M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8477|  84.3k|    constexpr locale_ref() = default;
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   196k|        : m_unexpected(std::forward<Err>(e))
  350|   196k|    {
  351|   196k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   196k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   196k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   164k|        : base(unexpect, std::move(e.error())),
 1616|   164k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   164k|    {
 1618|   164k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   164k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   164k|          m_has_value(false)
  451|   164k|    {
  452|   164k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   164k|    {
 1316|   164k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  69.4k|        : base(unexpect, std::move(e.error())),
 1616|  69.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  69.4k|    {
 1618|  69.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  69.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  69.5k|          m_has_value(false)
  451|  69.5k|    {
  452|  69.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  76.6k|    {
 1316|  76.6k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  5.33k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.33k|    {
 1572|  5.33k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  5.33k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.33k|    {
  442|  5.33k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  76.6k|    {
 1740|  76.6k|        return has_value();
 1741|  76.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   153k|    {
  490|   153k|        return m_has_value;
  491|   153k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  69.4k|    {
 1746|  69.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  69.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  69.4k|        return this->get_unexpected().error();
 1748|  69.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  69.4k|    {
  473|  69.4k|        return m_unexpected;
  474|  69.4k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  3.21k|    {
 1805|  3.21k|        return std::move(value());
 1806|  3.21k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  7.08k|    {
 1769|  7.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  7.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  7.08k|        return this->get_value();
 1771|  7.08k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  7.08k|    {
  456|  7.08k|        return m_value;
  457|  7.08k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  26.7k|        : base(unexpect, std::move(e.error())),
 1616|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.7k|    {
 1618|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  26.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.8k|          m_has_value(false)
  451|  26.8k|    {
  452|  26.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  32.0k|    {
 1316|  32.0k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  5.16k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.16k|    {
 1572|  5.16k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  5.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.16k|    {
  442|  5.16k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  32.1k|    {
 1740|  32.1k|        return has_value();
 1741|  32.1k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  64.0k|    {
  490|  64.0k|        return m_has_value;
  491|  64.0k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  26.7k|    {
 1746|  26.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  26.7k|        return this->get_unexpected().error();
 1748|  26.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.7k|    {
  473|  26.7k|        return m_unexpected;
  474|  26.7k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  4.90k|    {
 1805|  4.90k|        return std::move(value());
 1806|  4.90k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  5.08k|    {
 1769|  5.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.08k|        return this->get_value();
 1771|  5.08k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  5.08k|    {
  456|  5.08k|        return m_value;
  457|  5.08k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    312|    {
 1979|    312|        return detail::transform_error_impl(std::move(*this),
 1980|    312|                                            std::forward<F>(f));
 1981|    312|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|    312|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    312|    else {
 1472|    312|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    312|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    312|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 312, False: 0]
  |  |  ------------------
  ------------------
 1474|    312|                   ? result(*std::forward<Exp>(exp))
 1475|    312|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    312|    }
 1479|    312|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  6.20k|    {
  490|  6.20k|        return m_has_value;
  491|  6.20k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|    360|    {
 1805|    360|        return std::move(value());
 1806|    360|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  3.02k|    {
 1769|  3.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.02k|        return this->get_value();
 1771|  3.02k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  3.02k|    {
  456|  3.02k|        return m_value;
  457|  3.02k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|     24|        : base(unexpect, std::forward<Args>(args)...),
 1626|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|     24|    {
 1628|     24|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8530|    216|    {
 8531|    216|        return m_args;
 8532|    216|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8535|  39.6k|    {
 8536|  39.6k|        return m_locale;
 8537|  39.6k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8541|  54.8k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|  54.8k|    {
 8543|  54.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|    528|    {
 3000|    528|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|    528|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|    528|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|    528|    {
 2981|    528|        return t.data();
 2982|    528|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8530|    918|    {
 8531|    918|        return m_args;
 8532|    918|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8535|  15.3k|    {
 8536|  15.3k|        return m_locale;
 8537|  15.3k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8541|   109k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|   109k|    {
 8543|   109k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|   409k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   409k|        : m_deferred_init(), m_has_value(true)
  529|   409k|    {
  530|   409k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   383k|        : base(unexpect, std::move(e.error())),
 1616|   383k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   383k|    {
 1618|   383k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   383k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   383k|          m_has_value(false)
  550|   383k|    {
  551|   383k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   383k|    {
 1316|   383k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6632|  2.30k|    {
 6633|  2.30k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|  2.30k|        CharT r{};
 6635|  2.30k|        std::memcpy(&r, m_data, m_size);
 6636|  2.30k|        return r;
 6637|  2.30k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  1.09k|    {
  365|  1.09k|        return m_unexpected;
  366|  1.09k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|    144|        : m_unexpected(std::forward<Args>(args)...)
  359|    144|    {
  360|    144|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|    144|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|    144|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  1.82k|        : m_unexpected(std::forward<Err>(e))
  350|  1.82k|    {
  351|  1.82k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.82k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  1.82k|    {
  365|  1.82k|        return m_unexpected;
  366|  1.82k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  1.82k|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.82k|    {
  360|  1.82k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.82k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|    144|        : m_unexpected(std::forward<Err>(e))
  350|    144|    {
  351|    144|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|    144|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|    144|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|     66|{
 1350|     66|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|     66|}
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   121k|{
  316|   121k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   121k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  62.0k|    {
 3496|  62.0k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  62.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.17k|    {
 1316|  3.17k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  3.17k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.17k|    {
 1572|  3.17k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.17k|    {
  442|  3.17k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  2.81k|    {
 1740|  2.81k|        return has_value();
 1741|  2.81k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  2.66k|    {
 1795|  2.66k|        return value();
 1796|  2.66k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|     40|        : base(std::in_place, std::forward<U>(val)),
 1570|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     40|    {
 1572|     40|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     40|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     40|    {
  442|     40|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     40|    {
 1316|     40|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1739|     12|    {
 1740|     12|        return has_value();
 1741|     12|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|     68|    {
  490|     68|        return m_has_value;
  491|     68|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     28|    {
 1769|     28|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     28|        return this->get_value();
 1771|     28|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|     28|    {
  456|     28|        return m_value;
  457|     28|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    456|    {
 1316|    456|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|    456|        : base(std::in_place, std::forward<U>(val)),
 1570|    456|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    456|    {
 1572|    456|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|    456|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    456|    {
  442|    456|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|     16|    {
 1979|     16|        return detail::transform_error_impl(std::move(*this),
 1980|     16|                                            std::forward<F>(f));
 1981|     16|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|     16|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     16|    else {
 1472|     16|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     16|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1474|     16|                   ? result(*std::forward<Exp>(exp))
 1475|     16|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     16|    }
 1479|     16|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     28|    {
 1805|     28|        return std::move(value());
 1806|     28|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|     30|        : base(std::in_place, std::forward<U>(val)),
 1570|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     30|    {
 1572|     30|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     30|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     30|    {
  442|     30|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    928|    {
 1316|    928|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|     10|        : base(unexpect, std::forward<Args>(args)...),
 1626|     10|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|     10|    {
 1628|     10|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    838|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    838|          m_has_value(false)
  451|    838|    {
  452|    838|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     48|    {
 2869|     48|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     48|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     48|    {
 2850|     48|        return decay_copy(t.begin());
 2851|     48|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2093|     98|{
 2094|     98|    return SCN_FWD(t);
  ------------------
  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|     98|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3479|     48|    {
 3480|     48|        return m_iterator;
 3481|     48|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|     48|    {
 2926|     48|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|     48|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|     48|    {
 2908|     48|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|     48|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3483|     48|    {
 3484|     48|        return m_sentinel;
 3485|     48|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|     48|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     48|    static_cast<    \
  |  |  935|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     48|    static_cast<    \
  |  |  935|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|     48|    {
 3466|     48|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1739|    456|    {
 1740|    456|        return has_value();
 1741|    456|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|    912|    {
  490|    912|        return m_has_value;
  491|    912|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    456|    {
 1805|    456|        return std::move(value());
 1806|    456|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    456|    {
 1769|    456|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    456|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    456|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    456|        return this->get_value();
 1771|    456|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|    456|    {
  456|    456|        return m_value;
  457|    456|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.7k|    {
 1316|  14.7k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  14.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  14.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  14.7k|    {
 1572|  14.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  14.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  14.7k|    {
  442|  14.7k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  14.7k|    {
 1740|  14.7k|        return has_value();
 1741|  14.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  29.5k|    {
  490|  29.5k|        return m_has_value;
  491|  29.5k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  14.7k|    {
 1805|  14.7k|        return std::move(value());
 1806|  14.7k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  14.7k|    {
 1769|  14.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  14.7k|        return this->get_value();
 1771|  14.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  14.7k|    {
  456|  14.7k|        return m_value;
  457|  14.7k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    828|        : base(unexpect, std::move(e.error())),
 1616|    828|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    828|    {
 1618|    828|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|      2|        : base(unexpect, std::move(e.error())),
 1616|      2|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|      2|    {
 1618|      2|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|      2|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|      2|          m_has_value(false)
  451|      2|    {
  452|      2|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     46|    {
 1316|     46|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|     32|        : base(unexpect, std::move(e.error())),
 1616|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     32|    {
 1618|     32|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|     32|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     32|          m_has_value(false)
  451|     32|    {
  452|     32|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1739|     42|    {
 1740|     42|        return has_value();
 1741|     42|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|     84|    {
  490|     84|        return m_has_value;
  491|     84|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1745|     14|    {
 1746|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     14|        return this->get_unexpected().error();
 1748|     14|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|     20|    {
  473|     20|        return m_unexpected;
  474|     20|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|      8|        : base(std::in_place, std::forward<U>(val)),
 1570|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      8|    {
 1572|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|      8|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      8|    {
  442|      8|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      8|    {
 1316|      8|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     12|    {
 1769|     12|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     12|        return this->get_value();
 1771|     12|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|     12|    {
  456|     12|        return m_value;
  457|     12|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|      6|    {
 1740|      6|        return has_value();
 1741|      6|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|     16|    {
  490|     16|        return m_has_value;
  491|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      6|    {
 1316|      6|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|      8|    {
 1805|      8|        return std::move(value());
 1806|      8|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|      8|    {
 1769|      8|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      8|        return this->get_value();
 1771|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|      8|    {
  456|      8|        return m_value;
  457|      8|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  22.9k|    {
 3484|  22.9k|        return m_sentinel;
 3485|  22.9k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|     12|    {
 1979|     12|        return detail::transform_error_impl(std::move(*this),
 1980|     12|                                            std::forward<F>(f));
 1981|     12|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|     12|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     12|    else {
 1472|     12|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     12|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1474|     12|                   ? result(*std::forward<Exp>(exp))
 1475|     12|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     12|    }
 1479|     12|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|     12|        : base(std::in_place, std::forward<U>(val)),
 1570|     12|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     12|    {
 1572|     12|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     12|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     12|    {
  442|     12|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     12|    {
 1805|     12|        return std::move(value());
 1806|     12|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  46.9k|    {
 3480|  46.9k|        return m_iterator;
 3481|  46.9k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|      6|        : base(std::in_place, std::forward<U>(val)),
 1570|      6|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      6|    {
 1572|      6|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|      6|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      6|    {
  442|      6|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|      6|    {
 1979|      6|        return detail::transform_error_impl(std::move(*this),
 1980|      6|                                            std::forward<F>(f));
 1981|      6|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|      6|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      6|    else {
 1472|      6|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      6|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 1474|      6|                   ? result(*std::forward<Exp>(exp))
 1475|      6|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|      6|    }
 1479|      6|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|     12|    {
  490|     12|        return m_has_value;
  491|     12|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|      6|    {
 1805|      6|        return std::move(value());
 1806|      6|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|      6|    {
 1769|      6|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      6|        return this->get_value();
 1771|      6|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|      6|    {
  456|      6|        return m_value;
  457|      6|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|      6|        : base(std::in_place, std::forward<U>(val)),
 1570|      6|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      6|    {
 1572|      6|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|      6|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      6|    {
  442|      6|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      6|    {
 1316|      6|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1739|      6|    {
 1740|      6|        return has_value();
 1741|      6|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     12|    {
  490|     12|        return m_has_value;
  491|     12|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|      6|    {
 1805|      6|        return std::move(value());
 1806|      6|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|      6|    {
 1769|      6|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      6|        return this->get_value();
 1771|      6|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|      6|    {
  456|      6|        return m_value;
  457|      6|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|      6|    {
 1979|      6|        return detail::transform_error_impl(std::move(*this),
 1980|      6|                                            std::forward<F>(f));
 1981|      6|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|      6|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      6|    else {
 1472|      6|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      6|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 1474|      6|                   ? result(*std::forward<Exp>(exp))
 1475|      6|                   : result(unexpect,
 1476|      6|                            trivial_invoke(std::forward<F>(f),
 1477|      6|                                           std::forward<Exp>(exp).error()));
 1478|      6|    }
 1479|      6|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1755|      6|    {
 1756|      6|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|      6|        return std::move(this->get_unexpected().error());
 1758|      6|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|     10|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|     10|    static_cast<    \
  |  |  935|     10|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|     10|    {
 3912|     10|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  17.8k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  17.8k|    static_cast<    \
  |  |  935|  17.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  17.8k|    static_cast<    \
  |  |  935|  17.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  17.8k|    {
 3466|  17.8k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1739|    930|    {
 1740|    930|        return has_value();
 1741|    930|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.85k|    {
  490|  1.85k|        return m_has_value;
  491|  1.85k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1745|    836|    {
 1746|    836|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    836|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    836|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    836|        return this->get_unexpected().error();
 1748|    836|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    836|    {
  473|    836|        return m_unexpected;
  474|    836|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     30|    {
 1805|     30|        return std::move(value());
 1806|     30|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     90|    {
 1769|     90|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     90|        return this->get_value();
 1771|     90|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|     90|    {
  456|     90|        return m_value;
  457|     90|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     24|          m_has_value(false)
  451|     24|    {
  452|     24|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    360|    {
 1316|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|    288|        : base(unexpect, std::move(e.error())),
 1616|    288|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    288|    {
 1618|    288|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|    288|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    288|          m_has_value(false)
  451|    288|    {
  452|    288|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|    384|    {
 1740|    384|        return has_value();
 1741|    384|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|    600|    {
  490|    600|        return m_has_value;
  491|    600|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|    144|    {
 1746|    144|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    144|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    144|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    144|        return this->get_unexpected().error();
 1748|    144|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|    144|    {
  473|    144|        return m_unexpected;
  474|    144|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|     96|        : base(std::in_place, std::forward<U>(val)),
 1570|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     96|    {
 1572|     96|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|     96|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     96|    {
  442|     96|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     96|    {
 1316|     96|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|     48|    {
 1769|     48|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     48|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     48|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     48|        return this->get_value();
 1771|     48|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|     48|    {
  456|     48|        return m_value;
  457|     48|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|     72|    {
 1740|     72|        return has_value();
 1741|     72|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|    192|    {
  490|    192|        return m_has_value;
  491|    192|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     72|    {
 1316|     72|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     96|    {
 1805|     96|        return std::move(value());
 1806|     96|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     96|    {
 1769|     96|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     96|        return this->get_value();
 1771|     96|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|     96|    {
  456|     96|        return m_value;
  457|     96|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   115k|    {
 3375|   115k|        return detail::to_address(ranges::begin(derived()));
 3376|   115k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   115k|    {
 2869|   115k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   115k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   115k|    {
 2850|   115k|        return decay_copy(t.begin());
 2851|   115k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   115k|    {
 3334|   115k|        return static_cast<D&>(*this);
 3335|   115k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|     48|        : base(std::in_place, std::forward<U>(val)),
 1570|     48|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     48|    {
 1572|     48|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|     48|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     48|    {
  442|     48|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|     72|        : base(std::in_place, std::forward<U>(val)),
 1570|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     72|    {
 1572|     72|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|     72|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     72|    {
  442|     72|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|     72|    {
 1979|     72|        return detail::transform_error_impl(std::move(*this),
 1980|     72|                                            std::forward<F>(f));
 1981|     72|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|     72|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     72|    else {
 1472|     72|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     72|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     72|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 72, False: 0]
  |  |  ------------------
  ------------------
 1474|     72|                   ? result(*std::forward<Exp>(exp))
 1475|     72|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     72|    }
 1479|     72|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|    144|    {
  490|    144|        return m_has_value;
  491|    144|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|     72|    {
 1805|     72|        return std::move(value());
 1806|     72|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|     72|    {
 1769|     72|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     72|        return this->get_value();
 1771|     72|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|     72|    {
  456|     72|        return m_value;
  457|     72|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|     72|        : base(std::in_place, std::forward<U>(val)),
 1570|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     72|    {
 1572|     72|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|     72|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     72|    {
  442|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     72|    {
 1316|     72|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|     72|    {
 1740|     72|        return has_value();
 1741|     72|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|    144|    {
  490|    144|        return m_has_value;
  491|    144|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|     72|    {
 1805|     72|        return std::move(value());
 1806|     72|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|     72|    {
 1769|     72|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     72|        return this->get_value();
 1771|     72|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|     72|    {
  456|     72|        return m_value;
  457|     72|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   113k|    {
 3000|   113k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   113k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   113k|    {
 2981|   113k|        return t.data();
 2982|   113k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|    222|        : base(std::in_place, std::forward<U>(val)),
 1570|    222|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    222|    {
 1572|    222|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|    222|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    222|    {
  442|    222|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|    166|{
 1350|    166|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    166|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|      2|    {
 1979|      2|        return detail::transform_error_impl(std::move(*this),
 1980|      2|                                            std::forward<F>(f));
 1981|      2|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|      2|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      2|    else {
 1472|      2|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      2|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 1474|      2|                   ? result(*std::forward<Exp>(exp))
 1475|      2|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|      2|    }
 1479|      2|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|      2|        : base(std::in_place, std::forward<U>(val)),
 1570|      2|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      2|    {
 1572|      2|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|      2|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      2|    {
  442|      2|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      2|    {
 1316|      2|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|      2|    {
 1740|      2|        return has_value();
 1741|      2|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|      4|    {
  490|      4|        return m_has_value;
  491|      4|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|      2|    {
 1805|      2|        return std::move(value());
 1806|      2|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|      2|    {
 1769|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      2|        return this->get_value();
 1771|      2|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|      2|    {
  456|      2|        return m_value;
  457|      2|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1964|      4|    {
 1965|      4|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|      4|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1461|      4|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      4|    else {
 1472|      4|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      4|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      4|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 1474|      4|                   ? result(*std::forward<Exp>(exp))
 1475|      4|                   : result(unexpect,
 1476|      4|                            trivial_invoke(std::forward<F>(f),
 1477|      4|                                           std::forward<Exp>(exp).error()));
 1478|      4|    }
 1479|      4|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|     60|    {
 1795|     60|        return value();
 1796|     60|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|      2|    {
 2869|      2|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|      2|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|      2|    {
 2850|      2|        return decay_copy(t.begin());
 2851|      2|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|     24|    {
 1979|     24|        return detail::transform_error_impl(std::move(*this),
 1980|     24|                                            std::forward<F>(f));
 1981|     24|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|     24|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     24|    else {
 1472|     24|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     24|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     24|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 1474|     24|                   ? result(*std::forward<Exp>(exp))
 1475|     24|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     24|    }
 1479|     24|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|     24|        : base(std::in_place, std::forward<U>(val)),
 1570|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     24|    {
 1572|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|     24|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     24|    {
  442|     24|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     24|    {
 1316|     24|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|     24|    {
 1740|     24|        return has_value();
 1741|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     48|    {
  490|     48|        return m_has_value;
  491|     48|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     24|    {
 1805|     24|        return std::move(value());
 1806|     24|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     24|    {
 1769|     24|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     24|        return this->get_value();
 1771|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     24|    {
  456|     24|        return m_value;
  457|     24|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|     24|    {
 1965|     24|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|     24|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|     24|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     24|    else {
 1472|     24|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     24|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     24|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 1474|     24|                   ? result(*std::forward<Exp>(exp))
 1475|     24|                   : result(unexpect,
 1476|     24|                            trivial_invoke(std::forward<F>(f),
 1477|     24|                                           std::forward<Exp>(exp).error()));
 1478|     24|    }
 1479|     24|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|     24|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|     24|    static_cast<    \
  |  |  935|     24|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|     24|    {
 3912|     24|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  3.87k|    {
 1795|  3.87k|        return value();
 1796|  3.87k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7138|  1.84k|{
 7139|  1.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|  1.84k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|  1.84k|    auto start = begin;
 7143|  1.84k|    ++begin;
 7144|       |
 7145|  1.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.84k]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|  1.84k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 12, False: 1.83k]
  ------------------
 7152|     12|        handler.on_charset_inverted();
 7153|     12|        ++begin;
 7154|     12|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|     12|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 12]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|     12|    }
 7165|  1.83k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 1.83k]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|   890k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 890k, False: 0]
  ------------------
 7170|   890k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   890k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 890k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|   890k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 1.84k, False: 888k]
  ------------------
 7175|  1.84k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|  1.84k|        }
 7177|       |
 7178|   888k|        parse_presentation_set_literal(begin, end, handler);
 7179|   888k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|  1.84k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7102|   888k|{
 7103|   888k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   888k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   888k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|   888k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|   888k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 888k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|   888k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 888k, False: 0]
  |  Branch (7110:25): [True: 2.40k, False: 886k]
  |  Branch (7110:49): [True: 2.40k, False: 0]
  ------------------
 7111|   888k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 2.32k, False: 84]
  ------------------
 7112|  2.32k|        ++begin;
 7113|       |
 7114|  2.32k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|  2.32k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|  2.32k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|  2.32k|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|  2.32k|        return;
 7128|  2.32k|    }
 7129|       |
 7130|   886k|    handler.on_charset_single(cp_first);
 7131|   886k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7078|   891k|{
 7079|   891k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   891k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   891k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|   891k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|   891k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 891k]
  |  |  |  Branch (865:45): [True: 0, False: 891k]
  |  |  |  Branch (865:45): [True: 0, False: 891k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|   891k|    const auto cp =
 7088|   891k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|   891k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 891k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|   891k|    begin += len;
 7095|   891k|    return cp;
 7096|   891k|}
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  15.5k|    {
 1316|  15.5k|    }
_ZN3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1569|  15.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  15.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  15.5k|    {
 1572|  15.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  440|  15.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  15.5k|    {
  442|  15.5k|    }
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6697|  13.1k|    {
 6698|  13.1k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6699|  13.1k|                charset_string_size};
 6700|  13.1k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|     60|        : base(std::in_place, std::forward<U>(val)),
 1570|     60|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     60|    {
 1572|     60|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|     60|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     60|    {
  442|     60|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.78k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.78k|    {
 1572|  1.78k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.78k|    {
  442|  1.78k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4293|   255k|{
 4294|   255k|    if constexpr (sizeof(CharT) == 1) {
 4295|   255k|        return decode_utf8_code_point_exhaustive_valid(input);
 4296|       |    }
 4297|       |    else if constexpr (sizeof(CharT) == 2) {
 4298|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4299|       |    }
 4300|       |    else {
 4301|       |        SCN_EXPECT(input.size() == 1);
 4302|       |        return static_cast<char32_t>(input.front());
 4303|       |    }
 4304|   255k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4171|  35.5k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  35.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  35.5k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6632|     18|    {
 6633|     18|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|     18|        CharT r{};
 6635|     18|        std::memcpy(&r, m_data, m_size);
 6636|     18|        return r;
 6637|     18|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   224M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   224M|    else {
 4075|       |        // utf-32
 4076|   224M|        static_assert(sizeof(U) == 4);
 4077|   224M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   224M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   224M|        return 1;
 4079|   224M|    }
 4080|   224M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   224M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   224M|    else {
 4281|   224M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   224M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   224M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   224M|        auto cp = static_cast<char32_t>(input.front());
 4283|   224M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   224M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 61.4k, False: 224M]
  |  |  ------------------
  ------------------
 4284|  61.4k|            return invalid_code_point;
 4285|  61.4k|        }
 4286|   224M|        return cp;
 4287|   224M|    }
 4288|   224M|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  18.8k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  18.8k|    else {
 3966|  18.8k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  18.8k|                                       to_address(first), to_address(last)))};
 3968|  18.8k|    }
 3969|  18.8k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  57.3k|{
  316|  57.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  57.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  57.3k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   286k|{
  294|   286k|    return p;
  295|   286k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.38k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.38k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.38k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.38k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.38k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   229k|{
  316|   229k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   229k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   116k|    {
 3496|   116k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.97k|    {
 1316|  2.97k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.97k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.97k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.97k|    {
 1572|  2.97k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.97k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.97k|    {
  442|  2.97k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|    588|    {
 1740|    588|        return has_value();
 1741|    588|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.36k|    {
  490|  5.36k|        return m_has_value;
  491|  5.36k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.39k|    {
 1769|  2.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.39k|        return this->get_value();
 1771|  2.39k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.39k|    {
  456|  2.39k|        return m_value;
  457|  2.39k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|    280|        : base(std::in_place, std::forward<U>(val)),
 1570|    280|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    280|    {
 1572|    280|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    280|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    280|    {
  442|    280|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    280|    {
 1316|    280|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1739|    120|    {
 1740|    120|        return has_value();
 1741|    120|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|    440|    {
  490|    440|        return m_has_value;
  491|    440|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    160|    {
 1769|    160|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    160|        return this->get_value();
 1771|    160|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|    160|    {
  456|    160|        return m_value;
  457|    160|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    180|    {
 1316|    180|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|    180|        : base(std::in_place, std::forward<U>(val)),
 1570|    180|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    180|    {
 1572|    180|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|    180|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    180|    {
  442|    180|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|     40|    {
 1979|     40|        return detail::transform_error_impl(std::move(*this),
 1980|     40|                                            std::forward<F>(f));
 1981|     40|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|     40|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     40|    else {
 1472|     40|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     40|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     40|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 1474|     40|                   ? result(*std::forward<Exp>(exp))
 1475|     40|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     40|    }
 1479|     40|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    160|    {
 1805|    160|        return std::move(value());
 1806|    160|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|     60|        : base(std::in_place, std::forward<U>(val)),
 1570|     60|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     60|    {
 1572|     60|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     60|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     60|    {
  442|     60|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    400|    {
 1316|    400|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    100|        : base(unexpect, std::forward<Args>(args)...),
 1626|    100|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    100|    {
 1628|    100|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    340|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    340|          m_has_value(false)
  451|    340|    {
  452|    340|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     40|    {
 2869|     40|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     40|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     40|    {
 2850|     40|        return decay_copy(t.begin());
 2851|     40|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2093|    100|{
 2094|    100|    return SCN_FWD(t);
  ------------------
  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|    100|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3479|     40|    {
 3480|     40|        return m_iterator;
 3481|     40|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|     40|    {
 2926|     40|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|     40|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|     40|    {
 2908|     40|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|     40|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3483|     40|    {
 3484|     40|        return m_sentinel;
 3485|     40|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|     40|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     40|    static_cast<    \
  |  |  935|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     40|    static_cast<    \
  |  |  935|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|     40|    {
 3466|     40|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1739|    180|    {
 1740|    180|        return has_value();
 1741|    180|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|    360|    {
  490|    360|        return m_has_value;
  491|    360|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    180|    {
 1805|    180|        return std::move(value());
 1806|    180|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    180|    {
 1769|    180|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    180|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    180|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    180|        return this->get_value();
 1771|    180|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|    180|    {
  456|    180|        return m_value;
  457|    180|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.73k|    {
 1316|  5.73k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  5.73k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.73k|    {
 1572|  5.73k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  5.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.73k|    {
  442|  5.73k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.79k|    {
 1979|  1.79k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.79k|                                            std::forward<F>(f));
 1981|  1.79k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.79k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.79k|    else {
 1472|  1.79k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.79k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.79k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.79k, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.79k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.79k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.79k|    }
 1479|  1.79k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.39k|    {
 1805|  2.39k|        return std::move(value());
 1806|  2.39k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|     98|        : base(unexpect, std::forward<Args>(args)...),
 1626|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|     98|    {
 1628|     98|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  5.73k|    {
 1740|  5.73k|        return has_value();
 1741|  5.73k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.4k|    {
  490|  11.4k|        return m_has_value;
  491|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  5.73k|    {
 1805|  5.73k|        return std::move(value());
 1806|  5.73k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  5.73k|    {
 1769|  5.73k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.73k|        return this->get_value();
 1771|  5.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.73k|    {
  456|  5.73k|        return m_value;
  457|  5.73k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    240|        : base(unexpect, std::move(e.error())),
 1616|    240|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    240|    {
 1618|    240|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     20|        : base(unexpect, std::move(e.error())),
 1616|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     20|    {
 1618|     20|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|     20|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     20|          m_has_value(false)
  451|     20|    {
  452|     20|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    460|    {
 1316|    460|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|    320|        : base(unexpect, std::move(e.error())),
 1616|    320|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    320|    {
 1618|    320|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|    320|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    320|          m_has_value(false)
  451|    320|    {
  452|    320|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1739|    420|    {
 1740|    420|        return has_value();
 1741|    420|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|    840|    {
  490|    840|        return m_has_value;
  491|    840|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1745|    140|    {
 1746|    140|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    140|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    140|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    140|        return this->get_unexpected().error();
 1748|    140|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|    200|    {
  473|    200|        return m_unexpected;
  474|    200|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|     80|        : base(std::in_place, std::forward<U>(val)),
 1570|     80|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     80|    {
 1572|     80|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|     80|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     80|    {
  442|     80|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     80|    {
 1316|     80|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    120|    {
 1769|    120|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    120|        return this->get_value();
 1771|    120|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|    120|    {
  456|    120|        return m_value;
  457|    120|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|     60|    {
 1740|     60|        return has_value();
 1741|     60|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|    160|    {
  490|    160|        return m_has_value;
  491|    160|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     60|    {
 1316|     60|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|     80|    {
 1805|     80|        return std::move(value());
 1806|     80|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|     80|    {
 1769|     80|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     80|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     80|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     80|        return this->get_value();
 1771|     80|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|     80|    {
  456|     80|        return m_value;
  457|     80|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  12.9k|    {
 3484|  12.9k|        return m_sentinel;
 3485|  12.9k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    120|    {
 1979|    120|        return detail::transform_error_impl(std::move(*this),
 1980|    120|                                            std::forward<F>(f));
 1981|    120|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    120|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    120|    else {
 1472|    120|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    120|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    120|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 120, False: 0]
  |  |  ------------------
  ------------------
 1474|    120|                   ? result(*std::forward<Exp>(exp))
 1475|    120|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    120|    }
 1479|    120|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|    120|        : base(std::in_place, std::forward<U>(val)),
 1570|    120|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    120|    {
 1572|    120|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    120|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    120|    {
  442|    120|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    120|    {
 1805|    120|        return std::move(value());
 1806|    120|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  13.1k|    {
 3480|  13.1k|        return m_iterator;
 3481|  13.1k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|     60|        : base(std::in_place, std::forward<U>(val)),
 1570|     60|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     60|    {
 1572|     60|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|     60|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     60|    {
  442|     60|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|     60|    {
 1979|     60|        return detail::transform_error_impl(std::move(*this),
 1980|     60|                                            std::forward<F>(f));
 1981|     60|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|     60|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     60|    else {
 1472|     60|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     60|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     60|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 60, False: 0]
  |  |  ------------------
  ------------------
 1474|     60|                   ? result(*std::forward<Exp>(exp))
 1475|     60|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     60|    }
 1479|     60|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    120|    {
  490|    120|        return m_has_value;
  491|    120|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|     60|    {
 1805|     60|        return std::move(value());
 1806|     60|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|     60|    {
 1769|     60|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     60|        return this->get_value();
 1771|     60|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|     60|    {
  456|     60|        return m_value;
  457|     60|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|     60|        : base(std::in_place, std::forward<U>(val)),
 1570|     60|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     60|    {
 1572|     60|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|     60|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     60|    {
  442|     60|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     60|    {
 1316|     60|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1739|     60|    {
 1740|     60|        return has_value();
 1741|     60|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    120|    {
  490|    120|        return m_has_value;
  491|    120|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|     60|    {
 1805|     60|        return std::move(value());
 1806|     60|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|     60|    {
 1769|     60|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     60|        return this->get_value();
 1771|     60|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     60|    {
  456|     60|        return m_value;
  457|     60|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|     60|    {
 1979|     60|        return detail::transform_error_impl(std::move(*this),
 1980|     60|                                            std::forward<F>(f));
 1981|     60|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1461|     60|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     60|    else {
 1472|     60|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     60|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     60|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 1474|     60|                   ? result(*std::forward<Exp>(exp))
 1475|     60|                   : result(unexpect,
 1476|     60|                            trivial_invoke(std::forward<F>(f),
 1477|     60|                                           std::forward<Exp>(exp).error()));
 1478|     60|    }
 1479|     60|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1755|     60|    {
 1756|     60|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|     60|        return std::move(this->get_unexpected().error());
 1758|     60|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|    100|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    100|    static_cast<    \
  |  |  935|    100|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    100|    {
 3912|    100|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  4.44k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.44k|    static_cast<    \
  |  |  935|  4.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.44k|    static_cast<    \
  |  |  935|  4.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.44k|    {
 3466|  4.44k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1739|    420|    {
 1740|    420|        return has_value();
 1741|    420|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|    800|    {
  490|    800|        return m_has_value;
  491|    800|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1745|    320|    {
 1746|    320|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    320|        return this->get_unexpected().error();
 1748|    320|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    320|    {
  473|    320|        return m_unexpected;
  474|    320|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     60|    {
 1805|     60|        return std::move(value());
 1806|     60|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     60|    {
 1769|     60|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     60|        return this->get_value();
 1771|     60|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|     60|    {
  456|     60|        return m_value;
  457|     60|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|     98|        : base(unexpect, std::move(e.error())),
 1616|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     98|    {
 1618|     98|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|     98|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     98|          m_has_value(false)
  451|     98|    {
  452|     98|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.87k|    {
 1316|  1.87k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.18k|        : base(unexpect, std::move(e.error())),
 1616|  1.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.18k|    {
 1618|  1.18k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  1.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.18k|          m_has_value(false)
  451|  1.18k|    {
  452|  1.18k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  1.97k|    {
 1740|  1.97k|        return has_value();
 1741|  1.97k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  3.25k|    {
  490|  3.25k|        return m_has_value;
  491|  3.25k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|    588|    {
 1746|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    588|        return this->get_unexpected().error();
 1748|    588|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|    588|    {
  473|    588|        return m_unexpected;
  474|    588|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|    392|        : base(std::in_place, std::forward<U>(val)),
 1570|    392|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    392|    {
 1572|    392|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    392|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    392|    {
  442|    392|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    392|    {
 1316|    392|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|    596|    {
 1769|    596|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    596|        return this->get_value();
 1771|    596|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|    596|    {
  456|    596|        return m_value;
  457|    596|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|    294|    {
 1740|    294|        return has_value();
 1741|    294|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|    784|    {
  490|    784|        return m_has_value;
  491|    784|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    294|    {
 1316|    294|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    392|    {
 1805|    392|        return std::move(value());
 1806|    392|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    392|    {
 1769|    392|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    392|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    392|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    392|        return this->get_value();
 1771|    392|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|    392|    {
  456|    392|        return m_value;
  457|    392|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    596|    {
 1979|    596|        return detail::transform_error_impl(std::move(*this),
 1980|    596|                                            std::forward<F>(f));
 1981|    596|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|    596|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    596|    else {
 1472|    596|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    596|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    596|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 596, False: 0]
  |  |  ------------------
  ------------------
 1474|    596|                   ? result(*std::forward<Exp>(exp))
 1475|    596|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    596|    }
 1479|    596|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|    596|        : base(std::in_place, std::forward<U>(val)),
 1570|    596|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    596|    {
 1572|    596|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|    596|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    596|    {
  442|    596|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|    596|    {
 1805|    596|        return std::move(value());
 1806|    596|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|    294|        : base(std::in_place, std::forward<U>(val)),
 1570|    294|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    294|    {
 1572|    294|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|    294|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    294|    {
  442|    294|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|    294|    {
 1979|    294|        return detail::transform_error_impl(std::move(*this),
 1980|    294|                                            std::forward<F>(f));
 1981|    294|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|    294|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    294|    else {
 1472|    294|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    294|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    294|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 294, False: 0]
  |  |  ------------------
  ------------------
 1474|    294|                   ? result(*std::forward<Exp>(exp))
 1475|    294|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    294|    }
 1479|    294|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|    588|    {
  490|    588|        return m_has_value;
  491|    588|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|    294|    {
 1805|    294|        return std::move(value());
 1806|    294|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|    294|    {
 1769|    294|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    294|        return this->get_value();
 1771|    294|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|    294|    {
  456|    294|        return m_value;
  457|    294|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|    294|        : base(std::in_place, std::forward<U>(val)),
 1570|    294|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    294|    {
 1572|    294|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|    294|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    294|    {
  442|    294|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    294|    {
 1316|    294|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|    294|    {
 1740|    294|        return has_value();
 1741|    294|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|    588|    {
  490|    588|        return m_has_value;
  491|    588|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|    294|    {
 1805|    294|        return std::move(value());
 1806|    294|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|    294|    {
 1769|    294|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    294|        return this->get_value();
 1771|    294|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|    294|    {
  456|    294|        return m_value;
  457|    294|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   222k|    {
 3000|   222k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   222k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   222k|    {
 2981|   222k|        return t.data();
 2982|   222k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   228k|    {
 3375|   228k|        return detail::to_address(ranges::begin(derived()));
 3376|   228k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   228k|    {
 2869|   228k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   228k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   228k|    {
 2850|   228k|        return decay_copy(t.begin());
 2851|   228k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   228k|    {
 3334|   228k|        return static_cast<D&>(*this);
 3335|   228k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|     20|    {
 1979|     20|        return detail::transform_error_impl(std::move(*this),
 1980|     20|                                            std::forward<F>(f));
 1981|     20|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|     20|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     20|    else {
 1472|     20|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     20|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 1474|     20|                   ? result(*std::forward<Exp>(exp))
 1475|     20|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     20|    }
 1479|     20|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|     20|        : base(std::in_place, std::forward<U>(val)),
 1570|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     20|    {
 1572|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|     20|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     20|    {
  442|     20|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     20|    {
 1316|     20|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|     20|    {
 1740|     20|        return has_value();
 1741|     20|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     40|    {
  490|     40|        return m_has_value;
  491|     40|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|     20|    {
 1805|     20|        return std::move(value());
 1806|     20|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|     20|    {
 1769|     20|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     20|        return this->get_value();
 1771|     20|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     20|    {
  456|     20|        return m_value;
  457|     20|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1964|     40|    {
 1965|     40|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|     40|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1461|     40|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     40|    else {
 1472|     40|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     40|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     40|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1474|     40|                   ? result(*std::forward<Exp>(exp))
 1475|     40|                   : result(unexpect,
 1476|     40|                            trivial_invoke(std::forward<F>(f),
 1477|     40|                                           std::forward<Exp>(exp).error()));
 1478|     40|    }
 1479|     40|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     20|    {
 2869|     20|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     20|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     20|    {
 2850|     20|        return decay_copy(t.begin());
 2851|     20|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|     98|    {
 1979|     98|        return detail::transform_error_impl(std::move(*this),
 1980|     98|                                            std::forward<F>(f));
 1981|     98|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|     98|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     98|    else {
 1472|     98|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     98|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     98|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 98, False: 0]
  |  |  ------------------
  ------------------
 1474|     98|                   ? result(*std::forward<Exp>(exp))
 1475|     98|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     98|    }
 1479|     98|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|     98|        : base(std::in_place, std::forward<U>(val)),
 1570|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     98|    {
 1572|     98|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|     98|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     98|    {
  442|     98|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     98|    {
 1316|     98|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|     98|    {
 1740|     98|        return has_value();
 1741|     98|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    196|    {
  490|    196|        return m_has_value;
  491|    196|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     98|    {
 1805|     98|        return std::move(value());
 1806|     98|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     98|    {
 1769|     98|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     98|        return this->get_value();
 1771|     98|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     98|    {
  456|     98|        return m_value;
  457|     98|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|     98|    {
 1965|     98|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|     98|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|     98|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     98|    else {
 1472|     98|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     98|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     98|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 1474|     98|                   ? result(*std::forward<Exp>(exp))
 1475|     98|                   : result(unexpect,
 1476|     98|                            trivial_invoke(std::forward<F>(f),
 1477|     98|                                           std::forward<Exp>(exp).error()));
 1478|     98|    }
 1479|     98|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|     98|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|     98|    static_cast<    \
  |  |  935|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|     98|    {
 3912|     98|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|    182|    {
 1795|    182|        return value();
 1796|    182|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7138|     24|{
 7139|     24|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|     24|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|     24|    auto start = begin;
 7143|     24|    ++begin;
 7144|       |
 7145|     24|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|     24|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 0, False: 24]
  ------------------
 7152|      0|        handler.on_charset_inverted();
 7153|      0|        ++begin;
 7154|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 0]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|      0|    }
 7165|     24|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 24]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  1.25k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 1.25k, False: 0]
  ------------------
 7170|  1.25k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.25k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|  1.25k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 24, False: 1.23k]
  ------------------
 7175|     24|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|     24|        }
 7177|       |
 7178|  1.23k|        parse_presentation_set_literal(begin, end, handler);
 7179|  1.23k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|     24|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7102|  1.23k|{
 7103|  1.23k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  1.23k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  1.23k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.23k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|  1.23k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 1.23k, False: 0]
  |  Branch (7110:25): [True: 132, False: 1.09k]
  |  Branch (7110:49): [True: 132, False: 0]
  ------------------
 7111|  1.23k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 132, False: 0]
  ------------------
 7112|    132|        ++begin;
 7113|       |
 7114|    132|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|    132|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|    132|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|    132|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|    132|        return;
 7128|    132|    }
 7129|       |
 7130|  1.09k|    handler.on_charset_single(cp_first);
 7131|  1.09k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7078|  1.36k|{
 7079|  1.36k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  1.36k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  1.36k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36k]
  |  |  |  Branch (865:45): [True: 0, False: 1.36k]
  |  |  |  Branch (865:45): [True: 0, False: 1.36k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  1.36k|    const auto cp =
 7088|  1.36k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  1.36k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|  1.36k|    begin += len;
 7095|  1.36k|    return cp;
 7096|  1.36k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6697|  4.63k|    {
 6698|  4.63k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6699|  4.63k|                charset_string_size};
 6700|  4.63k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|     18|        : base(std::in_place, std::forward<U>(val)),
 1570|     18|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     18|    {
 1572|     18|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|     18|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     18|    {
  442|     18|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 5870|  54.8k|    {
 5871|  54.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 54.8k]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|  54.8k|        return static_cast<std::size_t>(m_desc &
 5876|  54.8k|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|  54.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 5896|  94.8k|    {
 5897|  94.8k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  94.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 5838|  39.9k|    {
 5839|  39.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.9k]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  39.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.9k]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  39.9k|        const auto t = type(id);
 5851|  39.9k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 154, False: 39.8k]
  |  |  ------------------
  ------------------
 5852|    154|            return {};
 5853|    154|        }
 5854|       |
 5855|  39.8k|        basic_scan_arg<Context> arg;
 5856|  39.8k|        arg.m_type = t;
 5857|  39.8k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 39.8k, False: 0]
  ------------------
 5858|  39.8k|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  39.8k|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  39.8k|        return arg;
 5864|  39.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5648|  39.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5253|  55.3k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 5905|  39.9k|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  39.9k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  39.9k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  39.9k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  39.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 5900|  39.8k|    {
 5901|  39.8k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  39.8k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5654|  79.6k|    {
 5655|  79.6k|        return m_type != detail::arg_type::none_type;
 5656|  79.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|    216|{
 8994|    216|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|    216|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|    216|{
 8895|    216|#define SCN_VISIT(Type)                                                \
 8896|    216|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|    216|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|    216|    }                                                                  \
 8899|    216|    else {                                                             \
 8900|    216|        return vis(monostate_val);                                     \
 8901|    216|    }
 8902|       |
 8903|    216|    monostate monostate_val{};
 8904|       |
 8905|    216|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 216]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 216]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|     24|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 24, False: 192]
  ------------------
 8911|     24|            SCN_VISIT(int);
  ------------------
  |  | 8896|     24|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     24|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     24|    }                                                                  \
  |  | 8899|     24|    else {                                                             \
  |  | 8900|     24|        return vis(monostate_val);                                     \
  |  | 8901|     24|    }
  ------------------
 8912|     24|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 216]
  ------------------
 8913|     24|            SCN_VISIT(long);
  ------------------
  |  | 8896|     24|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     24|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     24|    }                                                                  \
  |  | 8899|     24|    else {                                                             \
  |  | 8900|     24|        return vis(monostate_val);                                     \
  |  | 8901|     24|    }
  ------------------
 8914|     24|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 216]
  ------------------
 8915|     24|            SCN_VISIT(long long);
  ------------------
  |  | 8896|     24|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     24|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     24|    }                                                                  \
  |  | 8899|     24|    else {                                                             \
  |  | 8900|     24|        return vis(monostate_val);                                     \
  |  | 8901|     24|    }
  ------------------
 8916|     24|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 216]
  ------------------
 8917|     24|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|     24|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     24|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     24|    }                                                                  \
  |  | 8899|     24|    else {                                                             \
  |  | 8900|     24|        return vis(monostate_val);                                     \
  |  | 8901|     24|    }
  ------------------
 8918|     24|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 216]
  ------------------
 8919|     24|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|     24|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     24|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     24|    }                                                                  \
  |  | 8899|     24|    else {                                                             \
  |  | 8900|     24|        return vis(monostate_val);                                     \
  |  | 8901|     24|    }
  ------------------
 8920|     48|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 24, False: 192]
  ------------------
 8921|     48|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|     48|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     48|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     48|    }                                                                  \
  |  | 8899|     48|    else {                                                             \
  |  | 8900|     48|        return vis(monostate_val);                                     \
  |  | 8901|     48|    }
  ------------------
 8922|     48|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 216]
  ------------------
 8923|     48|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|     48|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     48|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     48|    }                                                                  \
  |  | 8899|     48|    else {                                                             \
  |  | 8900|     48|        return vis(monostate_val);                                     \
  |  | 8901|     48|    }
  ------------------
 8924|     48|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 216]
  ------------------
 8925|     48|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|     48|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     48|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     48|    }                                                                  \
  |  | 8899|     48|    else {                                                             \
  |  | 8900|     48|        return vis(monostate_val);                                     \
  |  | 8901|     48|    }
  ------------------
 8926|     72|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 24, False: 192]
  ------------------
 8927|     72|            SCN_VISIT(void*);
  ------------------
  |  | 8896|     72|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     72|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     72|    }                                                                  \
  |  | 8899|     72|    else {                                                             \
  |  | 8900|     72|        return vis(monostate_val);                                     \
  |  | 8901|     72|    }
  ------------------
 8928|     96|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 24, False: 192]
  ------------------
 8929|     96|            SCN_VISIT(bool);
  ------------------
  |  | 8896|     96|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     96|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     96|    }                                                                  \
  |  | 8899|     96|    else {                                                             \
  |  | 8900|     96|        return vis(monostate_val);                                     \
  |  | 8901|     96|    }
  ------------------
 8930|    120|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 24, False: 192]
  ------------------
 8931|    120|            SCN_VISIT(char);
  ------------------
  |  | 8896|    120|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    120|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    120|    }                                                                  \
  |  | 8899|    120|    else {                                                             \
  |  | 8900|    120|        return vis(monostate_val);                                     \
  |  | 8901|    120|    }
  ------------------
 8932|    120|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 216]
  ------------------
 8933|    120|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|    120|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    120|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    120|    }                                                                  \
  |  | 8899|    120|    else {                                                             \
  |  | 8900|    120|        return vis(monostate_val);                                     \
  |  | 8901|    120|    }
  ------------------
 8934|    120|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 216]
  ------------------
 8935|    120|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|    120|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    120|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    120|    }                                                                  \
  |  | 8899|    120|    else {                                                             \
  |  | 8900|    120|        return vis(monostate_val);                                     \
  |  | 8901|    120|    }
  ------------------
 8936|    120|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 216]
  ------------------
 8937|    120|            SCN_VISIT(float);
  ------------------
  |  | 8896|    120|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    120|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    120|    }                                                                  \
  |  | 8899|    120|    else {                                                             \
  |  | 8900|    120|        return vis(monostate_val);                                     \
  |  | 8901|    120|    }
  ------------------
 8938|    144|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 24, False: 192]
  ------------------
 8939|    144|            SCN_VISIT(double);
  ------------------
  |  | 8896|    144|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    144|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    144|    }                                                                  \
  |  | 8899|    144|    else {                                                             \
  |  | 8900|    144|        return vis(monostate_val);                                     \
  |  | 8901|    144|    }
  ------------------
 8940|    144|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 216]
  ------------------
 8941|    144|            SCN_VISIT(long double);
  ------------------
  |  | 8896|    144|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    144|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    144|    }                                                                  \
  |  | 8899|    144|    else {                                                             \
  |  | 8900|    144|        return vis(monostate_val);                                     \
  |  | 8901|    144|    }
  ------------------
 8942|    168|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 24, False: 192]
  ------------------
 8943|    168|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|    168|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    168|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    168|    }                                                                  \
  |  | 8899|    168|    else {                                                             \
  |  | 8900|    168|        return vis(monostate_val);                                     \
  |  | 8901|    168|    }
  ------------------
 8944|    192|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 24, False: 192]
  ------------------
 8945|    192|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|    192|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    192|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    192|    }                                                                  \
  |  | 8899|    192|    else {                                                             \
  |  | 8900|    192|        return vis(monostate_val);                                     \
  |  | 8901|    192|    }
  ------------------
 8946|    192|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 216]
  ------------------
 8947|    192|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|    192|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    192|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    192|    }                                                                  \
  |  | 8899|    192|    else {                                                             \
  |  | 8900|    192|        return vis(monostate_val);                                     \
  |  | 8901|    192|    }
  ------------------
 8948|    216|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 24, False: 192]
  ------------------
 8949|    216|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|    216|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    216|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    216|    }                                                                  \
  |  | 8899|    216|    else {                                                             \
  |  | 8900|    216|        return vis(monostate_val);                                     \
  |  | 8901|    216|    }
  ------------------
 8950|    216|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 216]
  ------------------
 8951|    216|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|    216|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    216|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    216|    }                                                                  \
  |  | 8899|    216|    else {                                                             \
  |  | 8900|    216|        return vis(monostate_val);                                     \
  |  | 8901|    216|    }
  ------------------
 8952|    216|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 216]
  ------------------
 8953|    216|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|    216|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    216|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    216|    }                                                                  \
  |  | 8899|    216|    else {                                                             \
  |  | 8900|    216|        return vis(monostate_val);                                     \
  |  | 8901|    216|    }
  ------------------
 8954|       |
 8955|    216|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 216]
  ------------------
 8956|    216|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|    216|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|    216|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 216]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 216]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|    216|            SCN_CLANG_POP
 8973|    216|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|   119k|{
 5700|   119k|    return arg.m_type;
 5701|   119k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|  39.6k|{
 5712|  39.6k|    return arg.m_value;
 5713|  39.6k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|     48|    {
 1979|     48|        return detail::transform_error_impl(std::move(*this),
 1980|     48|                                            std::forward<F>(f));
 1981|     48|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|     48|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     48|    else {
 1472|     48|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     48|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     48|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 48, False: 0]
  |  |  ------------------
  ------------------
 1474|     48|                   ? result(*std::forward<Exp>(exp))
 1475|     48|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     48|    }
 1479|     48|}
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|     48|    {
 1805|     48|        return std::move(value());
 1806|     48|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5950|  54.8k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|  54.8k|    {
 5952|  54.8k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  54.8k|    {
 3075|  54.8k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  54.8k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  54.8k|    {
 3041|  54.8k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  54.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  54.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  54.8k|{
 7487|  54.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  54.8k|    handler.check_args_exhausted();
 7489|  54.8k|    return handler.get_error();
 7490|  54.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  54.8k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  54.8k|    auto begin = format.data();
 7455|  54.8k|    auto it = begin;
 7456|  54.8k|    const auto end = format.data() + format.size();
 7457|       |
 7458|  84.6k|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 83.7k, False: 846]
  ------------------
 7459|  83.7k|        const auto ch = *it++;
 7460|  83.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 55.4k, False: 28.3k]
  ------------------
 7461|  55.4k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  55.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  55.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 53.3k, False: 2.15k]
  ------------------
 7465|  53.3k|                return;
 7466|  53.3k|            }
 7467|  55.4k|        }
 7468|  28.3k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 760, False: 27.5k]
  ------------------
 7469|    760|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 704, False: 56]
  |  |  |  Branch (865:45): [True: 42, False: 718]
  |  |  |  Branch (865:45): [True: 662, False: 56]
  |  |  ------------------
  ------------------
 7470|    704|                handler.on_error("Unmatched '}' in format string");
 7471|    704|                return;
 7472|    704|            }
 7473|       |
 7474|     56|            handler.on_literal_text(begin, it);
 7475|     56|            begin = ++it;
 7476|     56|        }
 7477|  83.7k|    }
 7478|       |
 7479|    846|    handler.on_literal_text(begin, end);
 7480|    846|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7383|  55.4k|{
 7384|  55.4k|    struct id_adapter {
 7385|  55.4k|        constexpr void operator()()
 7386|  55.4k|        {
 7387|  55.4k|            arg_id = handler.on_arg_id();
 7388|  55.4k|        }
 7389|  55.4k|        constexpr void operator()(std::size_t id)
 7390|  55.4k|        {
 7391|  55.4k|            arg_id = handler.on_arg_id(id);
 7392|  55.4k|        }
 7393|       |
 7394|  55.4k|        constexpr void on_error(const char* msg)
 7395|  55.4k|        {
 7396|  55.4k|            SCN_UNLIKELY_ATTR
 7397|  55.4k|            handler.on_error(msg);
 7398|  55.4k|        }
 7399|       |
 7400|  55.4k|        Handler& handler;
 7401|  55.4k|        std::size_t arg_id;
 7402|  55.4k|    };
 7403|       |
 7404|  55.4k|    ++begin;
 7405|  55.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.4k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  55.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 216, False: 55.2k]
  ------------------
 7411|    216|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|    216|    }
 7413|  55.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 74, False: 55.1k]
  ------------------
 7414|     74|        handler.on_literal_text(begin, begin + 1);
 7415|     74|    }
 7416|  55.1k|    else {
 7417|  55.1k|        auto adapter = id_adapter{handler, 0};
 7418|  55.1k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  55.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.1k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  55.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 55.1k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  55.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 39.7k, False: 15.4k]
  ------------------
 7429|  39.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  39.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  39.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  79.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250, False: 39.5k]
  |  |  |  Branch (865:45): [True: 0, False: 39.7k]
  |  |  |  Branch (865:45): [True: 250, False: 39.5k]
  |  |  ------------------
  ------------------
 7435|    250|                handler.on_error("Unknown format specifier");
 7436|    250|                return begin;
 7437|    250|            }
 7438|  39.7k|        }
 7439|  15.4k|        else {
 7440|  15.4k|            SCN_UNLIKELY_ATTR
 7441|  15.4k|            handler.on_error("Missing '}' in format string");
 7442|  15.4k|            return begin;
 7443|  15.4k|        }
 7444|  55.1k|    }
 7445|  39.8k|    return begin + 1;
 7446|  55.4k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8525|  39.9k|    {
 8526|  39.9k|        return m_args.get(id);
 8527|  39.9k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 5979|  35.5k|    {
 5980|  35.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  35.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 35.5k]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|  35.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|  35.5k|        do_check_arg_id(id);
 5988|  35.5k|        return id;
 5989|  35.5k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6499|  39.9k|{
 6500|  39.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|  39.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|  39.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  55.1k|{
 6885|  55.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  55.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 55.1k, False: 0]
  |  Branch (6886:26): [True: 19.8k, False: 35.3k]
  ------------------
 6887|  19.8k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|  19.8k|    }
 6889|       |
 6890|  35.3k|    handler();
 6891|  35.3k|    return begin;
 6892|  55.1k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6854|  19.8k|{
 6855|  19.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6856|       |
 6857|  19.8k|    CharT c = *begin;
 6858|  19.8k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6858:9): [True: 15.1k, False: 4.69k]
  |  Branch (6858:27): [True: 36, False: 4.66k]
  ------------------
 6859|  15.1k|        handler.on_error("Invalid argument ID");
 6860|  15.1k|        return begin;
 6861|  15.1k|    }
 6862|       |
 6863|  4.66k|    int idx = 0;
 6864|  4.66k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6864:9): [True: 42, False: 4.62k]
  ------------------
 6865|     42|        idx = parse_simple_int(begin, end);
 6866|     42|    }
 6867|  4.62k|    else {
 6868|  4.62k|        ++begin;
 6869|  4.62k|    }
 6870|       |
 6871|  4.66k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6871:9): [True: 0, False: 4.66k]
  |  Branch (6871:26): [True: 4.66k, False: 0]
  |  Branch (6871:50): [True: 234, False: 4.42k]
  ------------------
 6872|    234|        handler.on_error("Invalid argument ID");
 6873|    234|        return begin;
 6874|    234|    }
 6875|  4.42k|    handler(idx);
 6876|       |
 6877|  4.42k|    return begin;
 6878|  4.66k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7395|  15.4k|        {
 7396|  15.4k|            SCN_UNLIKELY_ATTR
 7397|  15.4k|            handler.on_error(msg);
 7398|  15.4k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 6833|  2.09k|{
 6834|  2.09k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6835|  2.09k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6836|       |
 6837|  2.09k|    unsigned long long value = 0;
 6838|  10.0k|    do {
 6839|  10.0k|        value *= 10;
 6840|  10.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6841|  10.0k|        if (value >
  ------------------
  |  Branch (6841:13): [True: 0, False: 10.0k]
  ------------------
 6842|  10.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6843|      0|            return -1;
 6844|      0|        }
 6845|  10.0k|        ++begin;
 6846|  10.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6846:14): [True: 10.0k, False: 0]
  |  Branch (6846:30): [True: 8.70k, False: 1.32k]
  |  Branch (6846:47): [True: 7.93k, False: 768]
  ------------------
 6847|  2.09k|    return static_cast<int>(value);
 6848|  2.09k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7390|  4.42k|        {
 7391|  4.42k|            arg_id = handler.on_arg_id(id);
 7392|  4.42k|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 5992|  4.42k|    {
 5993|  4.42k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.42k]
  |  |  ------------------
  ------------------
 5994|      0|            on_error(
 5995|      0|                "Cannot switch from manual to automatic argument indexing");
 5996|      0|            return;
 5997|      0|        }
 5998|  4.42k|        m_next_arg_id = -1;
 5999|  4.42k|        do_check_arg_id(id);
 6000|  4.42k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  35.3k|        {
 7387|  35.3k|            arg_id = handler.on_arg_id();
 7388|  35.3k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 5974|  39.4k|    {
 5975|  39.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|  39.4k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 5963|  79.2k|    {
 5964|  79.2k|        return m_format.data();
 5965|  79.2k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|  39.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  39.7k|    {
 7565|  39.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  39.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7299|  39.7k|{
 7300|  39.7k|    auto do_presentation = [&]() -> const CharT* {
 7301|  39.7k|        if (*begin == CharT{'['}) {
 7302|  39.7k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  39.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  39.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  39.7k|                return begin;
 7308|  39.7k|            }
 7309|  39.7k|            handler.on_character_set_string(set);
 7310|  39.7k|            return begin;
 7311|  39.7k|        }
 7312|  39.7k|        if (*begin == CharT{'/'}) {
 7313|  39.7k|            return parse_presentation_regex(begin, end, handler);
 7314|  39.7k|        }
 7315|  39.7k|        presentation_type type = parse_presentation_type(*begin++);
 7316|  39.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  39.7k|            handler.on_error("Invalid type specifier in format string");
 7318|  39.7k|            return begin;
 7319|  39.7k|        }
 7320|  39.7k|        handler.on_type(type);
 7321|  39.7k|        return begin;
 7322|  39.7k|    };
 7323|       |
 7324|  39.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 39.7k, False: 0]
  |  Branch (7324:28): [True: 178, False: 39.5k]
  ------------------
 7325|  39.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 178]
  |  Branch (7325:36): [True: 0, False: 0]
  ------------------
 7326|      0|        return do_presentation();
 7327|      0|    }
 7328|       |
 7329|  39.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|  39.7k|    begin = parse_align(begin, end, handler);
 7335|  39.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|  39.7k|    begin = parse_width(begin, end, handler);
 7341|  39.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|  39.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 1.33k, False: 38.4k]
  ------------------
 7347|  1.33k|        ++begin;
 7348|  1.33k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.33k]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|  1.33k|        begin = parse_precision(begin, end, handler);
 7353|  1.33k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.33k]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|  1.33k|    }
 7358|       |
 7359|  39.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 0, False: 39.7k]
  ------------------
 7360|      0|        handler.on_localized();
 7361|      0|        ++begin;
 7362|      0|    }
 7363|  39.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|  39.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 39.7k, False: 0]
  |  Branch (7368:25): [True: 39.7k, False: 18]
  ------------------
 7369|  39.7k|        do_presentation();
 7370|  39.7k|    }
 7371|  39.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|  39.7k|    return begin;
 7377|  39.7k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 6948|    178|{
 6949|    178|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 0, False: 178]
  |  Branch (6949:33): [True: 0, False: 0]
  ------------------
 6950|    178|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 90, False: 88]
  |  Branch (6950:33): [True: 0, False: 90]
  ------------------
 6951|    178|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|  39.7k|    auto do_presentation = [&]() -> const CharT* {
 7301|  39.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 5.53k, False: 34.2k]
  ------------------
 7302|  5.53k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  5.53k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 5.52k]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      6|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      6|                return begin;
 7308|      6|            }
 7309|  5.52k|            handler.on_character_set_string(set);
 7310|  5.52k|            return begin;
 7311|  5.53k|        }
 7312|  34.2k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 34.0k, False: 168]
  ------------------
 7313|  34.0k|            return parse_presentation_regex(begin, end, handler);
 7314|  34.0k|        }
 7315|    168|        presentation_type type = parse_presentation_type(*begin++);
 7316|    168|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 168, False: 0]
  |  |  ------------------
  ------------------
 7317|    168|            handler.on_error("Invalid type specifier in format string");
 7318|    168|            return begin;
 7319|    168|        }
 7320|      0|        handler.on_type(type);
 7321|      0|        return begin;
 7322|    168|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7138|  5.53k|{
 7139|  5.53k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|  5.53k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  5.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|  5.53k|    auto start = begin;
 7143|  5.53k|    ++begin;
 7144|       |
 7145|  5.53k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.53k]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|  5.53k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 36, False: 5.49k]
  ------------------
 7152|     36|        handler.on_charset_inverted();
 7153|     36|        ++begin;
 7154|     36|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|     36|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 36]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|     36|    }
 7165|  5.49k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 5.49k]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  2.67M|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 2.67M, False: 0]
  ------------------
 7170|  2.67M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 2.67M]
  |  |  ------------------
  ------------------
 7171|      6|            break;
 7172|      6|        }
 7173|       |
 7174|  2.67M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 5.52k, False: 2.66M]
  ------------------
 7175|  5.52k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|  5.52k|        }
 7177|       |
 7178|  2.66M|        parse_presentation_set_literal(begin, end, handler);
 7179|  2.66M|    }
 7180|       |
 7181|      6|    SCN_UNLIKELY_ATTR
 7182|      6|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      6|    return {};
 7184|  5.53k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7102|  2.66M|{
 7103|  2.66M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  2.66M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  2.66M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  2.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 2.66M]
  |  |  ------------------
  ------------------
 7107|      6|        return;
 7108|      6|    }
 7109|       |
 7110|  2.66M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 2.66M, False: 0]
  |  Branch (7110:25): [True: 7.21k, False: 2.65M]
  |  Branch (7110:49): [True: 7.21k, False: 0]
  ------------------
 7111|  2.66M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 6.96k, False: 252]
  ------------------
 7112|  6.96k|        ++begin;
 7113|       |
 7114|  6.96k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|  6.96k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  6.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.96k]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|  6.96k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  6.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.96k]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|  6.96k|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|  6.96k|        return;
 7128|  6.96k|    }
 7129|       |
 7130|  2.65M|    handler.on_charset_single(cp_first);
 7131|  2.65M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7078|  2.67M|{
 7079|  2.67M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  2.67M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  2.67M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  5.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.67M]
  |  |  |  Branch (865:45): [True: 0, False: 2.67M]
  |  |  |  Branch (865:45): [True: 0, False: 2.67M]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  2.67M|    const auto cp =
 7088|  2.67M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  2.67M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 2.67M]
  |  |  ------------------
  ------------------
 7090|      6|        handler.on_error("Invalid encoding in format string");
 7091|      6|        return invalid_code_point;
 7092|      6|    }
 7093|       |
 7094|  2.67M|    begin += len;
 7095|  2.67M|    return cp;
 7096|  2.67M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6792|  5.52k|    {
 6793|  5.52k|        m_specs.charset_string_data = fmt.data();
 6794|  5.52k|        m_specs.charset_string_size = fmt.size();
 6795|  5.52k|        on_type(presentation_type::string_set);
 6796|  5.52k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7190|  34.0k|{
 7191|  34.0k|#if !SCN_DISABLE_REGEX
 7192|  34.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7193|  34.0k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7194|       |
 7195|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7196|       |                  std::is_same_v<CharT, wchar_t>) {
 7197|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7198|       |        return begin;
 7199|       |    }
 7200|       |
 7201|  34.0k|    auto start = begin;
 7202|  34.0k|    ++begin;
 7203|       |
 7204|  34.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
 7205|      0|        handler.on_error("Unexpected end of regex in format string");
 7206|      0|        return begin;
 7207|      0|    }
 7208|       |
 7209|  34.0k|    handler.on_type(presentation_type::regex);
 7210|  36.6M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7210:12): [True: 36.6M, False: 0]
  ------------------
 7211|  36.6M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7211:13): [True: 142k, False: 36.4M]
  ------------------
 7212|   142k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7212:17): [True: 34.0k, False: 108k]
  ------------------
 7213|  34.0k|                break;
 7214|  34.0k|            }
 7215|   108k|            else {
 7216|   108k|                handler.on_type(presentation_type::regex_escaped);
 7217|   108k|            }
 7218|   142k|        }
 7219|  36.6M|    }
 7220|  34.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
 7221|      0|        handler.on_error("Unexpected end of regex in format string");
 7222|      0|        return begin;
 7223|      0|    }
 7224|       |
 7225|  34.0k|    auto regex_end = begin;
 7226|  34.0k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7227|  34.0k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
 7228|      0|        handler.on_error("Invalid (empty) regex in format string");
 7229|      0|        return begin;
 7230|      0|    }
 7231|  34.0k|    handler.on_regex_pattern(regex_pattern);
 7232|  34.0k|    ++begin;
 7233|       |
 7234|  34.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
 7235|      0|        handler.on_error("Unexpected end of regex in format string");
 7236|      0|        return begin;
 7237|      0|    }
 7238|       |
 7239|  34.0k|    regex_flags flags{regex_flags::none};
 7240|  34.0k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7241|  34.0k|        {{'m', regex_flags::multiline},
 7242|  34.0k|         {'s', regex_flags::singleline},
 7243|  34.0k|         {'i', regex_flags::nocase},
 7244|  34.0k|         {'n', regex_flags::nocapture}}};
 7245|  42.1k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7245:12): [True: 42.1k, False: 0]
  ------------------
 7246|  42.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7246:13): [True: 33.9k, False: 8.22k]
  ------------------
 7247|  33.9k|            break;
 7248|  33.9k|        }
 7249|  8.22k|        bool found_flag = false;
 7250|  24.8k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7250:24): [True: 24.8k, False: 142]
  ------------------
 7251|  24.8k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7251:17): [True: 16.7k, False: 8.08k]
  ------------------
 7252|  16.7k|                continue;
 7253|  16.7k|            }
 7254|  8.08k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7254:17): [True: 0, False: 8.08k]
  ------------------
 7255|      0|                handler.on_error("Flag set multiple times in regex");
 7256|      0|                return begin;
 7257|      0|            }
 7258|  8.08k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7259|  8.08k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7259:17): [True: 0, False: 8.08k]
  ------------------
 7260|       |                // clang-format off
 7261|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7262|       |                // clang-format on
 7263|      0|            }
 7264|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7265|       |            if (*begin == CharT{'m'}) {
 7266|       |                // clang-format off
 7267|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7268|       |                // clang-format on
 7269|       |            }
 7270|       |#endif
 7271|  8.08k|#endif
 7272|  8.08k|            flags |= flag.second;
 7273|  8.08k|            found_flag = true;
 7274|  8.08k|            break;
 7275|  8.08k|        }
 7276|  8.22k|        if (!found_flag) {
  ------------------
  |  Branch (7276:13): [True: 142, False: 8.08k]
  ------------------
 7277|    142|            handler.on_error("Invalid flag in regex");
 7278|    142|            return begin;
 7279|    142|        }
 7280|  8.22k|    }
 7281|  33.9k|    handler.on_regex_flags(flags);
 7282|       |
 7283|  33.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 33.9k]
  |  |  ------------------
  ------------------
 7284|      0|        handler.on_error("Unexpected end of regex in format string");
 7285|      0|        return begin;
 7286|      0|    }
 7287|       |
 7288|  33.9k|    return begin;
 7289|       |#else
 7290|       |    handler.on_error("Regular expression support is disabled");
 7291|       |    return {};
 7292|       |#endif
 7293|  33.9k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6800|  34.0k|    {
 6801|  34.0k|        m_specs.charset_string_data = pattern.data();
 6802|  34.0k|        m_specs.charset_string_size = pattern.size();
 6803|  34.0k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6896|    168|{
 6897|    168|    switch (type) {
 6898|      0|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 0, False: 168]
  ------------------
 6899|      0|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 0, False: 168]
  ------------------
 6900|      0|            return presentation_type::int_binary;
 6901|      0|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 0, False: 168]
  ------------------
 6902|      0|            return presentation_type::int_decimal;
 6903|      0|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 0, False: 168]
  ------------------
 6904|      0|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 168]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|      0|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 0, False: 168]
  ------------------
 6908|      0|            return presentation_type::int_octal;
 6909|      0|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 0, False: 168]
  ------------------
 6910|      0|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 168]
  ------------------
 6911|      0|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 168]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 168]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|      0|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 0, False: 168]
  ------------------
 6916|      0|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 168]
  ------------------
 6917|      0|            return presentation_type::float_hex;
 6918|      0|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 0, False: 168]
  ------------------
 6919|      0|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 168]
  ------------------
 6920|      0|            return presentation_type::float_scientific;
 6921|      0|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 0, False: 168]
  ------------------
 6922|      0|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 168]
  ------------------
 6923|      0|            return presentation_type::float_fixed;
 6924|      0|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 0, False: 168]
  ------------------
 6925|      0|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 168]
  ------------------
 6926|      0|            return presentation_type::float_general;
 6927|      0|        case 's':
  ------------------
  |  Branch (6927:9): [True: 0, False: 168]
  ------------------
 6928|      0|            return presentation_type::string;
 6929|      0|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 0, False: 168]
  ------------------
 6930|      0|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 168]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 168]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 168]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 168]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|    168|        default:
  ------------------
  |  Branch (6941:9): [True: 168, False: 0]
  ------------------
 6942|    168|            return presentation_type::none;
 6943|    168|    }
 6944|    168|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 6973|  39.7k|{
 6974|  39.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|  39.7k|    auto check_align = [](wchar_t ch) {
 6977|  39.7k|        switch (ch) {
 6978|  39.7k|            case L'<':
 6979|  39.7k|                return align_type::left;
 6980|  39.7k|            case L'>':
 6981|  39.7k|                return align_type::right;
 6982|  39.7k|            case L'^':
 6983|  39.7k|                return align_type::center;
 6984|  39.7k|            default:
 6985|  39.7k|                return align_type::none;
 6986|  39.7k|        }
 6987|  39.7k|    };
 6988|       |
 6989|  39.7k|    auto potential_fill_len = code_point_length(begin, end);
 6990|  39.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  79.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  |  Branch (865:45): [True: 0, False: 39.7k]
  |  |  |  Branch (865:45): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 6991|  39.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|  39.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|  39.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|  39.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|  39.7k|    const auto begin_before_fill = begin;
 7001|  39.7k|    begin += potential_fill_len;
 7002|       |
 7003|  39.7k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 39.7k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|  39.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|  39.7k|    const auto begin_after_fill = begin;
 7009|  39.7k|    ++begin;
 7010|       |
 7011|  39.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 39.7k, False: 54]
  ------------------
 7012|  39.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|  39.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 4.81k, False: 34.9k]
  ------------------
 7017|  4.81k|            return begin_before_fill;
 7018|  4.81k|        }
 7019|  39.7k|    }
 7020|       |
 7021|  34.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 29.5k, False: 5.41k]
  ------------------
 7022|  29.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 1.49k, False: 28.0k]
  ------------------
 7023|  1.49k|            handler.on_align(potential_align_on_fill);
 7024|  1.49k|            return begin_after_fill;
 7025|  1.49k|        }
 7026|  28.0k|        return begin_before_fill;
 7027|  29.5k|    }
 7028|       |
 7029|  5.41k|    handler.on_fill(potential_fill);
 7030|  5.41k|    handler.on_align(potential_align_after_fill);
 7031|  5.41k|    return begin;
 7032|  34.9k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 6955|  39.7k|{
 6956|  39.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|       |    if constexpr (sizeof(CharT) != 1) {
 6958|       |        return 1;
 6959|       |    }
 6960|  39.7k|    else {
 6961|  39.7k|        const auto lengths =
 6962|  39.7k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|  39.7k|            "\3\4";
 6964|  39.7k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|  39.7k|        return len;
 6966|  39.7k|    }
 6967|  39.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|  79.5k|    auto check_align = [](wchar_t ch) {
 6977|  79.5k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 79.5k]
  ------------------
 6979|      0|                return align_type::left;
 6980|    360|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 360, False: 79.1k]
  ------------------
 6981|    360|                return align_type::right;
 6982|  6.58k|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 6.58k, False: 72.9k]
  ------------------
 6983|  6.58k|                return align_type::center;
 6984|  72.5k|            default:
  ------------------
  |  Branch (6984:13): [True: 72.5k, False: 6.94k]
  ------------------
 6985|  72.5k|                return align_type::none;
 6986|  79.5k|        }
 6987|  79.5k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6713|  5.41k|    {
 6714|  5.41k|        m_specs.fill = fill;
 6715|  5.41k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6594|  5.41k|    {
 6595|  5.41k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  5.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6596|  5.41k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  5.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6597|  5.41k|        if constexpr (sizeof(CharT) == 1) {
 6598|  10.8k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6598:32): [True: 5.41k, False: 5.41k]
  ------------------
 6599|  5.41k|                SCN_GCC_PUSH
 6600|  5.41k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6601|  5.41k|                m_data[i] = s[i];
 6602|  5.41k|                SCN_GCC_POP
 6603|  5.41k|            }
 6604|  5.41k|            m_size = static_cast<unsigned char>(s.size());
 6605|       |        }
 6606|       |        else if constexpr (sizeof(CharT) == 2) {
 6607|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6608|       |            m_data[1] =
 6609|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6610|       |            if (s.size() == 1) {
 6611|       |                return;
 6612|       |            }
 6613|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6614|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6615|       |        }
 6616|       |        else {
 6617|       |            const auto front = static_cast<unsigned>(s.front());
 6618|       |            m_data[0] = static_cast<char>(front);
 6619|       |            m_data[1] = static_cast<char>(front >> 8);
 6620|       |            m_data[2] = static_cast<char>(front >> 16);
 6621|       |            m_data[3] = static_cast<char>(front >> 24);
 6622|       |        }
 6623|  5.41k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7038|  39.7k|{
 7039|  39.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|  39.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 5.53k, False: 34.2k]
  |  Branch (7041:33): [True: 720, False: 4.81k]
  ------------------
 7042|    720|        int width = parse_simple_int(begin, end);
 7043|    720|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|    720|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 720, False: 0]
  |  |  ------------------
  ------------------
 7044|    720|            handler.on_width(width);
 7045|    720|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|    720|    }
 7051|  39.7k|    return begin;
 7052|  39.7k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7058|  1.33k|{
 7059|  1.33k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7060|       |
 7061|  1.33k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7061:9): [True: 1.33k, False: 0]
  |  Branch (7061:33): [True: 1.33k, False: 0]
  ------------------
 7062|  1.33k|        int prec = parse_simple_int(begin, end);
 7063|  1.33k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  1.33k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.33k, False: 0]
  |  |  ------------------
  ------------------
 7064|  1.33k|            handler.on_precision(prec);
 7065|  1.33k|        }
 7066|      0|        else {
 7067|      0|            handler.on_error("Invalid field precision");
 7068|      0|            return begin;
 7069|      0|        }
 7070|  1.33k|    }
 7071|  1.33k|    return begin;
 7072|  1.33k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|  39.4k|{
 8994|  39.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  39.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  39.4k|{
 8895|  39.4k|#define SCN_VISIT(Type)                                                \
 8896|  39.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  39.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  39.4k|    }                                                                  \
 8899|  39.4k|    else {                                                             \
 8900|  39.4k|        return vis(monostate_val);                                     \
 8901|  39.4k|    }
 8902|       |
 8903|  39.4k|    monostate monostate_val{};
 8904|       |
 8905|  39.4k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 39.4k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 39.4k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|  4.38k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 4.38k, False: 35.0k]
  ------------------
 8911|  4.38k|            SCN_VISIT(int);
  ------------------
  |  | 8896|  4.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  4.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  4.38k|    }                                                                  \
  |  | 8899|  4.38k|    else {                                                             \
  |  | 8900|  4.38k|        return vis(monostate_val);                                     \
  |  | 8901|  4.38k|    }
  ------------------
 8912|  4.38k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 39.4k]
  ------------------
 8913|  4.38k|            SCN_VISIT(long);
  ------------------
  |  | 8896|  4.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  4.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  4.38k|    }                                                                  \
  |  | 8899|  4.38k|    else {                                                             \
  |  | 8900|  4.38k|        return vis(monostate_val);                                     \
  |  | 8901|  4.38k|    }
  ------------------
 8914|  4.38k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 39.4k]
  ------------------
 8915|  4.38k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|  4.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  4.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  4.38k|    }                                                                  \
  |  | 8899|  4.38k|    else {                                                             \
  |  | 8900|  4.38k|        return vis(monostate_val);                                     \
  |  | 8901|  4.38k|    }
  ------------------
 8916|  4.38k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 39.4k]
  ------------------
 8917|  4.38k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|  4.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  4.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  4.38k|    }                                                                  \
  |  | 8899|  4.38k|    else {                                                             \
  |  | 8900|  4.38k|        return vis(monostate_val);                                     \
  |  | 8901|  4.38k|    }
  ------------------
 8918|  4.38k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 39.4k]
  ------------------
 8919|  4.38k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|  4.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  4.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  4.38k|    }                                                                  \
  |  | 8899|  4.38k|    else {                                                             \
  |  | 8900|  4.38k|        return vis(monostate_val);                                     \
  |  | 8901|  4.38k|    }
  ------------------
 8920|  8.76k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 4.38k, False: 35.0k]
  ------------------
 8921|  8.76k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|  8.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  8.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  8.76k|    }                                                                  \
  |  | 8899|  8.76k|    else {                                                             \
  |  | 8900|  8.76k|        return vis(monostate_val);                                     \
  |  | 8901|  8.76k|    }
  ------------------
 8922|  8.76k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 39.4k]
  ------------------
 8923|  8.76k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|  8.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  8.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  8.76k|    }                                                                  \
  |  | 8899|  8.76k|    else {                                                             \
  |  | 8900|  8.76k|        return vis(monostate_val);                                     \
  |  | 8901|  8.76k|    }
  ------------------
 8924|  8.76k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 39.4k]
  ------------------
 8925|  8.76k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|  8.76k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  8.76k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  8.76k|    }                                                                  \
  |  | 8899|  8.76k|    else {                                                             \
  |  | 8900|  8.76k|        return vis(monostate_val);                                     \
  |  | 8901|  8.76k|    }
  ------------------
 8926|  13.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 4.38k, False: 35.0k]
  ------------------
 8927|  13.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  13.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  13.1k|    }                                                                  \
  |  | 8899|  13.1k|    else {                                                             \
  |  | 8900|  13.1k|        return vis(monostate_val);                                     \
  |  | 8901|  13.1k|    }
  ------------------
 8928|  17.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 4.38k, False: 35.0k]
  ------------------
 8929|  17.5k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|  17.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  17.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  17.5k|    }                                                                  \
  |  | 8899|  17.5k|    else {                                                             \
  |  | 8900|  17.5k|        return vis(monostate_val);                                     \
  |  | 8901|  17.5k|    }
  ------------------
 8930|  21.9k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 4.38k, False: 35.0k]
  ------------------
 8931|  21.9k|            SCN_VISIT(char);
  ------------------
  |  | 8896|  21.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  21.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  21.9k|    }                                                                  \
  |  | 8899|  21.9k|    else {                                                             \
  |  | 8900|  21.9k|        return vis(monostate_val);                                     \
  |  | 8901|  21.9k|    }
  ------------------
 8932|  21.9k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 39.4k]
  ------------------
 8933|  21.9k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|  21.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  21.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  21.9k|    }                                                                  \
  |  | 8899|  21.9k|    else {                                                             \
  |  | 8900|  21.9k|        return vis(monostate_val);                                     \
  |  | 8901|  21.9k|    }
  ------------------
 8934|  21.9k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 39.4k]
  ------------------
 8935|  21.9k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|  21.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  21.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  21.9k|    }                                                                  \
  |  | 8899|  21.9k|    else {                                                             \
  |  | 8900|  21.9k|        return vis(monostate_val);                                     \
  |  | 8901|  21.9k|    }
  ------------------
 8936|  21.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 39.4k]
  ------------------
 8937|  21.9k|            SCN_VISIT(float);
  ------------------
  |  | 8896|  21.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  21.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  21.9k|    }                                                                  \
  |  | 8899|  21.9k|    else {                                                             \
  |  | 8900|  21.9k|        return vis(monostate_val);                                     \
  |  | 8901|  21.9k|    }
  ------------------
 8938|  26.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 4.38k, False: 35.0k]
  ------------------
 8939|  26.3k|            SCN_VISIT(double);
  ------------------
  |  | 8896|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  26.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  26.3k|    }                                                                  \
  |  | 8899|  26.3k|    else {                                                             \
  |  | 8900|  26.3k|        return vis(monostate_val);                                     \
  |  | 8901|  26.3k|    }
  ------------------
 8940|  26.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 39.4k]
  ------------------
 8941|  26.3k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  26.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  26.3k|    }                                                                  \
  |  | 8899|  26.3k|    else {                                                             \
  |  | 8900|  26.3k|        return vis(monostate_val);                                     \
  |  | 8901|  26.3k|    }
  ------------------
 8942|  30.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 4.38k, False: 35.0k]
  ------------------
 8943|  30.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  30.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  30.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  30.6k|    }                                                                  \
  |  | 8899|  30.6k|    else {                                                             \
  |  | 8900|  30.6k|        return vis(monostate_val);                                     \
  |  | 8901|  30.6k|    }
  ------------------
 8944|  35.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 4.38k, False: 35.0k]
  ------------------
 8945|  35.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  35.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  35.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  35.0k|    }                                                                  \
  |  | 8899|  35.0k|    else {                                                             \
  |  | 8900|  35.0k|        return vis(monostate_val);                                     \
  |  | 8901|  35.0k|    }
  ------------------
 8946|  35.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 39.4k]
  ------------------
 8947|  35.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  35.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  35.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  35.0k|    }                                                                  \
  |  | 8899|  35.0k|    else {                                                             \
  |  | 8900|  35.0k|        return vis(monostate_val);                                     \
  |  | 8901|  35.0k|    }
  ------------------
 8948|  39.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 4.38k, False: 35.0k]
  ------------------
 8949|  39.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  39.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  39.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  39.4k|    }                                                                  \
  |  | 8899|  39.4k|    else {                                                             \
  |  | 8900|  39.4k|        return vis(monostate_val);                                     \
  |  | 8901|  39.4k|    }
  ------------------
 8950|  39.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 39.4k]
  ------------------
 8951|  39.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  39.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  39.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  39.4k|    }                                                                  \
  |  | 8899|  39.4k|    else {                                                             \
  |  | 8900|  39.4k|        return vis(monostate_val);                                     \
  |  | 8901|  39.4k|    }
  ------------------
 8952|  39.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 39.4k]
  ------------------
 8953|  39.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  39.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  39.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  39.4k|    }                                                                  \
  |  | 8899|  39.4k|    else {                                                             \
  |  | 8900|  39.4k|        return vis(monostate_val);                                     \
  |  | 8901|  39.4k|    }
  ------------------
 8954|       |
 8955|  39.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 39.4k]
  ------------------
 8956|  39.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  39.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  39.4k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 39.4k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 39.4k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  39.4k|            SCN_CLANG_POP
 8973|  39.4k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|     64|    {
 3480|     64|        return m_iterator;
 3481|     64|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|     16|        : base(std::in_place, std::forward<U>(val)),
 1570|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     16|    {
 1572|     16|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|     16|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     16|    {
  442|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     16|    {
 1316|     16|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|     32|    {
 3484|     32|        return m_sentinel;
 3485|     32|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|     32|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     32|    static_cast<    \
  |  |  935|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     32|    static_cast<    \
  |  |  935|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|     32|    {
 3466|     32|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|     32|    {
  490|     32|        return m_has_value;
  491|     32|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|     16|    {
 1769|     16|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     16|        return this->get_value();
 1771|     16|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|     16|    {
  456|     16|        return m_value;
  457|     16|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|     16|    {
 1979|     16|        return detail::transform_error_impl(std::move(*this),
 1980|     16|                                            std::forward<F>(f));
 1981|     16|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|     16|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     16|    else {
 1472|     16|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     16|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1474|     16|                   ? result(*std::forward<Exp>(exp))
 1475|     16|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     16|    }
 1479|     16|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|     16|    {
 1805|     16|        return std::move(value());
 1806|     16|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|     16|        : base(std::in_place, std::forward<U>(val)),
 1570|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     16|    {
 1572|     16|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|     16|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     16|    {
  442|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     16|    {
 1316|     16|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|     16|    {
 1740|     16|        return has_value();
 1741|     16|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     32|    {
  490|     32|        return m_has_value;
  491|     32|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|     16|    {
 1805|     16|        return std::move(value());
 1806|     16|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|     16|    {
 1769|     16|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     16|        return this->get_value();
 1771|     16|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     16|    {
  456|     16|        return m_value;
  457|     16|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 5870|   109k|    {
 5871|   109k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|   109k|        return static_cast<std::size_t>(m_desc &
 5876|   109k|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|   109k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 5896|   125k|    {
 5897|   125k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|   125k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 5838|  15.3k|    {
 5839|  15.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  15.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  15.3k|        const auto t = type(id);
 5851|  15.3k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 15.3k]
  |  |  ------------------
  ------------------
 5852|     18|            return {};
 5853|     18|        }
 5854|       |
 5855|  15.3k|        basic_scan_arg<Context> arg;
 5856|  15.3k|        arg.m_type = t;
 5857|  15.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 15.3k, False: 0]
  ------------------
 5858|  15.3k|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  15.3k|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  15.3k|        return arg;
 5864|  15.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5648|  15.3k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 5905|  15.3k|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  15.3k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  15.3k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  15.3k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  15.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 5900|  15.3k|    {
 5901|  15.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  15.3k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5654|  30.3k|    {
 5655|  30.3k|        return m_type != detail::arg_type::none_type;
 5656|  30.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|    684|{
 8994|    684|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|    684|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|    684|{
 8895|    684|#define SCN_VISIT(Type)                                                \
 8896|    684|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|    684|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|    684|    }                                                                  \
 8899|    684|    else {                                                             \
 8900|    684|        return vis(monostate_val);                                     \
 8901|    684|    }
 8902|       |
 8903|    684|    monostate monostate_val{};
 8904|       |
 8905|    684|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 684]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 684]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|     76|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 76, False: 608]
  ------------------
 8911|     76|            SCN_VISIT(int);
  ------------------
  |  | 8896|     76|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     76|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     76|    }                                                                  \
  |  | 8899|     76|    else {                                                             \
  |  | 8900|     76|        return vis(monostate_val);                                     \
  |  | 8901|     76|    }
  ------------------
 8912|     76|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 684]
  ------------------
 8913|     76|            SCN_VISIT(long);
  ------------------
  |  | 8896|     76|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     76|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     76|    }                                                                  \
  |  | 8899|     76|    else {                                                             \
  |  | 8900|     76|        return vis(monostate_val);                                     \
  |  | 8901|     76|    }
  ------------------
 8914|     76|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 684]
  ------------------
 8915|     76|            SCN_VISIT(long long);
  ------------------
  |  | 8896|     76|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     76|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     76|    }                                                                  \
  |  | 8899|     76|    else {                                                             \
  |  | 8900|     76|        return vis(monostate_val);                                     \
  |  | 8901|     76|    }
  ------------------
 8916|     76|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 684]
  ------------------
 8917|     76|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|     76|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     76|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     76|    }                                                                  \
  |  | 8899|     76|    else {                                                             \
  |  | 8900|     76|        return vis(monostate_val);                                     \
  |  | 8901|     76|    }
  ------------------
 8918|     76|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 684]
  ------------------
 8919|     76|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|     76|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|     76|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|     76|    }                                                                  \
  |  | 8899|     76|    else {                                                             \
  |  | 8900|     76|        return vis(monostate_val);                                     \
  |  | 8901|     76|    }
  ------------------
 8920|    152|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 76, False: 608]
  ------------------
 8921|    152|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|    152|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    152|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    152|    }                                                                  \
  |  | 8899|    152|    else {                                                             \
  |  | 8900|    152|        return vis(monostate_val);                                     \
  |  | 8901|    152|    }
  ------------------
 8922|    152|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 684]
  ------------------
 8923|    152|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|    152|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    152|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    152|    }                                                                  \
  |  | 8899|    152|    else {                                                             \
  |  | 8900|    152|        return vis(monostate_val);                                     \
  |  | 8901|    152|    }
  ------------------
 8924|    152|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 684]
  ------------------
 8925|    152|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|    152|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    152|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    152|    }                                                                  \
  |  | 8899|    152|    else {                                                             \
  |  | 8900|    152|        return vis(monostate_val);                                     \
  |  | 8901|    152|    }
  ------------------
 8926|    228|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 76, False: 608]
  ------------------
 8927|    228|            SCN_VISIT(void*);
  ------------------
  |  | 8896|    228|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    228|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    228|    }                                                                  \
  |  | 8899|    228|    else {                                                             \
  |  | 8900|    228|        return vis(monostate_val);                                     \
  |  | 8901|    228|    }
  ------------------
 8928|    304|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 76, False: 608]
  ------------------
 8929|    304|            SCN_VISIT(bool);
  ------------------
  |  | 8896|    304|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    304|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    304|    }                                                                  \
  |  | 8899|    304|    else {                                                             \
  |  | 8900|    304|        return vis(monostate_val);                                     \
  |  | 8901|    304|    }
  ------------------
 8930|    304|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 684]
  ------------------
 8931|    304|            SCN_VISIT(char);
  ------------------
  |  | 8896|    304|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    304|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    304|    }                                                                  \
  |  | 8899|    304|    else {                                                             \
  |  | 8900|    304|        return vis(monostate_val);                                     \
  |  | 8901|    304|    }
  ------------------
 8932|    380|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 76, False: 608]
  ------------------
 8933|    380|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|    380|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    380|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    380|    }                                                                  \
  |  | 8899|    380|    else {                                                             \
  |  | 8900|    380|        return vis(monostate_val);                                     \
  |  | 8901|    380|    }
  ------------------
 8934|    380|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 684]
  ------------------
 8935|    380|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|    380|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    380|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    380|    }                                                                  \
  |  | 8899|    380|    else {                                                             \
  |  | 8900|    380|        return vis(monostate_val);                                     \
  |  | 8901|    380|    }
  ------------------
 8936|    380|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 684]
  ------------------
 8937|    380|            SCN_VISIT(float);
  ------------------
  |  | 8896|    380|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    380|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    380|    }                                                                  \
  |  | 8899|    380|    else {                                                             \
  |  | 8900|    380|        return vis(monostate_val);                                     \
  |  | 8901|    380|    }
  ------------------
 8938|    456|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 76, False: 608]
  ------------------
 8939|    456|            SCN_VISIT(double);
  ------------------
  |  | 8896|    456|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    456|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    456|    }                                                                  \
  |  | 8899|    456|    else {                                                             \
  |  | 8900|    456|        return vis(monostate_val);                                     \
  |  | 8901|    456|    }
  ------------------
 8940|    456|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 684]
  ------------------
 8941|    456|            SCN_VISIT(long double);
  ------------------
  |  | 8896|    456|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    456|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    456|    }                                                                  \
  |  | 8899|    456|    else {                                                             \
  |  | 8900|    456|        return vis(monostate_val);                                     \
  |  | 8901|    456|    }
  ------------------
 8942|    456|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 684]
  ------------------
 8943|    456|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|    456|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    456|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    456|    }                                                                  \
  |  | 8899|    456|    else {                                                             \
  |  | 8900|    456|        return vis(monostate_val);                                     \
  |  | 8901|    456|    }
  ------------------
 8944|    532|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 76, False: 608]
  ------------------
 8945|    532|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|    532|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    532|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    532|    }                                                                  \
  |  | 8899|    532|    else {                                                             \
  |  | 8900|    532|        return vis(monostate_val);                                     \
  |  | 8901|    532|    }
  ------------------
 8946|    608|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 76, False: 608]
  ------------------
 8947|    608|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|    608|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    608|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    608|    }                                                                  \
  |  | 8899|    608|    else {                                                             \
  |  | 8900|    608|        return vis(monostate_val);                                     \
  |  | 8901|    608|    }
  ------------------
 8948|    684|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 76, False: 608]
  ------------------
 8949|    684|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|    684|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    684|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    684|    }                                                                  \
  |  | 8899|    684|    else {                                                             \
  |  | 8900|    684|        return vis(monostate_val);                                     \
  |  | 8901|    684|    }
  ------------------
 8950|    684|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 684]
  ------------------
 8951|    684|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|    684|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    684|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    684|    }                                                                  \
  |  | 8899|    684|    else {                                                             \
  |  | 8900|    684|        return vis(monostate_val);                                     \
  |  | 8901|    684|    }
  ------------------
 8952|    684|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 684]
  ------------------
 8953|    684|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|    684|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|    684|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|    684|    }                                                                  \
  |  | 8899|    684|    else {                                                             \
  |  | 8900|    684|        return vis(monostate_val);                                     \
  |  | 8901|    684|    }
  ------------------
 8954|       |
 8955|    684|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 684]
  ------------------
 8956|    684|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|    684|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|    684|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 684]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 684]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|    684|            SCN_CLANG_POP
 8973|    684|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  43.8k|{
 5700|  43.8k|    return arg.m_type;
 5701|  43.8k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|  14.9k|{
 5712|  14.9k|    return arg.m_value;
 5713|  14.9k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5950|   109k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|   109k|    {
 5952|   109k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   109k|    {
 3075|   109k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   109k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   109k|    {
 3041|   109k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   109k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   109k|{
 7487|   109k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   109k|    handler.check_args_exhausted();
 7489|   109k|    return handler.get_error();
 7490|   109k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   109k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   109k|    auto begin = format.data();
 7455|   109k|    auto it = begin;
 7456|   109k|    const auto end = format.data() + format.size();
 7457|       |
 7458|   234M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 234M, False: 38.0k]
  ------------------
 7459|   234M|        const auto ch = *it++;
 7460|   234M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 70.6k, False: 234M]
  ------------------
 7461|  70.6k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  70.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  70.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 70.4k, False: 164]
  ------------------
 7465|  70.4k|                return;
 7466|  70.4k|            }
 7467|  70.6k|        }
 7468|   234M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 2.05k, False: 234M]
  ------------------
 7469|  2.05k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.18k, False: 864]
  |  |  |  Branch (865:45): [True: 486, False: 1.56k]
  |  |  |  Branch (865:45): [True: 702, False: 864]
  |  |  ------------------
  ------------------
 7470|  1.18k|                handler.on_error("Unmatched '}' in format string");
 7471|  1.18k|                return;
 7472|  1.18k|            }
 7473|       |
 7474|    864|            handler.on_literal_text(begin, it);
 7475|    864|            begin = ++it;
 7476|    864|        }
 7477|   234M|    }
 7478|       |
 7479|  38.0k|    handler.on_literal_text(begin, end);
 7480|  38.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7383|  70.6k|{
 7384|  70.6k|    struct id_adapter {
 7385|  70.6k|        constexpr void operator()()
 7386|  70.6k|        {
 7387|  70.6k|            arg_id = handler.on_arg_id();
 7388|  70.6k|        }
 7389|  70.6k|        constexpr void operator()(std::size_t id)
 7390|  70.6k|        {
 7391|  70.6k|            arg_id = handler.on_arg_id(id);
 7392|  70.6k|        }
 7393|       |
 7394|  70.6k|        constexpr void on_error(const char* msg)
 7395|  70.6k|        {
 7396|  70.6k|            SCN_UNLIKELY_ATTR
 7397|  70.6k|            handler.on_error(msg);
 7398|  70.6k|        }
 7399|       |
 7400|  70.6k|        Handler& handler;
 7401|  70.6k|        std::size_t arg_id;
 7402|  70.6k|    };
 7403|       |
 7404|  70.6k|    ++begin;
 7405|  70.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  70.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 70.6k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  70.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 918, False: 69.7k]
  ------------------
 7411|    918|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|    918|    }
 7413|  69.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 69.7k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  69.7k|    else {
 7417|  69.7k|        auto adapter = id_adapter{handler, 0};
 7418|  69.7k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  69.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 69.7k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  69.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 69.7k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  69.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 14.4k, False: 55.3k]
  ------------------
 7429|  14.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  14.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  14.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  Branch (865:45): [True: 0, False: 14.4k]
  |  |  |  Branch (865:45): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7435|      0|                handler.on_error("Unknown format specifier");
 7436|      0|                return begin;
 7437|      0|            }
 7438|  14.4k|        }
 7439|  55.3k|        else {
 7440|  55.3k|            SCN_UNLIKELY_ATTR
 7441|  55.3k|            handler.on_error("Missing '}' in format string");
 7442|  55.3k|            return begin;
 7443|  55.3k|        }
 7444|  69.7k|    }
 7445|  15.3k|    return begin + 1;
 7446|  70.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8525|  15.3k|    {
 8526|  15.3k|        return m_args.get(id);
 8527|  15.3k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 5979|  15.3k|    {
 5980|  15.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|  15.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|  15.3k|        do_check_arg_id(id);
 5988|  15.3k|        return id;
 5989|  15.3k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6009|      6|    {
 6010|      6|        m_error = unexpected(detail::handle_error(
 6011|      6|            scan_error{scan_error::invalid_format_string, msg}));
 6012|      6|        return m_error.error();
 6013|      6|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6499|  15.3k|{
 6500|  15.3k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|  15.3k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|  15.3k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  69.7k|{
 6885|  69.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  69.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  69.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 69.7k, False: 0]
  |  Branch (6886:26): [True: 55.3k, False: 14.4k]
  ------------------
 6887|  55.3k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|  55.3k|    }
 6889|       |
 6890|  14.4k|    handler();
 6891|  14.4k|    return begin;
 6892|  69.7k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6854|  55.3k|{
 6855|  55.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6856|       |
 6857|  55.3k|    CharT c = *begin;
 6858|  55.3k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6858:9): [True: 54.9k, False: 390]
  |  Branch (6858:27): [True: 382, False: 8]
  ------------------
 6859|  55.3k|        handler.on_error("Invalid argument ID");
 6860|  55.3k|        return begin;
 6861|  55.3k|    }
 6862|       |
 6863|      8|    int idx = 0;
 6864|      8|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6864:9): [True: 8, False: 0]
  ------------------
 6865|      8|        idx = parse_simple_int(begin, end);
 6866|      8|    }
 6867|      0|    else {
 6868|      0|        ++begin;
 6869|      0|    }
 6870|       |
 6871|      8|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6871:9): [True: 0, False: 8]
  |  Branch (6871:26): [True: 8, False: 0]
  |  Branch (6871:50): [True: 2, False: 6]
  ------------------
 6872|      2|        handler.on_error("Invalid argument ID");
 6873|      2|        return begin;
 6874|      2|    }
 6875|      6|    handler(idx);
 6876|       |
 6877|      6|    return begin;
 6878|      8|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7395|  55.3k|        {
 7396|  55.3k|            SCN_UNLIKELY_ATTR
 7397|  55.3k|            handler.on_error(msg);
 7398|  55.3k|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 6833|  12.5k|{
 6834|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6835|  12.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6836|       |
 6837|  12.5k|    unsigned long long value = 0;
 6838|  12.8k|    do {
 6839|  12.8k|        value *= 10;
 6840|  12.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6841|  12.8k|        if (value >
  ------------------
  |  Branch (6841:13): [True: 0, False: 12.8k]
  ------------------
 6842|  12.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6843|      0|            return -1;
 6844|      0|        }
 6845|  12.8k|        ++begin;
 6846|  12.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6846:14): [True: 12.8k, False: 0]
  |  Branch (6846:30): [True: 694, False: 12.1k]
  |  Branch (6846:47): [True: 254, False: 440]
  ------------------
 6847|  12.5k|    return static_cast<int>(value);
 6848|  12.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7390|      6|        {
 7391|      6|            arg_id = handler.on_arg_id(id);
 7392|      6|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 5992|      6|    {
 5993|      6|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 5994|      6|            on_error(
 5995|      6|                "Cannot switch from manual to automatic argument indexing");
 5996|      6|            return;
 5997|      6|        }
 5998|      0|        m_next_arg_id = -1;
 5999|      0|        do_check_arg_id(id);
 6000|      0|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  14.4k|        {
 7387|  14.4k|            arg_id = handler.on_arg_id();
 7388|  14.4k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 5974|  14.4k|    {
 5975|  14.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|  14.4k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 5963|  28.8k|    {
 5964|  28.8k|        return m_format.data();
 5965|  28.8k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|  14.4k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  14.4k|    {
 7565|  14.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  14.4k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7299|  14.4k|{
 7300|  14.4k|    auto do_presentation = [&]() -> const CharT* {
 7301|  14.4k|        if (*begin == CharT{'['}) {
 7302|  14.4k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  14.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  14.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  14.4k|                return begin;
 7308|  14.4k|            }
 7309|  14.4k|            handler.on_character_set_string(set);
 7310|  14.4k|            return begin;
 7311|  14.4k|        }
 7312|  14.4k|        if (*begin == CharT{'/'}) {
 7313|  14.4k|            return parse_presentation_regex(begin, end, handler);
 7314|  14.4k|        }
 7315|  14.4k|        presentation_type type = parse_presentation_type(*begin++);
 7316|  14.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  14.4k|            handler.on_error("Invalid type specifier in format string");
 7318|  14.4k|            return begin;
 7319|  14.4k|        }
 7320|  14.4k|        handler.on_type(type);
 7321|  14.4k|        return begin;
 7322|  14.4k|    };
 7323|       |
 7324|  14.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 14.4k, False: 0]
  |  Branch (7324:28): [True: 180, False: 14.2k]
  ------------------
 7325|  14.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 180]
  |  Branch (7325:36): [True: 0, False: 0]
  ------------------
 7326|      0|        return do_presentation();
 7327|      0|    }
 7328|       |
 7329|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|  14.4k|    begin = parse_align(begin, end, handler);
 7335|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|  14.4k|    begin = parse_width(begin, end, handler);
 7341|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|  14.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 252, False: 14.1k]
  ------------------
 7347|    252|        ++begin;
 7348|    252|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|    252|        begin = parse_precision(begin, end, handler);
 7353|    252|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|    252|    }
 7358|       |
 7359|  14.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 0, False: 14.4k]
  ------------------
 7360|      0|        handler.on_localized();
 7361|      0|        ++begin;
 7362|      0|    }
 7363|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|  14.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 14.4k, False: 0]
  |  Branch (7368:25): [True: 14.0k, False: 402]
  ------------------
 7369|  14.0k|        do_presentation();
 7370|  14.0k|    }
 7371|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|  14.4k|    return begin;
 7377|  14.4k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 6948|    180|{
 6949|    180|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 0, False: 180]
  |  Branch (6949:33): [True: 0, False: 0]
  ------------------
 6950|    180|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 0, False: 180]
  |  Branch (6950:33): [True: 0, False: 0]
  ------------------
 6951|    180|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|  14.0k|    auto do_presentation = [&]() -> const CharT* {
 7301|  14.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 144, False: 13.8k]
  ------------------
 7302|    144|            auto set = parse_presentation_set(begin, end, handler);
 7303|    144|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 144]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|    144|            handler.on_character_set_string(set);
 7310|    144|            return begin;
 7311|    144|        }
 7312|  13.8k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 13.8k, False: 48]
  ------------------
 7313|  13.8k|            return parse_presentation_regex(begin, end, handler);
 7314|  13.8k|        }
 7315|     48|        presentation_type type = parse_presentation_type(*begin++);
 7316|     48|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 36]
  |  |  ------------------
  ------------------
 7317|     12|            handler.on_error("Invalid type specifier in format string");
 7318|     12|            return begin;
 7319|     12|        }
 7320|     36|        handler.on_type(type);
 7321|     36|        return begin;
 7322|     48|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7138|    144|{
 7139|    144|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    144|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    144|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|    144|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    144|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    144|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|    144|    auto start = begin;
 7143|    144|    ++begin;
 7144|       |
 7145|    144|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 144]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|    144|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 72, False: 72]
  ------------------
 7152|     72|        handler.on_charset_inverted();
 7153|     72|        ++begin;
 7154|     72|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|     72|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 72]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|     72|    }
 7165|     72|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 72]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  3.90k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 3.90k, False: 0]
  ------------------
 7170|  3.90k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.90k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|  3.90k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 144, False: 3.76k]
  ------------------
 7175|    144|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|    144|        }
 7177|       |
 7178|  3.76k|        parse_presentation_set_literal(begin, end, handler);
 7179|  3.76k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|    144|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7102|  3.76k|{
 7103|  3.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  3.76k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  3.76k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  3.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.76k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|  3.76k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 3.76k, False: 0]
  |  Branch (7110:25): [True: 396, False: 3.36k]
  |  Branch (7110:49): [True: 396, False: 0]
  ------------------
 7111|  3.76k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 396, False: 0]
  ------------------
 7112|    396|        ++begin;
 7113|       |
 7114|    396|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|    396|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|    396|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|    396|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|    396|        return;
 7128|    396|    }
 7129|       |
 7130|  3.36k|    handler.on_charset_single(cp_first);
 7131|  3.36k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7078|  4.15k|{
 7079|  4.15k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  4.15k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  4.15k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  8.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.15k]
  |  |  |  Branch (865:45): [True: 0, False: 4.15k]
  |  |  |  Branch (865:45): [True: 0, False: 4.15k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  4.15k|    const auto cp =
 7088|  4.15k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  4.15k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.15k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|  4.15k|    begin += len;
 7095|  4.15k|    return cp;
 7096|  4.15k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6792|    144|    {
 6793|    144|        m_specs.charset_string_data = fmt.data();
 6794|    144|        m_specs.charset_string_size = fmt.size();
 6795|    144|        on_type(presentation_type::string_set);
 6796|    144|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7190|  13.8k|{
 7191|  13.8k|#if !SCN_DISABLE_REGEX
 7192|  13.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7193|  13.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7194|       |
 7195|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7196|       |                  std::is_same_v<CharT, wchar_t>) {
 7197|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7198|       |        return begin;
 7199|       |    }
 7200|       |
 7201|  13.8k|    auto start = begin;
 7202|  13.8k|    ++begin;
 7203|       |
 7204|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 7205|      0|        handler.on_error("Unexpected end of regex in format string");
 7206|      0|        return begin;
 7207|      0|    }
 7208|       |
 7209|  13.8k|    handler.on_type(presentation_type::regex);
 7210|  4.00M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7210:12): [True: 4.00M, False: 0]
  ------------------
 7211|  4.00M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7211:13): [True: 25.2k, False: 3.97M]
  ------------------
 7212|  25.2k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7212:17): [True: 13.8k, False: 11.4k]
  ------------------
 7213|  13.8k|                break;
 7214|  13.8k|            }
 7215|  11.4k|            else {
 7216|  11.4k|                handler.on_type(presentation_type::regex_escaped);
 7217|  11.4k|            }
 7218|  25.2k|        }
 7219|  4.00M|    }
 7220|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 7221|      0|        handler.on_error("Unexpected end of regex in format string");
 7222|      0|        return begin;
 7223|      0|    }
 7224|       |
 7225|  13.8k|    auto regex_end = begin;
 7226|  13.8k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7227|  13.8k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 7228|      0|        handler.on_error("Invalid (empty) regex in format string");
 7229|      0|        return begin;
 7230|      0|    }
 7231|  13.8k|    handler.on_regex_pattern(regex_pattern);
 7232|  13.8k|    ++begin;
 7233|       |
 7234|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 7235|      0|        handler.on_error("Unexpected end of regex in format string");
 7236|      0|        return begin;
 7237|      0|    }
 7238|       |
 7239|  13.8k|    regex_flags flags{regex_flags::none};
 7240|  13.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7241|  13.8k|        {{'m', regex_flags::multiline},
 7242|  13.8k|         {'s', regex_flags::singleline},
 7243|  13.8k|         {'i', regex_flags::nocase},
 7244|  13.8k|         {'n', regex_flags::nocapture}}};
 7245|  16.8k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7245:12): [True: 16.8k, False: 0]
  ------------------
 7246|  16.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7246:13): [True: 13.8k, False: 2.98k]
  ------------------
 7247|  13.8k|            break;
 7248|  13.8k|        }
 7249|  2.98k|        bool found_flag = false;
 7250|  8.35k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7250:24): [True: 8.35k, False: 0]
  ------------------
 7251|  8.35k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7251:17): [True: 5.36k, False: 2.98k]
  ------------------
 7252|  5.36k|                continue;
 7253|  5.36k|            }
 7254|  2.98k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7254:17): [True: 0, False: 2.98k]
  ------------------
 7255|      0|                handler.on_error("Flag set multiple times in regex");
 7256|      0|                return begin;
 7257|      0|            }
 7258|  2.98k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7259|  2.98k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7259:17): [True: 0, False: 2.98k]
  ------------------
 7260|       |                // clang-format off
 7261|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7262|       |                // clang-format on
 7263|      0|            }
 7264|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7265|       |            if (*begin == CharT{'m'}) {
 7266|       |                // clang-format off
 7267|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7268|       |                // clang-format on
 7269|       |            }
 7270|       |#endif
 7271|  2.98k|#endif
 7272|  2.98k|            flags |= flag.second;
 7273|  2.98k|            found_flag = true;
 7274|  2.98k|            break;
 7275|  2.98k|        }
 7276|  2.98k|        if (!found_flag) {
  ------------------
  |  Branch (7276:13): [True: 0, False: 2.98k]
  ------------------
 7277|      0|            handler.on_error("Invalid flag in regex");
 7278|      0|            return begin;
 7279|      0|        }
 7280|  2.98k|    }
 7281|  13.8k|    handler.on_regex_flags(flags);
 7282|       |
 7283|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 7284|      0|        handler.on_error("Unexpected end of regex in format string");
 7285|      0|        return begin;
 7286|      0|    }
 7287|       |
 7288|  13.8k|    return begin;
 7289|       |#else
 7290|       |    handler.on_error("Regular expression support is disabled");
 7291|       |    return {};
 7292|       |#endif
 7293|  13.8k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6800|  13.8k|    {
 6801|  13.8k|        m_specs.charset_string_data = pattern.data();
 6802|  13.8k|        m_specs.charset_string_size = pattern.size();
 6803|  13.8k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6896|     48|{
 6897|     48|    switch (type) {
 6898|      0|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 0, False: 48]
  ------------------
 6899|      0|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 0, False: 48]
  ------------------
 6900|      0|            return presentation_type::int_binary;
 6901|      0|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 0, False: 48]
  ------------------
 6902|      0|            return presentation_type::int_decimal;
 6903|      0|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 0, False: 48]
  ------------------
 6904|      0|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 48]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|      0|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 0, False: 48]
  ------------------
 6908|      0|            return presentation_type::int_octal;
 6909|      0|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 0, False: 48]
  ------------------
 6910|      0|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 48]
  ------------------
 6911|      0|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 48]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 48]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|      0|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 0, False: 48]
  ------------------
 6916|      0|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 48]
  ------------------
 6917|      0|            return presentation_type::float_hex;
 6918|      0|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 0, False: 48]
  ------------------
 6919|      0|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 48]
  ------------------
 6920|      0|            return presentation_type::float_scientific;
 6921|      0|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 0, False: 48]
  ------------------
 6922|      0|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 48]
  ------------------
 6923|      0|            return presentation_type::float_fixed;
 6924|      0|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 0, False: 48]
  ------------------
 6925|      0|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 48]
  ------------------
 6926|      0|            return presentation_type::float_general;
 6927|     36|        case 's':
  ------------------
  |  Branch (6927:9): [True: 36, False: 12]
  ------------------
 6928|     36|            return presentation_type::string;
 6929|      0|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 0, False: 48]
  ------------------
 6930|      0|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 48]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 48]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 48]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 48]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|     12|        default:
  ------------------
  |  Branch (6941:9): [True: 12, False: 36]
  ------------------
 6942|     12|            return presentation_type::none;
 6943|     48|    }
 6944|     48|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 6973|  14.4k|{
 6974|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|  14.4k|    auto check_align = [](wchar_t ch) {
 6977|  14.4k|        switch (ch) {
 6978|  14.4k|            case L'<':
 6979|  14.4k|                return align_type::left;
 6980|  14.4k|            case L'>':
 6981|  14.4k|                return align_type::right;
 6982|  14.4k|            case L'^':
 6983|  14.4k|                return align_type::center;
 6984|  14.4k|            default:
 6985|  14.4k|                return align_type::none;
 6986|  14.4k|        }
 6987|  14.4k|    };
 6988|       |
 6989|  14.4k|    auto potential_fill_len = code_point_length(begin, end);
 6990|  14.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  Branch (865:45): [True: 0, False: 14.4k]
  |  |  |  Branch (865:45): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 6991|  14.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|  14.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|  14.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|  14.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|  14.4k|    const auto begin_before_fill = begin;
 7001|  14.4k|    begin += potential_fill_len;
 7002|       |
 7003|  14.4k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 14.4k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|  14.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|  14.4k|    const auto begin_after_fill = begin;
 7009|  14.4k|    ++begin;
 7010|       |
 7011|  14.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 14.4k, False: 0]
  ------------------
 7012|  14.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|  14.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 72, False: 14.3k]
  ------------------
 7017|     72|            return begin_before_fill;
 7018|     72|        }
 7019|  14.4k|    }
 7020|       |
 7021|  14.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 14.2k, False: 108]
  ------------------
 7022|  14.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 108, False: 14.1k]
  ------------------
 7023|    108|            handler.on_align(potential_align_on_fill);
 7024|    108|            return begin_after_fill;
 7025|    108|        }
 7026|  14.1k|        return begin_before_fill;
 7027|  14.2k|    }
 7028|       |
 7029|    108|    handler.on_fill(potential_fill);
 7030|    108|    handler.on_align(potential_align_after_fill);
 7031|    108|    return begin;
 7032|  14.3k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 6955|  14.4k|{
 6956|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|  14.4k|    if constexpr (sizeof(CharT) != 1) {
 6958|  14.4k|        return 1;
 6959|       |    }
 6960|       |    else {
 6961|       |        const auto lengths =
 6962|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|       |            "\3\4";
 6964|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|       |        return len;
 6966|       |    }
 6967|  14.4k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|  28.8k|    auto check_align = [](wchar_t ch) {
 6977|  28.8k|        switch (ch) {
 6978|    216|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 216, False: 28.6k]
  ------------------
 6979|    216|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 28.8k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 28.8k]
  ------------------
 6983|      0|                return align_type::center;
 6984|  28.6k|            default:
  ------------------
  |  Branch (6984:13): [True: 28.6k, False: 216]
  ------------------
 6985|  28.6k|                return align_type::none;
 6986|  28.8k|        }
 6987|  28.8k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6713|    108|    {
 6714|    108|        m_specs.fill = fill;
 6715|    108|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6594|    108|    {
 6595|    108|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6596|    108|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6597|       |        if constexpr (sizeof(CharT) == 1) {
 6598|       |            for (size_t i = 0; i < s.size(); ++i) {
 6599|       |                SCN_GCC_PUSH
 6600|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6601|       |                m_data[i] = s[i];
 6602|       |                SCN_GCC_POP
 6603|       |            }
 6604|       |            m_size = static_cast<unsigned char>(s.size());
 6605|       |        }
 6606|       |        else if constexpr (sizeof(CharT) == 2) {
 6607|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6608|       |            m_data[1] =
 6609|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6610|       |            if (s.size() == 1) {
 6611|       |                return;
 6612|       |            }
 6613|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6614|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6615|       |        }
 6616|    108|        else {
 6617|    108|            const auto front = static_cast<unsigned>(s.front());
 6618|    108|            m_data[0] = static_cast<char>(front);
 6619|    108|            m_data[1] = static_cast<char>(front >> 8);
 6620|    108|            m_data[2] = static_cast<char>(front >> 16);
 6621|    108|            m_data[3] = static_cast<char>(front >> 24);
 6622|    108|        }
 6623|    108|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7038|  14.4k|{
 7039|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|  14.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 12.4k, False: 1.96k]
  |  Branch (7041:33): [True: 12.2k, False: 156]
  ------------------
 7042|  12.2k|        int width = parse_simple_int(begin, end);
 7043|  12.2k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  12.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12.2k, False: 0]
  |  |  ------------------
  ------------------
 7044|  12.2k|            handler.on_width(width);
 7045|  12.2k|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|  12.2k|    }
 7051|  14.4k|    return begin;
 7052|  14.4k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7058|    252|{
 7059|    252|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    252|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    252|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7060|       |
 7061|    252|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7061:9): [True: 252, False: 0]
  |  Branch (7061:33): [True: 252, False: 0]
  ------------------
 7062|    252|        int prec = parse_simple_int(begin, end);
 7063|    252|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 252, False: 0]
  |  |  ------------------
  ------------------
 7064|    252|            handler.on_precision(prec);
 7065|    252|        }
 7066|      0|        else {
 7067|      0|            handler.on_error("Invalid field precision");
 7068|      0|            return begin;
 7069|      0|        }
 7070|    252|    }
 7071|    252|    return begin;
 7072|    252|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|  14.3k|{
 8994|  14.3k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  14.3k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  14.3k|{
 8895|  14.3k|#define SCN_VISIT(Type)                                                \
 8896|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  14.3k|    }                                                                  \
 8899|  14.3k|    else {                                                             \
 8900|  14.3k|        return vis(monostate_val);                                     \
 8901|  14.3k|    }
 8902|       |
 8903|  14.3k|    monostate monostate_val{};
 8904|       |
 8905|  14.3k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 14.3k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 14.3k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|  1.59k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 1.59k, False: 12.7k]
  ------------------
 8911|  1.59k|            SCN_VISIT(int);
  ------------------
  |  | 8896|  1.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.59k|    }                                                                  \
  |  | 8899|  1.59k|    else {                                                             \
  |  | 8900|  1.59k|        return vis(monostate_val);                                     \
  |  | 8901|  1.59k|    }
  ------------------
 8912|  1.59k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 14.3k]
  ------------------
 8913|  1.59k|            SCN_VISIT(long);
  ------------------
  |  | 8896|  1.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.59k|    }                                                                  \
  |  | 8899|  1.59k|    else {                                                             \
  |  | 8900|  1.59k|        return vis(monostate_val);                                     \
  |  | 8901|  1.59k|    }
  ------------------
 8914|  1.59k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 14.3k]
  ------------------
 8915|  1.59k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|  1.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.59k|    }                                                                  \
  |  | 8899|  1.59k|    else {                                                             \
  |  | 8900|  1.59k|        return vis(monostate_val);                                     \
  |  | 8901|  1.59k|    }
  ------------------
 8916|  1.59k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 14.3k]
  ------------------
 8917|  1.59k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|  1.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.59k|    }                                                                  \
  |  | 8899|  1.59k|    else {                                                             \
  |  | 8900|  1.59k|        return vis(monostate_val);                                     \
  |  | 8901|  1.59k|    }
  ------------------
 8918|  1.59k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 14.3k]
  ------------------
 8919|  1.59k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|  1.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.59k|    }                                                                  \
  |  | 8899|  1.59k|    else {                                                             \
  |  | 8900|  1.59k|        return vis(monostate_val);                                     \
  |  | 8901|  1.59k|    }
  ------------------
 8920|  3.18k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 1.59k, False: 12.7k]
  ------------------
 8921|  3.18k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|  3.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  3.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  3.18k|    }                                                                  \
  |  | 8899|  3.18k|    else {                                                             \
  |  | 8900|  3.18k|        return vis(monostate_val);                                     \
  |  | 8901|  3.18k|    }
  ------------------
 8922|  3.18k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 14.3k]
  ------------------
 8923|  3.18k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|  3.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  3.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  3.18k|    }                                                                  \
  |  | 8899|  3.18k|    else {                                                             \
  |  | 8900|  3.18k|        return vis(monostate_val);                                     \
  |  | 8901|  3.18k|    }
  ------------------
 8924|  3.18k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 14.3k]
  ------------------
 8925|  3.18k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|  3.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  3.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  3.18k|    }                                                                  \
  |  | 8899|  3.18k|    else {                                                             \
  |  | 8900|  3.18k|        return vis(monostate_val);                                     \
  |  | 8901|  3.18k|    }
  ------------------
 8926|  4.77k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 1.59k, False: 12.7k]
  ------------------
 8927|  4.77k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|  4.77k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  4.77k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  4.77k|    }                                                                  \
  |  | 8899|  4.77k|    else {                                                             \
  |  | 8900|  4.77k|        return vis(monostate_val);                                     \
  |  | 8901|  4.77k|    }
  ------------------
 8928|  6.36k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 1.59k, False: 12.7k]
  ------------------
 8929|  6.36k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|  6.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  6.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  6.36k|    }                                                                  \
  |  | 8899|  6.36k|    else {                                                             \
  |  | 8900|  6.36k|        return vis(monostate_val);                                     \
  |  | 8901|  6.36k|    }
  ------------------
 8930|  6.36k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 14.3k]
  ------------------
 8931|  6.36k|            SCN_VISIT(char);
  ------------------
  |  | 8896|  6.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  6.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  6.36k|    }                                                                  \
  |  | 8899|  6.36k|    else {                                                             \
  |  | 8900|  6.36k|        return vis(monostate_val);                                     \
  |  | 8901|  6.36k|    }
  ------------------
 8932|  7.95k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 1.59k, False: 12.7k]
  ------------------
 8933|  7.95k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|  7.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  7.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  7.95k|    }                                                                  \
  |  | 8899|  7.95k|    else {                                                             \
  |  | 8900|  7.95k|        return vis(monostate_val);                                     \
  |  | 8901|  7.95k|    }
  ------------------
 8934|  7.95k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 14.3k]
  ------------------
 8935|  7.95k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|  7.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  7.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  7.95k|    }                                                                  \
  |  | 8899|  7.95k|    else {                                                             \
  |  | 8900|  7.95k|        return vis(monostate_val);                                     \
  |  | 8901|  7.95k|    }
  ------------------
 8936|  7.95k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 14.3k]
  ------------------
 8937|  7.95k|            SCN_VISIT(float);
  ------------------
  |  | 8896|  7.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  7.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  7.95k|    }                                                                  \
  |  | 8899|  7.95k|    else {                                                             \
  |  | 8900|  7.95k|        return vis(monostate_val);                                     \
  |  | 8901|  7.95k|    }
  ------------------
 8938|  9.54k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 1.59k, False: 12.7k]
  ------------------
 8939|  9.54k|            SCN_VISIT(double);
  ------------------
  |  | 8896|  9.54k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  9.54k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  9.54k|    }                                                                  \
  |  | 8899|  9.54k|    else {                                                             \
  |  | 8900|  9.54k|        return vis(monostate_val);                                     \
  |  | 8901|  9.54k|    }
  ------------------
 8940|  9.54k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 14.3k]
  ------------------
 8941|  9.54k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  9.54k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  9.54k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  9.54k|    }                                                                  \
  |  | 8899|  9.54k|    else {                                                             \
  |  | 8900|  9.54k|        return vis(monostate_val);                                     \
  |  | 8901|  9.54k|    }
  ------------------
 8942|  9.54k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 14.3k]
  ------------------
 8943|  9.54k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  9.54k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  9.54k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  9.54k|    }                                                                  \
  |  | 8899|  9.54k|    else {                                                             \
  |  | 8900|  9.54k|        return vis(monostate_val);                                     \
  |  | 8901|  9.54k|    }
  ------------------
 8944|  11.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 1.59k, False: 12.7k]
  ------------------
 8945|  11.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  11.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  11.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  11.1k|    }                                                                  \
  |  | 8899|  11.1k|    else {                                                             \
  |  | 8900|  11.1k|        return vis(monostate_val);                                     \
  |  | 8901|  11.1k|    }
  ------------------
 8946|  12.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 1.59k, False: 12.7k]
  ------------------
 8947|  12.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  12.7k|    }                                                                  \
  |  | 8899|  12.7k|    else {                                                             \
  |  | 8900|  12.7k|        return vis(monostate_val);                                     \
  |  | 8901|  12.7k|    }
  ------------------
 8948|  14.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 1.59k, False: 12.7k]
  ------------------
 8949|  14.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  14.3k|    }                                                                  \
  |  | 8899|  14.3k|    else {                                                             \
  |  | 8900|  14.3k|        return vis(monostate_val);                                     \
  |  | 8901|  14.3k|    }
  ------------------
 8950|  14.3k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 14.3k]
  ------------------
 8951|  14.3k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  14.3k|    }                                                                  \
  |  | 8899|  14.3k|    else {                                                             \
  |  | 8900|  14.3k|        return vis(monostate_val);                                     \
  |  | 8901|  14.3k|    }
  ------------------
 8952|  14.3k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 14.3k]
  ------------------
 8953|  14.3k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  14.3k|    }                                                                  \
  |  | 8899|  14.3k|    else {                                                             \
  |  | 8900|  14.3k|        return vis(monostate_val);                                     \
  |  | 8901|  14.3k|    }
  ------------------
 8954|       |
 8955|  14.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 14.3k]
  ------------------
 8956|  14.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  14.3k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  14.3k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 14.3k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 14.3k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  14.3k|            SCN_CLANG_POP
 8973|  14.3k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|    640|    {
 3480|    640|        return m_iterator;
 3481|    640|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|    160|        : base(std::in_place, std::forward<U>(val)),
 1570|    160|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    160|    {
 1572|    160|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    160|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    160|    {
  442|    160|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    160|    {
 1316|    160|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|    320|    {
 3484|    320|        return m_sentinel;
 3485|    320|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|    320|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    320|    static_cast<    \
  |  |  935|    320|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    320|    static_cast<    \
  |  |  935|    320|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|    320|    {
 3466|    320|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    320|    {
  490|    320|        return m_has_value;
  491|    320|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    160|    {
 1769|    160|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    160|        return this->get_value();
 1771|    160|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    160|    {
  456|    160|        return m_value;
  457|    160|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|    160|    {
 1979|    160|        return detail::transform_error_impl(std::move(*this),
 1980|    160|                                            std::forward<F>(f));
 1981|    160|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|    160|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    160|    else {
 1472|    160|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    160|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    160|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 160, False: 0]
  |  |  ------------------
  ------------------
 1474|    160|                   ? result(*std::forward<Exp>(exp))
 1475|    160|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    160|    }
 1479|    160|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    160|    {
 1805|    160|        return std::move(value());
 1806|    160|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    160|        : base(std::in_place, std::forward<U>(val)),
 1570|    160|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    160|    {
 1572|    160|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    160|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    160|    {
  442|    160|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    160|    {
 1316|    160|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|    160|    {
 1740|    160|        return has_value();
 1741|    160|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    320|    {
  490|    320|        return m_has_value;
  491|    320|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    160|    {
 1805|    160|        return std::move(value());
 1806|    160|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    160|    {
 1769|    160|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    160|        return this->get_value();
 1771|    160|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    160|    {
  456|    160|        return m_value;
  457|    160|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  54.8k|{
   44|  54.8k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  54.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  54.8k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  54.8k|{
   60|  54.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  54.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  54.8k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.09k|{
   89|  6.09k|    auto result = make_scan_result<Source, Args...>();
   90|  6.09k|    fill_scan_result(result,
   91|  6.09k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.09k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.09k|    return result;
   94|  6.09k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.09k|{
  131|  6.09k|    auto result = make_scan_result<Source, Args...>();
  132|  6.09k|    fill_scan_result(result,
  133|  6.09k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  6.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.09k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.09k|    return result;
  136|  6.09k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  663|  82.2k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  664|  82.2k|{
  665|  82.2k|    static_assert(std::is_same_v<Locale, std::locale>);
  666|  82.2k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1250|     24|{
 1251|     24|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|     24|                                  m_nan_payload_buffer, value);
 1253|     24|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|     24|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 1254|      0|        value = this->setsign(value);
 1255|      0|        return n;
 1256|      0|    }
 1257|       |
 1258|     24|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 0, False: 24]
  ------------------
 1259|     24|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 0, False: 0]
  ------------------
 1260|      0|        return detail::unexpected_scan_error(
 1261|      0|            scan_error::value_negative_overflow, n.error().msg());
 1262|      0|    }
 1263|     24|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 0, False: 24]
  ------------------
 1264|     24|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 0, False: 0]
  ------------------
 1265|      0|        return detail::unexpected_scan_error(
 1266|      0|            scan_error::value_negative_underflow, n.error().msg());
 1267|      0|    }
 1268|     24|    return n;
 1269|     24|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1250|     98|{
 1251|     98|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|     98|                                  m_nan_payload_buffer, value);
 1253|     98|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|     98|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 1254|      0|        value = this->setsign(value);
 1255|      0|        return n;
 1256|      0|    }
 1257|       |
 1258|     98|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 0, False: 98]
  ------------------
 1259|     98|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 0, False: 0]
  ------------------
 1260|      0|        return detail::unexpected_scan_error(
 1261|      0|            scan_error::value_negative_overflow, n.error().msg());
 1262|      0|    }
 1263|     98|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 0, False: 98]
  ------------------
 1264|     98|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 0, False: 0]
  ------------------
 1265|      0|        return detail::unexpected_scan_error(
 1266|      0|            scan_error::value_negative_underflow, n.error().msg());
 1267|      0|    }
 1268|     98|    return n;
 1269|     98|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|     24|{
 1509|     24|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|     24|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|     24|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|     24|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|     24|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 24, False: 0]
  ------------------
 1515|     24|        SCN_UNLIKELY_ATTR
 1516|     24|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|     24|                                             "Invalid integer value");
 1518|     24|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|      0|    auto start = source.data();
 1522|      0|    const auto end = source.data() + source.size();
 1523|      0|    {
 1524|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 0, False: 0]
  ------------------
 1525|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 0, False: 0]
  ------------------
 1526|      0|                break;
 1527|      0|            }
 1528|      0|        }
 1529|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1530|      0|            value = 0;
 1531|      0|            return ranges::next(source.begin(),
 1532|      0|                                ranges::distance(source.data(), start));
 1533|      0|        }
 1534|      0|    }
 1535|       |
 1536|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1537|      0|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 0, False: 0]
  ------------------
 1538|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|      0|                             detail::make_string_view_from_pointers(start, end),
 1540|      0|                             value, sign == sign_type::minus_sign));
 1541|      0|            return ranges::next(source.begin(),
 1542|      0|                                ranges::distance(source.data(), ptr));
 1543|      0|        }
 1544|      0|    }
 1545|       |
 1546|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1548|      0|                     base, sign == sign_type::minus_sign));
 1549|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|     98|{
 1509|     98|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|     98|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|     98|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|     98|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|     98|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 98, False: 0]
  ------------------
 1515|     98|        SCN_UNLIKELY_ATTR
 1516|     98|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|     98|                                             "Invalid integer value");
 1518|     98|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|      0|    auto start = source.data();
 1522|      0|    const auto end = source.data() + source.size();
 1523|      0|    {
 1524|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 0, False: 0]
  ------------------
 1525|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 0, False: 0]
  ------------------
 1526|      0|                break;
 1527|      0|            }
 1528|      0|        }
 1529|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1530|      0|            value = 0;
 1531|      0|            return ranges::next(source.begin(),
 1532|      0|                                ranges::distance(source.data(), start));
 1533|      0|        }
 1534|      0|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1548|      0|                     base, sign == sign_type::minus_sign));
 1549|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|     24|{
 1509|     24|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|     24|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|     24|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|     24|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|     24|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 24, False: 0]
  ------------------
 1515|     24|        SCN_UNLIKELY_ATTR
 1516|     24|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|     24|                                             "Invalid integer value");
 1518|     24|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|      0|    auto start = source.data();
 1522|      0|    const auto end = source.data() + source.size();
 1523|      0|    {
 1524|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 0, False: 0]
  ------------------
 1525|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 0, False: 0]
  ------------------
 1526|      0|                break;
 1527|      0|            }
 1528|      0|        }
 1529|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1530|      0|            value = 0;
 1531|      0|            return ranges::next(source.begin(),
 1532|      0|                                ranges::distance(source.data(), start));
 1533|      0|        }
 1534|      0|    }
 1535|       |
 1536|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1537|      0|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 0, False: 0]
  ------------------
 1538|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|      0|                             detail::make_string_view_from_pointers(start, end),
 1540|      0|                             value, sign == sign_type::minus_sign));
 1541|      0|            return ranges::next(source.begin(),
 1542|      0|                                ranges::distance(source.data(), ptr));
 1543|      0|        }
 1544|      0|    }
 1545|       |
 1546|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1548|      0|                     base, sign == sign_type::minus_sign));
 1549|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|     98|{
 1509|     98|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|     98|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|     98|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|     98|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|     98|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 98, False: 0]
  ------------------
 1515|     98|        SCN_UNLIKELY_ATTR
 1516|     98|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|     98|                                             "Invalid integer value");
 1518|     98|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|      0|    auto start = source.data();
 1522|      0|    const auto end = source.data() + source.size();
 1523|      0|    {
 1524|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 0, False: 0]
  ------------------
 1525|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 0, False: 0]
  ------------------
 1526|      0|                break;
 1527|      0|            }
 1528|      0|        }
 1529|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1530|      0|            value = 0;
 1531|      0|            return ranges::next(source.begin(),
 1532|      0|                                ranges::distance(source.data(), start));
 1533|      0|        }
 1534|      0|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1548|      0|                     base, sign == sign_type::minus_sign));
 1549|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|     24|{
 1509|     24|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|     24|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|     24|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|     24|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|     24|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 24, False: 0]
  ------------------
 1515|     24|        SCN_UNLIKELY_ATTR
 1516|     24|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|     24|                                             "Invalid integer value");
 1518|     24|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|      0|    auto start = source.data();
 1522|      0|    const auto end = source.data() + source.size();
 1523|      0|    {
 1524|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 0, False: 0]
  ------------------
 1525|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 0, False: 0]
  ------------------
 1526|      0|                break;
 1527|      0|            }
 1528|      0|        }
 1529|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1530|      0|            value = 0;
 1531|      0|            return ranges::next(source.begin(),
 1532|      0|                                ranges::distance(source.data(), start));
 1533|      0|        }
 1534|      0|    }
 1535|       |
 1536|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1537|      0|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 0, False: 0]
  ------------------
 1538|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|      0|                             detail::make_string_view_from_pointers(start, end),
 1540|      0|                             value, sign == sign_type::minus_sign));
 1541|      0|            return ranges::next(source.begin(),
 1542|      0|                                ranges::distance(source.data(), ptr));
 1543|      0|        }
 1544|      0|    }
 1545|       |
 1546|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1548|      0|                     base, sign == sign_type::minus_sign));
 1549|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|     98|{
 1509|     98|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|     98|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|     98|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|     98|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|     98|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 98, False: 0]
  ------------------
 1515|     98|        SCN_UNLIKELY_ATTR
 1516|     98|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|     98|                                             "Invalid integer value");
 1518|     98|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|      0|    auto start = source.data();
 1522|      0|    const auto end = source.data() + source.size();
 1523|      0|    {
 1524|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 0, False: 0]
  ------------------
 1525|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 0, False: 0]
  ------------------
 1526|      0|                break;
 1527|      0|            }
 1528|      0|        }
 1529|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1530|      0|            value = 0;
 1531|      0|            return ranges::next(source.begin(),
 1532|      0|                                ranges::distance(source.data(), start));
 1533|      0|        }
 1534|      0|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1548|      0|                     base, sign == sign_type::minus_sign));
 1549|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2235|  27.4k|{
 2236|  27.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2237|  27.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2259|  54.8k|{
 2260|  54.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2261|  54.8k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  205|     78|{
  206|     78|    return find_classic_impl(
  207|     78|        source, [](char ch) { return is_ascii_space(ch); },
  208|     78|        [](char32_t cp) { return detail::is_cp_space(cp); });
  209|     78|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  213|  1.35k|{
  214|  1.35k|    return find_classic_impl(
  215|  1.35k|        source, [](char ch) { return !is_ascii_space(ch); },
  216|  1.35k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  217|  1.35k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  684|      6|{
  685|      6|    SCN_UNLIKELY_ATTR
  686|      6|    return e;
  687|      6|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2192|  27.4k|{
 2193|  27.4k|    return vscan_internal(source, format, args);
 2194|  27.4k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2212|  54.8k|{
 2213|  54.8k|    return vscan_internal(source, format, args);
 2214|  54.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|     78|{
  130|     78|    auto it = source.begin();
  131|       |
  132|  12.4k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 12.4k, False: 78]
  ------------------
  133|  12.4k|        auto sv =
  134|  12.4k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  12.4k|                .substr(0, 8);
  136|       |
  137|  12.4k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 2.34k, False: 10.0k]
  ------------------
  138|  2.34k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  2.34k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  2.34k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 0, False: 2.34k]
  ------------------
  141|      0|                break;
  142|      0|            }
  143|  2.34k|            continue;
  144|  2.34k|        }
  145|       |
  146|  46.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 36.8k, False: 10.0k]
  ------------------
  147|  36.8k|            auto tmp =
  148|  36.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  36.8k|            auto res = get_next_code_point(tmp);
  150|  36.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 0, False: 36.8k]
  ------------------
  151|      0|                return it;
  152|      0|            }
  153|  36.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|  36.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|  36.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  36.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  36.8k|        }
  157|  10.0k|    }
  158|       |
  159|     78|    return detail::make_string_view_iterator(source, it);
  160|     78|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  15.6k|{
  117|  15.6k|    static_assert(sizeof(*source.data()) == 1);
  118|  15.6k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  15.6k|    uint64_t word{};
  120|  15.6k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  15.6k|    return has_byte_greater(word, 127) != 0;
  123|  15.6k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  207|  18.5k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  208|  36.8k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  1.35k|{
  130|  1.35k|    auto it = source.begin();
  131|       |
  132|  3.51k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 3.27k, False: 240]
  ------------------
  133|  3.27k|        auto sv =
  134|  3.27k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  3.27k|                .substr(0, 8);
  136|       |
  137|  3.27k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 906, False: 2.36k]
  ------------------
  138|    906|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|    906|            it = detail::make_string_view_iterator(source, tmp_it);
  140|    906|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 744, False: 162]
  ------------------
  141|    744|                break;
  142|    744|            }
  143|    162|            continue;
  144|    906|        }
  145|       |
  146|  10.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 8.16k, False: 1.99k]
  ------------------
  147|  8.16k|            auto tmp =
  148|  8.16k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  8.16k|            auto res = get_next_code_point(tmp);
  150|  8.16k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 366, False: 7.79k]
  ------------------
  151|    366|                return it;
  152|    366|            }
  153|  7.79k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|  7.79k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|  7.79k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  7.79k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  7.79k|        }
  157|  2.36k|    }
  158|       |
  159|    984|    return detail::make_string_view_iterator(source, it);
  160|  1.35k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  215|  1.93k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  216|  8.16k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|     24|{
 1160|     24|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 0, False: 24]
  ------------------
 1161|      0|        value = std::numeric_limits<T>::infinity();
 1162|      0|        return 3;
 1163|      0|    }
 1164|     24|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 0, False: 24]
  ------------------
 1165|      0|        value = std::numeric_limits<T>::infinity();
 1166|      0|        return 8;
 1167|      0|    }
 1168|     24|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 0, False: 24]
  ------------------
 1169|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1170|      0|        return 3;
 1171|      0|    }
 1172|     24|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 0, False: 24]
  ------------------
 1173|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|      0|    }
 1204|       |
 1205|     24|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|     24|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 0, False: 24]
  ------------------
 1207|      0|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1208|      0|            return detail::unexpected_scan_error(
 1209|      0|                scan_error::invalid_scanned_value,
 1210|      0|                "Invalid floating-point digit");
 1211|      0|        }
 1212|      0|    }
 1213|     24|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 1214|     24|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|     24|                                             "Invalid floating-point digit");
 1216|     24|    }
 1217|       |
 1218|      0|#if !SCN_DISABLE_FAST_FLOAT
 1219|       |    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|       |        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|       |            return fast_float_fallback(data, value);
 1232|       |        }
 1233|       |    }
 1234|      0|    else {
 1235|       |        // Default to fast_float
 1236|      0|        return fast_float_impl<CharT, T>{data}(value);
 1237|      0|    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|     98|{
 1160|     98|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 0, False: 98]
  ------------------
 1161|      0|        value = std::numeric_limits<T>::infinity();
 1162|      0|        return 3;
 1163|      0|    }
 1164|     98|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 0, False: 98]
  ------------------
 1165|      0|        value = std::numeric_limits<T>::infinity();
 1166|      0|        return 8;
 1167|      0|    }
 1168|     98|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 0, False: 98]
  ------------------
 1169|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1170|      0|        return 3;
 1171|      0|    }
 1172|     98|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 0, False: 98]
  ------------------
 1173|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|      0|    }
 1204|       |
 1205|     98|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|     98|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 0, False: 98]
  ------------------
 1207|      0|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1208|      0|            return detail::unexpected_scan_error(
 1209|      0|                scan_error::invalid_scanned_value,
 1210|      0|                "Invalid floating-point digit");
 1211|      0|        }
 1212|      0|    }
 1213|     98|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 0]
  |  |  ------------------
  ------------------
 1214|     98|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|     98|                                             "Invalid floating-point digit");
 1216|     98|    }
 1217|       |
 1218|      0|#if !SCN_DISABLE_FAST_FLOAT
 1219|       |    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|       |        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|       |            return fast_float_fallback(data, value);
 1232|       |        }
 1233|       |    }
 1234|      0|    else {
 1235|       |        // Default to fast_float
 1236|      0|        return fast_float_impl<CharT, T>{data}(value);
 1237|      0|    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|      0|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|  54.8k|{
 1673|  54.8k|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 54.8k, False: 0]
  ------------------
 1674|  54.8k|        return false;
 1675|  54.8k|    }
 1676|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 0, False: 0]
  |  Branch (1676:39): [True: 0, False: 0]
  ------------------
 1677|  54.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1948|  54.8k|        : format_handler_base{argcount},
 1949|  54.8k|          parse_ctx{format},
 1950|  54.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  54.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  54.8k|    {
 1952|  54.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1766|   164k|    format_handler_base(size_t argcount) : args_count(argcount)
 1767|   164k|    {
 1768|   164k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 1769|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1770|      0|        }
 1771|   164k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1899|  54.8k|        : contiguous_ctx(source, args, loc)
 1900|  54.8k|    {
 1901|  54.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  54.8k|{
 2090|  54.8k|    const auto beg = handler.get_ctx().begin();
 2091|  54.8k|    detail::parse_format_string<false>(format, handler);
 2092|  54.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 54.6k, False: 216]
  |  |  ------------------
  ------------------
 2093|  54.6k|        return unexpected(err.error());
 2094|  54.6k|    }
 2095|    216|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  54.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2073|   225k|    {
 2074|   225k|        return ctx.get();
 2075|   225k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1904|   225k|    {
 1905|   225k|        return contiguous_ctx;
 1906|   225k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1955|  56.4k|    {
 1956|  58.6k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 3.09k, False: 55.5k]
  ------------------
 1957|  3.09k|            auto it = get_ctx().begin();
 1958|  3.09k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 36, False: 3.06k]
  ------------------
 1959|     36|                SCN_UNLIKELY_ATTR
 1960|     36|                return on_error(
 1961|     36|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|     36|            }
 1963|       |
 1964|  3.06k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|  3.06k|                    detail::make_string_view_from_pointers(begin, end));
 1966|  3.06k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 204, False: 2.85k]
  ------------------
 1967|    204|                SCN_UNLIKELY_ATTR
 1968|    204|                return on_error({scan_error::invalid_format_string,
 1969|    204|                                 "Invalid encoding in format string"});
 1970|    204|            }
 1971|  2.85k|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 528, False: 2.32k]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|    528|                get_ctx().advance_to(
 1974|    528|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|    528|                auto begin_it = impl::read_while_classic_space(
 1977|    528|                    detail::make_string_view_from_pointers(
 1978|    528|                        detail::to_address(after_space_it),
 1979|    528|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|    528|                begin = detail::to_address(begin_it) - 1;
 1982|    528|                continue;
 1983|    528|            }
 1984|       |
 1985|  2.32k|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 642, False: 1.68k]
  ------------------
 1986|    642|                SCN_UNLIKELY_ATTR
 1987|    642|                return on_error({scan_error::invalid_literal,
 1988|    642|                                 "Unexpected literal character in source"});
 1989|    642|            }
 1990|  1.68k|            get_ctx().advance_to(ranges::next(it));
 1991|  1.68k|        }
 1992|  56.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1815|   202k|    {
 1816|   202k|        error = unexpected(err);
 1817|   202k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 2022|    216|    {
 2023|    216|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2024|    216|        set_arg_as_visited(arg_id);
 2025|       |
 2026|    216|        on_visit_scan_arg(
 2027|    216|            impl::default_arg_reader<context_type>{
 2028|    216|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2029|    216|            arg);
 2030|    216|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1727|  39.9k|{
 1728|  39.9k|    auto arg = ctx.arg(id);
 1729|  39.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 154, False: 39.8k]
  |  |  ------------------
  ------------------
 1730|    154|        handler.on_error("Failed to find argument with ID");
 1731|    154|    }
 1732|  39.9k|    return arg;
 1733|  39.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1841|  55.3k|    {
 1842|  55.3k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 172, False: 55.1k]
  |  |  ------------------
  ------------------
 1843|    172|            on_error({scan_error::invalid_format_string,
 1844|    172|                      "Argument ID out-of-range"});
 1845|    172|            return;
 1846|    172|        }
 1847|       |
 1848|  55.1k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.1k]
  |  |  ------------------
  ------------------
 1849|      0|            on_error({scan_error::invalid_format_string,
 1850|      0|                      "Argument with this ID has already been scanned"});
 1851|      0|        }
 1852|       |
 1853|  55.1k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  55.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 55.1k, False: 0]
  |  |  ------------------
  ------------------
 1854|  55.1k|            visited_args_lower64 |= (1ull << id);
 1855|  55.1k|            return;
 1856|  55.1k|        }
 1857|       |
 1858|      0|        id -= 64;
 1859|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1860|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1825|  55.1k|    {
 1826|  55.1k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.1k]
  |  |  ------------------
  ------------------
 1827|      0|            on_error({scan_error::invalid_format_string,
 1828|      0|                      "Argument ID out-of-range"});
 1829|      0|            return false;
 1830|      0|        }
 1831|       |
 1832|  55.1k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  55.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 55.1k, False: 0]
  |  |  ------------------
  ------------------
 1833|  55.1k|            return (visited_args_lower64 >> id) & 1ull;
 1834|  55.1k|        }
 1835|       |
 1836|      0|        id -= 64;
 1837|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1838|  55.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2006|    216|    {
 2007|    216|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 216]
  |  Branch (2007:13): [True: 0, False: 216]
  |  Branch (2007:29): [True: 0, False: 216]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|    216|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|    216|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 96]
  |  |  ------------------
  ------------------
 2014|    120|            on_error(r.error());
 2015|    120|        }
 2016|     96|        else {
 2017|     96|            get_ctx().advance_to(*r);
 2018|     96|        }
 2019|    216|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1995|  35.5k|    {
 1996|  35.5k|        return parse_ctx.next_arg_id();
 1997|  35.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1999|  4.42k|    {
 2000|  4.42k|        parse_ctx.check_arg_id(id);
 2001|  4.42k|        return id;
 2002|  4.42k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2035|  39.7k|    {
 2036|  39.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  39.7k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  39.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 39.7k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  39.7k|        auto specs = detail::format_specs{};
 2049|  39.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  39.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  39.7k|            detail::get_arg_type(arg)};
 2052|       |
 2053|  39.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  39.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 39.7k]
  |  Branch (2054:29): [True: 316, False: 39.4k]
  ------------------
 2055|    316|            SCN_UNLIKELY_ATTR
 2056|    316|            on_error({scan_error::invalid_format_string,
 2057|    316|                      "Missing '}' in format string"});
 2058|    316|            return parse_ctx.begin();
 2059|    316|        }
 2060|  39.4k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.4k]
  |  |  ------------------
  ------------------
 2061|      0|            return parse_ctx.begin();
 2062|      0|        }
 2063|  39.4k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  39.4k|        on_visit_scan_arg(
 2066|  39.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  39.4k|                                           get_ctx().locale()},
 2068|  39.4k|            arg);
 2069|  39.4k|        return parse_ctx.begin();
 2070|  39.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1745|  39.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  39.7k|    {
 1747|  39.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2006|  39.4k|    {
 2007|  39.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 39.4k]
  |  Branch (2007:13): [True: 0, False: 39.4k]
  |  Branch (2007:29): [True: 0, False: 39.4k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  39.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  39.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 37.4k, False: 1.99k]
  |  |  ------------------
  ------------------
 2014|  37.4k|            on_error(r.error());
 2015|  37.4k|        }
 2016|  1.99k|        else {
 2017|  1.99k|            get_ctx().advance_to(*r);
 2018|  1.99k|        }
 2019|  39.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1809|   143k|    {
 1810|   143k|        SCN_UNLIKELY_ATTR
 1811|   143k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1812|   143k|                                              msg);
 1813|   143k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1774|   164k|    {
 1775|   164k|        {
 1776|   164k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1776:45): [True: 0, False: 164k]
  ------------------
 1777|   164k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1777:35): [True: 0, False: 164k]
  ------------------
 1778|   164k|                                      ? std::numeric_limits<uint64_t>::max()
 1779|   164k|                                      : (1ull << args_count_lower64) - 1;
 1780|       |
 1781|   164k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1781:17): [True: 109k, False: 55.1k]
  ------------------
 1782|   109k|                return on_error({scan_error::invalid_format_string,
 1783|   109k|                                 "Argument list not exhausted"});
 1784|   109k|            }
 1785|   164k|        }
 1786|       |
 1787|  55.1k|        if (args_count < 64) {
  ------------------
  |  Branch (1787:13): [True: 55.1k, False: 0]
  ------------------
 1788|  55.1k|            return;
 1789|  55.1k|        }
 1790|       |
 1791|      0|        auto last_args_count = args_count - 64;
 1792|      0|        for (auto it = visited_args_upper.begin();
 1793|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1793:14): [True: 0, False: 0]
  ------------------
 1794|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1794:17): [True: 0, False: 0]
  ------------------
 1795|      0|                return on_error({scan_error::invalid_format_string,
 1796|      0|                                 "Argument list not exhausted"});
 1797|      0|            }
 1798|      0|            last_args_count -= 8;
 1799|      0|        }
 1800|       |
 1801|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1802|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1802:13): [True: 0, False: 0]
  ------------------
 1803|      0|            return on_error({scan_error::invalid_format_string,
 1804|      0|                             "Argument list not exhausted"});
 1805|      0|        }
 1806|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1820|   510k|    {
 1821|   510k|        return error;
 1822|   510k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|  54.8k|{
 2105|  54.8k|    const auto argcount = args.size();
 2106|  54.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 0, False: 54.8k]
  |  Branch (2106:60): [True: 0, False: 0]
  ------------------
 2107|      0|        auto arg = args.get(0);
 2108|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|      0|    }
 2110|       |
 2111|  54.8k|    auto handler = format_handler<true, CharT>{
 2112|  54.8k|        ranges::subrange<const CharT*>{source.data(),
 2113|  54.8k|                                       source.data() + source.size()},
 2114|  54.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|  54.8k|    return vscan_parse_format_string(format, handler);
 2116|  54.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|   109k|{
 2105|   109k|    const auto argcount = args.size();
 2106|   109k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 0, False: 109k]
  |  Branch (2106:60): [True: 0, False: 0]
  ------------------
 2107|      0|        auto arg = args.get(0);
 2108|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|      0|    }
 2110|       |
 2111|   109k|    auto handler = format_handler<true, CharT>{
 2112|   109k|        ranges::subrange<const CharT*>{source.data(),
 2113|   109k|                                       source.data() + source.size()},
 2114|   109k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|   109k|    return vscan_parse_format_string(format, handler);
 2116|   109k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|   109k|{
 1673|   109k|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 109k, False: 0]
  ------------------
 1674|   109k|        return false;
 1675|   109k|    }
 1676|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 0, False: 0]
  |  Branch (1676:39): [True: 0, False: 0]
  ------------------
 1677|   109k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1948|   109k|        : format_handler_base{argcount},
 1949|   109k|          parse_ctx{format},
 1950|   109k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   109k|    {
 1952|   109k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1899|   109k|        : contiguous_ctx(source, args, loc)
 1900|   109k|    {
 1901|   109k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   109k|{
 2090|   109k|    const auto beg = handler.get_ctx().begin();
 2091|   109k|    detail::parse_format_string<false>(format, handler);
 2092|   109k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 109k, False: 6]
  |  |  ------------------
  ------------------
 2093|   109k|        return unexpected(err.error());
 2094|   109k|    }
 2095|      6|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   109k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2073|   674M|    {
 2074|   674M|        return ctx.get();
 2075|   674M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1904|   674M|    {
 1905|   674M|        return contiguous_ctx;
 1906|   674M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1955|   109k|    {
 1956|   224M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 224M, False: 69.8k]
  ------------------
 1957|   224M|            auto it = get_ctx().begin();
 1958|   224M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 24, False: 224M]
  ------------------
 1959|     24|                SCN_UNLIKELY_ATTR
 1960|     24|                return on_error(
 1961|     24|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|     24|            }
 1963|       |
 1964|   224M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|   224M|                    detail::make_string_view_from_pointers(begin, end));
 1966|   224M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 39.2k, False: 224M]
  ------------------
 1967|  39.2k|                SCN_UNLIKELY_ATTR
 1968|  39.2k|                return on_error({scan_error::invalid_format_string,
 1969|  39.2k|                                 "Invalid encoding in format string"});
 1970|  39.2k|            }
 1971|   224M|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 234, False: 224M]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|    234|                get_ctx().advance_to(
 1974|    234|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|    234|                auto begin_it = impl::read_while_classic_space(
 1977|    234|                    detail::make_string_view_from_pointers(
 1978|    234|                        detail::to_address(after_space_it),
 1979|    234|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|    234|                begin = detail::to_address(begin_it) - 1;
 1982|    234|                continue;
 1983|    234|            }
 1984|       |
 1985|   224M|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 448, False: 224M]
  ------------------
 1986|    448|                SCN_UNLIKELY_ATTR
 1987|    448|                return on_error({scan_error::invalid_literal,
 1988|    448|                                 "Unexpected literal character in source"});
 1989|    448|            }
 1990|   224M|            get_ctx().advance_to(ranges::next(it));
 1991|   224M|        }
 1992|   109k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 2022|    918|    {
 2023|    918|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2024|    918|        set_arg_as_visited(arg_id);
 2025|       |
 2026|    918|        on_visit_scan_arg(
 2027|    918|            impl::default_arg_reader<context_type>{
 2028|    918|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2029|    918|            arg);
 2030|    918|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1727|  15.3k|{
 1728|  15.3k|    auto arg = ctx.arg(id);
 1729|  15.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 15.3k]
  |  |  ------------------
  ------------------
 1730|     18|        handler.on_error("Failed to find argument with ID");
 1731|     18|    }
 1732|  15.3k|    return arg;
 1733|  15.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2006|    918|    {
 2007|    918|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 234, False: 684]
  |  Branch (2007:13): [True: 234, False: 684]
  |  Branch (2007:29): [True: 0, False: 684]
  ------------------
 2008|    234|            SCN_UNLIKELY_ATTR
 2009|    234|            return;
 2010|    234|        }
 2011|       |
 2012|    684|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|    684|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 596, False: 88]
  |  |  ------------------
  ------------------
 2014|    596|            on_error(r.error());
 2015|    596|        }
 2016|     88|        else {
 2017|     88|            get_ctx().advance_to(*r);
 2018|     88|        }
 2019|    684|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1995|  15.3k|    {
 1996|  15.3k|        return parse_ctx.next_arg_id();
 1997|  15.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1999|      6|    {
 2000|      6|        parse_ctx.check_arg_id(id);
 2001|      6|        return id;
 2002|      6|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2035|  14.4k|    {
 2036|  14.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  14.4k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  14.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 14.4k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  14.4k|        auto specs = detail::format_specs{};
 2049|  14.4k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  14.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  14.4k|            detail::get_arg_type(arg)};
 2052|       |
 2053|  14.4k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  14.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 14.4k]
  |  Branch (2054:29): [True: 12, False: 14.4k]
  ------------------
 2055|     12|            SCN_UNLIKELY_ATTR
 2056|     12|            on_error({scan_error::invalid_format_string,
 2057|     12|                      "Missing '}' in format string"});
 2058|     12|            return parse_ctx.begin();
 2059|     12|        }
 2060|  14.4k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 2061|      0|            return parse_ctx.begin();
 2062|      0|        }
 2063|  14.4k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  14.4k|        on_visit_scan_arg(
 2066|  14.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  14.4k|                                           get_ctx().locale()},
 2068|  14.4k|            arg);
 2069|  14.4k|        return parse_ctx.begin();
 2070|  14.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1745|  14.4k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  14.4k|    {
 1747|  14.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2006|  14.4k|    {
 2007|  14.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 96, False: 14.3k]
  |  Branch (2007:13): [True: 96, False: 14.3k]
  |  Branch (2007:29): [True: 0, False: 14.3k]
  ------------------
 2008|     96|            SCN_UNLIKELY_ATTR
 2009|     96|            return;
 2010|     96|        }
 2011|       |
 2012|  14.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  14.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.2k, False: 76]
  |  |  ------------------
  ------------------
 2014|  14.2k|            on_error(r.error());
 2015|  14.2k|        }
 2016|     76|        else {
 2017|     76|            get_ctx().advance_to(*r);
 2018|     76|        }
 2019|  14.3k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1352|  3.04k|{
 1353|  3.04k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1354|       |
 1355|  3.04k|    if constexpr (sizeof(SourceCharT) == 1) {
 1356|       |        if constexpr (sizeof(DestCharT) == 2) {
 1357|       |            std::u32string tmp;
 1358|       |            transcode_to_string_impl_to32(src, tmp);
 1359|       |            return transcode_to_string_impl_32to16<false>(
 1360|       |                std::u32string_view{tmp}, dest);
 1361|       |        }
 1362|  3.04k|        else if constexpr (sizeof(DestCharT) == 4) {
 1363|  3.04k|            return transcode_to_string_impl_to32(src, dest);
 1364|  3.04k|        }
 1365|       |    }
 1366|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1367|       |        if constexpr (sizeof(DestCharT) == 1) {
 1368|       |            std::u32string tmp;
 1369|       |            transcode_to_string_impl_to32(src, tmp);
 1370|       |            return transcode_to_string_impl_32to8<false>(
 1371|       |                std::u32string_view{tmp}, dest);
 1372|       |        }
 1373|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1374|       |            return trasncode_to_string_impl_to32(src, dest);
 1375|       |        }
 1376|       |    }
 1377|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1378|       |        if constexpr (sizeof(DestCharT) == 1) {
 1379|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1380|       |        }
 1381|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1382|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1383|       |        }
 1384|       |    }
 1385|       |
 1386|  3.04k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  3.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1387|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1388|  3.04k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1245|  3.04k|{
 1246|  3.04k|    static_assert(sizeof(DestCharT) == 4);
 1247|       |
 1248|  3.04k|    auto it = src.begin();
 1249|  2.96M|    while (it != src.end()) {
  ------------------
  |  Branch (1249:12): [True: 2.96M, False: 3.04k]
  ------------------
 1250|  2.96M|        auto res = get_next_code_point(
 1251|  2.96M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1252|  2.96M|                                                                 src.end()));
 1253|  2.96M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 109k, False: 2.85M]
  |  |  ------------------
  ------------------
 1254|   109k|            dest.push_back(DestCharT{0xfffd});
 1255|   109k|        }
 1256|  2.85M|        else {
 1257|  2.85M|            dest.push_back(res.value);
 1258|  2.85M|        }
 1259|  2.96M|        it = detail::make_string_view_iterator(src, res.iterator);
 1260|  2.96M|    }
 1261|  3.04k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1169|  3.04M|{
 1170|  3.04M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  3.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1171|       |
 1172|  3.04M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1173|  3.04M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 63.7k, False: 2.98M]
  |  |  ------------------
  ------------------
 1174|  63.7k|        return {get_start_for_next_code_point(input),
 1175|  63.7k|                detail::invalid_code_point};
 1176|  63.7k|    }
 1177|  2.98M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14, False: 2.98M]
  |  |  ------------------
  ------------------
 1178|     14|        return {input.end(), detail::invalid_code_point};
 1179|     14|    }
 1180|       |
 1181|  2.98M|    return {input.begin() + len,
 1182|  2.98M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1183|  2.98M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1155|  63.7k|{
 1156|  63.7k|    auto it = input.begin();
 1157|   286k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 285k, False: 220]
  ------------------
 1158|   285k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 63.5k, False: 222k]
  ------------------
 1159|  63.5k|            break;
 1160|  63.5k|        }
 1161|   285k|    }
 1162|  63.7k|    return it;
 1163|  63.7k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.09k|    constexpr parse_error(code c) : m_code(c)
  808|  3.09k|    {
  809|  3.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.09k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.27k|    {
  823|  1.27k|        return a.m_code == b.m_code;
  824|  1.27k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|    232|    {
  827|    232|        return !(a == b);
  828|    232|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 2925|  35.5k|    {
 2926|  35.5k|        SCN_UNLIKELY_ATTR
 2927|  35.5k|        m_msg = msg;
 2928|  35.5k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 2930|  53.7k|    {
 2931|  53.7k|        return m_msg == nullptr;
 2932|  53.7k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3566|     44|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 4910|   887k|    {
 4911|   887k|        on_charset_range(cp, cp + 1);
 4912|   887k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4915|   889k|    {
 4916|   889k|        if (end <= 127) {
  ------------------
  |  Branch (4916:13): [True: 538k, False: 351k]
  ------------------
 4917|   538k|            return;
 4918|   538k|        }
 4919|       |
 4920|  72.0M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4920:25): [True: 72.0M, False: 346k]
  ------------------
 4921|       |            // TODO: check for overlap
 4922|  72.0M|            if (elem.first == end) {
  ------------------
  |  Branch (4922:17): [True: 342, False: 72.0M]
  ------------------
 4923|    342|                elem.first = begin;
 4924|    342|                return;
 4925|    342|            }
 4926|       |
 4927|  72.0M|            if (elem.second == begin) {
  ------------------
  |  Branch (4927:17): [True: 4.57k, False: 72.0M]
  ------------------
 4928|  4.57k|                elem.second = end;
 4929|  4.57k|                return;
 4930|  4.57k|            }
 4931|  72.0M|        }
 4932|       |
 4933|   346k|        extra_ranges.push_back(std::make_pair(begin, end));
 4934|   346k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 4937|     12|    {
 4938|       |        // no-op
 4939|     12|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 4952|   893k|    {
 4953|   893k|        return err;
 4954|   893k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5266|     48|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  20.4k|{
  458|  20.4k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  20.4k|        static_cast<unsigned char>(ch))];
  460|  20.4k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   628k|{
  469|   628k|    return static_cast<unsigned char>(ch) <= 127;
  470|   628k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   722k|{
  483|   722k|    return cp <= 127;
  484|   722k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  15.6k|{
  539|  15.6k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  15.6k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.42k|{
  784|  3.42k|    return e != eof_error::good;
  785|  3.42k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|    232|{
  854|    232|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 232]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|    232|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 232]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|    232|    return detail::unexpected_scan_error(code, msg);
  863|    232|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|    232|{
  868|    232|    return [code, msg](parse_error err) {
  869|    232|        assert(err != parse_error::good);
  870|    232|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|    232|    };
  872|    232|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2210|     96|{
 2211|     96|    unsigned char running_diff{0};
 2212|    336|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2212:24): [True: 240, False: 96]
  ------------------
 2213|    240|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2214|    240|    }
 2215|     96|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2215:12): [True: 0, False: 96]
  |  Branch (2215:33): [True: 0, False: 96]
  ------------------
 2216|     96|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2293|  51.8k|{
 2294|  51.8k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2294:9): [True: 5.28k, False: 46.5k]
  ------------------
 2295|  51.8k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2295:10): [True: 0, False: 5.28k]
  ------------------
 2296|  5.28k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2296:10): [True: 0, False: 5.28k]
  ------------------
 2297|  5.28k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2297:10): [True: 0, False: 5.28k]
  ------------------
 2298|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2299|  5.28k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2299:11): [True: 5.20k, False: 76]
  |  Branch (2299:27): [True: 892, False: 4.31k]
  |  Branch (2299:43): [True: 262, False: 630]
  ------------------
 2300|  5.28k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2300:11): [True: 4.31k, False: 706]
  |  Branch (2300:27): [True: 0, False: 4.31k]
  ------------------
 2301|  5.28k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2301:11): [True: 4.30k, False: 716]
  |  Branch (2301:27): [True: 0, False: 4.30k]
  ------------------
 2302|  5.28k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2302:11): [True: 4.30k, False: 716]
  |  Branch (2302:27): [True: 0, False: 4.30k]
  ------------------
 2303|  5.28k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2303:11): [True: 4.30k, False: 716]
  |  Branch (2303:27): [True: 0, False: 4.30k]
  ------------------
 2304|  5.28k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2304:11): [True: 4.30k, False: 716]
  |  Branch (2304:27): [True: 0, False: 4.30k]
  ------------------
 2305|  5.28k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2305:11): [True: 4.30k, False: 716]
  |  Branch (2305:27): [True: 0, False: 4.30k]
  ------------------
 2306|  5.28k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2306:11): [True: 4.28k, False: 736]
  |  Branch (2306:28): [True: 6, False: 4.27k]
  ------------------
 2307|  5.28k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2307:11): [True: 4.27k, False: 736]
  |  Branch (2307:28): [True: 0, False: 4.27k]
  ------------------
 2308|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2309|  5.28k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2309:11): [True: 4.27k, False: 736]
  |  Branch (2309:28): [True: 0, False: 4.27k]
  ------------------
 2310|       |         // Supplemental Symbols and Pictographs:
 2311|  5.28k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2311:11): [True: 4.27k, False: 736]
  |  Branch (2311:28): [True: 0, False: 4.27k]
  ------------------
 2312|    268|        return 2;
 2313|    268|    }
 2314|  51.5k|    return 1;
 2315|  51.8k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2318|  15.3k|{
 2319|  15.3k|    return calculate_text_width_for_fmt_v10(cp);
 2320|  15.3k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2333|     72|{
 2334|     72|    return calculate_text_width_for_fmt_v10(cp);
 2335|     72|}
_ZN3scn2v44impl11char_to_intEc:
 3119|  1.00k|{
 3120|  1.00k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3121|  1.00k|}
_ZN3scn2v44impl11char_to_intEw:
 3123|    826|{
 3124|    826|#if WCHAR_MIN < 0
 3125|    826|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3125:9): [True: 826, False: 0]
  |  Branch (3125:20): [True: 826, False: 0]
  ------------------
 3126|       |#else
 3127|       |    if (ch <= 255) {
 3128|       |#endif
 3129|    826|        return char_to_int(static_cast<char>(ch));
 3130|    826|    }
 3131|      0|    return 255;
 3132|    826|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4183|  15.5k|{
 4184|  15.5k|    std::regex_constants::syntax_option_type result{};
 4185|  15.5k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4185:9): [True: 102, False: 15.4k]
  ------------------
 4186|    102|#if SCN_HAS_STD_REGEX_MULTILINE
 4187|    102|        result |= std::regex_constants::multiline;
 4188|       |#else
 4189|       |        return detail::unexpected_scan_error(
 4190|       |            scan_error::invalid_format_string,
 4191|       |            "/m flag for regex isn't supported by regex backend");
 4192|       |#endif
 4193|    102|    }
 4194|  15.5k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4194:9): [True: 0, False: 15.5k]
  ------------------
 4195|  15.5k|        detail::regex_flags::none) {
 4196|      0|        return detail::unexpected_scan_error(
 4197|      0|            scan_error::invalid_format_string,
 4198|      0|            "/s flag for regex isn't supported by regex backend");
 4199|      0|    }
 4200|  15.5k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4200:9): [True: 3.55k, False: 11.9k]
  ------------------
 4201|  3.55k|        result |= std::regex_constants::icase;
 4202|  3.55k|    }
 4203|  15.5k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4203:9): [True: 0, False: 15.5k]
  ------------------
 4204|      0|        result |= std::regex_constants::nosubs;
 4205|      0|    }
 4206|  15.5k|    return result;
 4207|  15.5k|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4560|  2.92k|{
 4561|  2.92k|    std::string result{pattern};
 4562|  39.1k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4562:24): [True: 36.2k, False: 2.92k]
  ------------------
 4563|  36.2k|        result.replace(n, 2, "/");
 4564|  36.2k|        ++n;
 4565|  36.2k|    }
 4566|  2.92k|    return result;
 4567|  2.92k|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4569|    240|{
 4570|    240|    std::wstring result{pattern};
 4571|  4.05k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4571:24): [True: 3.81k, False: 240]
  ------------------
 4572|  3.81k|        result.replace(n, 2, L"/");
 4573|  3.81k|        ++n;
 4574|  3.81k|    }
 4575|    240|    return result;
 4576|    240|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5925|  3.05k|{
 5926|  3.05k|    if (specs.width != 0) {
  ------------------
  |  Branch (5926:9): [True: 1.03k, False: 2.01k]
  ------------------
 5927|  1.03k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5927:13): [True: 980, False: 54]
  ------------------
 5928|    980|            return detail::unexpected_scan_error(
 5929|    980|                scan_error::length_too_short,
 5930|    980|                "Scanned value too narrow, width did not exceed what "
 5931|    980|                "was specified in the format string");
 5932|    980|        }
 5933|  1.03k|    }
 5934|  2.07k|    if (specs.precision != 0) {
  ------------------
  |  Branch (5934:9): [True: 34, False: 2.03k]
  ------------------
 5935|       |        // Ensured by take_width_view
 5936|     34|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|     34|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     34|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5937|     34|                   specs.precision);
 5938|     34|    }
 5939|  2.07k|    return {};
 5940|  2.07k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.45k|    {
  304|  4.45k|        ranges::advance(x, n);
  305|  4.45k|        return x;
  306|  4.45k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.45k|    {
  268|  4.45k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.45k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  97.2k|    {
  151|  97.2k|        i += n;
  152|  97.2k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  47.0k|    {
  108|  47.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  47.0k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  47.0k|    {
   87|  47.0k|        return s - i;
   88|  47.0k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.50k|    {
  304|  1.50k|        ranges::advance(x, n);
  305|  1.50k|        return x;
  306|  1.50k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.50k|    {
  268|  1.50k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.50k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.50k|    {
  151|  1.50k|        i += n;
  152|  1.50k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.83k|    {
  108|  1.83k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.83k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.83k|    {
   87|  1.83k|        return s - i;
   88|  1.83k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2872|  98.3k|    {
 2873|  98.3k|        return m_current;
 2874|  98.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2872|   224M|    {
 2873|   224M|        return m_current;
 2874|   224M|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5541|  4.38k|    {
 5542|  4.38k|        reader_error_handler eh{};
 5543|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5544|       |            detail::check_code_point_type_specs(specs, eh);
 5545|       |        }
 5546|  4.38k|        else {
 5547|  4.38k|            detail::check_char_type_specs(specs, eh);
 5548|  4.38k|        }
 5549|  4.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  ------------------
  ------------------
 5550|  4.38k|            return detail::unexpected_scan_error(
 5551|  4.38k|                scan_error::invalid_format_string, eh.m_msg);
 5552|  4.38k|        }
 5553|      2|        return {};
 5554|  4.38k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  4.62k|    {
  763|  4.62k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.62k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.31k|        : m_fptr([](storage fn,
  743|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31k|              cvref<T> obj = *get<T>(fn);
  745|  2.31k|              if constexpr (std::is_void_v<R>) {
  746|  2.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.31k|              }
  748|  2.31k|              else {
  749|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31k|              }
  751|  2.31k|          }),
  752|  2.31k|          m_storage(std::addressof(f))
  753|  2.31k|    {
  754|  2.31k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.31k|              else {
  749|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31k|              }
  751|  2.31k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  2.31k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.31k|        else if constexpr (std::is_object_v<T>) {
  688|  2.31k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.31k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.31k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.31k|        {
  662|  2.31k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.49M|    {
  763|  1.49M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.49M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.15k|        : m_fptr([](storage fn,
  743|  4.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.15k|              cvref<T> obj = *get<T>(fn);
  745|  4.15k|              if constexpr (std::is_void_v<R>) {
  746|  4.15k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.15k|              }
  748|  4.15k|              else {
  749|  4.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.15k|              }
  751|  4.15k|          }),
  752|  4.15k|          m_storage(std::addressof(f))
  753|  4.15k|    {
  754|  4.15k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   722k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   722k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   722k|              else {
  749|   722k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   722k|              }
  751|   722k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   722k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   722k|        else if constexpr (std::is_object_v<T>) {
  688|   722k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   722k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.15k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.15k|        {
  662|  4.15k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5536|     28|    {
 5537|     28|        return false;
 5538|     28|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|    232|    return [code, msg](parse_error err) {
  869|    232|        assert(err != parse_error::good);
  870|    232|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|    232|    };
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2339|  2.92k|{
 2340|  2.92k|    size_t count{0};
 2341|  2.92k|    for_each_code_point(input, [&count](char32_t cp) {
 2342|  2.92k|        count += calculate_text_width_for_fmt_v10(cp);
 2343|  2.92k|    });
 2344|  2.92k|    return count;
 2345|  2.92k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1435|  2.92k|{
 1436|       |    // TODO: Could be optimized by being eager
 1437|  2.92k|    auto it = input.begin();
 1438|  37.9k|    while (it != input.end()) {
  ------------------
  |  Branch (1438:12): [True: 35.0k, False: 2.92k]
  ------------------
 1439|  35.0k|        auto res = get_next_code_point(
 1440|  35.0k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1441|  35.0k|        cb(res.value);
 1442|  35.0k|        it = detail::make_string_view_iterator(input, res.iterator);
 1443|  35.0k|    }
 1444|  2.92k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  36.4k|    {
  763|  36.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  36.4k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  2.92k|        : m_fptr([](storage fn,
  743|  2.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.92k|              cvref<T> obj = *get<T>(fn);
  745|  2.92k|              if constexpr (std::is_void_v<R>) {
  746|  2.92k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.92k|              }
  748|  2.92k|              else {
  749|  2.92k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.92k|              }
  751|  2.92k|          }),
  752|  2.92k|          m_storage(std::addressof(f))
  753|  2.92k|    {
  754|  2.92k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  35.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.0k|              cvref<T> obj = *get<T>(fn);
  745|  35.0k|              if constexpr (std::is_void_v<R>) {
  746|  35.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  35.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  35.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.0k|        else if constexpr (std::is_object_v<T>) {
  688|  35.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.0k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2341|  35.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2342|  35.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2343|  35.0k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  2.92k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.92k|        {
  662|  2.92k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1571|    100|    {
 1572|    100|        return m_view;
 1573|    100|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1561|    100|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2416|  43.9k|    {
 2417|  43.9k|        return *m_current;
 2418|  43.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2425|  32.2k|    {
 2426|  32.2k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2427|  32.2k|        _increment_current();
 2428|  32.2k|        return *this;
 2429|  32.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2658|  32.2k|    {
 2659|  32.2k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2659:13): [True: 10.2k, False: 22.0k]
  ------------------
 2660|  10.2k|            auto cplen = _get_cp_length_at_current();
 2661|  10.2k|            m_multibyte_left = cplen - 1;
 2662|  10.2k|            m_count -= _get_width_at_current_cp_start(cplen);
 2663|  10.2k|        }
 2664|  22.0k|        else {
 2665|  22.0k|            --m_multibyte_left;
 2666|  22.0k|        }
 2667|       |
 2668|  32.2k|        ++m_current;
 2669|  32.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2629|  10.2k|    {
 2630|  10.2k|        return static_cast<difference_type>(
 2631|  10.2k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2632|  10.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2635|  10.2k|    {
 2636|  10.2k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 90, False: 10.1k]
  |  |  ------------------
  ------------------
 2637|     90|            return 0;
 2638|     90|        }
 2639|       |
 2640|  10.1k|        if (cplen == 1) {
  ------------------
  |  Branch (2640:13): [True: 7.45k, False: 2.66k]
  ------------------
 2641|  7.45k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  7.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2642|  7.45k|            auto cp = static_cast<char32_t>(*m_current);
 2643|  7.45k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2644|  7.45k|        }
 2645|       |
 2646|  2.66k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2647|  2.66k|                                           cplen);
 2648|  2.66k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.66k]
  |  |  ------------------
  ------------------
 2649|      0|            return 0;
 2650|      0|        }
 2651|       |
 2652|  2.66k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2653|  2.66k|        return static_cast<difference_type>(
 2654|  2.66k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2655|  2.66k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1846|  2.71k|{
 1847|  2.71k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|  2.71k|    if constexpr (ranges::sized_range<Range>) {
 1850|  2.71k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|  2.71k|        if (sz < count) {
  ------------------
  |  Branch (1851:13): [True: 0, False: 2.71k]
  ------------------
 1852|      0|            return unexpected(eof_error::eof);
 1853|      0|        }
 1854|       |
 1855|  2.71k|        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|       |    else {
 1858|       |        auto it = range.begin();
 1859|       |        if (guaranteed_minimum_size(range) >= count) {
 1860|       |            return ranges::next(it, count);
 1861|       |        }
 1862|       |
 1863|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1864|       |            if (it == range.end()) {
 1865|       |                return unexpected(eof_error::eof);
 1866|       |            }
 1867|       |        }
 1868|       |
 1869|       |        return it;
 1870|       |    }
 1871|  2.71k|}
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2521|  17.1k|    {
 2522|  17.1k|        return !(a == b);
 2523|  17.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2513|  17.2k|    {
 2514|  17.2k|        return a.m_current == b.m_current;
 2515|  17.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2420|     32|    {
 2421|     32|        return *m_current;
 2422|     32|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     20|    {
  268|     20|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     20|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     20|    {
  161|     20|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     20|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 20]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|     20|        else {
  169|     20|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 20]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|     20|        }
  173|     20|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1879|  15.6k|    {
 1880|  15.6k|        return !codepoint.empty();
 1881|  15.6k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1672|     48|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|       |                  ranges::sized_range<Range>) {
 1676|       |        return string_view_wrapper{SCN_FWD(range)};
 1677|       |    }
 1678|     48|    else {
 1679|     48|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1680|     48|    }
 1681|     48|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1526|     48|    {
 1527|     48|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1528|     48|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1610|     48|    {
 1611|     48|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|     48|        else {
 1644|     48|            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|     48|            if constexpr (ranges::common_range<Range>) {
 1649|     48|                std::copy(ranges::begin(range), ranges::end(range),
 1650|     48|                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|     48|            m_view = string_view_type{str};
 1659|     48|        }
 1660|     48|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2371|    758|        : m_current(x), m_end(s), m_count(n)
 2372|    758|    {
 2373|    758|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2403|  36.5k|    {
 2404|  36.5k|        return m_current;
 2405|  36.5k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2822|    926|    {
 2823|    926|        return take_width_view{r, n};
 2824|    926|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2790|    926|        : m_base(base), m_count(count)
 2791|    926|    {
 2792|    926|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2704|    926|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5581|      2|    {
 5582|      2|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5582:13): [True: 2, False: 0]
  ------------------
 5583|      2|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5583:13): [True: 0, False: 0]
  ------------------
 5584|      2|            return read_default(range, value, loc);
 5585|      2|        }
 5586|       |
 5587|      0|        reader_impl_for_int<CharT> reader{};
 5588|      0|        signed char tmp_value{};
 5589|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5590|      0|        value = static_cast<signed char>(value);
 5591|      0|        return ret;
 5592|      2|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5563|      2|    {
 5564|      2|        SCN_UNUSED(loc);
  ------------------
  |  |  915|      2|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5565|      2|        if constexpr (std::is_same_v<CharT, char>) {
 5566|      2|            return code_unit_reader<char>{}.read(range, value);
 5567|       |        }
 5568|       |        else {
 5569|       |            SCN_UNUSED(range);
 5570|       |            SCN_EXPECT(false);
 5571|       |            SCN_UNREACHABLE;
 5572|       |        }
 5573|      2|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5481|      2|    {
 5482|      2|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5483|      2|        ch = *range.begin();
 5484|      2|        return it;
 5485|      2|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1835|     14|{
 1836|     14|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 1837|      0|        return unexpected(e);
 1838|      0|    }
 1839|       |
 1840|     14|    return ranges::next(range.begin());
 1841|     14|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|     14|{
  951|     14|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     14|    return eof_error::good;
  955|     14|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|     14|{
  945|     14|    return is_range_eof(r.begin(), r.end());
  946|     14|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  15.6k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  15.6k|    {
  938|  15.6k|        return begin == end;
  939|  15.6k|    }
  940|  15.6k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2760|  36.0k|        {
 2761|  36.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2761:21): [True: 0, False: 36.0k]
  |  Branch (2761:39): [True: 0, False: 0]
  ------------------
 2762|  36.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2762:20): [True: 90, False: 35.9k]
  ------------------
 2763|  36.0k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2806|  30.0k|    {
 2807|  30.0k|        return sentinel<true>{m_base.get().end()};
 2808|  30.0k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2707|  31.5k|    {
 2708|  31.5k|        return view;
 2709|  31.5k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2741|  30.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  30.0k|    static_cast<    \
  |  |  935|  30.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|     14|    {
  296|     14|        ++x;
  297|     14|        return x;
  298|     14|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2800|    758|    {
 2801|    758|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2802|    758|                                      m_count};
 2803|    758|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3256|      6|{
 3257|      6|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|      6|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|      6|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|      6|        parse_integer_base_prefix(
 3262|      6|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|      6|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 0, False: 6]
  ------------------
 3265|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 0, False: 0]
  |  Branch (3265:13): [True: 0, False: 0]
  ------------------
 3266|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 0, False: 0]
  ------------------
 3267|      0|            digits_begin_it = base_prefix_begin_it;
 3268|      0|        }
 3269|      0|        else {
 3270|      0|            parsed_zero = false;
 3271|      0|        }
 3272|      0|    }
 3273|      6|    else {
 3274|      6|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 0, False: 6]
  |  Branch (3274:13): [True: 6, False: 0]
  ------------------
 3275|      6|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 6, False: 0]
  ------------------
 3276|      6|            digits_begin_it = base_prefix_begin_it;
 3277|      6|        }
 3278|      6|    }
 3279|       |
 3280|      6|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 6, False: 0]
  ------------------
 3281|      6|        sign = sign_type::plus_sign;
 3282|      6|    }
 3283|      6|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|      6|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|      6|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3137|      8|{
 3138|      8|    auto r = read_one_of_code_unit(range, "+-");
 3139|      8|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 8, False: 0]
  ------------------
 3140|      8|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 8, False: 0]
  ------------------
 3141|      8|            return std::pair{range.begin(), sign_type::default_sign};
 3142|      8|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|      8|    }
 3145|       |
 3146|      0|    auto& it = *r;
 3147|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 0, False: 0]
  ------------------
 3148|      0|        return std::pair{it, sign_type::minus_sign};
 3149|      0|    }
 3150|      0|    return std::pair{it, sign_type::plus_sign};
 3151|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2262|      8|{
 2263|      8|    auto it = read_code_unit(range);
 2264|      8|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|     16|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 16, False: 8]
  ------------------
 2269|     16|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 0, False: 16]
  ------------------
 2270|      0|            return *it;
 2271|      0|        }
 2272|     16|    }
 2273|       |
 2274|      8|    return unexpected(parse_error::error);
 2275|      8|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3223|      6|{
 3224|      6|    switch (base) {
 3225|      0|        case 2:
  ------------------
  |  Branch (3225:9): [True: 0, False: 6]
  ------------------
 3226|       |            // allow 0b/0B
 3227|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|      0|                    false};
 3229|       |
 3230|      0|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 0, False: 6]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|      0|            bool zero_parsed = false;
 3233|      0|            auto it = apply_opt(
 3234|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|      0|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|      2|        case 16:
  ------------------
  |  Branch (3238:9): [True: 2, False: 4]
  ------------------
 3239|       |            // allow 0x/0X
 3240|      2|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|      2|                    false};
 3242|       |
 3243|      0|        case 0:
  ------------------
  |  Branch (3243:9): [True: 0, False: 6]
  ------------------
 3244|       |            // detect base
 3245|      0|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|      4|        default:
  ------------------
  |  Branch (3247:9): [True: 4, False: 2]
  ------------------
 3248|       |            // no base prefix allowed
 3249|      4|            return {range.begin(), base, false};
 3250|      6|    }
 3251|      6|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2281|      2|{
 2282|      2|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 2, False: 0]
  ------------------
 2283|      2|        return range.begin();
 2284|      2|    }
 2285|      0|    return *result;
 2286|      2|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2221|      8|{
 2222|      8|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|      8|    else {
 2235|      8|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|      8|            if (ch < 'A' || ch > 'Z') {
 2237|      8|                return ch;
 2238|      8|            }
 2239|      8|            return static_cast<char_type>(ch +
 2240|      8|                                          static_cast<char_type>('a' - 'A'));
 2241|      8|        };
 2242|       |
 2243|      8|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|      8|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|      8|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|      8|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2248|      8|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|      8|                    return ascii_tolower(a) ==
 2250|      8|                           static_cast<detail::char_t<Range>>(b);
 2251|      8|                }))) {
 2252|      8|            return unexpected(parse_error::error);
 2253|      8|        }
 2254|       |
 2255|      0|        return it;
 2256|      8|    }
 2257|      8|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1846|      8|{
 1847|      8|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|      8|    else {
 1858|      8|        auto it = range.begin();
 1859|      8|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 0, False: 8]
  ------------------
 1860|      0|            return ranges::next(it, count);
 1861|      0|        }
 1862|       |
 1863|     28|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 20, False: 8]
  ------------------
 1864|     20|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 0, False: 20]
  ------------------
 1865|      0|                return unexpected(eof_error::eof);
 1866|      0|            }
 1867|     20|        }
 1868|       |
 1869|      8|        return it;
 1870|      8|    }
 1871|      8|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|      8|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|      8|    else {
 1116|      8|        return 0;
 1117|      8|    }
 1118|      8|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2235|      8|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|      8|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 0, False: 8]
  |  Branch (2236:29): [True: 8, False: 0]
  ------------------
 2237|      8|                return ch;
 2238|      8|            }
 2239|      0|            return static_cast<char_type>(ch +
 2240|      0|                                          static_cast<char_type>('a' - 'A'));
 2241|      8|        };
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  15.6k|{
  945|  15.6k|    return is_range_eof(r.begin(), r.end());
  946|  15.6k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3181|      2|{
 3182|      2|    return read_matching_string_classic_nocase(range, "0x");
 3183|      2|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3290|      6|{
 3291|      6|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|       |    if constexpr (ranges::contiguous_range<Range>) {
 3294|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3295|       |            return detail::unexpected_scan_error(
 3296|       |                scan_error::invalid_scanned_value,
 3297|       |                "Failed to parse integer: No digits found");
 3298|       |        }
 3299|       |        return range.end();
 3300|       |    }
 3301|      6|    else {
 3302|      6|        return read_while1_code_unit(range,
 3303|      6|                                     [&](char_type ch) noexcept {
 3304|      6|                                         return char_to_int(ch) < base;
 3305|      6|                                     })
 3306|      6|            .transform_error(map_parse_error_to_scan_error(
 3307|      6|                scan_error::invalid_scanned_value,
 3308|      6|                "Failed to parse integer: No digits found"));
 3309|      6|    }
 3310|      6|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1985|      8|{
 1986|      8|    auto it = read_while_code_unit(range, pred);
 1987|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 8, False: 0]
  ------------------
 1988|      8|        return unexpected(parse_error::error);
 1989|      8|    }
 1990|      0|    return it;
 1991|      8|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1965|      8|{
 1966|      8|    return read_until_code_unit(range, std::not_fn(pred));
 1967|      8|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1946|      8|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|      8|    else {
 1951|      8|        auto first = range.begin();
 1952|      8|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 8, False: 0]
  ------------------
 1953|      8|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 8, False: 0]
  ------------------
 1954|      8|                return first;
 1955|      8|            }
 1956|      8|        }
 1957|      0|        return first;
 1958|      8|    }
 1959|      8|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2771|  20.2k|        {
 2772|  20.2k|            return !(y == x);
 2773|  20.2k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3303|      6|                                     [&](char_type ch) noexcept {
 3304|      6|                                         return char_to_int(ch) < base;
 3305|      6|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2407|  36.0k|    {
 2408|  36.0k|        return m_count;
 2409|  36.0k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5563|     24|    {
 5564|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5565|     24|        if constexpr (std::is_same_v<CharT, char>) {
 5566|     24|            return code_unit_reader<char>{}.read(range, value);
 5567|       |        }
 5568|       |        else {
 5569|       |            SCN_UNUSED(range);
 5570|       |            SCN_EXPECT(false);
 5571|       |            SCN_UNREACHABLE;
 5572|       |        }
 5573|     24|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5481|     24|    {
 5482|     24|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5483|     24|        ch = *range.begin();
 5484|     24|        return it;
 5485|     24|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1835|    168|{
 1836|    168|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 168]
  |  |  ------------------
  ------------------
 1837|      0|        return unexpected(e);
 1838|      0|    }
 1839|       |
 1840|    168|    return ranges::next(range.begin());
 1841|    168|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|    648|{
  951|    648|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 648]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    648|    return eof_error::good;
  955|    648|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   708k|{
  945|   708k|    return is_range_eof(r.begin(), r.end());
  946|   708k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   712k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   712k|    {
  938|   712k|        return begin == end;
  939|   712k|    }
  940|   712k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.85k|    {
  296|  1.85k|        ++x;
  297|  1.85k|        return x;
  298|  1.85k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3256|     72|{
 3257|     72|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|     72|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|     72|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|     72|        parse_integer_base_prefix(
 3262|     72|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|     72|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 0, False: 72]
  ------------------
 3265|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 0, False: 0]
  ------------------
 3266|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 0, False: 0]
  ------------------
 3267|      0|            digits_begin_it = base_prefix_begin_it;
 3268|      0|        }
 3269|      0|        else {
 3270|      0|            parsed_zero = false;
 3271|      0|        }
 3272|      0|    }
 3273|     72|    else {
 3274|     72|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 0, False: 72]
  ------------------
 3275|     72|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 72, False: 0]
  ------------------
 3276|     72|            digits_begin_it = base_prefix_begin_it;
 3277|     72|        }
 3278|     72|    }
 3279|       |
 3280|     72|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 72, False: 0]
  ------------------
 3281|     72|        sign = sign_type::plus_sign;
 3282|     72|    }
 3283|     72|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|     72|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|     72|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3137|     96|{
 3138|     96|    auto r = read_one_of_code_unit(range, "+-");
 3139|     96|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 96, False: 0]
  ------------------
 3140|     96|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 96, False: 0]
  ------------------
 3141|     96|            return std::pair{range.begin(), sign_type::default_sign};
 3142|     96|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|     96|    }
 3145|       |
 3146|      0|    auto& it = *r;
 3147|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 0, False: 0]
  ------------------
 3148|      0|        return std::pair{it, sign_type::minus_sign};
 3149|      0|    }
 3150|      0|    return std::pair{it, sign_type::plus_sign};
 3151|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2262|     96|{
 2263|     96|    auto it = read_code_unit(range);
 2264|     96|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|    192|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 192, False: 96]
  ------------------
 2269|    192|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 0, False: 192]
  ------------------
 2270|      0|            return *it;
 2271|      0|        }
 2272|    192|    }
 2273|       |
 2274|     96|    return unexpected(parse_error::error);
 2275|     96|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3223|     72|{
 3224|     72|    switch (base) {
 3225|      0|        case 2:
  ------------------
  |  Branch (3225:9): [True: 0, False: 72]
  ------------------
 3226|       |            // allow 0b/0B
 3227|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|      0|                    false};
 3229|       |
 3230|      0|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 0, False: 72]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|      0|            bool zero_parsed = false;
 3233|      0|            auto it = apply_opt(
 3234|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|      0|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|     24|        case 16:
  ------------------
  |  Branch (3238:9): [True: 24, False: 48]
  ------------------
 3239|       |            // allow 0x/0X
 3240|     24|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|     24|                    false};
 3242|       |
 3243|      0|        case 0:
  ------------------
  |  Branch (3243:9): [True: 0, False: 72]
  ------------------
 3244|       |            // detect base
 3245|      0|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|     48|        default:
  ------------------
  |  Branch (3247:9): [True: 48, False: 24]
  ------------------
 3248|       |            // no base prefix allowed
 3249|     48|            return {range.begin(), base, false};
 3250|     72|    }
 3251|     72|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2281|     24|{
 2282|     24|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 24, False: 0]
  ------------------
 2283|     24|        return range.begin();
 2284|     24|    }
 2285|      0|    return *result;
 2286|     24|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2221|     96|{
 2222|     96|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|     96|                  std::is_same_v<char_type, char>) {
 2226|     96|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2226:13): [True: 0, False: 96]
  ------------------
 2227|      0|            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|      0|        }
 2229|     96|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2229:13): [True: 96, False: 0]
  ------------------
 2230|     96|            return unexpected(parse_error::error);
 2231|     96|        }
 2232|      0|        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|       |    else {
 2235|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|       |            if (ch < 'A' || ch > 'Z') {
 2237|       |                return ch;
 2238|       |            }
 2239|       |            return static_cast<char_type>(ch +
 2240|       |                                          static_cast<char_type>('a' - 'A'));
 2241|       |        };
 2242|       |
 2243|       |        SCN_TRY(it, read_exactly_n_code_units(
 2244|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|       |                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|       |        if (SCN_UNLIKELY(!std::equal(
 2248|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|       |                    return ascii_tolower(a) ==
 2250|       |                           static_cast<detail::char_t<Range>>(b);
 2251|       |                }))) {
 2252|       |            return unexpected(parse_error::error);
 2253|       |        }
 2254|       |
 2255|       |        return it;
 2256|       |    }
 2257|     96|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2136|     48|{
 2137|     48|    auto it = read_code_unit(range);
 2138|     48|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  ------------------
  ------------------
 2139|      0|        return unexpected(make_eof_parse_error(it.error()));
 2140|      0|    }
 2141|       |
 2142|     48|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 48, False: 0]
  |  |  ------------------
  ------------------
 2143|     48|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|     48|        return unexpected(parse_error::error);
 2145|     48|    }
 2146|       |
 2147|      0|    return *it;
 2148|     48|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3181|     24|{
 3182|     24|    return read_matching_string_classic_nocase(range, "0x");
 3183|     24|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3290|     72|{
 3291|     72|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|     72|    if constexpr (ranges::contiguous_range<Range>) {
 3294|     72|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 3295|      0|            return detail::unexpected_scan_error(
 3296|      0|                scan_error::invalid_scanned_value,
 3297|      0|                "Failed to parse integer: No digits found");
 3298|      0|        }
 3299|     72|        return range.end();
 3300|       |    }
 3301|       |    else {
 3302|       |        return read_while1_code_unit(range,
 3303|       |                                     [&](char_type ch) noexcept {
 3304|       |                                         return char_to_int(ch) < base;
 3305|       |                                     })
 3306|       |            .transform_error(map_parse_error_to_scan_error(
 3307|       |                scan_error::invalid_scanned_value,
 3308|       |                "Failed to parse integer: No digits found"));
 3309|       |    }
 3310|     72|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|  2.59k|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  2.59k|                  ranges::sized_range<Range>) {
 1676|  2.59k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  2.59k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1478|  2.59k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  2.59k|    {
 1480|  2.59k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1492|  6.83k|    {
 1493|  6.83k|        return sv;
 1494|  6.83k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5868|  2.25k|{
 5869|  2.25k|    using char_type = detail::char_t<Range>;
 5870|  2.25k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5871|       |
 5872|  2.25k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5872:9): [True: 2.25k, False: 0]
  ------------------
 5873|  2.25k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5874|  2.25k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5875|       |
 5876|  2.25k|        if (max_width == 0) {
  ------------------
  |  Branch (5876:13): [True: 2.25k, False: 0]
  ------------------
 5877|  2.25k|            auto it = read_while_code_unit(range, pred);
 5878|       |
 5879|  2.25k|            if (want_skipped_width) {
  ------------------
  |  Branch (5879:17): [True: 72, False: 2.18k]
  ------------------
 5880|     72|                auto prefix_width =
 5881|     72|                    static_cast<std::ptrdiff_t>(
 5882|     72|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5883|     72|                    ranges::distance(range.begin(), it);
 5884|     72|                return result_type{it, prefix_width};
 5885|     72|            }
 5886|  2.18k|            return result_type{it, 0};
 5887|  2.25k|        }
 5888|       |
 5889|      0|        auto max_width_view = take_width(range, max_width);
 5890|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 5891|       |
 5892|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5892:13): [True: 0, False: 0]
  ------------------
 5893|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 5894|      0|        }
 5895|      0|        return result_type{w_it.base(), 0};
 5896|      0|    }
 5897|       |
 5898|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5899|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5899:9): [True: 0, False: 0]
  ------------------
 5900|      0|        auto it = read_while_code_units(range, fill_chars);
 5901|       |
 5902|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5902:13): [True: 0, False: 0]
  ------------------
 5903|      0|            auto prefix_width =
 5904|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5905|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5906|      0|            return result_type{it, prefix_width};
 5907|      0|        }
 5908|      0|        return result_type{it, 0};
 5909|      0|    }
 5910|       |
 5911|      0|    auto max_width_view = take_width(range, max_width);
 5912|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5913|       |
 5914|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5914:9): [True: 0, False: 0]
  ------------------
 5915|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5916|      0|    }
 5917|      0|    return result_type{w_it.base(), 0};
 5918|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1965|  2.25k|{
 1966|  2.25k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  2.25k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1946|  2.25k|{
 1947|  2.25k|    if constexpr (ranges::common_range<Range>) {
 1948|  2.25k|        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|       |    else {
 1951|       |        auto first = range.begin();
 1952|       |        for (; first != range.end(); ++first) {
 1953|       |            if (pred(*first)) {
 1954|       |                return first;
 1955|       |            }
 1956|       |        }
 1957|       |        return first;
 1958|       |    }
 1959|  2.25k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  2.25k|        : m_fptr([](storage fn,
  743|  2.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.25k|              cvref<T> obj = *get<T>(fn);
  745|  2.25k|              if constexpr (std::is_void_v<R>) {
  746|  2.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.25k|              }
  748|  2.25k|              else {
  749|  2.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.25k|              }
  751|  2.25k|          }),
  752|  2.25k|          m_storage(std::addressof(f))
  753|  2.25k|    {
  754|  2.25k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.25k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.25k|              else {
  749|  2.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.25k|              }
  751|  2.25k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.25k|    {
  684|  2.25k|        if constexpr (std::is_const_v<T>) {
  685|  2.25k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.25k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5874|  2.25k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  2.25k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.25k|        {
  667|  2.25k|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2945|     14|{
 2946|     14|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 0, False: 14]
  ------------------
 2947|      0|        auto it = read_while_classic_space(range);
 2948|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2950|      0|            return unexpected(e);
 2951|      0|        }
 2952|       |
 2953|      0|        return it;
 2954|      0|    }
 2955|       |
 2956|     14|    return read_while_classic_space(range);
 2957|     14|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2106|     14|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|     14|    else {
 2116|     14|        auto it = range.begin();
 2117|       |
 2118|     14|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|     14|            auto seg = get_contiguous_beginning(range);
 2120|     14|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|     14|                seg_it != seg.end()) {
  ------------------
  |  Branch (2121:17): [True: 0, False: 14]
  ------------------
 2122|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|      0|            }
 2124|     14|            ranges::advance(it, seg.size());
 2125|     14|        }
 2126|       |
 2127|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|     14|            return detail::is_cp_space(cp);
 2129|     14|        });
 2130|     14|    }
 2131|     14|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|     20|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|     20|    else {
 1059|     20|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|     20|    }
 1061|     20|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2071|     74|{
 2072|     74|    return read_until_code_point(range, std::not_fn(pred));
 2073|     74|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2050|     74|{
 2051|     74|    auto it = range.begin();
 2052|  14.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 14.8k, False: 42]
  ------------------
 2053|  14.8k|        const auto val =
 2054|  14.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  14.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  14.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12.8k, False: 2.06k]
  |  |  ------------------
  ------------------
 2056|  12.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  12.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  12.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 32, False: 12.7k]
  ------------------
 2059|     32|                return it;
 2060|     32|            }
 2061|  12.8k|        }
 2062|  14.8k|        it = val.iterator;
 2063|  14.8k|    }
 2064|       |
 2065|     42|    return it;
 2066|     74|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1888|  15.6k|{
 1889|  15.6k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  15.6k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  15.6k|    auto it = range.begin();
 1893|  15.6k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  15.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 13.3k]
  |  |  ------------------
  ------------------
 1896|  2.24k|        ++it;
 1897|  2.24k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|  2.24k|        return {it, {}};
 1899|  2.24k|    }
 1900|       |
 1901|  13.3k|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 12.4k, False: 972]
  ------------------
 1902|  12.4k|        ++it;
 1903|  12.4k|        return {it, string_type(1, *range.begin())};
 1904|  12.4k|    }
 1905|       |
 1906|    972|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|    972|    return {it, string_type{range.begin(), it}};
 1908|  13.3k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1155|  2.24k|{
 1156|  2.24k|    auto it = input.begin();
 1157|  2.64k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 2.59k, False: 42]
  ------------------
 1158|  2.59k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 2.20k, False: 396]
  ------------------
 1159|  2.20k|            break;
 1160|  2.20k|        }
 1161|  2.59k|    }
 1162|  2.24k|    return it;
 1163|  2.24k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|    972|    {
  283|    972|        return n - fn::impl_i_n_s(i, n, bound);
  284|    972|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|    972|    {
  227|    972|        constexpr iter_difference_t<I> zero{0};
  228|    972|        iter_difference_t<I> counter{0};
  229|       |
  230|    972|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 972]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    972|        else {
  237|  2.91k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 1.94k, False: 966]
  |  Branch (237:34): [True: 1.93k, False: 6]
  ------------------
  238|  1.93k|                ++i;
  239|  1.93k|                ++counter;
  240|  1.93k|            }
  241|    972|        }
  242|       |
  243|    972|        return counter;
  244|    972|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|     14|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     14|        else if constexpr (std::is_object_v<T>) {
  688|     14|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     14|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2127|     14|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|     14|            return detail::is_cp_space(cp);
 2129|     14|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|    264|{
 2946|    264|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 192, False: 72]
  ------------------
 2947|    192|        auto it = read_while_classic_space(range);
 2948|    192|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|    192|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 192]
  |  |  ------------------
  ------------------
 2950|      0|            return unexpected(e);
 2951|      0|        }
 2952|       |
 2953|    192|        return it;
 2954|    192|    }
 2955|       |
 2956|     72|    return read_while_classic_space(range);
 2957|    264|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|    792|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|    792|                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|    792|        auto buf = make_contiguous_buffer(range);
 2111|    792|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|    792|        return ranges::next(range.begin(),
 2113|    792|                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|       |    else {
 2116|       |        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|       |            return detail::is_cp_space(cp);
 2129|       |        });
 2130|       |    }
 2131|    792|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|    864|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|    864|                  ranges::sized_range<Range>) {
 1676|    864|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|    864|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|    864|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1478|    864|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|    864|    {
 1480|    864|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|  8.76k|    {
 3036|  8.76k|        reader_error_handler eh{};
 3037|  8.76k|        get_derived().check_specs_impl(specs, eh);
 3038|  8.76k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  8.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.76k, False: 4]
  |  |  ------------------
  ------------------
 3039|  8.76k|            return detail::unexpected_scan_error(
 3040|  8.76k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  8.76k|        }
 3042|      4|        return {};
 3043|  8.76k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3047|  8.76k|    {
 3048|  8.76k|        return static_cast<Derived&>(*this);
 3049|  8.76k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3415|  8.76k|    {
 3416|  8.76k|        detail::check_int_type_specs(specs, eh);
 3417|  8.76k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3030|     52|    {
 3031|     52|        return true;
 3032|     52|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3469|      2|    {
 3470|      2|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|      2|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|      2|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 2]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|      0|            else {
 3481|      0|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 0]
  ------------------
 3482|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|      0|            }
 3488|      0|        }
 3489|       |
 3490|      2|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 2]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|      2|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3496|      2|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|      0|                    parse_integer_digits_without_thsep(
 3498|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|      0|                        prefix_result.parsed_base));
 3500|       |
 3501|      0|            auto buf = make_contiguous_buffer(
 3502|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|      0|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3469|      2|    {
 3470|      2|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|      2|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|      2|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 2]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|      2|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 2]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|      2|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3496|      2|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|      0|                    parse_integer_digits_without_thsep(
 3498|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|      0|                        prefix_result.parsed_base));
 3500|       |
 3501|      0|            auto buf = make_contiguous_buffer(
 3502|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|      0|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3469|      2|    {
 3470|      2|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|      2|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|      2|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 2]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|      2|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 2]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|      2|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3496|      2|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|      0|                    parse_integer_digits_without_thsep(
 3498|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|      0|                        prefix_result.parsed_base));
 3500|       |
 3501|      0|            auto buf = make_contiguous_buffer(
 3502|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|      0|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|     24|    {
 3470|     24|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     24|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     24|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 24]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|     24|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 24]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     24|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     24|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3496|     24|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|     24|                    parse_integer_digits_without_thsep(
 3498|     24|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|     24|                        prefix_result.parsed_base));
 3500|       |
 3501|     24|            auto buf = make_contiguous_buffer(
 3502|     24|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|     24|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|     24|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|  4.38k|    {
 3036|  4.38k|        reader_error_handler eh{};
 3037|  4.38k|        get_derived().check_specs_impl(specs, eh);
 3038|  4.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  ------------------
  ------------------
 3039|  4.38k|            return detail::unexpected_scan_error(
 3040|  4.38k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  4.38k|        }
 3042|      2|        return {};
 3043|  4.38k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3047|  4.38k|    {
 3048|  4.38k|        return static_cast<Derived&>(*this);
 3049|  4.38k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4057|  4.38k|    {
 4058|  4.38k|        detail::check_float_type_specs(specs, eh);
 4059|  4.38k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3030|     26|    {
 3031|     26|        return true;
 3032|     26|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4129|      2|    {
 4130|      2|        unsigned options{};
 4131|      2|        if (specs.localized) {
  ------------------
  |  Branch (4131:13): [True: 0, False: 2]
  ------------------
 4132|      0|            options |= float_reader_base::allow_thsep;
 4133|      0|        }
 4134|       |
 4135|      2|        SCN_GCC_COMPAT_PUSH
 4136|      2|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4137|       |
 4138|      2|        switch (specs.type) {
 4139|      0|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4139:13): [True: 0, False: 2]
  ------------------
 4140|      0|                return options | float_reader_base::allow_fixed;
 4141|       |
 4142|      0|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4142:13): [True: 0, False: 2]
  ------------------
 4143|      0|                return options | float_reader_base::allow_scientific;
 4144|       |
 4145|      0|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4145:13): [True: 0, False: 2]
  ------------------
 4146|      0|                return options | float_reader_base::allow_hex;
 4147|       |
 4148|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4148:13): [True: 0, False: 2]
  ------------------
 4149|      0|                return options | float_reader_base::allow_scientific |
 4150|      0|                       float_reader_base::allow_fixed;
 4151|       |
 4152|      2|            case detail::presentation_type::none:
  ------------------
  |  Branch (4152:13): [True: 2, False: 0]
  ------------------
 4153|      2|                return options | float_reader_base::allow_scientific |
 4154|      2|                       float_reader_base::allow_fixed |
 4155|      2|                       float_reader_base::allow_hex;
 4156|       |
 4157|      0|            default:
  ------------------
  |  Branch (4157:13): [True: 0, False: 2]
  ------------------
 4158|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4159|      2|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4160|      2|        }
 4161|       |
 4162|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4163|      2|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3581|      2|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1760|     26|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1521|     52|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 3969|     24|    {
 3970|     24|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (3970:13): [True: 24, False: 0]
  ------------------
 3971|     24|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (3971:13): [True: 24, False: 0]
  ------------------
 3972|     24|            return;
 3973|     24|        }
 3974|       |
 3975|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 3976|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (3976:13): [True: 0, False: 0]
  ------------------
 3977|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (3977:27): [True: 0, False: 0]
  ------------------
 3978|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (3978:21): [True: 0, False: 0]
  ------------------
 3979|      0|                    ch = CharT{'.'};
 3980|      0|                }
 3981|      0|            }
 3982|      0|        }
 3983|       |
 3984|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 0]
  ------------------
 3985|      0|            return;
 3986|      0|        }
 3987|       |
 3988|      0|        auto first =
 3989|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 3990|      0|        if (first == str.end()) {
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|      0|            return;
 3992|      0|        }
 3993|       |
 3994|      0|        m_thsep_indices.push_back(
 3995|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 3996|       |
 3997|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (3997:31): [True: 0, False: 0]
  ------------------
 3998|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (3998:17): [True: 0, False: 0]
  ------------------
 3999|      0|                *first++ = std::move(*it);
 4000|      0|            }
 4001|      0|            else {
 4002|      0|                m_thsep_indices.push_back(
 4003|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4004|      0|            }
 4005|      0|        }
 4006|       |
 4007|      0|        str.erase(first, str.end());
 4008|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1576|      8|    {
 1577|      8|        return m_storage.has_value();
 1578|      8|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1581|      4|    {
 1582|      4|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1583|      4|        return *m_storage;
 1584|      4|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|      2|    {
  763|      2|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|      2|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3626|      2|    {
 3627|      2|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|      2|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|      2|        auto it = sign_result.first;
 3630|      2|        m_sign = sign_result.second;
 3631|       |
 3632|      2|        auto digits_begin = it;
 3633|      2|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|       |                      ranges::sized_range<Range>) {
 3636|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3637|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|       |                SCN_TRY_ASSIGN(
 3639|       |                    it,
 3640|       |                    do_read_source_impl(
 3641|       |                        r,
 3642|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|       |            }
 3645|       |            else {
 3646|       |                auto cb = [&](const auto& rr)
 3647|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|       |                    auto res = read_all(rr);
 3649|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|       |                        return detail::unexpected_scan_error(
 3651|       |                            scan_error::invalid_scanned_value,
 3652|       |                            "Invalid float value");
 3653|       |                    }
 3654|       |                    return res;
 3655|       |                };
 3656|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3657|       |            }
 3658|       |        }
 3659|      2|        else {
 3660|      2|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      2|    }                                                  \
  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3661|      0|                it,
 3662|      0|                do_read_source_impl(
 3663|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|      0|        }
 3666|       |
 3667|      2|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 0, False: 0]
  |  Branch (3669:48): [True: 0, False: 0]
  ------------------
 3670|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 0, False: 0]
  ------------------
 3671|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 0, False: 0]
  ------------------
 3672|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|      0|        }
 3674|       |
 3675|      0|        handle_separators();
 3676|       |
 3677|      0|        return it;
 3678|      2|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3912|      2|    {
 3913|      2|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|      2|        const bool allowed_nonhex =
 3915|      2|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|      2|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|      2|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 2, False: 0]
  |  Branch (3918:45): [True: 0, False: 2]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|      2|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 0, False: 2]
  ------------------
 3924|      0|            return *r;
 3925|      0|        }
 3926|       |
 3927|      2|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 2, False: 0]
  |  Branch (3927:45): [True: 0, False: 2]
  ------------------
 3928|      0|            return unexpected(r.error());
 3929|      0|        }
 3930|      2|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 0, False: 2]
  ------------------
 3931|      0|            return *r;
 3932|      0|        }
 3933|       |
 3934|      2|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 2, False: 0]
  |  Branch (3934:28): [True: 0, False: 2]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|      0|            auto it = range.begin();
 3938|       |
 3939|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 0, False: 0]
  ------------------
 3940|      0|                m_kind = float_kind::hex_with_prefix;
 3941|      0|                it = *r;
 3942|      0|            }
 3943|      0|            else {
 3944|      0|                m_kind = float_kind::hex_without_prefix;
 3945|      0|            }
 3946|       |
 3947|      0|            return read_hex(ranges::subrange{it, range.end()});
 3948|      0|        }
 3949|      2|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 0, False: 2]
  |  Branch (3949:29): [True: 0, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|      0|            m_kind = float_kind::generic;
 3953|      0|            return read_regular_float(range);
 3954|      0|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|      2|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 3960|      0|            m_kind = float_kind::hex_with_prefix;
 3961|      0|            return read_hex(ranges::subrange{*r, range.end()});
 3962|      0|        }
 3963|       |
 3964|      2|        m_kind = float_kind::generic;
 3965|      2|        return read_regular(range);
 3966|      2|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3720|      2|    {
 3721|      2|        auto it = range.begin();
 3722|      2|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 2, False: 0]
  ------------------
 3723|      2|            return unexpected(r.error());
 3724|      2|        }
 3725|      0|        else {
 3726|      0|            it = *r;
 3727|      0|        }
 3728|       |
 3729|      0|        if (auto r = read_matching_string_classic_nocase(
 3730|      0|                ranges::subrange{it, range.end()}, "inity");
 3731|      0|            !r) {
  ------------------
  |  Branch (3731:13): [True: 0, False: 0]
  ------------------
 3732|      0|            m_kind = float_kind::inf_short;
 3733|      0|            return it;
 3734|      0|        }
 3735|      0|        else {
 3736|      0|            m_kind = float_kind::inf_long;
 3737|      0|            return *r;
 3738|      0|        }
 3739|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3743|      2|    {
 3744|      2|        auto it = range.begin();
 3745|      2|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 2, False: 0]
  ------------------
 3746|      2|            return r.transform_error(map_parse_error_to_scan_error(
 3747|      2|                scan_error::invalid_scanned_value,
 3748|      2|                "Invalid floating-point NaN value"));
 3749|      2|        }
 3750|      0|        else {
 3751|      0|            it = *r;
 3752|      0|        }
 3753|       |
 3754|      0|        if (auto r =
 3755|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|      0|            !r) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            m_kind = float_kind::nan_simple;
 3758|      0|            return it;
 3759|      0|        }
 3760|      0|        else {
 3761|      0|            it = *r;
 3762|      0|        }
 3763|       |
 3764|      0|        auto payload_beg_it = it;
 3765|      0|        it = read_while_code_unit(
 3766|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|      0|                return is_ascii_char(ch) &&
 3768|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|      0|            });
 3771|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|      0|        m_kind = float_kind::nan_with_payload;
 3774|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 0, False: 0]
  ------------------
 3775|      0|                                             ')')) {
 3776|      0|            return *r;
 3777|      0|        }
 3778|      0|        return detail::unexpected_scan_error(
 3779|      0|            scan_error::invalid_scanned_value,
 3780|      0|            "Invalid floating-point NaN payload");
 3781|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3713|      2|    {
 3714|      2|        return read_matching_string_classic_nocase(range, "0x");
 3715|      2|    }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3855|      2|    {
 3856|      2|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3857|      2|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3857:35): [True: 2, False: 0]
  |  Branch (3857:50): [True: 0, False: 2]
  ------------------
 3858|       |
 3859|      2|        auto it = ranges::begin(range);
 3860|      2|        std::ptrdiff_t digits_count = 0;
 3861|       |
 3862|      2|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3863|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3864|      2|            return r.transform_error(
 3865|      2|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3866|      2|                                              "Invalid floating-point value"));
 3867|      2|        }
 3868|      0|        else {
 3869|      0|            digits_count += ranges::distance(it, *r);
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        m_integral_part_length = digits_count;
 3874|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3874:18): [True: 0, False: 0]
  ------------------
 3875|      0|                                             m_locale_options.decimal_point)) {
 3876|      0|            it = *r;
 3877|      0|        }
 3878|       |
 3879|      0|        if (auto r =
  ------------------
  |  Branch (3879:18): [True: 0, False: 0]
  ------------------
 3880|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3881|      0|            digits_count += ranges::distance(it, *r);
 3882|      0|            it = *r;
 3883|      0|        }
 3884|       |
 3885|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3886|      0|            return detail::unexpected_scan_error(
 3887|      0|                scan_error::invalid_scanned_value,
 3888|      0|                "No significand digits in float");
 3889|      0|        }
 3890|       |
 3891|      0|        auto beg_exp_it = it;
 3892|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3892:13): [True: 0, False: 0]
  ------------------
 3893|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3894|      0|        }
 3895|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3895:13): [True: 0, False: 0]
  |  Branch (3895:29): [True: 0, False: 0]
  ------------------
 3896|      0|            return detail::unexpected_scan_error(
 3897|      0|                scan_error::invalid_scanned_value,
 3898|      0|                "No exponent given to scientific float");
 3899|      0|        }
 3900|       |
 3901|      0|        m_kind =
 3902|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3902:13): [True: 0, False: 0]
  ------------------
 3903|       |
 3904|      0|        return it;
 3905|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3683|      2|    {
 3684|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  Branch (865:45): [True: 0, False: 2]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3685|      2|                         thsep_allowed)) {
 3686|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3687|      0|                return char_to_int(ch) < 10 ||
 3688|      0|                       ch == m_locale_options.thousands_sep;
 3689|      0|            });
 3690|      0|        }
 3691|       |
 3692|      2|        return read_while1_code_unit(
 3693|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3694|      2|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      2|        : m_fptr([](storage fn,
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|      2|              if constexpr (std::is_void_v<R>) {
  746|      2|                  obj(static_cast<decltype(args)>(args)...);
  747|      2|              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
  752|      2|          m_storage(std::addressof(f))
  753|      2|    {
  754|      2|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      2|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      2|        else if constexpr (std::is_object_v<T>) {
  688|      2|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      2|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3693|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      2|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      2|        {
  662|      2|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3586|      2|    {
 3587|      2|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|      2|        return read_source_impl(range);
 3593|      2|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|     24|    {
  763|     24|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     24|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3626|     24|    {
 3627|     24|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|     24|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|     24|        auto it = sign_result.first;
 3630|     24|        m_sign = sign_result.second;
 3631|       |
 3632|     24|        auto digits_begin = it;
 3633|     24|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|     24|                      ranges::sized_range<Range>) {
 3636|     24|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  Branch (865:45): [True: 0, False: 24]
  |  |  |  Branch (865:45): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 3637|     24|                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3639|      0|                    it,
 3640|      0|                    do_read_source_impl(
 3641|      0|                        r,
 3642|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|      0|            }
 3645|     24|            else {
 3646|     24|                auto cb = [&](const auto& rr)
 3647|     24|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|     24|                    auto res = read_all(rr);
 3649|     24|                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|     24|                        return detail::unexpected_scan_error(
 3651|     24|                            scan_error::invalid_scanned_value,
 3652|     24|                            "Invalid float value");
 3653|     24|                    }
 3654|     24|                    return res;
 3655|     24|                };
 3656|     24|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3657|     24|            }
 3658|       |        }
 3659|       |        else {
 3660|       |            SCN_TRY_ASSIGN(
 3661|       |                it,
 3662|       |                do_read_source_impl(
 3663|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|       |        }
 3666|       |
 3667|     24|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|     24|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 24, False: 0]
  |  Branch (3669:48): [True: 24, False: 0]
  ------------------
 3670|     24|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 24, False: 0]
  ------------------
 3671|     24|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 24, False: 0]
  ------------------
 3672|     24|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|     24|        }
 3674|       |
 3675|     24|        handle_separators();
 3676|       |
 3677|     24|        return it;
 3678|     24|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3720|     24|    {
 3721|     24|        auto it = range.begin();
 3722|     24|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 24, False: 0]
  ------------------
 3723|     24|            return unexpected(r.error());
 3724|     24|        }
 3725|      0|        else {
 3726|      0|            it = *r;
 3727|      0|        }
 3728|       |
 3729|      0|        if (auto r = read_matching_string_classic_nocase(
 3730|      0|                ranges::subrange{it, range.end()}, "inity");
 3731|      0|            !r) {
  ------------------
  |  Branch (3731:13): [True: 0, False: 0]
  ------------------
 3732|      0|            m_kind = float_kind::inf_short;
 3733|      0|            return it;
 3734|      0|        }
 3735|      0|        else {
 3736|      0|            m_kind = float_kind::inf_long;
 3737|      0|            return *r;
 3738|      0|        }
 3739|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3743|     24|    {
 3744|     24|        auto it = range.begin();
 3745|     24|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 24, False: 0]
  ------------------
 3746|     24|            return r.transform_error(map_parse_error_to_scan_error(
 3747|     24|                scan_error::invalid_scanned_value,
 3748|     24|                "Invalid floating-point NaN value"));
 3749|     24|        }
 3750|      0|        else {
 3751|      0|            it = *r;
 3752|      0|        }
 3753|       |
 3754|      0|        if (auto r =
 3755|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|      0|            !r) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            m_kind = float_kind::nan_simple;
 3758|      0|            return it;
 3759|      0|        }
 3760|      0|        else {
 3761|      0|            it = *r;
 3762|      0|        }
 3763|       |
 3764|      0|        auto payload_beg_it = it;
 3765|      0|        it = read_while_code_unit(
 3766|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|      0|                return is_ascii_char(ch) &&
 3768|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|      0|            });
 3771|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|      0|        m_kind = float_kind::nan_with_payload;
 3774|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 0, False: 0]
  ------------------
 3775|      0|                                             ')')) {
 3776|      0|            return *r;
 3777|      0|        }
 3778|      0|        return detail::unexpected_scan_error(
 3779|      0|            scan_error::invalid_scanned_value,
 3780|      0|            "Invalid floating-point NaN payload");
 3781|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3713|     24|    {
 3714|     24|        return read_matching_string_classic_nocase(range, "0x");
 3715|     24|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3912|     24|    {
 3913|     24|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|     24|        const bool allowed_nonhex =
 3915|     24|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|     24|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|     24|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 24, False: 0]
  |  Branch (3918:45): [True: 0, False: 24]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|     24|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 0, False: 24]
  ------------------
 3924|      0|            return *r;
 3925|      0|        }
 3926|       |
 3927|     24|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 24, False: 0]
  |  Branch (3927:45): [True: 0, False: 24]
  ------------------
 3928|      0|            return unexpected(r.error());
 3929|      0|        }
 3930|     24|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 0, False: 24]
  ------------------
 3931|      0|            return *r;
 3932|      0|        }
 3933|       |
 3934|     24|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 24, False: 0]
  |  Branch (3934:28): [True: 0, False: 24]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|      0|            auto it = range.begin();
 3938|       |
 3939|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 0, False: 0]
  ------------------
 3940|      0|                m_kind = float_kind::hex_with_prefix;
 3941|      0|                it = *r;
 3942|      0|            }
 3943|      0|            else {
 3944|      0|                m_kind = float_kind::hex_without_prefix;
 3945|      0|            }
 3946|       |
 3947|      0|            return read_hex(ranges::subrange{it, range.end()});
 3948|      0|        }
 3949|     24|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 0, False: 24]
  |  Branch (3949:29): [True: 0, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|      0|            m_kind = float_kind::generic;
 3953|      0|            return read_regular_float(range);
 3954|      0|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|     24|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 3960|      0|            m_kind = float_kind::hex_with_prefix;
 3961|      0|            return read_hex(ranges::subrange{*r, range.end()});
 3962|      0|        }
 3963|       |
 3964|     24|        m_kind = float_kind::generic;
 3965|     24|        return read_regular(range);
 3966|     24|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3647|     24|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|     24|                    auto res = read_all(rr);
 3649|     24|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 3650|      0|                        return detail::unexpected_scan_error(
 3651|      0|                            scan_error::invalid_scanned_value,
 3652|      0|                            "Invalid float value");
 3653|      0|                    }
 3654|     24|                    return res;
 3655|     24|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1828|     24|{
 1829|     24|    return ranges::next(range.begin(), range.end());
 1830|     24|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|     24|    {
  313|     24|        ranges::advance(x, bound);
  314|     24|        return x;
  315|     24|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|     24|    {
  275|     24|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     24|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|     42|    {
  190|     42|        i = std::move(bound);
  191|     42|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1566|     24|    {
 1567|     24|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|     24|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1610|     24|    {
 1611|     24|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|     24|                      ranges::sized_range<Range>) {
 1616|     24|            m_storage.reset();
 1617|     24|            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|     24|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3586|     24|    {
 3587|     24|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|     24|        return read_source_impl(range);
 3593|     24|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3612|     24|    {
 3613|     24|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|     24|        const std::ptrdiff_t sign_len =
 3616|     24|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 0, False: 24]
  ------------------
 3617|       |
 3618|     24|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|     24|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4082|      2|    {
 4083|      2|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|      2|#if !SCN_DISABLE_LOCALE
 4086|      2|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 0, False: 2]
  ------------------
 4087|      0|            return read_impl<Range>(
 4088|      0|                range, rd,
 4089|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4090|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|      0|                },
 4092|      0|                value, loc);
 4093|      0|        }
 4094|      2|#endif
 4095|       |
 4096|      2|        return read_impl<Range>(
 4097|      2|            range, rd,
 4098|      2|            [](float_reader<CharT>& r, auto&&... args) {
 4099|      2|                return r.read_source(SCN_FWD(args)...);
 4100|      2|            },
 4101|      2|            value);
 4102|      2|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|      2|    {
 4119|      2|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 4121|      2|            return unexpected(r.error());
 4122|      2|        }
 4123|       |
 4124|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|      0|        return ranges::next(range.begin(), n);
 4126|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      2|        : m_fptr([](storage fn,
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|      2|              if constexpr (std::is_void_v<R>) {
  746|      2|                  obj(static_cast<decltype(args)>(args)...);
  747|      2|              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
  752|      2|          m_storage(std::addressof(f))
  753|      2|    {
  754|      2|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|      2|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      2|        else if constexpr (std::is_object_v<T>) {
  688|      2|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      2|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4098|      2|            [](float_reader<CharT>& r, auto&&... args) {
 4099|      2|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|      2|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      2|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      2|        {
  662|      2|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|     24|    {
 4119|     24|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 4121|      0|            return unexpected(r.error());
 4122|      0|        }
 4123|       |
 4124|     24|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|      0|        return ranges::next(range.begin(), n);
 4126|     24|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5728|  4.40k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|       |                       std::is_same_v<T, std::wstring_view>) {
 5743|       |        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|  4.40k|                       std::is_same_v<T, std::wstring>) {
 5747|  4.40k|        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  4.40k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5122|  13.2k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|  13.1k|    {
 3036|  13.1k|        reader_error_handler eh{};
 3037|  13.1k|        get_derived().check_specs_impl(specs, eh);
 3038|  13.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
 3039|      0|            return detail::unexpected_scan_error(
 3040|      0|                scan_error::invalid_format_string, eh.m_msg);
 3041|      0|        }
 3042|  13.1k|        return {};
 3043|  13.1k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3047|  13.1k|    {
 3048|  13.1k|        return static_cast<Derived&>(*this);
 3049|  13.1k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5126|  13.1k|    {
 5127|  13.1k|        detail::check_string_type_specs(specs, eh);
 5128|       |
 5129|  13.1k|        SCN_GCC_PUSH
 5130|  13.1k|        SCN_GCC_IGNORE("-Wswitch")
 5131|  13.1k|        SCN_GCC_IGNORE("-Wswitch-default")
 5132|       |
 5133|  13.1k|        SCN_CLANG_PUSH
 5134|  13.1k|        SCN_CLANG_IGNORE("-Wswitch")
 5135|  13.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5136|       |
 5137|  13.1k|        switch (specs.type) {
  ------------------
  |  Branch (5137:17): [True: 0, False: 13.1k]
  ------------------
 5138|      6|            case detail::presentation_type::none:
  ------------------
  |  Branch (5138:13): [True: 6, False: 13.1k]
  ------------------
 5139|      6|                m_type = reader_type::word;
 5140|      6|                break;
 5141|       |
 5142|      0|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5142:13): [True: 0, False: 13.1k]
  ------------------
 5143|      0|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5143:21): [True: 0, False: 0]
  ------------------
 5144|      0|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5144:21): [True: 0, False: 0]
  ------------------
 5145|      0|                    m_type = reader_type::custom_word;
 5146|      0|                }
 5147|      0|                else {
 5148|      0|                    m_type = reader_type::word;
 5149|      0|                }
 5150|      0|                break;
 5151|      0|            }
 5152|       |
 5153|      0|            case detail::presentation_type::character:
  ------------------
  |  Branch (5153:13): [True: 0, False: 13.1k]
  ------------------
 5154|      0|                m_type = reader_type::character;
 5155|      0|                break;
 5156|       |
 5157|  1.84k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5157:13): [True: 1.84k, False: 11.3k]
  ------------------
 5158|  1.84k|                m_type = reader_type::character_set;
 5159|  1.84k|                break;
 5160|       |
 5161|  8.38k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5161:13): [True: 8.38k, False: 4.77k]
  ------------------
 5162|  8.38k|                m_type = reader_type::regex;
 5163|  8.38k|                break;
 5164|       |
 5165|  2.92k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5165:13): [True: 2.92k, False: 10.2k]
  ------------------
 5166|  2.92k|                m_type = reader_type::regex_escaped;
 5167|  2.92k|                break;
 5168|  13.1k|        }
 5169|       |
 5170|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5171|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5172|  13.1k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5175|  15.2k|    {
 5176|  15.2k|        return m_type == reader_type::word;
 5177|  15.2k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1132|  2.99k|{
 1133|  2.99k|    auto it = src.begin();
 1134|  1.02M|    while (it != src.end()) {
  ------------------
  |  Branch (1134:12): [True: 1.02M, False: 2.94k]
  ------------------
 1135|  1.02M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1136|  1.02M|        if (len == 0) {
  ------------------
  |  Branch (1136:13): [True: 54, False: 1.02M]
  ------------------
 1137|     54|            return false;
 1138|     54|        }
 1139|  1.02M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1139:13): [True: 0, False: 1.02M]
  ------------------
 1140|      0|            return false;
 1141|      0|        }
 1142|  1.02M|        const auto cp = detail::decode_code_point_exhaustive(
 1143|  1.02M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1144|  1.02M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1144:13): [True: 0, False: 1.02M]
  ------------------
 1145|      0|            return false;
 1146|      0|        }
 1147|  1.02M|        it += len;
 1148|  1.02M|    }
 1149|  2.94k|    return true;
 1150|  2.99k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 2987|      4|{
 2988|      4|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2989|      4|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2989:13): [True: 4, False: 0]
  ------------------
 2990|      4|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|      4|    static_cast<    \
  |  |  935|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2991|      4|        }
 2992|      0|        else {
 2993|      0|            dest.assign(source.view());
 2994|      0|        }
 2995|       |    }
 2996|       |    else {
 2997|       |        return transcode_impl(source.view(), dest);
 2998|       |    }
 2999|       |
 3000|      4|    return {};
 3001|      4|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5023|  1.84k|        {
 5024|  1.84k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5024:17): [True: 0, False: 1.84k]
  ------------------
 5025|      0|                return {};
 5026|      0|            }
 5027|       |
 5028|  1.84k|            auto charset_string = specs.charset_string<SourceCharT>();
 5029|  1.84k|            auto it = detail::to_address(charset_string.begin());
 5030|  1.84k|            auto set = detail::parse_presentation_set(
 5031|  1.84k|                it, detail::to_address(charset_string.end()), nonascii);
 5032|  1.84k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|  1.84k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.84k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5033|  1.84k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|  1.84k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5034|  1.84k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|  1.84k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5035|       |
 5036|  1.84k|            std::sort(nonascii.extra_ranges.begin(),
 5037|  1.84k|                      nonascii.extra_ranges.end());
 5038|  1.84k|            return {};
 5039|  1.84k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5056|   721k|        {
 5057|   721k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5057:17): [True: 93.6k, False: 627k]
  ------------------
 5058|  93.6k|                return helper.is_char_set_in_extra_literals(cp);
 5059|  93.6k|            }
 5060|       |
 5061|   627k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5062|   721k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5006|  93.6k|        {
 5007|       |            // TODO: binary search?
 5008|  93.6k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5008:17): [True: 0, False: 93.6k]
  ------------------
 5009|      0|                return false;
 5010|      0|            }
 5011|       |
 5012|  93.6k|            const auto cp_val = static_cast<uint32_t>(cp);
 5013|  93.6k|            return std::find_if(
 5014|  93.6k|                       nonascii.extra_ranges.begin(),
 5015|  93.6k|                       nonascii.extra_ranges.end(),
 5016|  93.6k|                       [cp_val](const auto& pair) noexcept {
 5017|  93.6k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5018|  93.6k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5019|  93.6k|                       }) != nonascii.extra_ranges.end();
 5020|  93.6k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5016|  19.2M|                       [cp_val](const auto& pair) noexcept {
 5017|  19.2M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5017:35): [True: 19.2M, False: 3.66k]
  ------------------
 5018|  19.2M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5018:35): [True: 93.0k, False: 19.1M]
  ------------------
 5019|  19.2M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 4996|   627k|        {
 4997|   627k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|   627k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   627k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4998|   627k|            const auto val =
 4999|   627k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5000|   627k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5001|   627k|                    (val % 8)) &
 5002|   627k|                   1u;
 5003|   627k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 4993|  1.84k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5193|    148|    {
 5194|    148|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    148|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|    148|        return read_impl(range, specs, value);
 5196|    148|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5211|    148|    {
 5212|    148|        SCN_CLANG_PUSH
 5213|    148|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|    148|        switch (m_type) {
 5216|      2|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 2, False: 146]
  ------------------
 5217|      2|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 148]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 148]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|     20|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 20, False: 128]
  ------------------
 5227|     20|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|     20|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 148]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 126, False: 22]
  ------------------
 5237|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|    126|                    range,
 5239|    126|                    get_unescaped_regex_pattern(
 5240|    126|                        specs.charset_string<SourceCharT>()),
 5241|    126|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 148]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|    148|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|    148|        }
 5248|       |
 5249|    148|        SCN_CLANG_POP
 5250|    148|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4740|      2|    {
 4741|      2|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|      2|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4674|      2|{
 4675|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|      2|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|      2|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 2, False: 0]
  ------------------
 4679|      2|        return detail::unexpected_scan_error(
 4680|      2|            scan_error::invalid_scanned_value,
 4681|      2|            "Invalid encoding in scanned string");
 4682|      2|    }
 4683|       |
 4684|      0|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|      0|    return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|      0|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2077|      6|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|      6|    else {
 2087|      6|        auto it = range.begin();
 2088|       |
 2089|      6|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|      6|            auto seg = get_contiguous_beginning(range);
 2091|      6|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|      6|                seg_it != seg.end()) {
  ------------------
  |  Branch (2092:17): [True: 0, False: 6]
  ------------------
 2093|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|      0|            }
 2095|      6|            ranges::advance(it, seg.size());
 2096|      6|        }
 2097|       |
 2098|      0|        return read_until_code_point(
 2099|      6|            ranges::subrange{it, range.end()},
 2100|      6|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|      6|    }
 2102|      6|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2050|      6|{
 2051|      6|    auto it = range.begin();
 2052|    744|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 744, False: 0]
  ------------------
 2053|    744|        const auto val =
 2054|    744|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|    744|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    744|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 564, False: 180]
  |  |  ------------------
  ------------------
 2056|    564|            const auto cp = detail::decode_code_point_exhaustive(
 2057|    564|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|    564|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 6, False: 558]
  ------------------
 2059|      6|                return it;
 2060|      6|            }
 2061|    564|        }
 2062|    738|        it = val.iterator;
 2063|    738|    }
 2064|       |
 2065|      0|    return it;
 2066|      6|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    564|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    564|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    564|              else {
  749|    564|                  return obj(static_cast<decltype(args)>(args)...);
  750|    564|              }
  751|    564|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    564|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    564|        else if constexpr (std::is_object_v<T>) {
  688|    564|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    564|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2100|    564|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4968|     20|    {
 4969|     20|        auto it = read_source_impl(range, {specs});
 4970|     20|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 4971|      0|            return unexpected(it.error());
 4972|      0|        }
 4973|       |
 4974|     20|        return read_string_impl(range, *it, value);
 4975|     20|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5071|     60|    {
 5072|     60|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|     60|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|     60|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|     60|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 60]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|     60|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|     60|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 60, False: 0]
  ------------------
 5080|     60|            const auto cb = [&](char32_t cp) {
 5081|     60|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|     60|            };
 5083|       |
 5084|     60|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 0, False: 60]
  ------------------
 5085|      0|                auto it = read_until_code_point(range, cb);
 5086|      0|                return check_nonempty(it, range);
 5087|      0|            }
 5088|     60|            auto it = read_while_code_point(range, cb);
 5089|     60|            return check_nonempty(it, range);
 5090|     60|        }
 5091|       |
 5092|      0|        const auto cb = [&](SourceCharT ch) {
 5093|      0|            return cb_wrapper.on_ascii_only(ch);
 5094|      0|        };
 5095|       |
 5096|      0|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 0]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|      0|        auto it = read_while_code_unit(range, cb);
 5101|      0|        return check_nonempty(it, range);
 5102|      0|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     60|        : m_fptr([](storage fn,
  743|     60|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     60|              cvref<T> obj = *get<T>(fn);
  745|     60|              if constexpr (std::is_void_v<R>) {
  746|     60|                  obj(static_cast<decltype(args)>(args)...);
  747|     60|              }
  748|     60|              else {
  749|     60|                  return obj(static_cast<decltype(args)>(args)...);
  750|     60|              }
  751|     60|          }),
  752|     60|          m_storage(std::addressof(f))
  753|     60|    {
  754|     60|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  12.7k|    {
  684|  12.7k|        if constexpr (std::is_const_v<T>) {
  685|  12.7k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.7k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5080|  12.7k|            const auto cb = [&](char32_t cp) {
 5081|  12.7k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|  12.7k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     60|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     60|        {
  667|     60|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5107|     60|    {
 5108|     60|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 0, False: 60]
  ------------------
 5109|      0|            return detail::unexpected_scan_error(
 5110|      0|                scan_error::invalid_scanned_value,
 5111|      0|                "No characters matched in [character set]");
 5112|      0|        }
 5113|       |
 5114|     60|        return it;
 5115|     60|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4674|     20|{
 4675|     20|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|     20|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|     20|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 16, False: 4]
  ------------------
 4679|     16|        return detail::unexpected_scan_error(
 4680|     16|            scan_error::invalid_scanned_value,
 4681|     16|            "Invalid encoding in scanned string");
 4682|     16|    }
 4683|       |
 4684|      4|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      4|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|      4|    return SCN_MOVE(result);
  ------------------
  |  |  934|      4|    static_cast<    \
  |  |  935|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|      4|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4811|    126|    {
 4812|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    126|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4813|      0|        return read_string_impl(range, it, value);
 4814|    126|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4833|    378|    {
 4834|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4835|       |                      !std::is_same_v<SourceCharT, char>) {
 4836|       |            return detail::unexpected_scan_error(
 4837|       |                scan_error::invalid_format_string,
 4838|       |                "Regex backend doesn't support wide strings as input");
 4839|       |        }
 4840|    378|        else {
 4841|    378|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4841:17): [True: 378, False: 0]
  ------------------
 4842|    378|                return detail::unexpected_scan_error(
 4843|    378|                    scan_error::invalid_format_string,
 4844|    378|                    "Cannot use regex with a non-contiguous source "
 4845|    378|                    "range");
 4846|    378|            }
 4847|       |
 4848|      0|            auto input = get_as_contiguous(range);
 4849|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4850|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4851|      0|            return ranges::next(range.begin(),
 4852|      0|                                ranges::distance(input.begin(), it));
 4853|      0|        }
 4854|    378|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|    378|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|    378|    else {
  975|    378|        return false;
  976|    378|    }
  977|    378|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|  4.23k|    {
 5194|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  4.23k|        return read_impl(range, specs, value);
 5196|  4.23k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|  4.23k|    {
 5212|  4.23k|        SCN_CLANG_PUSH
 5213|  4.23k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  4.23k|        switch (m_type) {
 5216|      0|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.23k]
  ------------------
 5217|      0|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 4.23k]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 4.23k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|    594|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 594, False: 3.64k]
  ------------------
 5227|    594|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|    594|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|  2.79k|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 2.79k, False: 1.44k]
  ------------------
 5232|  2.79k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|  2.79k|                    range, specs.charset_string<SourceCharT>(),
 5234|  2.79k|                    specs.regexp_flags, value);
 5235|       |
 5236|    848|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 848, False: 3.38k]
  ------------------
 5237|    848|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|    848|                    range,
 5239|    848|                    get_unescaped_regex_pattern(
 5240|    848|                        specs.charset_string<SourceCharT>()),
 5241|    848|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 4.23k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  4.23k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  4.23k|        }
 5248|       |
 5249|  4.23k|        SCN_CLANG_POP
 5250|  4.23k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4740|     24|    {
 4741|     24|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|     24|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4674|     24|{
 4675|     24|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|     24|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|     24|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 24]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|     24|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     24|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|     24|    return SCN_MOVE(result);
  ------------------
  |  |  934|     24|    static_cast<    \
  |  |  935|     24|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|     24|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3007|    732|{
 3008|    732|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3009|    732|        dest.assign(source.view());
 3010|       |    }
 3011|       |    else {
 3012|       |        return transcode_impl(source.view(), dest);
 3013|       |    }
 3014|       |
 3015|    732|    return {};
 3016|    732|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2077|     72|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|     72|                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|     72|        auto buf = make_contiguous_buffer(range);
 2082|     72|        auto it = find_classic_space_narrow_fast(buf.view());
 2083|     72|        return ranges::next(range.begin(),
 2084|     72|                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|       |    else {
 2087|       |        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|       |        return read_until_code_point(
 2099|       |            ranges::subrange{it, range.end()},
 2100|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|       |    }
 2102|     72|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4968|    594|    {
 4969|    594|        auto it = read_source_impl(range, {specs});
 4970|    594|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 4971|      0|            return unexpected(it.error());
 4972|      0|        }
 4973|       |
 4974|    594|        return read_string_impl(range, *it, value);
 4975|    594|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5071|  1.78k|    {
 5072|  1.78k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|  1.78k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|  1.78k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  1.78k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.78k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|  1.78k|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|  1.78k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 1.78k, False: 0]
  ------------------
 5080|  1.78k|            const auto cb = [&](char32_t cp) {
 5081|  1.78k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|  1.78k|            };
 5083|       |
 5084|  1.78k|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 12, False: 1.77k]
  ------------------
 5085|     12|                auto it = read_until_code_point(range, cb);
 5086|     12|                return check_nonempty(it, range);
 5087|     12|            }
 5088|  1.77k|            auto it = read_while_code_point(range, cb);
 5089|  1.77k|            return check_nonempty(it, range);
 5090|  1.78k|        }
 5091|       |
 5092|      0|        const auto cb = [&](SourceCharT ch) {
 5093|      0|            return cb_wrapper.on_ascii_only(ch);
 5094|      0|        };
 5095|       |
 5096|      0|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 0]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|      0|        auto it = read_while_code_unit(range, cb);
 5101|      0|        return check_nonempty(it, range);
 5102|      0|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2050|  1.78k|{
 2051|  1.78k|    auto it = range.begin();
 2052|   708k|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 708k, False: 60]
  ------------------
 2053|   708k|        const auto val =
 2054|   708k|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|   708k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   708k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 708k, False: 0]
  |  |  ------------------
  ------------------
 2056|   708k|            const auto cp = detail::decode_code_point_exhaustive(
 2057|   708k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|   708k|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 1.72k, False: 706k]
  ------------------
 2059|  1.72k|                return it;
 2060|  1.72k|            }
 2061|   708k|        }
 2062|   706k|        it = val.iterator;
 2063|   706k|    }
 2064|       |
 2065|     60|    return it;
 2066|  1.78k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1888|   708k|{
 1889|   708k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|   708k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|   708k|    auto it = range.begin();
 1893|   708k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|   708k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|   708k|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 615k, False: 92.7k]
  ------------------
 1902|   615k|        ++it;
 1903|   615k|        return {it, string_type(1, *range.begin())};
 1904|   615k|    }
 1905|       |
 1906|  92.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|  92.7k|    return {it, string_type{range.begin(), it}};
 1908|   708k|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  92.7k|    {
  283|  92.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  92.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  92.7k|    {
  212|  92.7k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 18, False: 92.7k]
  ------------------
  213|     18|            auto dist = bound - i;
  214|     18|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     18|            return dist;
  216|     18|        }
  217|  92.7k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  92.7k|        return n;
  219|  92.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|   185k|    {
  132|   185k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 185k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   185k|        return t;
  136|   185k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1879|   708k|    {
 1880|   708k|        return !codepoint.empty();
 1881|   708k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  1.78k|        : m_fptr([](storage fn,
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|  1.78k|              if constexpr (std::is_void_v<R>) {
  746|  1.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.78k|              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
  752|  1.78k|          m_storage(std::addressof(f))
  753|  1.78k|    {
  754|  1.78k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   708k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   708k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   708k|              else {
  749|   708k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   708k|              }
  751|   708k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   708k|    {
  684|   708k|        if constexpr (std::is_const_v<T>) {
  685|   708k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   708k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5080|   708k|            const auto cb = [&](char32_t cp) {
 5081|   708k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|   708k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  1.78k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.78k|        {
  667|  1.78k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5107|  1.78k|    {
 5108|  1.78k|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 0, False: 1.78k]
  ------------------
 5109|      0|            return detail::unexpected_scan_error(
 5110|      0|                scan_error::invalid_scanned_value,
 5111|      0|                "No characters matched in [character set]");
 5112|      0|        }
 5113|       |
 5114|  1.78k|        return it;
 5115|  1.78k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2071|  1.77k|{
 2072|  1.77k|    return read_until_code_point(range, std::not_fn(pred));
 2073|  1.77k|}
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4674|    708|{
 4675|    708|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    708|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    708|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 708]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|    708|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    708|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|    708|    return SCN_MOVE(result);
  ------------------
  |  |  934|    708|    static_cast<    \
  |  |  935|    708|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|    708|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4811|  3.64k|    {
 4812|  3.64k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  3.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.52k, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.52k|    }                                                  \
  |  |  |  | 3939|  3.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4813|    114|        return read_string_impl(range, it, value);
 4814|  3.64k|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4833|  10.9k|    {
 4834|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4835|       |                      !std::is_same_v<SourceCharT, char>) {
 4836|       |            return detail::unexpected_scan_error(
 4837|       |                scan_error::invalid_format_string,
 4838|       |                "Regex backend doesn't support wide strings as input");
 4839|       |        }
 4840|  10.9k|        else {
 4841|  10.9k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4841:17): [True: 0, False: 10.9k]
  ------------------
 4842|      0|                return detail::unexpected_scan_error(
 4843|      0|                    scan_error::invalid_format_string,
 4844|      0|                    "Cannot use regex with a non-contiguous source "
 4845|      0|                    "range");
 4846|      0|            }
 4847|       |
 4848|  10.9k|            auto input = get_as_contiguous(range);
 4849|  10.9k|            SCN_TRY(it,
  ------------------
  |  | 3940|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.5k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.5k|    }                                                  \
  |  |  |  | 3939|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4850|    342|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4851|    342|            return ranges::next(range.begin(),
 4852|    342|                                ranges::distance(input.begin(), it));
 4853|  10.9k|        }
 4854|  10.9k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|  10.9k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  10.9k|                  ranges::sized_range<Range>) {
  962|  10.9k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  10.9k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|  10.9k|{
 1066|  10.9k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  10.9k|                  ranges::sized_range<Range>) {
 1070|  10.9k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  10.9k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|  10.9k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  10.9k|                  ranges::sized_range<Range>) {
  984|  10.9k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  10.9k|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4258|  10.9k|{
 4259|  10.9k|    static_assert(ranges::contiguous_range<Input> &&
 4260|  10.9k|                  ranges::borrowed_range<Input> &&
 4261|  10.9k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4262|       |
 4263|  10.9k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4264|  10.9k|    std::basic_regex<CharT> re{};
 4265|  10.9k|    try {
 4266|  10.9k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4267|  10.9k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4268|  10.9k|                                     re_flags | std::regex_constants::nosubs};
 4269|  10.9k|    }
 4270|  10.9k|    catch (const std::regex_error& err) {
 4271|  10.0k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4272|  10.0k|                                             "Invalid regex");
 4273|  10.0k|    }
 4274|       |
 4275|    924|    std::match_results<const CharT*> matches{};
 4276|    924|    try {
 4277|    924|        bool found = std::regex_search(input.data(),
 4278|    924|                                       input.data() + input.size(), matches, re,
 4279|    924|                                       std::regex_constants::match_continuous);
 4280|    924|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4280:13): [True: 582, False: 342]
  |  Branch (4280:23): [True: 0, False: 342]
  ------------------
 4281|    570|            return detail::unexpected_scan_error(
 4282|    570|                scan_error::invalid_scanned_value,
 4283|    570|                "Regular expression didn't match");
 4284|    570|        }
 4285|    924|    }
 4286|    924|    catch (const std::regex_error& err) {
 4287|     12|        return detail::unexpected_scan_error(
 4288|     12|            scan_error::invalid_format_string,
 4289|     12|            "Regex matching failed with an error");
 4290|     12|    }
 4291|       |
 4292|    342|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4293|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4294|       |    auto re =
 4295|       |#if SCN_REGEX_BOOST_USE_ICU
 4296|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4297|       |                             make_regex_flags(flags) |
 4298|       |                                 boost::regex_constants::no_except |
 4299|       |                                 boost::regex_constants::nosubs);
 4300|       |#else
 4301|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4302|       |                                  make_regex_flags(flags) |
 4303|       |                                      boost::regex_constants::no_except |
 4304|       |                                      boost::regex_constants::nosubs};
 4305|       |#endif
 4306|       |    if (re.status() != 0) {
 4307|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4308|       |                                             "Invalid regex");
 4309|       |    }
 4310|       |
 4311|       |    boost::match_results<const CharT*> matches{};
 4312|       |    try {
 4313|       |        bool found =
 4314|       |#if SCN_REGEX_BOOST_USE_ICU
 4315|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4316|       |                                   matches, re,
 4317|       |                                   boost::regex_constants::match_continuous);
 4318|       |#else
 4319|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4320|       |                                matches, re,
 4321|       |                                boost::regex_constants::match_continuous);
 4322|       |#endif
 4323|       |        if (!found || matches.prefix().matched) {
 4324|       |            return detail::unexpected_scan_error(
 4325|       |                scan_error::invalid_scanned_value,
 4326|       |                "Regular expression didn't match");
 4327|       |        }
 4328|       |    }
 4329|       |    catch (const std::runtime_error& err) {
 4330|       |        return detail::unexpected_scan_error(
 4331|       |            scan_error::invalid_format_string,
 4332|       |            "Regex matching failed with an error");
 4333|       |    }
 4334|       |
 4335|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4336|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4337|       |    static_assert(std::is_same_v<CharT, char>);
 4338|       |    std::string flagged_pattern{};
 4339|       |    auto re = [&]() {
 4340|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4341|       |        opts.set_never_capture(true);
 4342|       |        if (flagstr.empty()) {
 4343|       |            return re2::RE2{pattern, opts};
 4344|       |        }
 4345|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4346|       |        flagged_pattern.append(flagstr);
 4347|       |        flagged_pattern.append(pattern);
 4348|       |        return re2::RE2{flagged_pattern, opts};
 4349|       |    }();
 4350|       |    if (!re.ok()) {
 4351|       |        return detail::unexpected_scan_error(
 4352|       |            scan_error::invalid_format_string,
 4353|       |            "Failed to parse regular expression");
 4354|       |    }
 4355|       |
 4356|       |    auto new_input = detail::make_string_view_from_pointers(
 4357|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4358|       |    bool found = re2::RE2::Consume(&new_input, re);
 4359|       |    if (!found) {
 4360|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4361|       |                                             "Regular expression didn't match");
 4362|       |    }
 4363|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4364|       |#endif  // SCN_REGEX_BACKEND == ...
 4365|    924|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5728|  4.40k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|       |                       std::is_same_v<T, std::wstring_view>) {
 5743|       |        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|  4.40k|                       std::is_same_v<T, std::wstring>) {
 5747|  4.40k|        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  4.40k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 2987|      4|{
 2988|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2989|       |        if (source.stores_allocated_string()) {
 2990|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2991|       |        }
 2992|       |        else {
 2993|       |            dest.assign(source.view());
 2994|       |        }
 2995|       |    }
 2996|      4|    else {
 2997|      4|        return transcode_impl(source.view(), dest);
 2998|      4|    }
 2999|       |
 3000|      0|    return {};
 3001|      4|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 2962|    736|{
 2963|    736|    dst.clear();
 2964|    736|    transcode_valid_to_string(src, dst);
 2965|    736|    return {};
 2966|    736|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|    736|{
 1393|    736|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1394|       |
 1395|    736|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|    736|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    736|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1396|    736|    if constexpr (sizeof(SourceCharT) == 1) {
 1397|       |        if constexpr (sizeof(DestCharT) == 2) {
 1398|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1399|       |            std::u32string tmp;
 1400|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1401|       |            return transcode_to_string_impl_32to16<true>(
 1402|       |                std::u32string_view{tmp}, dest);
 1403|       |        }
 1404|    736|        else if constexpr (sizeof(DestCharT) == 4) {
 1405|    736|            return transcode_valid_to_string_impl_to32(src, dest);
 1406|    736|        }
 1407|       |    }
 1408|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1409|       |        if constexpr (sizeof(DestCharT) == 1) {
 1410|       |            std::u32string tmp;
 1411|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1412|       |            return transcode_to_string_impl_32to8<true>(
 1413|       |                std::u32string_view{tmp}, dest);
 1414|       |        }
 1415|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1416|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1417|       |        }
 1418|       |    }
 1419|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1420|       |        if constexpr (sizeof(DestCharT) == 1) {
 1421|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1422|       |        }
 1423|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1424|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1425|       |        }
 1426|       |    }
 1427|       |
 1428|    736|    SCN_EXPECT(false);
  ------------------
  |  |  930|    736|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    736|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1429|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1430|    736|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1266|    736|{
 1267|    736|    static_assert(sizeof(DestCharT) == 4);
 1268|       |
 1269|    736|    auto it = src.begin();
 1270|   256k|    while (it != src.end()) {
  ------------------
  |  Branch (1270:12): [True: 255k, False: 736]
  ------------------
 1271|   255k|        auto res = get_next_code_point_valid(
 1272|   255k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1273|   255k|                                                                 src.end()));
 1274|   255k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  930|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1275|   255k|        dest.push_back(res.value);
 1276|   255k|        it = detail::make_string_view_iterator(src, res.iterator);
 1277|   255k|    }
 1278|    736|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1189|   255k|{
 1190|   255k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1191|       |
 1192|   255k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1193|   255k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  930|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1194|       |
 1195|   255k|    return {input.begin() + len,
 1196|   255k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1197|   255k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5193|    148|    {
 5194|    148|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    148|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|    148|        return read_impl(range, specs, value);
 5196|    148|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5211|    148|    {
 5212|    148|        SCN_CLANG_PUSH
 5213|    148|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|    148|        switch (m_type) {
 5216|      2|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 2, False: 146]
  ------------------
 5217|      2|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 148]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 148]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|     20|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 20, False: 128]
  ------------------
 5227|     20|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|     20|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 148]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 126, False: 22]
  ------------------
 5237|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|    126|                    range,
 5239|    126|                    get_unescaped_regex_pattern(
 5240|    126|                        specs.charset_string<SourceCharT>()),
 5241|    126|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 148]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|    148|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|    148|        }
 5248|       |
 5249|    148|        SCN_CLANG_POP
 5250|    148|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4740|      2|    {
 4741|      2|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|      2|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4674|      2|{
 4675|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|      2|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|      2|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 2, False: 0]
  ------------------
 4679|      2|        return detail::unexpected_scan_error(
 4680|      2|            scan_error::invalid_scanned_value,
 4681|      2|            "Invalid encoding in scanned string");
 4682|      2|    }
 4683|       |
 4684|      0|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|      0|    return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|      0|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4968|     20|    {
 4969|     20|        auto it = read_source_impl(range, {specs});
 4970|     20|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 4971|      0|            return unexpected(it.error());
 4972|      0|        }
 4973|       |
 4974|     20|        return read_string_impl(range, *it, value);
 4975|     20|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4674|     20|{
 4675|     20|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|     20|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|     20|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 16, False: 4]
  ------------------
 4679|     16|        return detail::unexpected_scan_error(
 4680|     16|            scan_error::invalid_scanned_value,
 4681|     16|            "Invalid encoding in scanned string");
 4682|     16|    }
 4683|       |
 4684|      4|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      4|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|      4|    return SCN_MOVE(result);
  ------------------
  |  |  934|      4|    static_cast<    \
  |  |  935|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|      4|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4811|    126|    {
 4812|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    126|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4813|      0|        return read_string_impl(range, it, value);
 4814|    126|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|  4.23k|    {
 5194|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  4.23k|        return read_impl(range, specs, value);
 5196|  4.23k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|  4.23k|    {
 5212|  4.23k|        SCN_CLANG_PUSH
 5213|  4.23k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  4.23k|        switch (m_type) {
 5216|      0|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.23k]
  ------------------
 5217|      0|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 4.23k]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 4.23k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|    594|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 594, False: 3.64k]
  ------------------
 5227|    594|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|    594|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|  2.79k|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 2.79k, False: 1.44k]
  ------------------
 5232|  2.79k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|  2.79k|                    range, specs.charset_string<SourceCharT>(),
 5234|  2.79k|                    specs.regexp_flags, value);
 5235|       |
 5236|    848|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 848, False: 3.38k]
  ------------------
 5237|    848|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|    848|                    range,
 5239|    848|                    get_unescaped_regex_pattern(
 5240|    848|                        specs.charset_string<SourceCharT>()),
 5241|    848|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 4.23k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  4.23k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  4.23k|        }
 5248|       |
 5249|  4.23k|        SCN_CLANG_POP
 5250|  4.23k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4740|     24|    {
 4741|     24|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|     24|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4674|     24|{
 4675|     24|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|     24|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|     24|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 24]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|     24|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     24|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|     24|    return SCN_MOVE(result);
  ------------------
  |  |  934|     24|    static_cast<    \
  |  |  935|     24|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|     24|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3007|    732|{
 3008|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3009|       |        dest.assign(source.view());
 3010|       |    }
 3011|    732|    else {
 3012|    732|        return transcode_impl(source.view(), dest);
 3013|    732|    }
 3014|       |
 3015|      0|    return {};
 3016|    732|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4968|    594|    {
 4969|    594|        auto it = read_source_impl(range, {specs});
 4970|    594|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 4971|      0|            return unexpected(it.error());
 4972|      0|        }
 4973|       |
 4974|    594|        return read_string_impl(range, *it, value);
 4975|    594|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4674|    708|{
 4675|    708|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    708|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    708|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 708]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|    708|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    708|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|    708|    return SCN_MOVE(result);
  ------------------
  |  |  934|    708|    static_cast<    \
  |  |  935|    708|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|    708|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4811|  3.64k|    {
 4812|  3.64k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  3.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.52k, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.52k|    }                                                  \
  |  |  |  | 3939|  3.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4813|    114|        return read_string_impl(range, it, value);
 4814|  3.64k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5728|  4.40k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|  4.40k|                       std::is_same_v<T, std::wstring_view>) {
 5743|  4.40k|        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|       |                       std::is_same_v<T, std::wstring>) {
 5747|       |        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  4.40k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|    148|    {
 5194|    148|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    148|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|    148|        return read_impl(range, specs, value);
 5196|    148|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|    148|    {
 5212|    148|        SCN_CLANG_PUSH
 5213|    148|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|    148|        switch (m_type) {
 5216|      2|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 2, False: 146]
  ------------------
 5217|      2|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 148]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 148]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|     20|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 20, False: 128]
  ------------------
 5227|     20|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|     20|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 148]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 126, False: 22]
  ------------------
 5237|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|    126|                    range,
 5239|    126|                    get_unescaped_regex_pattern(
 5240|    126|                        specs.charset_string<SourceCharT>()),
 5241|    126|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 148]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|    148|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|    148|        }
 5248|       |
 5249|    148|        SCN_CLANG_POP
 5250|    148|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4747|      2|    {
 4748|      2|        return read_string_view_impl(range, read_until_classic_space(range),
 4749|      2|                                     value);
 4750|      2|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4693|      2|{
 4694|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|      2|    auto src = [&]() {
 4697|      2|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|      2|            return make_contiguous_buffer(
 4699|      2|                ranges::subrange{range.begin().base(), result.base()});
 4700|      2|        }
 4701|      2|        else {
 4702|      2|            return make_contiguous_buffer(
 4703|      2|                ranges::subrange{range.begin(), result});
 4704|      2|        }
 4705|      2|    }();
 4706|      2|    using src_type = decltype(src);
 4707|       |
 4708|      2|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|      2|    else {
 4721|      2|        const auto view = src.view();
 4722|      2|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|      2|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 2, False: 0]
  ------------------
 4725|      2|            return detail::unexpected_scan_error(
 4726|      2|                scan_error::invalid_scanned_value,
 4727|      2|                "Invalid encoding in scanned string_view");
 4728|      2|        }
 4729|       |
 4730|      0|        return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|      2|    }
 4732|      2|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4696|      2|    auto src = [&]() {
 4697|      2|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|      2|            return make_contiguous_buffer(
 4699|      2|                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|       |        else {
 4702|       |            return make_contiguous_buffer(
 4703|       |                ranges::subrange{range.begin(), result});
 4704|       |        }
 4705|      2|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4982|     20|    {
 4983|     20|        auto it = read_source_impl(range, {specs});
 4984|     20|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 4985|      0|            return unexpected(it.error());
 4986|      0|        }
 4987|       |
 4988|     20|        return read_string_view_impl(range, *it, value);
 4989|     20|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4693|     20|{
 4694|     20|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|     20|    auto src = [&]() {
 4697|     20|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|     20|            return make_contiguous_buffer(
 4699|     20|                ranges::subrange{range.begin().base(), result.base()});
 4700|     20|        }
 4701|     20|        else {
 4702|     20|            return make_contiguous_buffer(
 4703|     20|                ranges::subrange{range.begin(), result});
 4704|     20|        }
 4705|     20|    }();
 4706|     20|    using src_type = decltype(src);
 4707|       |
 4708|     20|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|     20|    else {
 4721|     20|        const auto view = src.view();
 4722|     20|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|     20|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 16, False: 4]
  ------------------
 4725|     16|            return detail::unexpected_scan_error(
 4726|     16|                scan_error::invalid_scanned_value,
 4727|     16|                "Invalid encoding in scanned string_view");
 4728|     16|        }
 4729|       |
 4730|      4|        return SCN_MOVE(result);
  ------------------
  |  |  934|      4|    static_cast<    \
  |  |  935|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|     20|    }
 4732|     20|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4696|     20|    auto src = [&]() {
 4697|     20|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|     20|            return make_contiguous_buffer(
 4699|     20|                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|       |        else {
 4702|       |            return make_contiguous_buffer(
 4703|       |                ranges::subrange{range.begin(), result});
 4704|       |        }
 4705|     20|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4822|    126|    {
 4823|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    126|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4824|      0|        return read_string_view_impl(range, it, value);
 4825|    126|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5193|  4.23k|    {
 5194|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  4.23k|        return read_impl(range, specs, value);
 5196|  4.23k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5211|  4.23k|    {
 5212|  4.23k|        SCN_CLANG_PUSH
 5213|  4.23k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  4.23k|        switch (m_type) {
 5216|      0|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.23k]
  ------------------
 5217|      0|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 4.23k]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 4.23k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|    594|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 594, False: 3.64k]
  ------------------
 5227|    594|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|    594|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|  2.79k|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 2.79k, False: 1.44k]
  ------------------
 5232|  2.79k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|  2.79k|                    range, specs.charset_string<SourceCharT>(),
 5234|  2.79k|                    specs.regexp_flags, value);
 5235|       |
 5236|    848|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 848, False: 3.38k]
  ------------------
 5237|    848|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|    848|                    range,
 5239|    848|                    get_unescaped_regex_pattern(
 5240|    848|                        specs.charset_string<SourceCharT>()),
 5241|    848|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 4.23k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  4.23k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  4.23k|        }
 5248|       |
 5249|  4.23k|        SCN_CLANG_POP
 5250|  4.23k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4747|     24|    {
 4748|     24|        return read_string_view_impl(range, read_until_classic_space(range),
 4749|     24|                                     value);
 4750|     24|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4693|     24|{
 4694|     24|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|     24|    auto src = [&]() {
 4697|     24|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|     24|            return make_contiguous_buffer(
 4699|     24|                ranges::subrange{range.begin().base(), result.base()});
 4700|     24|        }
 4701|     24|        else {
 4702|     24|            return make_contiguous_buffer(
 4703|     24|                ranges::subrange{range.begin(), result});
 4704|     24|        }
 4705|     24|    }();
 4706|     24|    using src_type = decltype(src);
 4707|       |
 4708|     24|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|     24|    else {
 4721|     24|        const auto view = src.view();
 4722|     24|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|     24|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 0, False: 24]
  ------------------
 4725|      0|            return detail::unexpected_scan_error(
 4726|      0|                scan_error::invalid_scanned_value,
 4727|      0|                "Invalid encoding in scanned string_view");
 4728|      0|        }
 4729|       |
 4730|     24|        return SCN_MOVE(result);
  ------------------
  |  |  934|     24|    static_cast<    \
  |  |  935|     24|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|     24|    }
 4732|     24|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4696|     24|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|     24|        else {
 4702|     24|            return make_contiguous_buffer(
 4703|     24|                ranges::subrange{range.begin(), result});
 4704|     24|        }
 4705|     24|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4982|    594|    {
 4983|    594|        auto it = read_source_impl(range, {specs});
 4984|    594|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 4985|      0|            return unexpected(it.error());
 4986|      0|        }
 4987|       |
 4988|    594|        return read_string_view_impl(range, *it, value);
 4989|    594|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4693|    708|{
 4694|    708|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|    708|    auto src = [&]() {
 4697|    708|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|    708|            return make_contiguous_buffer(
 4699|    708|                ranges::subrange{range.begin().base(), result.base()});
 4700|    708|        }
 4701|    708|        else {
 4702|    708|            return make_contiguous_buffer(
 4703|    708|                ranges::subrange{range.begin(), result});
 4704|    708|        }
 4705|    708|    }();
 4706|    708|    using src_type = decltype(src);
 4707|       |
 4708|    708|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|    708|    else {
 4721|    708|        const auto view = src.view();
 4722|    708|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|    708|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 0, False: 708]
  ------------------
 4725|      0|            return detail::unexpected_scan_error(
 4726|      0|                scan_error::invalid_scanned_value,
 4727|      0|                "Invalid encoding in scanned string_view");
 4728|      0|        }
 4729|       |
 4730|    708|        return SCN_MOVE(result);
  ------------------
  |  |  934|    708|    static_cast<    \
  |  |  935|    708|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|    708|    }
 4732|    708|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4696|    708|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|    708|        else {
 4702|    708|            return make_contiguous_buffer(
 4703|    708|                ranges::subrange{range.begin(), result});
 4704|    708|        }
 4705|    708|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4822|  3.64k|    {
 4823|  3.64k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  3.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.52k, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.52k|    }                                                  \
  |  |  |  | 3939|  3.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4824|    114|        return read_string_view_impl(range, it, value);
 4825|  3.64k|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5541|  1.59k|    {
 5542|  1.59k|        reader_error_handler eh{};
 5543|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5544|       |            detail::check_code_point_type_specs(specs, eh);
 5545|       |        }
 5546|  1.59k|        else {
 5547|  1.59k|            detail::check_char_type_specs(specs, eh);
 5548|  1.59k|        }
 5549|  1.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  ------------------
  ------------------
 5550|  1.54k|            return detail::unexpected_scan_error(
 5551|  1.54k|                scan_error::invalid_format_string, eh.m_msg);
 5552|  1.54k|        }
 5553|     42|        return {};
 5554|  1.59k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|    946|    {
  763|    946|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    946|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    946|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|     86|        : m_fptr([](storage fn,
  743|     86|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     86|              cvref<T> obj = *get<T>(fn);
  745|     86|              if constexpr (std::is_void_v<R>) {
  746|     86|                  obj(static_cast<decltype(args)>(args)...);
  747|     86|              }
  748|     86|              else {
  749|     86|                  return obj(static_cast<decltype(args)>(args)...);
  750|     86|              }
  751|     86|          }),
  752|     86|          m_storage(std::addressof(f))
  753|     86|    {
  754|     86|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|     86|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     86|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     86|              else {
  749|     86|                  return obj(static_cast<decltype(args)>(args)...);
  750|     86|              }
  751|     86|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|     86|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     86|        else if constexpr (std::is_object_v<T>) {
  688|     86|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     86|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|     86|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     86|        {
  662|     86|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5536|    160|    {
 5537|    160|        return false;
 5538|    160|    }
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2339|  1.85k|{
 2340|  1.85k|    size_t count{0};
 2341|  1.85k|    for_each_code_point(input, [&count](char32_t cp) {
 2342|  1.85k|        count += calculate_text_width_for_fmt_v10(cp);
 2343|  1.85k|    });
 2344|  1.85k|    return count;
 2345|  1.85k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1435|  1.85k|{
 1436|       |    // TODO: Could be optimized by being eager
 1437|  1.85k|    auto it = input.begin();
 1438|  3.23k|    while (it != input.end()) {
  ------------------
  |  Branch (1438:12): [True: 1.38k, False: 1.85k]
  ------------------
 1439|  1.38k|        auto res = get_next_code_point(
 1440|  1.38k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1441|  1.38k|        cb(res.value);
 1442|  1.38k|        it = detail::make_string_view_iterator(input, res.iterator);
 1443|  1.38k|    }
 1444|  1.85k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1169|   224M|{
 1170|   224M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   224M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   224M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1171|       |
 1172|   224M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1173|   224M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   224M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 224M]
  |  |  ------------------
  ------------------
 1174|      0|        return {get_start_for_next_code_point(input),
 1175|      0|                detail::invalid_code_point};
 1176|      0|    }
 1177|   224M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   224M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 224M]
  |  |  ------------------
  ------------------
 1178|      0|        return {input.end(), detail::invalid_code_point};
 1179|      0|    }
 1180|       |
 1181|   224M|    return {input.begin() + len,
 1182|   224M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1183|   224M|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  1.85k|        : m_fptr([](storage fn,
  743|  1.85k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.85k|              cvref<T> obj = *get<T>(fn);
  745|  1.85k|              if constexpr (std::is_void_v<R>) {
  746|  1.85k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.85k|              }
  748|  1.85k|              else {
  749|  1.85k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.85k|              }
  751|  1.85k|          }),
  752|  1.85k|          m_storage(std::addressof(f))
  753|  1.85k|    {
  754|  1.85k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  1.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.38k|              cvref<T> obj = *get<T>(fn);
  745|  1.38k|              if constexpr (std::is_void_v<R>) {
  746|  1.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  1.38k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  1.38k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.38k|        else if constexpr (std::is_object_v<T>) {
  688|  1.38k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.38k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2341|  1.38k|    for_each_code_point(input, [&count](char32_t cp) {
 2342|  1.38k|        count += calculate_text_width_for_fmt_v10(cp);
 2343|  1.38k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  1.85k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.85k|        {
  662|  1.85k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1571|    236|    {
 1572|    236|        return m_view;
 1573|    236|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1561|    276|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2411|     36|    {
 2412|     36|        return m_multibyte_left;
 2413|     36|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2416|  12.0k|    {
 2417|  12.0k|        return *m_current;
 2418|  12.0k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2425|  7.70k|    {
 2426|  7.70k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  7.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2427|  7.70k|        _increment_current();
 2428|  7.70k|        return *this;
 2429|  7.70k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2658|  7.70k|    {
 2659|  7.70k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2659:13): [True: 7.70k, False: 0]
  ------------------
 2660|  7.70k|            auto cplen = _get_cp_length_at_current();
 2661|  7.70k|            m_multibyte_left = cplen - 1;
 2662|  7.70k|            m_count -= _get_width_at_current_cp_start(cplen);
 2663|  7.70k|        }
 2664|      0|        else {
 2665|      0|            --m_multibyte_left;
 2666|      0|        }
 2667|       |
 2668|  7.70k|        ++m_current;
 2669|  7.70k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2629|  7.70k|    {
 2630|  7.70k|        return static_cast<difference_type>(
 2631|  7.70k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2632|  7.70k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2635|  7.70k|    {
 2636|  7.70k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  7.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.70k]
  |  |  ------------------
  ------------------
 2637|      0|            return 0;
 2638|      0|        }
 2639|       |
 2640|  7.70k|        if (cplen == 1) {
  ------------------
  |  Branch (2640:13): [True: 7.70k, False: 0]
  ------------------
 2641|  7.70k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  7.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2642|  7.70k|            auto cp = static_cast<char32_t>(*m_current);
 2643|  7.70k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2644|  7.70k|        }
 2645|       |
 2646|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2647|      0|                                           cplen);
 2648|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2649|      0|            return 0;
 2650|      0|        }
 2651|       |
 2652|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2653|      0|        return static_cast<difference_type>(
 2654|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2655|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1846|    596|{
 1847|    596|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|    596|    if constexpr (ranges::sized_range<Range>) {
 1850|    596|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|    596|        if (sz < count) {
  ------------------
  |  Branch (1851:13): [True: 0, False: 596]
  ------------------
 1852|      0|            return unexpected(eof_error::eof);
 1853|      0|        }
 1854|       |
 1855|    596|        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|       |    else {
 1858|       |        auto it = range.begin();
 1859|       |        if (guaranteed_minimum_size(range) >= count) {
 1860|       |            return ranges::next(it, count);
 1861|       |        }
 1862|       |
 1863|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1864|       |            if (it == range.end()) {
 1865|       |                return unexpected(eof_error::eof);
 1866|       |            }
 1867|       |        }
 1868|       |
 1869|       |        return it;
 1870|       |    }
 1871|    596|}
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2521|  2.92k|    {
 2522|  2.92k|        return !(a == b);
 2523|  2.92k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2513|  3.00k|    {
 2514|  3.00k|        return a.m_current == b.m_current;
 2515|  3.00k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2420|    320|    {
 2421|    320|        return *m_current;
 2422|    320|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1879|  4.22k|    {
 1880|  4.22k|        return !codepoint.empty();
 1881|  4.22k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1672|     40|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|       |                  ranges::sized_range<Range>) {
 1676|       |        return string_view_wrapper{SCN_FWD(range)};
 1677|       |    }
 1678|     40|    else {
 1679|     40|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1680|     40|    }
 1681|     40|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1526|     40|    {
 1527|     40|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1528|     40|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1610|     40|    {
 1611|     40|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|     40|        else {
 1644|     40|            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|     40|            if constexpr (ranges::common_range<Range>) {
 1649|     40|                std::copy(ranges::begin(range), ranges::end(range),
 1650|     40|                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|     40|            m_view = string_view_type{str};
 1659|     40|        }
 1660|     40|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2371|  1.16k|        : m_current(x), m_end(s), m_count(n)
 2372|  1.16k|    {
 2373|  1.16k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2403|  10.1k|    {
 2404|  10.1k|        return m_current;
 2405|  10.1k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2106|    234|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|    234|    else {
 2116|    234|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|    234|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|    234|            return detail::is_cp_space(cp);
 2129|    234|        });
 2130|    234|    }
 2131|    234|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2071|    234|{
 2072|    234|    return read_until_code_point(range, std::not_fn(pred));
 2073|    234|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2050|    234|{
 2051|    234|    auto it = range.begin();
 2052|    252|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 252, False: 0]
  ------------------
 2053|    252|        const auto val =
 2054|    252|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|    252|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 252, False: 0]
  |  |  ------------------
  ------------------
 2056|    252|            const auto cp = detail::decode_code_point_exhaustive(
 2057|    252|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|    252|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 234, False: 18]
  ------------------
 2059|    234|                return it;
 2060|    234|            }
 2061|    252|        }
 2062|     18|        it = val.iterator;
 2063|     18|    }
 2064|       |
 2065|      0|    return it;
 2066|    234|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1888|  46.4k|{
 1889|  46.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  46.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  46.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  46.4k|    auto it = range.begin();
 1893|  46.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  46.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 46.4k]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|  46.4k|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 46.4k, False: 0]
  ------------------
 1902|  46.4k|        ++it;
 1903|  46.4k|        return {it, string_type(1, *range.begin())};
 1904|  46.4k|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|  46.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  48.8k|{
  945|  48.8k|    return is_range_eof(r.begin(), r.end());
  946|  48.8k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   224M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   224M|    {
  938|   224M|        return begin == end;
  939|   224M|    }
  940|   224M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|     98|    {
  190|     98|        i = std::move(bound);
  191|     98|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1879|  46.4k|    {
 1880|  46.4k|        return !codepoint.empty();
 1881|  46.4k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|    234|        : m_fptr([](storage fn,
  743|    234|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    234|              cvref<T> obj = *get<T>(fn);
  745|    234|              if constexpr (std::is_void_v<R>) {
  746|    234|                  obj(static_cast<decltype(args)>(args)...);
  747|    234|              }
  748|    234|              else {
  749|    234|                  return obj(static_cast<decltype(args)>(args)...);
  750|    234|              }
  751|    234|          }),
  752|    234|          m_storage(std::addressof(f))
  753|    234|    {
  754|    234|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|    252|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    252|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    252|              else {
  749|    252|                  return obj(static_cast<decltype(args)>(args)...);
  750|    252|              }
  751|    252|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|    252|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    252|        else if constexpr (std::is_object_v<T>) {
  688|    252|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    252|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2127|    252|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|    252|            return detail::is_cp_space(cp);
 2129|    252|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|    234|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    234|        {
  662|    234|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.44k|{
  951|  2.44k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.44k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  2.44k|    return eof_error::good;
  955|  2.44k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2822|    380|    {
 2823|    380|        return take_width_view{r, n};
 2824|    380|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2790|    380|        : m_base(base), m_count(count)
 2791|    380|    {
 2792|    380|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2704|    380|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5617|     20|    {
 5618|     20|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5618:13): [True: 20, False: 0]
  ------------------
 5619|     20|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5619:13): [True: 0, False: 0]
  ------------------
 5620|     20|            return read_default(range, value, loc);
 5621|     20|        }
 5622|       |
 5623|      0|        reader_impl_for_int<CharT> reader{};
 5624|      0|        using integer_type =
 5625|      0|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5626|      0|        integer_type tmp_value{};
 5627|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5628|      0|        value = static_cast<integer_type>(value);
 5629|      0|        return ret;
 5630|     20|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5601|     20|    {
 5602|     20|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     20|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5603|       |        if constexpr (std::is_same_v<CharT, char>) {
 5604|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5605|       |        }
 5606|     20|        else {
 5607|     20|            return code_unit_reader<wchar_t>{}.read(range, value);
 5608|     20|        }
 5609|     20|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5481|     20|    {
 5482|     20|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5483|     20|        ch = *range.begin();
 5484|     20|        return it;
 5485|     20|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1835|    140|{
 1836|    140|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 140]
  |  |  ------------------
  ------------------
 1837|      0|        return unexpected(e);
 1838|      0|    }
 1839|       |
 1840|    140|    return ranges::next(range.begin());
 1841|    140|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|    140|{
  951|    140|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 140]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    140|    return eof_error::good;
  955|    140|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|    140|{
  945|    140|    return is_range_eof(r.begin(), r.end());
  946|    140|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  4.36k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.36k|    {
  938|  4.36k|        return begin == end;
  939|  4.36k|    }
  940|  4.36k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2760|  9.96k|        {
 2761|  9.96k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2761:21): [True: 36, False: 9.92k]
  |  Branch (2761:39): [True: 36, False: 0]
  ------------------
 2762|  9.96k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2762:20): [True: 24, False: 9.90k]
  ------------------
 2763|  9.96k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2806|  1.42k|    {
 2807|  1.42k|        return sentinel<true>{m_base.get().end()};
 2808|  1.42k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2707|  3.74k|    {
 2708|  3.74k|        return view;
 2709|  3.74k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2741|  1.42k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  1.42k|    static_cast<    \
  |  |  935|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    140|    {
  296|    140|        ++x;
  297|    140|        return x;
  298|    140|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2800|  1.16k|    {
 2801|  1.16k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2802|  1.16k|                                      m_count};
 2803|  1.16k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3469|     20|    {
 3470|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     20|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 20]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|      0|            else {
 3481|      0|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 0]
  ------------------
 3482|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|      0|            }
 3488|      0|        }
 3489|       |
 3490|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 20]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3496|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|      0|                    parse_integer_digits_without_thsep(
 3498|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|      0|                        prefix_result.parsed_base));
 3500|       |
 3501|      0|            auto buf = make_contiguous_buffer(
 3502|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|      0|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3256|     60|{
 3257|     60|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|     60|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     60|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     60|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 60]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     60|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|     60|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|     60|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|     60|        parse_integer_base_prefix(
 3262|     60|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|     60|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 0, False: 60]
  ------------------
 3265|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 0, False: 0]
  |  Branch (3265:13): [True: 0, False: 0]
  ------------------
 3266|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 0, False: 0]
  ------------------
 3267|      0|            digits_begin_it = base_prefix_begin_it;
 3268|      0|        }
 3269|      0|        else {
 3270|      0|            parsed_zero = false;
 3271|      0|        }
 3272|      0|    }
 3273|     60|    else {
 3274|     60|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 0, False: 60]
  |  Branch (3274:13): [True: 60, False: 0]
  ------------------
 3275|     60|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 60, False: 0]
  ------------------
 3276|     60|            digits_begin_it = base_prefix_begin_it;
 3277|     60|        }
 3278|     60|    }
 3279|       |
 3280|     60|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 60, False: 0]
  ------------------
 3281|     60|        sign = sign_type::plus_sign;
 3282|     60|    }
 3283|     60|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|     60|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|     60|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3137|     80|{
 3138|     80|    auto r = read_one_of_code_unit(range, "+-");
 3139|     80|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 80, False: 0]
  ------------------
 3140|     80|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 80, False: 0]
  ------------------
 3141|     80|            return std::pair{range.begin(), sign_type::default_sign};
 3142|     80|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|     80|    }
 3145|       |
 3146|      0|    auto& it = *r;
 3147|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 0, False: 0]
  ------------------
 3148|      0|        return std::pair{it, sign_type::minus_sign};
 3149|      0|    }
 3150|      0|    return std::pair{it, sign_type::plus_sign};
 3151|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2262|     80|{
 2263|     80|    auto it = read_code_unit(range);
 2264|     80|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|    160|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 160, False: 80]
  ------------------
 2269|    160|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 0, False: 160]
  ------------------
 2270|      0|            return *it;
 2271|      0|        }
 2272|    160|    }
 2273|       |
 2274|     80|    return unexpected(parse_error::error);
 2275|     80|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3223|     60|{
 3224|     60|    switch (base) {
 3225|      0|        case 2:
  ------------------
  |  Branch (3225:9): [True: 0, False: 60]
  ------------------
 3226|       |            // allow 0b/0B
 3227|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|      0|                    false};
 3229|       |
 3230|      0|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 0, False: 60]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|      0|            bool zero_parsed = false;
 3233|      0|            auto it = apply_opt(
 3234|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|      0|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|     20|        case 16:
  ------------------
  |  Branch (3238:9): [True: 20, False: 40]
  ------------------
 3239|       |            // allow 0x/0X
 3240|     20|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|     20|                    false};
 3242|       |
 3243|      0|        case 0:
  ------------------
  |  Branch (3243:9): [True: 0, False: 60]
  ------------------
 3244|       |            // detect base
 3245|      0|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|     40|        default:
  ------------------
  |  Branch (3247:9): [True: 40, False: 20]
  ------------------
 3248|       |            // no base prefix allowed
 3249|     40|            return {range.begin(), base, false};
 3250|     60|    }
 3251|     60|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2281|     20|{
 2282|     20|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 20, False: 0]
  ------------------
 2283|     20|        return range.begin();
 2284|     20|    }
 2285|      0|    return *result;
 2286|     20|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2221|     80|{
 2222|     80|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|     80|    else {
 2235|     80|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|     80|            if (ch < 'A' || ch > 'Z') {
 2237|     80|                return ch;
 2238|     80|            }
 2239|     80|            return static_cast<char_type>(ch +
 2240|     80|                                          static_cast<char_type>('a' - 'A'));
 2241|     80|        };
 2242|       |
 2243|     80|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     80|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     80|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     80|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     80|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|     80|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|     80|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|     80|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 80, False: 0]
  |  |  ------------------
  ------------------
 2248|     80|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|     80|                    return ascii_tolower(a) ==
 2250|     80|                           static_cast<detail::char_t<Range>>(b);
 2251|     80|                }))) {
 2252|     80|            return unexpected(parse_error::error);
 2253|     80|        }
 2254|       |
 2255|      0|        return it;
 2256|     80|    }
 2257|     80|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1846|     80|{
 1847|     80|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|     80|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     80|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|     80|    else {
 1858|     80|        auto it = range.begin();
 1859|     80|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 0, False: 80]
  ------------------
 1860|      0|            return ranges::next(it, count);
 1861|      0|        }
 1862|       |
 1863|    280|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 200, False: 80]
  ------------------
 1864|    200|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 0, False: 200]
  ------------------
 1865|      0|                return unexpected(eof_error::eof);
 1866|      0|            }
 1867|    200|        }
 1868|       |
 1869|     80|        return it;
 1870|     80|    }
 1871|     80|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|     80|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|     80|    else {
 1116|     80|        return 0;
 1117|     80|    }
 1118|     80|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2235|     80|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|     80|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 0, False: 80]
  |  Branch (2236:29): [True: 80, False: 0]
  ------------------
 2237|     80|                return ch;
 2238|     80|            }
 2239|      0|            return static_cast<char_type>(ch +
 2240|      0|                                          static_cast<char_type>('a' - 'A'));
 2241|     80|        };
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  4.22k|{
  945|  4.22k|    return is_range_eof(r.begin(), r.end());
  946|  4.22k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3181|     20|{
 3182|     20|    return read_matching_string_classic_nocase(range, "0x");
 3183|     20|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3290|     60|{
 3291|     60|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|       |    if constexpr (ranges::contiguous_range<Range>) {
 3294|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3295|       |            return detail::unexpected_scan_error(
 3296|       |                scan_error::invalid_scanned_value,
 3297|       |                "Failed to parse integer: No digits found");
 3298|       |        }
 3299|       |        return range.end();
 3300|       |    }
 3301|     60|    else {
 3302|     60|        return read_while1_code_unit(range,
 3303|     60|                                     [&](char_type ch) noexcept {
 3304|     60|                                         return char_to_int(ch) < base;
 3305|     60|                                     })
 3306|     60|            .transform_error(map_parse_error_to_scan_error(
 3307|     60|                scan_error::invalid_scanned_value,
 3308|     60|                "Failed to parse integer: No digits found"));
 3309|     60|    }
 3310|     60|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1985|     80|{
 1986|     80|    auto it = read_while_code_unit(range, pred);
 1987|     80|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 80, False: 0]
  ------------------
 1988|     80|        return unexpected(parse_error::error);
 1989|     80|    }
 1990|      0|    return it;
 1991|     80|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1965|     80|{
 1966|     80|    return read_until_code_unit(range, std::not_fn(pred));
 1967|     80|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1946|     80|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|     80|    else {
 1951|     80|        auto first = range.begin();
 1952|     80|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 80, False: 0]
  ------------------
 1953|     80|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 80, False: 0]
  ------------------
 1954|     80|                return first;
 1955|     80|            }
 1956|     80|        }
 1957|      0|        return first;
 1958|     80|    }
 1959|     80|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2771|  4.68k|        {
 2772|  4.68k|            return !(y == x);
 2773|  4.68k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|     60|        : m_fptr([](storage fn,
  743|     60|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     60|              cvref<T> obj = *get<T>(fn);
  745|     60|              if constexpr (std::is_void_v<R>) {
  746|     60|                  obj(static_cast<decltype(args)>(args)...);
  747|     60|              }
  748|     60|              else {
  749|     60|                  return obj(static_cast<decltype(args)>(args)...);
  750|     60|              }
  751|     60|          }),
  752|     60|          m_storage(std::addressof(f))
  753|     60|    {
  754|     60|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|     60|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     60|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     60|              else {
  749|     60|                  return obj(static_cast<decltype(args)>(args)...);
  750|     60|              }
  751|     60|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|     60|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     60|        else if constexpr (std::is_object_v<T>) {
  688|     60|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     60|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3303|     60|                                     [&](char_type ch) noexcept {
 3304|     60|                                         return char_to_int(ch) < base;
 3305|     60|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|     60|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     60|        {
  662|     60|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2407|  10.0k|    {
 2408|  10.0k|        return m_count;
 2409|  10.0k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5617|     22|    {
 5618|     22|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5618:13): [True: 22, False: 0]
  ------------------
 5619|     22|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5619:13): [True: 0, False: 0]
  ------------------
 5620|     22|            return read_default(range, value, loc);
 5621|     22|        }
 5622|       |
 5623|      0|        reader_impl_for_int<CharT> reader{};
 5624|      0|        using integer_type =
 5625|      0|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5626|      0|        integer_type tmp_value{};
 5627|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5628|      0|        value = static_cast<integer_type>(value);
 5629|      0|        return ret;
 5630|     22|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5601|     98|    {
 5602|     98|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     98|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5603|       |        if constexpr (std::is_same_v<CharT, char>) {
 5604|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5605|       |        }
 5606|     98|        else {
 5607|     98|            return code_unit_reader<wchar_t>{}.read(range, value);
 5608|     98|        }
 5609|     98|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5481|     98|    {
 5482|     98|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5483|     98|        ch = *range.begin();
 5484|     98|        return it;
 5485|     98|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1835|    686|{
 1836|    686|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    686|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 686]
  |  |  ------------------
  ------------------
 1837|      0|        return unexpected(e);
 1838|      0|    }
 1839|       |
 1840|    686|    return ranges::next(range.begin());
 1841|    686|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   224M|    {
  296|   224M|        ++x;
  297|   224M|        return x;
  298|   224M|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|     22|    {
 3470|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     22|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 22]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|      0|            else {
 3481|      0|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 0]
  ------------------
 3482|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|      0|            }
 3488|      0|        }
 3489|       |
 3490|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 22]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3496|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|     22|                    parse_integer_digits_without_thsep(
 3498|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|     22|                        prefix_result.parsed_base));
 3500|       |
 3501|     22|            auto buf = make_contiguous_buffer(
 3502|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|     22|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3256|    294|{
 3257|    294|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|    294|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|    294|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|    294|        parse_integer_base_prefix(
 3262|    294|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|    294|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 0, False: 294]
  ------------------
 3265|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 0, False: 0]
  ------------------
 3266|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 0, False: 0]
  ------------------
 3267|      0|            digits_begin_it = base_prefix_begin_it;
 3268|      0|        }
 3269|      0|        else {
 3270|      0|            parsed_zero = false;
 3271|      0|        }
 3272|      0|    }
 3273|    294|    else {
 3274|    294|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 0, False: 294]
  ------------------
 3275|    294|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 294, False: 0]
  ------------------
 3276|    294|            digits_begin_it = base_prefix_begin_it;
 3277|    294|        }
 3278|    294|    }
 3279|       |
 3280|    294|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 294, False: 0]
  ------------------
 3281|    294|        sign = sign_type::plus_sign;
 3282|    294|    }
 3283|    294|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|    294|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|    294|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3137|    392|{
 3138|    392|    auto r = read_one_of_code_unit(range, "+-");
 3139|    392|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 392, False: 0]
  ------------------
 3140|    392|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 392, False: 0]
  ------------------
 3141|    392|            return std::pair{range.begin(), sign_type::default_sign};
 3142|    392|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|    392|    }
 3145|       |
 3146|      0|    auto& it = *r;
 3147|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 0, False: 0]
  ------------------
 3148|      0|        return std::pair{it, sign_type::minus_sign};
 3149|      0|    }
 3150|      0|    return std::pair{it, sign_type::plus_sign};
 3151|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2262|    392|{
 2263|    392|    auto it = read_code_unit(range);
 2264|    392|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 392]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|    784|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 784, False: 392]
  ------------------
 2269|    784|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 0, False: 784]
  ------------------
 2270|      0|            return *it;
 2271|      0|        }
 2272|    784|    }
 2273|       |
 2274|    392|    return unexpected(parse_error::error);
 2275|    392|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3223|    294|{
 3224|    294|    switch (base) {
 3225|      0|        case 2:
  ------------------
  |  Branch (3225:9): [True: 0, False: 294]
  ------------------
 3226|       |            // allow 0b/0B
 3227|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|      0|                    false};
 3229|       |
 3230|      0|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 0, False: 294]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|      0|            bool zero_parsed = false;
 3233|      0|            auto it = apply_opt(
 3234|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|      0|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|     98|        case 16:
  ------------------
  |  Branch (3238:9): [True: 98, False: 196]
  ------------------
 3239|       |            // allow 0x/0X
 3240|     98|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|     98|                    false};
 3242|       |
 3243|      0|        case 0:
  ------------------
  |  Branch (3243:9): [True: 0, False: 294]
  ------------------
 3244|       |            // detect base
 3245|      0|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|    196|        default:
  ------------------
  |  Branch (3247:9): [True: 196, False: 98]
  ------------------
 3248|       |            // no base prefix allowed
 3249|    196|            return {range.begin(), base, false};
 3250|    294|    }
 3251|    294|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2281|     98|{
 2282|     98|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 98, False: 0]
  ------------------
 2283|     98|        return range.begin();
 2284|     98|    }
 2285|      0|    return *result;
 2286|     98|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2221|    392|{
 2222|    392|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|    392|    else {
 2235|    392|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|    392|            if (ch < 'A' || ch > 'Z') {
 2237|    392|                return ch;
 2238|    392|            }
 2239|    392|            return static_cast<char_type>(ch +
 2240|    392|                                          static_cast<char_type>('a' - 'A'));
 2241|    392|        };
 2242|       |
 2243|    392|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|    392|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|    392|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|    392|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 392, False: 0]
  |  |  ------------------
  ------------------
 2248|    392|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|    392|                    return ascii_tolower(a) ==
 2250|    392|                           static_cast<detail::char_t<Range>>(b);
 2251|    392|                }))) {
 2252|    392|            return unexpected(parse_error::error);
 2253|    392|        }
 2254|       |
 2255|      0|        return it;
 2256|    392|    }
 2257|    392|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2235|    392|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|    392|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 0, False: 392]
  |  Branch (2236:29): [True: 392, False: 0]
  ------------------
 2237|    392|                return ch;
 2238|    392|            }
 2239|      0|            return static_cast<char_type>(ch +
 2240|      0|                                          static_cast<char_type>('a' - 'A'));
 2241|    392|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2136|    196|{
 2137|    196|    auto it = read_code_unit(range);
 2138|    196|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 196]
  |  |  ------------------
  ------------------
 2139|      0|        return unexpected(make_eof_parse_error(it.error()));
 2140|      0|    }
 2141|       |
 2142|    196|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 196, False: 0]
  |  |  ------------------
  ------------------
 2143|    196|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|    196|        return unexpected(parse_error::error);
 2145|    196|    }
 2146|       |
 2147|      0|    return *it;
 2148|    196|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3181|     98|{
 3182|     98|    return read_matching_string_classic_nocase(range, "0x");
 3183|     98|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3290|    294|{
 3291|    294|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|    294|    if constexpr (ranges::contiguous_range<Range>) {
 3294|    294|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 294]
  |  |  ------------------
  ------------------
 3295|      0|            return detail::unexpected_scan_error(
 3296|      0|                scan_error::invalid_scanned_value,
 3297|      0|                "Failed to parse integer: No digits found");
 3298|      0|        }
 3299|    294|        return range.end();
 3300|       |    }
 3301|       |    else {
 3302|       |        return read_while1_code_unit(range,
 3303|       |                                     [&](char_type ch) noexcept {
 3304|       |                                         return char_to_int(ch) < base;
 3305|       |                                     })
 3306|       |            .transform_error(map_parse_error_to_scan_error(
 3307|       |                scan_error::invalid_scanned_value,
 3308|       |                "Failed to parse integer: No digits found"));
 3309|       |    }
 3310|    294|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1672|  3.40k|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  3.40k|                  ranges::sized_range<Range>) {
 1676|  3.40k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  3.40k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1478|  3.40k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  3.40k|    {
 1480|  3.40k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1492|  3.98k|    {
 1493|  3.98k|        return sv;
 1494|  3.98k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5868|      6|{
 5869|      6|    using char_type = detail::char_t<Range>;
 5870|      6|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5871|       |
 5872|      6|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5872:9): [True: 6, False: 0]
  ------------------
 5873|      6|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5874|      6|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5875|       |
 5876|      6|        if (max_width == 0) {
  ------------------
  |  Branch (5876:13): [True: 6, False: 0]
  ------------------
 5877|      6|            auto it = read_while_code_unit(range, pred);
 5878|       |
 5879|      6|            if (want_skipped_width) {
  ------------------
  |  Branch (5879:17): [True: 0, False: 6]
  ------------------
 5880|      0|                auto prefix_width =
 5881|      0|                    static_cast<std::ptrdiff_t>(
 5882|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5883|      0|                    ranges::distance(range.begin(), it);
 5884|      0|                return result_type{it, prefix_width};
 5885|      0|            }
 5886|      6|            return result_type{it, 0};
 5887|      6|        }
 5888|       |
 5889|      0|        auto max_width_view = take_width(range, max_width);
 5890|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 5891|       |
 5892|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5892:13): [True: 0, False: 0]
  ------------------
 5893|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 5894|      0|        }
 5895|      0|        return result_type{w_it.base(), 0};
 5896|      0|    }
 5897|       |
 5898|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5899|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5899:9): [True: 0, False: 0]
  ------------------
 5900|      0|        auto it = read_while_code_units(range, fill_chars);
 5901|       |
 5902|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5902:13): [True: 0, False: 0]
  ------------------
 5903|      0|            auto prefix_width =
 5904|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5905|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5906|      0|            return result_type{it, prefix_width};
 5907|      0|        }
 5908|      0|        return result_type{it, 0};
 5909|      0|    }
 5910|       |
 5911|      0|    auto max_width_view = take_width(range, max_width);
 5912|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5913|       |
 5914|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5914:9): [True: 0, False: 0]
  ------------------
 5915|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5916|      0|    }
 5917|      0|    return result_type{w_it.base(), 0};
 5918|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1965|      6|{
 1966|      6|    return read_until_code_unit(range, std::not_fn(pred));
 1967|      6|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1946|     18|{
 1947|     18|    if constexpr (ranges::common_range<Range>) {
 1948|     18|        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|       |    else {
 1951|       |        auto first = range.begin();
 1952|       |        for (; first != range.end(); ++first) {
 1953|       |            if (pred(*first)) {
 1954|       |                return first;
 1955|       |            }
 1956|       |        }
 1957|       |        return first;
 1958|       |    }
 1959|     18|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  685|      6|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5874|      6|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|      6|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|      6|        {
  667|      6|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2945|     20|{
 2946|     20|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 0, False: 20]
  ------------------
 2947|      0|        auto it = read_while_classic_space(range);
 2948|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2950|      0|            return unexpected(e);
 2951|      0|        }
 2952|       |
 2953|      0|        return it;
 2954|      0|    }
 2955|       |
 2956|     20|    return read_while_classic_space(range);
 2957|     20|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2106|     20|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|     20|    else {
 2116|     20|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|     20|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|     20|            return detail::is_cp_space(cp);
 2129|     20|        });
 2130|     20|    }
 2131|     20|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2071|     20|{
 2072|     20|    return read_until_code_point(range, std::not_fn(pred));
 2073|     20|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2050|     20|{
 2051|     20|    auto it = range.begin();
 2052|     20|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 20, False: 0]
  ------------------
 2053|     20|        const auto val =
 2054|     20|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|     20|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 2056|     20|            const auto cp = detail::decode_code_point_exhaustive(
 2057|     20|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|     20|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 20, False: 0]
  ------------------
 2059|     20|                return it;
 2060|     20|            }
 2061|     20|        }
 2062|      0|        it = val.iterator;
 2063|      0|    }
 2064|       |
 2065|      0|    return it;
 2066|     20|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1888|  4.22k|{
 1889|  4.22k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  4.22k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  4.22k|    auto it = range.begin();
 1893|  4.22k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  4.22k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.22k]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|  4.22k|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 4.22k, False: 0]
  ------------------
 1902|  4.22k|        ++it;
 1903|  4.22k|        return {it, string_type(1, *range.begin())};
 1904|  4.22k|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|  4.22k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|     20|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     20|        else if constexpr (std::is_object_v<T>) {
  688|     20|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     20|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2127|     20|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|     20|            return detail::is_cp_space(cp);
 2129|     20|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|  1.62k|{
 2946|  1.62k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 784, False: 836]
  ------------------
 2947|    784|        auto it = read_while_classic_space(range);
 2948|    784|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|    784|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    784|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 784]
  |  |  ------------------
  ------------------
 2950|      0|            return unexpected(e);
 2951|      0|        }
 2952|       |
 2953|    784|        return it;
 2954|    784|    }
 2955|       |
 2956|    836|    return read_while_classic_space(range);
 2957|  1.62k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|  1.85k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|  1.85k|    else {
 2116|  1.85k|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|  1.85k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  1.85k|            return detail::is_cp_space(cp);
 2129|  1.85k|        });
 2130|  1.85k|    }
 2131|  1.85k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2071|  1.87k|{
 2072|  1.87k|    return read_until_code_point(range, std::not_fn(pred));
 2073|  1.87k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2050|  2.17k|{
 2051|  2.17k|    auto it = range.begin();
 2052|  46.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 46.1k, False: 276]
  ------------------
 2053|  46.1k|        const auto val =
 2054|  46.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  46.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  46.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 46.1k, False: 0]
  |  |  ------------------
  ------------------
 2056|  46.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  46.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  46.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 1.89k, False: 44.2k]
  ------------------
 2059|  1.89k|                return it;
 2060|  1.89k|            }
 2061|  46.1k|        }
 2062|  44.2k|        it = val.iterator;
 2063|  44.2k|    }
 2064|       |
 2065|    276|    return it;
 2066|  2.17k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.85k|        : m_fptr([](storage fn,
  743|  1.85k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.85k|              cvref<T> obj = *get<T>(fn);
  745|  1.85k|              if constexpr (std::is_void_v<R>) {
  746|  1.85k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.85k|              }
  748|  1.85k|              else {
  749|  1.85k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.85k|              }
  751|  1.85k|          }),
  752|  1.85k|          m_storage(std::addressof(f))
  753|  1.85k|    {
  754|  1.85k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.89k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.89k|              else {
  749|  1.89k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.89k|              }
  751|  1.89k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.89k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.89k|        else if constexpr (std::is_object_v<T>) {
  688|  1.89k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.89k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2127|  1.89k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  1.89k|            return detail::is_cp_space(cp);
 2129|  1.89k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.85k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.85k|        {
  662|  1.85k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|  3.18k|    {
 3036|  3.18k|        reader_error_handler eh{};
 3037|  3.18k|        get_derived().check_specs_impl(specs, eh);
 3038|  3.18k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.09k, False: 84]
  |  |  ------------------
  ------------------
 3039|  3.09k|            return detail::unexpected_scan_error(
 3040|  3.09k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  3.09k|        }
 3042|     84|        return {};
 3043|  3.18k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3047|  3.18k|    {
 3048|  3.18k|        return static_cast<Derived&>(*this);
 3049|  3.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3415|  3.18k|    {
 3416|  3.18k|        detail::check_int_type_specs(specs, eh);
 3417|  3.18k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3030|    236|    {
 3031|    236|        return true;
 3032|    236|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3469|     20|    {
 3470|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     20|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 20]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 20]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3496|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|      0|                    parse_integer_digits_without_thsep(
 3498|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|      0|                        prefix_result.parsed_base));
 3500|       |
 3501|      0|            auto buf = make_contiguous_buffer(
 3502|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|      0|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|     22|    {
 3470|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     22|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 22]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 22]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3496|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|     22|                    parse_integer_digits_without_thsep(
 3498|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|     22|                        prefix_result.parsed_base));
 3500|       |
 3501|     22|            auto buf = make_contiguous_buffer(
 3502|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|     22|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3469|     20|    {
 3470|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     20|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 20]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 20]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3496|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|      0|                    parse_integer_digits_without_thsep(
 3498|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|      0|                        prefix_result.parsed_base));
 3500|       |
 3501|      0|            auto buf = make_contiguous_buffer(
 3502|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|      0|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|     98|    {
 3470|     98|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|     98|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|     98|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 0, False: 98]
  ------------------
 3474|      0|            if constexpr (!std::is_signed_v<T>) {
 3475|      0|                return detail::unexpected_scan_error(
 3476|      0|                    scan_error::invalid_scanned_value,
 3477|      0|                    "Unexpected '-' sign when parsing an "
 3478|      0|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|      0|        }
 3489|       |
 3490|     98|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 0, False: 98]
  ------------------
 3491|      0|            value = T{0};
 3492|      0|            return std::next(prefix_result.iterator);
 3493|      0|        }
 3494|       |
 3495|     98|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     98|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 98, False: 0]
  |  |  ------------------
  ------------------
 3496|     98|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|     98|                    parse_integer_digits_without_thsep(
 3498|     98|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|     98|                        prefix_result.parsed_base));
 3500|       |
 3501|     98|            auto buf = make_contiguous_buffer(
 3502|     98|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|     98|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     98|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|      0|                                        prefix_result.parsed_base));
 3506|       |
 3507|      0|            return ranges::next(
 3508|      0|                prefix_result.iterator,
 3509|      0|                ranges::distance(buf.view().begin(), result_it));
 3510|     98|        }
 3511|       |
 3512|      0|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|      0|            localized_number_formatting_options<CharT>{loc};
 3517|      0|#endif
 3518|       |
 3519|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|      0|                parse_integer_digits_with_thsep(
 3521|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|      0|                    prefix_result.parsed_base, locale_options));
 3523|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|      0|            parse_digits_result;
 3525|       |
 3526|      0|        auto nothsep_source_view =
 3527|      0|            std::basic_string_view<CharT>{nothsep_source};
 3528|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|      0|            nothsep_source_it,
 3530|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|      0|                                prefix_result.parsed_base));
 3532|       |
 3533|      0|        return ranges::next(
 3534|      0|            prefix_result.iterator,
 3535|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|      0|                ranges::ssize(thsep_indices));
 3537|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|  1.59k|    {
 3036|  1.59k|        reader_error_handler eh{};
 3037|  1.59k|        get_derived().check_specs_impl(specs, eh);
 3038|  1.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  ------------------
  ------------------
 3039|  1.54k|            return detail::unexpected_scan_error(
 3040|  1.54k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  1.54k|        }
 3042|     42|        return {};
 3043|  1.59k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3047|  1.59k|    {
 3048|  1.59k|        return static_cast<Derived&>(*this);
 3049|  1.59k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4057|  1.59k|    {
 4058|  1.59k|        detail::check_float_type_specs(specs, eh);
 4059|  1.59k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3030|    118|    {
 3031|    118|        return true;
 3032|    118|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4129|     42|    {
 4130|     42|        unsigned options{};
 4131|     42|        if (specs.localized) {
  ------------------
  |  Branch (4131:13): [True: 0, False: 42]
  ------------------
 4132|      0|            options |= float_reader_base::allow_thsep;
 4133|      0|        }
 4134|       |
 4135|     42|        SCN_GCC_COMPAT_PUSH
 4136|     42|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4137|       |
 4138|     42|        switch (specs.type) {
 4139|      0|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4139:13): [True: 0, False: 42]
  ------------------
 4140|      0|                return options | float_reader_base::allow_fixed;
 4141|       |
 4142|      0|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4142:13): [True: 0, False: 42]
  ------------------
 4143|      0|                return options | float_reader_base::allow_scientific;
 4144|       |
 4145|      0|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4145:13): [True: 0, False: 42]
  ------------------
 4146|      0|                return options | float_reader_base::allow_hex;
 4147|       |
 4148|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4148:13): [True: 0, False: 42]
  ------------------
 4149|      0|                return options | float_reader_base::allow_scientific |
 4150|      0|                       float_reader_base::allow_fixed;
 4151|       |
 4152|     42|            case detail::presentation_type::none:
  ------------------
  |  Branch (4152:13): [True: 42, False: 0]
  ------------------
 4153|     42|                return options | float_reader_base::allow_scientific |
 4154|     42|                       float_reader_base::allow_fixed |
 4155|     42|                       float_reader_base::allow_hex;
 4156|       |
 4157|      0|            default:
  ------------------
  |  Branch (4157:13): [True: 0, False: 42]
  ------------------
 4158|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4159|     42|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4160|     42|        }
 4161|       |
 4162|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4163|     42|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3581|     42|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1760|    118|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1521|    236|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 3969|     98|    {
 3970|     98|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (3970:13): [True: 98, False: 0]
  ------------------
 3971|     98|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (3971:13): [True: 98, False: 0]
  ------------------
 3972|     98|            return;
 3973|     98|        }
 3974|       |
 3975|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 3976|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (3976:13): [True: 0, False: 0]
  ------------------
 3977|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (3977:27): [True: 0, False: 0]
  ------------------
 3978|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (3978:21): [True: 0, False: 0]
  ------------------
 3979|      0|                    ch = CharT{'.'};
 3980|      0|                }
 3981|      0|            }
 3982|      0|        }
 3983|       |
 3984|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 0]
  ------------------
 3985|      0|            return;
 3986|      0|        }
 3987|       |
 3988|      0|        auto first =
 3989|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 3990|      0|        if (first == str.end()) {
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|      0|            return;
 3992|      0|        }
 3993|       |
 3994|      0|        m_thsep_indices.push_back(
 3995|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 3996|       |
 3997|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (3997:31): [True: 0, False: 0]
  ------------------
 3998|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (3998:17): [True: 0, False: 0]
  ------------------
 3999|      0|                *first++ = std::move(*it);
 4000|      0|            }
 4001|      0|            else {
 4002|      0|                m_thsep_indices.push_back(
 4003|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4004|      0|            }
 4005|      0|        }
 4006|       |
 4007|      0|        str.erase(first, str.end());
 4008|      0|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|     20|    {
  763|     20|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     20|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3626|     20|    {
 3627|     20|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|     20|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|     20|        auto it = sign_result.first;
 3630|     20|        m_sign = sign_result.second;
 3631|       |
 3632|     20|        auto digits_begin = it;
 3633|     20|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|       |                      ranges::sized_range<Range>) {
 3636|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3637|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|       |                SCN_TRY_ASSIGN(
 3639|       |                    it,
 3640|       |                    do_read_source_impl(
 3641|       |                        r,
 3642|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|       |            }
 3645|       |            else {
 3646|       |                auto cb = [&](const auto& rr)
 3647|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|       |                    auto res = read_all(rr);
 3649|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|       |                        return detail::unexpected_scan_error(
 3651|       |                            scan_error::invalid_scanned_value,
 3652|       |                            "Invalid float value");
 3653|       |                    }
 3654|       |                    return res;
 3655|       |                };
 3656|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3657|       |            }
 3658|       |        }
 3659|     20|        else {
 3660|     20|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     20|    }                                                  \
  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3661|      0|                it,
 3662|      0|                do_read_source_impl(
 3663|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|      0|        }
 3666|       |
 3667|     20|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 0, False: 0]
  |  Branch (3669:48): [True: 0, False: 0]
  ------------------
 3670|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 0, False: 0]
  ------------------
 3671|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 0, False: 0]
  ------------------
 3672|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|      0|        }
 3674|       |
 3675|      0|        handle_separators();
 3676|       |
 3677|      0|        return it;
 3678|     20|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3912|     20|    {
 3913|     20|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|     20|        const bool allowed_nonhex =
 3915|     20|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|     20|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|     20|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 20, False: 0]
  |  Branch (3918:45): [True: 0, False: 20]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|     20|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 0, False: 20]
  ------------------
 3924|      0|            return *r;
 3925|      0|        }
 3926|       |
 3927|     20|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 20, False: 0]
  |  Branch (3927:45): [True: 0, False: 20]
  ------------------
 3928|      0|            return unexpected(r.error());
 3929|      0|        }
 3930|     20|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 0, False: 20]
  ------------------
 3931|      0|            return *r;
 3932|      0|        }
 3933|       |
 3934|     20|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 20, False: 0]
  |  Branch (3934:28): [True: 0, False: 20]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|      0|            auto it = range.begin();
 3938|       |
 3939|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 0, False: 0]
  ------------------
 3940|      0|                m_kind = float_kind::hex_with_prefix;
 3941|      0|                it = *r;
 3942|      0|            }
 3943|      0|            else {
 3944|      0|                m_kind = float_kind::hex_without_prefix;
 3945|      0|            }
 3946|       |
 3947|      0|            return read_hex(ranges::subrange{it, range.end()});
 3948|      0|        }
 3949|     20|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 0, False: 20]
  |  Branch (3949:29): [True: 0, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|      0|            m_kind = float_kind::generic;
 3953|      0|            return read_regular_float(range);
 3954|      0|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|     20|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 3960|      0|            m_kind = float_kind::hex_with_prefix;
 3961|      0|            return read_hex(ranges::subrange{*r, range.end()});
 3962|      0|        }
 3963|       |
 3964|     20|        m_kind = float_kind::generic;
 3965|     20|        return read_regular(range);
 3966|     20|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3720|     20|    {
 3721|     20|        auto it = range.begin();
 3722|     20|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 20, False: 0]
  ------------------
 3723|     20|            return unexpected(r.error());
 3724|     20|        }
 3725|      0|        else {
 3726|      0|            it = *r;
 3727|      0|        }
 3728|       |
 3729|      0|        if (auto r = read_matching_string_classic_nocase(
 3730|      0|                ranges::subrange{it, range.end()}, "inity");
 3731|      0|            !r) {
  ------------------
  |  Branch (3731:13): [True: 0, False: 0]
  ------------------
 3732|      0|            m_kind = float_kind::inf_short;
 3733|      0|            return it;
 3734|      0|        }
 3735|      0|        else {
 3736|      0|            m_kind = float_kind::inf_long;
 3737|      0|            return *r;
 3738|      0|        }
 3739|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3743|     20|    {
 3744|     20|        auto it = range.begin();
 3745|     20|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 20, False: 0]
  ------------------
 3746|     20|            return r.transform_error(map_parse_error_to_scan_error(
 3747|     20|                scan_error::invalid_scanned_value,
 3748|     20|                "Invalid floating-point NaN value"));
 3749|     20|        }
 3750|      0|        else {
 3751|      0|            it = *r;
 3752|      0|        }
 3753|       |
 3754|      0|        if (auto r =
 3755|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|      0|            !r) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            m_kind = float_kind::nan_simple;
 3758|      0|            return it;
 3759|      0|        }
 3760|      0|        else {
 3761|      0|            it = *r;
 3762|      0|        }
 3763|       |
 3764|      0|        auto payload_beg_it = it;
 3765|      0|        it = read_while_code_unit(
 3766|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|      0|                return is_ascii_char(ch) &&
 3768|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|      0|            });
 3771|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|      0|        m_kind = float_kind::nan_with_payload;
 3774|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 0, False: 0]
  ------------------
 3775|      0|                                             ')')) {
 3776|      0|            return *r;
 3777|      0|        }
 3778|      0|        return detail::unexpected_scan_error(
 3779|      0|            scan_error::invalid_scanned_value,
 3780|      0|            "Invalid floating-point NaN payload");
 3781|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3713|     20|    {
 3714|     20|        return read_matching_string_classic_nocase(range, "0x");
 3715|     20|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3855|     20|    {
 3856|     20|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3857|     20|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3857:35): [True: 20, False: 0]
  |  Branch (3857:50): [True: 0, False: 20]
  ------------------
 3858|       |
 3859|     20|        auto it = ranges::begin(range);
 3860|     20|        std::ptrdiff_t digits_count = 0;
 3861|       |
 3862|     20|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3863|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3864|     20|            return r.transform_error(
 3865|     20|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3866|     20|                                              "Invalid floating-point value"));
 3867|     20|        }
 3868|      0|        else {
 3869|      0|            digits_count += ranges::distance(it, *r);
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        m_integral_part_length = digits_count;
 3874|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3874:18): [True: 0, False: 0]
  ------------------
 3875|      0|                                             m_locale_options.decimal_point)) {
 3876|      0|            it = *r;
 3877|      0|        }
 3878|       |
 3879|      0|        if (auto r =
  ------------------
  |  Branch (3879:18): [True: 0, False: 0]
  ------------------
 3880|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3881|      0|            digits_count += ranges::distance(it, *r);
 3882|      0|            it = *r;
 3883|      0|        }
 3884|       |
 3885|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3886|      0|            return detail::unexpected_scan_error(
 3887|      0|                scan_error::invalid_scanned_value,
 3888|      0|                "No significand digits in float");
 3889|      0|        }
 3890|       |
 3891|      0|        auto beg_exp_it = it;
 3892|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3892:13): [True: 0, False: 0]
  ------------------
 3893|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3894|      0|        }
 3895|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3895:13): [True: 0, False: 0]
  |  Branch (3895:29): [True: 0, False: 0]
  ------------------
 3896|      0|            return detail::unexpected_scan_error(
 3897|      0|                scan_error::invalid_scanned_value,
 3898|      0|                "No exponent given to scientific float");
 3899|      0|        }
 3900|       |
 3901|      0|        m_kind =
 3902|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3902:13): [True: 0, False: 0]
  ------------------
 3903|       |
 3904|      0|        return it;
 3905|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3683|     20|    {
 3684|     20|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  Branch (865:45): [True: 0, False: 20]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3685|     20|                         thsep_allowed)) {
 3686|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3687|      0|                return char_to_int(ch) < 10 ||
 3688|      0|                       ch == m_locale_options.thousands_sep;
 3689|      0|            });
 3690|      0|        }
 3691|       |
 3692|     20|        return read_while1_code_unit(
 3693|     20|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3694|     20|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     20|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     20|        else if constexpr (std::is_object_v<T>) {
  688|     20|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     20|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3693|     20|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3586|     20|    {
 3587|     20|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|     20|        return read_source_impl(range);
 3593|     20|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|     98|    {
  763|     98|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     98|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3626|     98|    {
 3627|     98|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|     98|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|     98|        auto it = sign_result.first;
 3630|     98|        m_sign = sign_result.second;
 3631|       |
 3632|     98|        auto digits_begin = it;
 3633|     98|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|     98|                      ranges::sized_range<Range>) {
 3636|     98|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  |  Branch (865:45): [True: 0, False: 98]
  |  |  |  Branch (865:45): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 3637|     98|                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3639|      0|                    it,
 3640|      0|                    do_read_source_impl(
 3641|      0|                        r,
 3642|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|      0|            }
 3645|     98|            else {
 3646|     98|                auto cb = [&](const auto& rr)
 3647|     98|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|     98|                    auto res = read_all(rr);
 3649|     98|                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|     98|                        return detail::unexpected_scan_error(
 3651|     98|                            scan_error::invalid_scanned_value,
 3652|     98|                            "Invalid float value");
 3653|     98|                    }
 3654|     98|                    return res;
 3655|     98|                };
 3656|     98|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3657|     98|            }
 3658|       |        }
 3659|       |        else {
 3660|       |            SCN_TRY_ASSIGN(
 3661|       |                it,
 3662|       |                do_read_source_impl(
 3663|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|       |        }
 3666|       |
 3667|     98|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|     98|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 98, False: 0]
  |  Branch (3669:48): [True: 98, False: 0]
  ------------------
 3670|     98|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 98, False: 0]
  ------------------
 3671|     98|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 98, False: 0]
  ------------------
 3672|     98|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|     98|        }
 3674|       |
 3675|     98|        handle_separators();
 3676|       |
 3677|     98|        return it;
 3678|     98|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3720|     98|    {
 3721|     98|        auto it = range.begin();
 3722|     98|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 98, False: 0]
  ------------------
 3723|     98|            return unexpected(r.error());
 3724|     98|        }
 3725|      0|        else {
 3726|      0|            it = *r;
 3727|      0|        }
 3728|       |
 3729|      0|        if (auto r = read_matching_string_classic_nocase(
 3730|      0|                ranges::subrange{it, range.end()}, "inity");
 3731|      0|            !r) {
  ------------------
  |  Branch (3731:13): [True: 0, False: 0]
  ------------------
 3732|      0|            m_kind = float_kind::inf_short;
 3733|      0|            return it;
 3734|      0|        }
 3735|      0|        else {
 3736|      0|            m_kind = float_kind::inf_long;
 3737|      0|            return *r;
 3738|      0|        }
 3739|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3743|     98|    {
 3744|     98|        auto it = range.begin();
 3745|     98|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 98, False: 0]
  ------------------
 3746|     98|            return r.transform_error(map_parse_error_to_scan_error(
 3747|     98|                scan_error::invalid_scanned_value,
 3748|     98|                "Invalid floating-point NaN value"));
 3749|     98|        }
 3750|      0|        else {
 3751|      0|            it = *r;
 3752|      0|        }
 3753|       |
 3754|      0|        if (auto r =
 3755|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|      0|            !r) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            m_kind = float_kind::nan_simple;
 3758|      0|            return it;
 3759|      0|        }
 3760|      0|        else {
 3761|      0|            it = *r;
 3762|      0|        }
 3763|       |
 3764|      0|        auto payload_beg_it = it;
 3765|      0|        it = read_while_code_unit(
 3766|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|      0|                return is_ascii_char(ch) &&
 3768|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|      0|            });
 3771|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|      0|        m_kind = float_kind::nan_with_payload;
 3774|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 0, False: 0]
  ------------------
 3775|      0|                                             ')')) {
 3776|      0|            return *r;
 3777|      0|        }
 3778|      0|        return detail::unexpected_scan_error(
 3779|      0|            scan_error::invalid_scanned_value,
 3780|      0|            "Invalid floating-point NaN payload");
 3781|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3713|     98|    {
 3714|     98|        return read_matching_string_classic_nocase(range, "0x");
 3715|     98|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3912|     98|    {
 3913|     98|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|     98|        const bool allowed_nonhex =
 3915|     98|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|     98|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|     98|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 98, False: 0]
  |  Branch (3918:45): [True: 0, False: 98]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|     98|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 0, False: 98]
  ------------------
 3924|      0|            return *r;
 3925|      0|        }
 3926|       |
 3927|     98|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 98, False: 0]
  |  Branch (3927:45): [True: 0, False: 98]
  ------------------
 3928|      0|            return unexpected(r.error());
 3929|      0|        }
 3930|     98|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 0, False: 98]
  ------------------
 3931|      0|            return *r;
 3932|      0|        }
 3933|       |
 3934|     98|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 98, False: 0]
  |  Branch (3934:28): [True: 0, False: 98]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|      0|            auto it = range.begin();
 3938|       |
 3939|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 0, False: 0]
  ------------------
 3940|      0|                m_kind = float_kind::hex_with_prefix;
 3941|      0|                it = *r;
 3942|      0|            }
 3943|      0|            else {
 3944|      0|                m_kind = float_kind::hex_without_prefix;
 3945|      0|            }
 3946|       |
 3947|      0|            return read_hex(ranges::subrange{it, range.end()});
 3948|      0|        }
 3949|     98|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 0, False: 98]
  |  Branch (3949:29): [True: 0, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|      0|            m_kind = float_kind::generic;
 3953|      0|            return read_regular_float(range);
 3954|      0|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|     98|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 3960|      0|            m_kind = float_kind::hex_with_prefix;
 3961|      0|            return read_hex(ranges::subrange{*r, range.end()});
 3962|      0|        }
 3963|       |
 3964|     98|        m_kind = float_kind::generic;
 3965|     98|        return read_regular(range);
 3966|     98|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3647|     98|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|     98|                    auto res = read_all(rr);
 3649|     98|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 3650|      0|                        return detail::unexpected_scan_error(
 3651|      0|                            scan_error::invalid_scanned_value,
 3652|      0|                            "Invalid float value");
 3653|      0|                    }
 3654|     98|                    return res;
 3655|     98|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1828|     98|{
 1829|     98|    return ranges::next(range.begin(), range.end());
 1830|     98|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|     98|    {
  313|     98|        ranges::advance(x, bound);
  314|     98|        return x;
  315|     98|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|     98|    {
  275|     98|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     98|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1566|     98|    {
 1567|     98|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|     98|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1610|     98|    {
 1611|     98|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|     98|                      ranges::sized_range<Range>) {
 1616|     98|            m_storage.reset();
 1617|     98|            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|     98|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3586|     98|    {
 3587|     98|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|     98|        return read_source_impl(range);
 3593|     98|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3612|     98|    {
 3613|     98|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|     98|        const std::ptrdiff_t sign_len =
 3616|     98|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 0, False: 98]
  ------------------
 3617|       |
 3618|     98|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     98|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|     98|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4082|     20|    {
 4083|     20|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|     20|#if !SCN_DISABLE_LOCALE
 4086|     20|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 0, False: 20]
  ------------------
 4087|      0|            return read_impl<Range>(
 4088|      0|                range, rd,
 4089|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4090|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|      0|                },
 4092|      0|                value, loc);
 4093|      0|        }
 4094|     20|#endif
 4095|       |
 4096|     20|        return read_impl<Range>(
 4097|     20|            range, rd,
 4098|     20|            [](float_reader<CharT>& r, auto&&... args) {
 4099|     20|                return r.read_source(SCN_FWD(args)...);
 4100|     20|            },
 4101|     20|            value);
 4102|     20|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|     20|    {
 4119|     20|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 4121|     20|            return unexpected(r.error());
 4122|     20|        }
 4123|       |
 4124|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|      0|        return ranges::next(range.begin(), n);
 4126|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     20|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     20|        else if constexpr (std::is_object_v<T>) {
  688|     20|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     20|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4098|     20|            [](float_reader<CharT>& r, auto&&... args) {
 4099|     20|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|     20|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|     22|    {
 4083|     22|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|     22|#if !SCN_DISABLE_LOCALE
 4086|     22|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 0, False: 22]
  ------------------
 4087|      0|            return read_impl<Range>(
 4088|      0|                range, rd,
 4089|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4090|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|      0|                },
 4092|      0|                value, loc);
 4093|      0|        }
 4094|     22|#endif
 4095|       |
 4096|     22|        return read_impl<Range>(
 4097|     22|            range, rd,
 4098|     22|            [](float_reader<CharT>& r, auto&&... args) {
 4099|     22|                return r.read_source(SCN_FWD(args)...);
 4100|     22|            },
 4101|     22|            value);
 4102|     22|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|     98|    {
 4119|     98|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|     98|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4121|      0|            return unexpected(r.error());
 4122|      0|        }
 4123|       |
 4124|     98|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     98|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|      0|        return ranges::next(range.begin(), n);
 4126|     98|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|     22|            [](float_reader<CharT>& r, auto&&... args) {
 4099|     22|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|     22|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5728|  1.66k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|       |                       std::is_same_v<T, std::wstring_view>) {
 5743|       |        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|  1.66k|                       std::is_same_v<T, std::wstring>) {
 5747|  1.66k|        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  1.66k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5122|  4.99k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|  4.77k|    {
 3036|  4.77k|        reader_error_handler eh{};
 3037|  4.77k|        get_derived().check_specs_impl(specs, eh);
 3038|  4.77k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.77k]
  |  |  ------------------
  ------------------
 3039|      0|            return detail::unexpected_scan_error(
 3040|      0|                scan_error::invalid_format_string, eh.m_msg);
 3041|      0|        }
 3042|  4.77k|        return {};
 3043|  4.77k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3047|  4.77k|    {
 3048|  4.77k|        return static_cast<Derived&>(*this);
 3049|  4.77k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5126|  4.77k|    {
 5127|  4.77k|        detail::check_string_type_specs(specs, eh);
 5128|       |
 5129|  4.77k|        SCN_GCC_PUSH
 5130|  4.77k|        SCN_GCC_IGNORE("-Wswitch")
 5131|  4.77k|        SCN_GCC_IGNORE("-Wswitch-default")
 5132|       |
 5133|  4.77k|        SCN_CLANG_PUSH
 5134|  4.77k|        SCN_CLANG_IGNORE("-Wswitch")
 5135|  4.77k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5136|       |
 5137|  4.77k|        switch (specs.type) {
  ------------------
  |  Branch (5137:17): [True: 0, False: 4.77k]
  ------------------
 5138|    126|            case detail::presentation_type::none:
  ------------------
  |  Branch (5138:13): [True: 126, False: 4.64k]
  ------------------
 5139|    126|                m_type = reader_type::word;
 5140|    126|                break;
 5141|       |
 5142|     12|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5142:13): [True: 12, False: 4.75k]
  ------------------
 5143|     12|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5143:21): [True: 12, False: 0]
  ------------------
 5144|     12|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5144:21): [True: 0, False: 0]
  ------------------
 5145|     12|                    m_type = reader_type::custom_word;
 5146|     12|                }
 5147|      0|                else {
 5148|      0|                    m_type = reader_type::word;
 5149|      0|                }
 5150|     12|                break;
 5151|      0|            }
 5152|       |
 5153|      0|            case detail::presentation_type::character:
  ------------------
  |  Branch (5153:13): [True: 0, False: 4.77k]
  ------------------
 5154|      0|                m_type = reader_type::character;
 5155|      0|                break;
 5156|       |
 5157|     24|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5157:13): [True: 24, False: 4.74k]
  ------------------
 5158|     24|                m_type = reader_type::character_set;
 5159|     24|                break;
 5160|       |
 5161|  4.36k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5161:13): [True: 4.36k, False: 402]
  ------------------
 5162|  4.36k|                m_type = reader_type::regex;
 5163|  4.36k|                break;
 5164|       |
 5165|    240|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5165:13): [True: 240, False: 4.53k]
  ------------------
 5166|    240|                m_type = reader_type::regex_escaped;
 5167|    240|                break;
 5168|  4.77k|        }
 5169|       |
 5170|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5171|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5172|  4.77k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5175|  5.84k|    {
 5176|  5.84k|        return m_type == reader_type::word;
 5177|  5.84k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1132|  1.59k|{
 1133|  1.59k|    auto it = src.begin();
 1134|  18.6k|    while (it != src.end()) {
  ------------------
  |  Branch (1134:12): [True: 17.5k, False: 1.17k]
  ------------------
 1135|  17.5k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1136|  17.5k|        if (len == 0) {
  ------------------
  |  Branch (1136:13): [True: 0, False: 17.5k]
  ------------------
 1137|      0|            return false;
 1138|      0|        }
 1139|  17.5k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1139:13): [True: 0, False: 17.5k]
  ------------------
 1140|      0|            return false;
 1141|      0|        }
 1142|  17.5k|        const auto cp = detail::decode_code_point_exhaustive(
 1143|  17.5k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1144|  17.5k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1144:13): [True: 414, False: 17.0k]
  ------------------
 1145|    414|            return false;
 1146|    414|        }
 1147|  17.0k|        it += len;
 1148|  17.0k|    }
 1149|  1.17k|    return true;
 1150|  1.59k|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 2962|    294|{
 2963|    294|    dst.clear();
 2964|    294|    transcode_valid_to_string(src, dst);
 2965|    294|    return {};
 2966|    294|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|    294|{
 1393|    294|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1394|       |
 1395|    294|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1396|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1397|       |        if constexpr (sizeof(DestCharT) == 2) {
 1398|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1399|       |            std::u32string tmp;
 1400|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1401|       |            return transcode_to_string_impl_32to16<true>(
 1402|       |                std::u32string_view{tmp}, dest);
 1403|       |        }
 1404|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1405|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1406|       |        }
 1407|       |    }
 1408|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1409|       |        if constexpr (sizeof(DestCharT) == 1) {
 1410|       |            std::u32string tmp;
 1411|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1412|       |            return transcode_to_string_impl_32to8<true>(
 1413|       |                std::u32string_view{tmp}, dest);
 1414|       |        }
 1415|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1416|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1417|       |        }
 1418|       |    }
 1419|    294|    else if constexpr (sizeof(SourceCharT) == 4) {
 1420|    294|        if constexpr (sizeof(DestCharT) == 1) {
 1421|    294|            return transcode_to_string_impl_32to8<true>(src, dest);
 1422|       |        }
 1423|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1424|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1425|       |        }
 1426|    294|    }
 1427|       |
 1428|    294|    SCN_EXPECT(false);
  ------------------
  |  |  930|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1429|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1430|    294|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1283|    294|{
 1284|    294|    static_assert(sizeof(SourceCharT) == 4);
 1285|    294|    static_assert(sizeof(DestCharT) == 1);
 1286|       |
 1287|  1.70k|    for (auto cp : src) {
  ------------------
  |  Branch (1287:18): [True: 1.70k, False: 294]
  ------------------
 1288|  1.70k|        const auto u32cp = static_cast<uint32_t>(cp);
 1289|  1.70k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [Folded - Ignored]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1290|       |            // Replacement character
 1291|      0|            dest.push_back(static_cast<char>(0xef));
 1292|      0|            dest.push_back(static_cast<char>(0xbf));
 1293|      0|            dest.push_back(static_cast<char>(0xbd));
 1294|      0|        }
 1295|  1.70k|        else if (cp < 128) {
  ------------------
  |  Branch (1295:18): [True: 916, False: 786]
  ------------------
 1296|    916|            dest.push_back(static_cast<char>(cp));
 1297|    916|        }
 1298|    786|        else if (cp < 2048) {
  ------------------
  |  Branch (1298:18): [True: 12, False: 774]
  ------------------
 1299|     12|            dest.push_back(
 1300|     12|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1301|     12|            dest.push_back(
 1302|     12|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1303|     12|        }
 1304|    774|        else if (cp < 65536) {
  ------------------
  |  Branch (1304:18): [True: 496, False: 278]
  ------------------
 1305|    496|            dest.push_back(
 1306|    496|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1307|    496|            dest.push_back(static_cast<char>(
 1308|    496|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1309|    496|            dest.push_back(
 1310|    496|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1311|    496|        }
 1312|    278|        else {
 1313|    278|            dest.push_back(
 1314|    278|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1315|    278|            dest.push_back(static_cast<char>(
 1316|    278|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1317|    278|            dest.push_back(static_cast<char>(
 1318|    278|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    278|            dest.push_back(
 1320|    278|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    278|        }
 1322|  1.70k|    }
 1323|    294|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5023|     24|        {
 5024|     24|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5024:17): [True: 0, False: 24]
  ------------------
 5025|      0|                return {};
 5026|      0|            }
 5027|       |
 5028|     24|            auto charset_string = specs.charset_string<SourceCharT>();
 5029|     24|            auto it = detail::to_address(charset_string.begin());
 5030|     24|            auto set = detail::parse_presentation_set(
 5031|     24|                it, detail::to_address(charset_string.end()), nonascii);
 5032|     24|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|     24|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5033|     24|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|     24|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5034|     24|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|     24|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5035|       |
 5036|     24|            std::sort(nonascii.extra_ranges.begin(),
 5037|     24|                      nonascii.extra_ranges.end());
 5038|     24|            return {};
 5039|     24|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5056|  1.15k|        {
 5057|  1.15k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5057:17): [True: 564, False: 588]
  ------------------
 5058|    564|                return helper.is_char_set_in_extra_literals(cp);
 5059|    564|            }
 5060|       |
 5061|    588|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5062|  1.15k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5006|    564|        {
 5007|       |            // TODO: binary search?
 5008|    564|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5008:17): [True: 0, False: 564]
  ------------------
 5009|      0|                return false;
 5010|      0|            }
 5011|       |
 5012|    564|            const auto cp_val = static_cast<uint32_t>(cp);
 5013|    564|            return std::find_if(
 5014|    564|                       nonascii.extra_ranges.begin(),
 5015|    564|                       nonascii.extra_ranges.end(),
 5016|    564|                       [cp_val](const auto& pair) noexcept {
 5017|    564|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5018|    564|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5019|    564|                       }) != nonascii.extra_ranges.end();
 5020|    564|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5016|  9.94k|                       [cp_val](const auto& pair) noexcept {
 5017|  9.94k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5017:35): [True: 9.94k, False: 0]
  ------------------
 5018|  9.94k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5018:35): [True: 564, False: 9.37k]
  ------------------
 5019|  9.94k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 4996|    588|        {
 4997|    588|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4998|    588|            const auto val =
 4999|    588|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5000|    588|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5001|    588|                    (val % 8)) &
 5002|    588|                   1u;
 5003|    588|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 4993|     24|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5193|     20|    {
 5194|     20|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     20|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|     20|        return read_impl(range, specs, value);
 5196|     20|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5211|     20|    {
 5212|     20|        SCN_CLANG_PUSH
 5213|     20|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|     20|        switch (m_type) {
 5216|     20|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 20, False: 0]
  ------------------
 5217|     20|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 20]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 20]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 0, False: 20]
  ------------------
 5227|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|      0|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 20]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 20]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 20]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|     20|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|     20|        }
 5248|       |
 5249|     20|        SCN_CLANG_POP
 5250|     20|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4740|     20|    {
 4741|     20|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|     20|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4674|     20|{
 4675|     20|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|     20|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|     20|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 20, False: 0]
  ------------------
 4679|     20|        return detail::unexpected_scan_error(
 4680|     20|            scan_error::invalid_scanned_value,
 4681|     20|            "Invalid encoding in scanned string");
 4682|     20|    }
 4683|       |
 4684|      0|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|      0|    return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|      0|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2077|     60|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|     60|    else {
 2087|     60|        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|     60|        return read_until_code_point(
 2099|     60|            ranges::subrange{it, range.end()},
 2100|     60|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|     60|    }
 2102|     60|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2050|     60|{
 2051|     60|    auto it = range.begin();
 2052|  4.26k|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 4.20k, False: 60]
  ------------------
 2053|  4.20k|        const auto val =
 2054|  4.20k|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  4.20k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  4.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.20k, False: 0]
  |  |  ------------------
  ------------------
 2056|  4.20k|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  4.20k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  4.20k|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 0, False: 4.20k]
  ------------------
 2059|      0|                return it;
 2060|      0|            }
 2061|  4.20k|        }
 2062|  4.20k|        it = val.iterator;
 2063|  4.20k|    }
 2064|       |
 2065|     60|    return it;
 2066|     60|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|     60|        : m_fptr([](storage fn,
  743|     60|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     60|              cvref<T> obj = *get<T>(fn);
  745|     60|              if constexpr (std::is_void_v<R>) {
  746|     60|                  obj(static_cast<decltype(args)>(args)...);
  747|     60|              }
  748|     60|              else {
  749|     60|                  return obj(static_cast<decltype(args)>(args)...);
  750|     60|              }
  751|     60|          }),
  752|     60|          m_storage(std::addressof(f))
  753|     60|    {
  754|     60|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  4.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.20k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.20k|              else {
  749|  4.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.20k|              }
  751|  4.20k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  4.20k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.20k|        else if constexpr (std::is_object_v<T>) {
  688|  4.20k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.20k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2100|  4.20k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|     60|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     60|        {
  662|     60|        }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|  1.57k|    {
 5194|  1.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  1.57k|        return read_impl(range, specs, value);
 5196|  1.57k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|  1.57k|    {
 5212|  1.57k|        SCN_CLANG_PUSH
 5213|  1.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  1.57k|        switch (m_type) {
 5216|     22|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 22, False: 1.54k]
  ------------------
 5217|     22|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 4, False: 1.56k]
  ------------------
 5220|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      4|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 1.57k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|      8|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 8, False: 1.56k]
  ------------------
 5227|      8|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|      8|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|  1.45k|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 1.45k, False: 114]
  ------------------
 5232|  1.45k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|  1.45k|                    range, specs.charset_string<SourceCharT>(),
 5234|  1.45k|                    specs.regexp_flags, value);
 5235|       |
 5236|     80|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 80, False: 1.49k]
  ------------------
 5237|     80|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|     80|                    range,
 5239|     80|                    get_unescaped_regex_pattern(
 5240|     80|                        specs.charset_string<SourceCharT>()),
 5241|     80|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.57k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  1.57k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  1.57k|        }
 5248|       |
 5249|  1.57k|        SCN_CLANG_POP
 5250|  1.57k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4740|     98|    {
 4741|     98|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|     98|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4674|    102|{
 4675|    102|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    102|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    102|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 90, False: 12]
  ------------------
 4679|     90|        return detail::unexpected_scan_error(
 4680|     90|            scan_error::invalid_scanned_value,
 4681|     90|            "Invalid encoding in scanned string");
 4682|     90|    }
 4683|       |
 4684|     12|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     12|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 12]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|     12|    return SCN_MOVE(result);
  ------------------
  |  |  934|     12|    static_cast<    \
  |  |  935|     12|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|     12|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3007|    294|{
 3008|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3009|       |        dest.assign(source.view());
 3010|       |    }
 3011|    294|    else {
 3012|    294|        return transcode_impl(source.view(), dest);
 3013|    294|    }
 3014|       |
 3015|      0|    return {};
 3016|    294|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2077|    294|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|    294|    else {
 2087|    294|        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|    294|        return read_until_code_point(
 2099|    294|            ranges::subrange{it, range.end()},
 2100|    294|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|    294|    }
 2102|    294|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  43.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.1k|              else {
  749|  43.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.1k|              }
  751|  43.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  43.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.1k|        else if constexpr (std::is_object_v<T>) {
  688|  43.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.1k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2100|  43.1k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|    294|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    294|        {
  662|    294|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4761|      4|    {
 4762|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4762:13): [True: 4, False: 0]
  ------------------
 4763|      4|            return read_string_impl(
 4764|      4|                range,
 4765|      4|                read_until_code_unit(
 4766|      4|                    range,
 4767|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4768|      4|                        SourceCharT ch) { return ch == until; }),
 4769|      4|                value);
 4770|      4|        }
 4771|      0|        return read_string_impl(
 4772|      0|            range,
 4773|      0|            read_until_code_units(
 4774|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4775|      0|            value);
 4776|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    258|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  688|    258|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    258|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4768|    258|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4968|      8|    {
 4969|      8|        auto it = read_source_impl(range, {specs});
 4970|      8|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 6]
  |  |  ------------------
  ------------------
 4971|      2|            return unexpected(it.error());
 4972|      2|        }
 4973|       |
 4974|      6|        return read_string_impl(range, *it, value);
 4975|      8|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5071|     24|    {
 5072|     24|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|     24|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|     24|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|     24|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|     24|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|     24|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 24, False: 0]
  ------------------
 5080|     24|            const auto cb = [&](char32_t cp) {
 5081|     24|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|     24|            };
 5083|       |
 5084|     24|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 0, False: 24]
  ------------------
 5085|      0|                auto it = read_until_code_point(range, cb);
 5086|      0|                return check_nonempty(it, range);
 5087|      0|            }
 5088|     24|            auto it = read_while_code_point(range, cb);
 5089|     24|            return check_nonempty(it, range);
 5090|     24|        }
 5091|       |
 5092|      0|        const auto cb = [&](SourceCharT ch) {
 5093|      0|            return cb_wrapper.on_ascii_only(ch);
 5094|      0|        };
 5095|       |
 5096|      0|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 0]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|      0|        auto it = read_while_code_unit(range, cb);
 5101|      0|        return check_nonempty(it, range);
 5102|      0|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  1.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15k|              else {
  749|  1.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15k|              }
  751|  1.15k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.15k|    {
  684|  1.15k|        if constexpr (std::is_const_v<T>) {
  685|  1.15k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5080|  1.15k|            const auto cb = [&](char32_t cp) {
 5081|  1.15k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|  1.15k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     24|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     24|        {
  667|     24|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5107|     24|    {
 5108|     24|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 6, False: 18]
  ------------------
 5109|      6|            return detail::unexpected_scan_error(
 5110|      6|                scan_error::invalid_scanned_value,
 5111|      6|                "No characters matched in [character set]");
 5112|      6|        }
 5113|       |
 5114|     18|        return it;
 5115|     24|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4674|    310|{
 4675|    310|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    310|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    310|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 28, False: 282]
  ------------------
 4679|     28|        return detail::unexpected_scan_error(
 4680|     28|            scan_error::invalid_scanned_value,
 4681|     28|            "Invalid encoding in scanned string");
 4682|     28|    }
 4683|       |
 4684|    282|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    282|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 282]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|    282|    return SCN_MOVE(result);
  ------------------
  |  |  934|    282|    static_cast<    \
  |  |  935|    282|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|    282|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4811|  1.53k|    {
 4812|  1.53k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.23k, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.23k|    }                                                  \
  |  |  |  | 3939|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4813|    304|        return read_string_impl(range, it, value);
 4814|  1.53k|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4833|  4.60k|    {
 4834|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4835|       |                      !std::is_same_v<SourceCharT, char>) {
 4836|       |            return detail::unexpected_scan_error(
 4837|       |                scan_error::invalid_format_string,
 4838|       |                "Regex backend doesn't support wide strings as input");
 4839|       |        }
 4840|  4.60k|        else {
 4841|  4.60k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4841:17): [True: 0, False: 4.60k]
  ------------------
 4842|      0|                return detail::unexpected_scan_error(
 4843|      0|                    scan_error::invalid_format_string,
 4844|      0|                    "Cannot use regex with a non-contiguous source "
 4845|      0|                    "range");
 4846|      0|            }
 4847|       |
 4848|  4.60k|            auto input = get_as_contiguous(range);
 4849|  4.60k|            SCN_TRY(it,
  ------------------
  |  | 3940|  4.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.69k, False: 912]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.69k|    }                                                  \
  |  |  |  | 3939|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    912|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4850|    912|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4851|    912|            return ranges::next(range.begin(),
 4852|    912|                                ranges::distance(input.begin(), it));
 4853|  4.60k|        }
 4854|  4.60k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  959|  4.60k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  4.60k|                  ranges::sized_range<Range>) {
  962|  4.60k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  4.60k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1065|  4.60k|{
 1066|  4.60k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  4.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  4.60k|                  ranges::sized_range<Range>) {
 1070|  4.60k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  4.60k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  981|  4.60k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  4.60k|                  ranges::sized_range<Range>) {
  984|  4.60k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  4.60k|}
_ZN3scn2v44impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4258|  4.60k|{
 4259|  4.60k|    static_assert(ranges::contiguous_range<Input> &&
 4260|  4.60k|                  ranges::borrowed_range<Input> &&
 4261|  4.60k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4262|       |
 4263|  4.60k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4264|  4.60k|    std::basic_regex<CharT> re{};
 4265|  4.60k|    try {
 4266|  4.60k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  4.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4267|  4.60k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4268|  4.60k|                                     re_flags | std::regex_constants::nosubs};
 4269|  4.60k|    }
 4270|  4.60k|    catch (const std::regex_error& err) {
 4271|  2.07k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4272|  2.07k|                                             "Invalid regex");
 4273|  2.07k|    }
 4274|       |
 4275|  2.53k|    std::match_results<const CharT*> matches{};
 4276|  2.53k|    try {
 4277|  2.53k|        bool found = std::regex_search(input.data(),
 4278|  2.53k|                                       input.data() + input.size(), matches, re,
 4279|  2.53k|                                       std::regex_constants::match_continuous);
 4280|  2.53k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4280:13): [True: 1.62k, False: 912]
  |  Branch (4280:23): [True: 0, False: 912]
  ------------------
 4281|  1.57k|            return detail::unexpected_scan_error(
 4282|  1.57k|                scan_error::invalid_scanned_value,
 4283|  1.57k|                "Regular expression didn't match");
 4284|  1.57k|        }
 4285|  2.53k|    }
 4286|  2.53k|    catch (const std::regex_error& err) {
 4287|     42|        return detail::unexpected_scan_error(
 4288|     42|            scan_error::invalid_format_string,
 4289|     42|            "Regex matching failed with an error");
 4290|     42|    }
 4291|       |
 4292|    912|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4293|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4294|       |    auto re =
 4295|       |#if SCN_REGEX_BOOST_USE_ICU
 4296|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4297|       |                             make_regex_flags(flags) |
 4298|       |                                 boost::regex_constants::no_except |
 4299|       |                                 boost::regex_constants::nosubs);
 4300|       |#else
 4301|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4302|       |                                  make_regex_flags(flags) |
 4303|       |                                      boost::regex_constants::no_except |
 4304|       |                                      boost::regex_constants::nosubs};
 4305|       |#endif
 4306|       |    if (re.status() != 0) {
 4307|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4308|       |                                             "Invalid regex");
 4309|       |    }
 4310|       |
 4311|       |    boost::match_results<const CharT*> matches{};
 4312|       |    try {
 4313|       |        bool found =
 4314|       |#if SCN_REGEX_BOOST_USE_ICU
 4315|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4316|       |                                   matches, re,
 4317|       |                                   boost::regex_constants::match_continuous);
 4318|       |#else
 4319|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4320|       |                                matches, re,
 4321|       |                                boost::regex_constants::match_continuous);
 4322|       |#endif
 4323|       |        if (!found || matches.prefix().matched) {
 4324|       |            return detail::unexpected_scan_error(
 4325|       |                scan_error::invalid_scanned_value,
 4326|       |                "Regular expression didn't match");
 4327|       |        }
 4328|       |    }
 4329|       |    catch (const std::runtime_error& err) {
 4330|       |        return detail::unexpected_scan_error(
 4331|       |            scan_error::invalid_format_string,
 4332|       |            "Regex matching failed with an error");
 4333|       |    }
 4334|       |
 4335|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4336|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4337|       |    static_assert(std::is_same_v<CharT, char>);
 4338|       |    std::string flagged_pattern{};
 4339|       |    auto re = [&]() {
 4340|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4341|       |        opts.set_never_capture(true);
 4342|       |        if (flagstr.empty()) {
 4343|       |            return re2::RE2{pattern, opts};
 4344|       |        }
 4345|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4346|       |        flagged_pattern.append(flagstr);
 4347|       |        flagged_pattern.append(pattern);
 4348|       |        return re2::RE2{flagged_pattern, opts};
 4349|       |    }();
 4350|       |    if (!re.ok()) {
 4351|       |        return detail::unexpected_scan_error(
 4352|       |            scan_error::invalid_format_string,
 4353|       |            "Failed to parse regular expression");
 4354|       |    }
 4355|       |
 4356|       |    auto new_input = detail::make_string_view_from_pointers(
 4357|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4358|       |    bool found = re2::RE2::Consume(&new_input, re);
 4359|       |    if (!found) {
 4360|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4361|       |                                             "Regular expression didn't match");
 4362|       |    }
 4363|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4364|       |#endif  // SCN_REGEX_BACKEND == ...
 4365|  2.53k|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5728|  1.66k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|       |                       std::is_same_v<T, std::wstring_view>) {
 5743|       |        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|  1.66k|                       std::is_same_v<T, std::wstring>) {
 5747|  1.66k|        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  1.66k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5193|     20|    {
 5194|     20|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     20|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|     20|        return read_impl(range, specs, value);
 5196|     20|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5211|     20|    {
 5212|     20|        SCN_CLANG_PUSH
 5213|     20|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|     20|        switch (m_type) {
 5216|     20|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 20, False: 0]
  ------------------
 5217|     20|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 20]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 20]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 0, False: 20]
  ------------------
 5227|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|      0|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 20]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 20]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 20]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|     20|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|     20|        }
 5248|       |
 5249|     20|        SCN_CLANG_POP
 5250|     20|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4740|     20|    {
 4741|     20|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|     20|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4674|     20|{
 4675|     20|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|     20|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|     20|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 20, False: 0]
  ------------------
 4679|     20|        return detail::unexpected_scan_error(
 4680|     20|            scan_error::invalid_scanned_value,
 4681|     20|            "Invalid encoding in scanned string");
 4682|     20|    }
 4683|       |
 4684|      0|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|      0|    return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|      0|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|  1.57k|    {
 5194|  1.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  1.57k|        return read_impl(range, specs, value);
 5196|  1.57k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|  1.57k|    {
 5212|  1.57k|        SCN_CLANG_PUSH
 5213|  1.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  1.57k|        switch (m_type) {
 5216|     22|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 22, False: 1.54k]
  ------------------
 5217|     22|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 4, False: 1.56k]
  ------------------
 5220|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      4|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 1.57k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|      8|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 8, False: 1.56k]
  ------------------
 5227|      8|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|      8|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|  1.45k|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 1.45k, False: 114]
  ------------------
 5232|  1.45k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|  1.45k|                    range, specs.charset_string<SourceCharT>(),
 5234|  1.45k|                    specs.regexp_flags, value);
 5235|       |
 5236|     80|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 80, False: 1.49k]
  ------------------
 5237|     80|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|     80|                    range,
 5239|     80|                    get_unescaped_regex_pattern(
 5240|     80|                        specs.charset_string<SourceCharT>()),
 5241|     80|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.57k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  1.57k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  1.57k|        }
 5248|       |
 5249|  1.57k|        SCN_CLANG_POP
 5250|  1.57k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4740|     98|    {
 4741|     98|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|     98|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4674|    102|{
 4675|    102|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    102|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    102|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 90, False: 12]
  ------------------
 4679|     90|        return detail::unexpected_scan_error(
 4680|     90|            scan_error::invalid_scanned_value,
 4681|     90|            "Invalid encoding in scanned string");
 4682|     90|    }
 4683|       |
 4684|     12|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     12|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 12]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|     12|    return SCN_MOVE(result);
  ------------------
  |  |  934|     12|    static_cast<    \
  |  |  935|     12|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|     12|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3007|    294|{
 3008|    294|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3009|    294|        dest.assign(source.view());
 3010|       |    }
 3011|       |    else {
 3012|       |        return transcode_impl(source.view(), dest);
 3013|       |    }
 3014|       |
 3015|    294|    return {};
 3016|    294|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4761|      4|    {
 4762|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4762:13): [True: 4, False: 0]
  ------------------
 4763|      4|            return read_string_impl(
 4764|      4|                range,
 4765|      4|                read_until_code_unit(
 4766|      4|                    range,
 4767|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4768|      4|                        SourceCharT ch) { return ch == until; }),
 4769|      4|                value);
 4770|      4|        }
 4771|      0|        return read_string_impl(
 4772|      0|            range,
 4773|      0|            read_until_code_units(
 4774|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4775|      0|            value);
 4776|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    258|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  688|    258|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    258|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4768|    258|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4968|      8|    {
 4969|      8|        auto it = read_source_impl(range, {specs});
 4970|      8|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 6]
  |  |  ------------------
  ------------------
 4971|      2|            return unexpected(it.error());
 4972|      2|        }
 4973|       |
 4974|      6|        return read_string_impl(range, *it, value);
 4975|      8|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4674|    310|{
 4675|    310|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    310|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    310|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 28, False: 282]
  ------------------
 4679|     28|        return detail::unexpected_scan_error(
 4680|     28|            scan_error::invalid_scanned_value,
 4681|     28|            "Invalid encoding in scanned string");
 4682|     28|    }
 4683|       |
 4684|    282|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    282|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 282]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|    282|    return SCN_MOVE(result);
  ------------------
  |  |  934|    282|    static_cast<    \
  |  |  935|    282|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|    282|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4811|  1.53k|    {
 4812|  1.53k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.23k, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.23k|    }                                                  \
  |  |  |  | 3939|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4813|    304|        return read_string_impl(range, it, value);
 4814|  1.53k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5728|  1.66k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|  1.66k|                       std::is_same_v<T, std::wstring_view>) {
 5743|  1.66k|        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|       |                       std::is_same_v<T, std::wstring>) {
 5747|       |        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  1.66k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|     20|    {
 5194|     20|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     20|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|     20|        return read_impl(range, specs, value);
 5196|     20|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|     20|    {
 5212|     20|        SCN_CLANG_PUSH
 5213|     20|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|     20|        switch (m_type) {
 5216|     20|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 20, False: 0]
  ------------------
 5217|     20|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 20]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 20]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 0, False: 20]
  ------------------
 5227|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|      0|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 20]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 20]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 20]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|     20|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|     20|        }
 5248|       |
 5249|     20|        SCN_CLANG_POP
 5250|     20|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4747|     20|    {
 4748|     20|        return read_string_view_impl(range, read_until_classic_space(range),
 4749|     20|                                     value);
 4750|     20|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4693|     20|{
 4694|     20|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|     20|    auto src = [&]() {
 4697|     20|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|     20|            return make_contiguous_buffer(
 4699|     20|                ranges::subrange{range.begin().base(), result.base()});
 4700|     20|        }
 4701|     20|        else {
 4702|     20|            return make_contiguous_buffer(
 4703|     20|                ranges::subrange{range.begin(), result});
 4704|     20|        }
 4705|     20|    }();
 4706|     20|    using src_type = decltype(src);
 4707|       |
 4708|     20|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|     20|    else {
 4721|     20|        const auto view = src.view();
 4722|     20|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|     20|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 20, False: 0]
  ------------------
 4725|     20|            return detail::unexpected_scan_error(
 4726|     20|                scan_error::invalid_scanned_value,
 4727|     20|                "Invalid encoding in scanned string_view");
 4728|     20|        }
 4729|       |
 4730|      0|        return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|     20|    }
 4732|     20|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4696|     20|    auto src = [&]() {
 4697|     20|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|     20|            return make_contiguous_buffer(
 4699|     20|                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|       |        else {
 4702|       |            return make_contiguous_buffer(
 4703|       |                ranges::subrange{range.begin(), result});
 4704|       |        }
 4705|     20|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5193|  1.57k|    {
 5194|  1.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  1.57k|        return read_impl(range, specs, value);
 5196|  1.57k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5211|  1.57k|    {
 5212|  1.57k|        SCN_CLANG_PUSH
 5213|  1.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  1.57k|        switch (m_type) {
 5216|     22|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 22, False: 1.54k]
  ------------------
 5217|     22|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 4, False: 1.56k]
  ------------------
 5220|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      4|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 1.57k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|      8|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 8, False: 1.56k]
  ------------------
 5227|      8|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|      8|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|  1.45k|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 1.45k, False: 114]
  ------------------
 5232|  1.45k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|  1.45k|                    range, specs.charset_string<SourceCharT>(),
 5234|  1.45k|                    specs.regexp_flags, value);
 5235|       |
 5236|     80|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 80, False: 1.49k]
  ------------------
 5237|     80|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|     80|                    range,
 5239|     80|                    get_unescaped_regex_pattern(
 5240|     80|                        specs.charset_string<SourceCharT>()),
 5241|     80|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.57k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  1.57k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  1.57k|        }
 5248|       |
 5249|  1.57k|        SCN_CLANG_POP
 5250|  1.57k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4747|     98|    {
 4748|     98|        return read_string_view_impl(range, read_until_classic_space(range),
 4749|     98|                                     value);
 4750|     98|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4693|    102|{
 4694|    102|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|    102|    auto src = [&]() {
 4697|    102|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|    102|            return make_contiguous_buffer(
 4699|    102|                ranges::subrange{range.begin().base(), result.base()});
 4700|    102|        }
 4701|    102|        else {
 4702|    102|            return make_contiguous_buffer(
 4703|    102|                ranges::subrange{range.begin(), result});
 4704|    102|        }
 4705|    102|    }();
 4706|    102|    using src_type = decltype(src);
 4707|       |
 4708|    102|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|    102|    else {
 4721|    102|        const auto view = src.view();
 4722|    102|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|    102|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 90, False: 12]
  ------------------
 4725|     90|            return detail::unexpected_scan_error(
 4726|     90|                scan_error::invalid_scanned_value,
 4727|     90|                "Invalid encoding in scanned string_view");
 4728|     90|        }
 4729|       |
 4730|     12|        return SCN_MOVE(result);
  ------------------
  |  |  934|     12|    static_cast<    \
  |  |  935|     12|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|    102|    }
 4732|    102|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4696|    102|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|    102|        else {
 4702|    102|            return make_contiguous_buffer(
 4703|    102|                ranges::subrange{range.begin(), result});
 4704|    102|        }
 4705|    102|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4783|      4|    {
 4784|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4784:13): [True: 4, False: 0]
  ------------------
 4785|      4|            return read_string_view_impl(
 4786|      4|                range,
 4787|      4|                read_until_code_unit(
 4788|      4|                    range,
 4789|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4790|      4|                        SourceCharT ch) { return ch == until; }),
 4791|      4|                value);
 4792|      4|        }
 4793|      0|        return read_string_view_impl(
 4794|      0|            range,
 4795|      0|            read_until_code_units(
 4796|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4797|      0|            value);
 4798|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    258|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  688|    258|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    258|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4790|    258|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4982|      8|    {
 4983|      8|        auto it = read_source_impl(range, {specs});
 4984|      8|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 6]
  |  |  ------------------
  ------------------
 4985|      2|            return unexpected(it.error());
 4986|      2|        }
 4987|       |
 4988|      6|        return read_string_view_impl(range, *it, value);
 4989|      8|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4693|    310|{
 4694|    310|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|    310|    auto src = [&]() {
 4697|    310|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|    310|            return make_contiguous_buffer(
 4699|    310|                ranges::subrange{range.begin().base(), result.base()});
 4700|    310|        }
 4701|    310|        else {
 4702|    310|            return make_contiguous_buffer(
 4703|    310|                ranges::subrange{range.begin(), result});
 4704|    310|        }
 4705|    310|    }();
 4706|    310|    using src_type = decltype(src);
 4707|       |
 4708|    310|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|    310|    else {
 4721|    310|        const auto view = src.view();
 4722|    310|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|    310|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 28, False: 282]
  ------------------
 4725|     28|            return detail::unexpected_scan_error(
 4726|     28|                scan_error::invalid_scanned_value,
 4727|     28|                "Invalid encoding in scanned string_view");
 4728|     28|        }
 4729|       |
 4730|    282|        return SCN_MOVE(result);
  ------------------
  |  |  934|    282|    static_cast<    \
  |  |  935|    282|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|    310|    }
 4732|    310|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4696|    310|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|    310|        else {
 4702|    310|            return make_contiguous_buffer(
 4703|    310|                ranges::subrange{range.begin(), result});
 4704|    310|        }
 4705|    310|    }();
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4822|  1.53k|    {
 4823|  1.53k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.23k, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.23k|    }                                                  \
  |  |  |  | 3939|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4824|    304|        return read_string_view_impl(range, it, value);
 4825|  1.53k|    }
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1672|    528|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|    528|                  ranges::sized_range<Range>) {
 1676|    528|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|    528|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|    528|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1478|    528|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|    528|    {
 1480|    528|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|    216|{
 5715|    216|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 5716|      0|        return unexpected(e);
 5717|      0|    }
 5718|       |
 5719|    216|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 24, False: 192]
  ------------------
 5720|     24|        return range.begin();
 5721|     24|    }
 5722|       |
 5723|    192|    return skip_classic_whitespace(range);
 5724|    216|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|     24|    {
 3459|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|     24|        return read_default_with_base(range, value, 10);
 3461|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|     24|    {
 3459|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|     24|        return read_default_with_base(range, value, 10);
 3461|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5666|     26|    {
 5667|     26|        return true;
 5668|     26|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5684|     24|    {
 5685|     24|        detail::format_specs specs{};
 5686|     24|        specs.type = detail::presentation_type::int_hex;
 5687|       |
 5688|     24|        std::uintptr_t intvalue{};
 5689|     24|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|      0|                                                                intvalue, loc));
 5691|      0|        value = reinterpret_cast<void*>(intvalue);
 5692|      0|        return result;
 5693|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3030|     26|    {
 3031|     26|        return true;
 3032|     26|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5421|     24|    {
 5422|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5423|       |
 5424|     24|        return bool_reader<CharT>{}.read_classic(range, value);
 5425|     24|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5265|    100|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5271|     24|    {
 5272|     24|        scan_error err{scan_error::invalid_scanned_value,
 5273|     24|                       "Failed to read boolean"};
 5274|       |
 5275|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5275:13): [True: 24, False: 0]
  ------------------
 5276|     24|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5276:22): [True: 0, False: 24]
  ------------------
 5277|      0|                return *r;
 5278|      0|            }
 5279|     24|            else {
 5280|     24|                err = r.error();
 5281|     24|            }
 5282|     24|        }
 5283|       |
 5284|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5284:13): [True: 24, False: 0]
  ------------------
 5285|     24|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5285:22): [True: 0, False: 24]
  ------------------
 5286|      0|                return *r;
 5287|      0|            }
 5288|     24|            else {
 5289|     24|                err = r.error();
 5290|     24|            }
 5291|     24|        }
 5292|       |
 5293|     24|        return unexpected(err);
 5294|     24|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5300|     24|    {
 5301|     24|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5301:18): [True: 0, False: 24]
  ------------------
 5302|      0|            value = false;
 5303|      0|            return *r;
 5304|      0|        }
 5305|     24|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5305:18): [True: 0, False: 24]
  ------------------
 5306|      0|            value = true;
 5307|      0|            return *r;
 5308|      0|        }
 5309|       |
 5310|     24|        return detail::unexpected_scan_error(
 5311|     24|            scan_error::invalid_scanned_value,
 5312|     24|            "Failed to read numeric boolean value: No match");
 5313|     24|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5318|     24|    {
 5319|     24|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5319:18): [True: 0, False: 24]
  ------------------
 5320|      0|            value = true;
 5321|      0|            return *r;
 5322|      0|        }
 5323|     24|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5323:18): [True: 0, False: 24]
  ------------------
 5324|      0|            value = false;
 5325|      0|            return *r;
 5326|      0|        }
 5327|       |
 5328|     24|        return detail::unexpected_scan_error(
 5329|     24|            scan_error::invalid_scanned_value,
 5330|     24|            "Failed to read textual boolean value: No match");
 5331|     24|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2184|     48|{
 2185|     48|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2186|     48|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2187|     48|                    .transform_error(make_eof_parse_error));
 2188|       |
 2189|     48|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2190|     48|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2191|     48|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 48, False: 0]
  |  |  ------------------
  ------------------
 2192|     48|            return unexpected(parse_error::error);
 2193|     48|        }
 2194|      0|        return it;
 2195|       |    }
 2196|       |    else {
 2197|       |        auto range_it = range.begin();
 2198|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2199|       |            if (SCN_UNLIKELY(*range_it !=
 2200|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2201|       |                return unexpected(parse_error::error);
 2202|       |            }
 2203|       |        }
 2204|       |        return it;
 2205|       |    }
 2206|     48|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3579|     24|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3565|    100|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|     24|    {
 4065|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|     24|        float_reader<CharT> rd{};
 4068|     24|        return read_impl<Range>(
 4069|     24|            range, rd,
 4070|     24|            [](float_reader<CharT>& r, auto&&... args) {
 4071|     24|                return r.read_source(SCN_FWD(args)...);
 4072|     24|            },
 4073|     24|            value);
 4074|     24|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     24|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     24|        else if constexpr (std::is_object_v<T>) {
  688|     24|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     24|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|     24|            [](float_reader<CharT>& r, auto&&... args) {
 4071|     24|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|     24|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5182|     24|    {
 5183|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|     24|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5182|     24|    {
 5183|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|     24|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|     24|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     24|                          basic_contiguous_scan_context<char_type>>) {
 5795|     24|            auto rd = make_reader<T, char_type>();
 5796|     24|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     24|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5782|     24|    {
 5783|     24|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     24|                        .transform_error(make_eof_scan_error));
 5785|     24|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     24|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5182|     24|    {
 5183|     24|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     24|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|     24|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|     24|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2865|  54.8k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  54.8k|    static_cast<    \
  |  |  935|  54.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|  54.8k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|  54.8k|          m_current(m_range.begin())
 2868|  54.8k|    {
 2869|  54.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2877|  47.6k|    {
 2878|  47.6k|        return m_range.end();
 2879|  47.6k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1209|  3.06k|{
 1210|       |    // TODO: optimize
 1211|  3.06k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  3.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1212|  3.06k|    auto res = get_next_code_point(str);
 1213|  3.06k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1214|  3.06k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 2892|  4.30k|    {
 2893|  4.30k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|  4.30k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|  4.30k|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 4.30k]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|  4.30k|        }
 2899|  4.30k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  4.30k|    static_cast<    \
  |  |  935|  4.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|  4.30k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2882|  40.2k|    {
 2883|  40.2k|        return ranges::subrange{begin(), end()};
 2884|  40.2k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2106|    528|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|    528|                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|    528|        auto buf = make_contiguous_buffer(range);
 2111|    528|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|    528|        return ranges::next(range.begin(),
 2113|    528|                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|       |    else {
 2116|       |        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|       |            return detail::is_cp_space(cp);
 2129|       |        });
 2130|       |    }
 2131|    528|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 5953|    456|    {
 5954|    456|        const bool need_skipped_width =
 5955|    456|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 456]
  |  Branch (5955:33): [True: 456, False: 0]
  ------------------
 5956|    456|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|    456|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 48, False: 408]
  ------------------
 5960|    456|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 408]
  ------------------
 5961|     48|            return skip_fill(rng, specs.precision, specs.fill,
 5962|     48|                             need_skipped_width);
 5963|     48|        }
 5964|    408|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 408, False: 0]
  |  Branch (5964:56): [True: 16, False: 392]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|     16|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 16, False: 0]
  ------------------
 5968|     16|                auto max_width_view = take_width(rng, specs.precision);
 5969|     16|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|     16|                                  .transform_error(make_eof_scan_error));
 5971|     16|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|     16|            }
 5973|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|      0|                            make_eof_scan_error));
 5975|       |
 5976|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 0]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|      0|            return result_type{it, 0};
 5984|      0|        }
 5985|       |
 5986|    392|        return result_type{rng.begin(), 0};
 5987|    408|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5868|     48|{
 5869|     48|    using char_type = detail::char_t<Range>;
 5870|     48|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5871|       |
 5872|     48|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5872:9): [True: 48, False: 0]
  ------------------
 5873|     48|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5874|     48|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5875|       |
 5876|     48|        if (max_width == 0) {
  ------------------
  |  Branch (5876:13): [True: 0, False: 48]
  ------------------
 5877|      0|            auto it = read_while_code_unit(range, pred);
 5878|       |
 5879|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5879:17): [True: 0, False: 0]
  ------------------
 5880|      0|                auto prefix_width =
 5881|      0|                    static_cast<std::ptrdiff_t>(
 5882|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5883|      0|                    ranges::distance(range.begin(), it);
 5884|      0|                return result_type{it, prefix_width};
 5885|      0|            }
 5886|      0|            return result_type{it, 0};
 5887|      0|        }
 5888|       |
 5889|     48|        auto max_width_view = take_width(range, max_width);
 5890|     48|        auto w_it = read_while_code_unit(max_width_view, pred);
 5891|       |
 5892|     48|        if (want_skipped_width) {
  ------------------
  |  Branch (5892:13): [True: 48, False: 0]
  ------------------
 5893|     48|            return result_type{w_it.base(), max_width - w_it.count()};
 5894|     48|        }
 5895|      0|        return result_type{w_it.base(), 0};
 5896|     48|    }
 5897|       |
 5898|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5899|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5899:9): [True: 0, False: 0]
  ------------------
 5900|      0|        auto it = read_while_code_units(range, fill_chars);
 5901|       |
 5902|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5902:13): [True: 0, False: 0]
  ------------------
 5903|      0|            auto prefix_width =
 5904|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5905|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5906|      0|            return result_type{it, prefix_width};
 5907|      0|        }
 5908|      0|        return result_type{it, 0};
 5909|      0|    }
 5910|       |
 5911|      0|    auto max_width_view = take_width(range, max_width);
 5912|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5913|       |
 5914|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5914:9): [True: 0, False: 0]
  ------------------
 5915|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5916|      0|    }
 5917|      0|    return result_type{w_it.base(), 0};
 5918|      0|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|     48|        : m_fptr([](storage fn,
  743|     48|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     48|              cvref<T> obj = *get<T>(fn);
  745|     48|              if constexpr (std::is_void_v<R>) {
  746|     48|                  obj(static_cast<decltype(args)>(args)...);
  747|     48|              }
  748|     48|              else {
  749|     48|                  return obj(static_cast<decltype(args)>(args)...);
  750|     48|              }
  751|     48|          }),
  752|     48|          m_storage(std::addressof(f))
  753|     48|    {
  754|     48|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|     48|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     48|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     48|              else {
  749|     48|                  return obj(static_cast<decltype(args)>(args)...);
  750|     48|              }
  751|     48|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|     48|    {
  684|     48|        if constexpr (std::is_const_v<T>) {
  685|     48|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     48|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5874|     48|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     48|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     48|        {
  667|     48|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|     48|{
 1966|     48|    return read_until_code_unit(range, std::not_fn(pred));
 1967|     48|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|     48|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|     48|    else {
 1951|     48|        auto first = range.begin();
 1952|     48|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 48, False: 0]
  ------------------
 1953|     48|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 48, False: 0]
  ------------------
 1954|     48|                return first;
 1955|     48|            }
 1956|     48|        }
 1957|      0|        return first;
 1958|     48|    }
 1959|     48|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2800|     80|    {
 2801|     80|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2802|     80|                                      m_count};
 2803|     80|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2707|    256|    {
 2708|    256|        return view;
 2709|    256|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2371|     80|        : m_current(x), m_end(s), m_count(n)
 2372|     80|    {
 2373|     80|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2771|     64|        {
 2772|     64|            return !(y == x);
 2773|     64|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2760|     96|        {
 2761|     96|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2761:21): [True: 0, False: 96]
  |  Branch (2761:39): [True: 0, False: 0]
  ------------------
 2762|     96|                   y.base() == x.m_end;
  ------------------
  |  Branch (2762:20): [True: 0, False: 96]
  ------------------
 2763|     96|        }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2806|     96|    {
 2807|     96|        return sentinel<true>{m_base.get().end()};
 2808|     96|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2741|     96|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|     96|    static_cast<    \
  |  |  935|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2416|     80|    {
 2417|     80|        return *m_current;
 2418|     80|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2425|     16|    {
 2426|     16|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2427|     16|        _increment_current();
 2428|     16|        return *this;
 2429|     16|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2658|     16|    {
 2659|     16|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2659:13): [True: 16, False: 0]
  ------------------
 2660|     16|            auto cplen = _get_cp_length_at_current();
 2661|     16|            m_multibyte_left = cplen - 1;
 2662|     16|            m_count -= _get_width_at_current_cp_start(cplen);
 2663|     16|        }
 2664|      0|        else {
 2665|      0|            --m_multibyte_left;
 2666|      0|        }
 2667|       |
 2668|     16|        ++m_current;
 2669|     16|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2629|     16|    {
 2630|     16|        return static_cast<difference_type>(
 2631|     16|            detail::code_point_length_by_starting_code_unit(*m_current));
 2632|     16|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2635|     16|    {
 2636|     16|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2637|      0|            return 0;
 2638|      0|        }
 2639|       |
 2640|     16|        if (cplen == 1) {
  ------------------
  |  Branch (2640:13): [True: 16, False: 0]
  ------------------
 2641|     16|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2642|     16|            auto cp = static_cast<char32_t>(*m_current);
 2643|     16|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2644|     16|        }
 2645|       |
 2646|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2647|      0|                                           cplen);
 2648|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2649|      0|            return 0;
 2650|      0|        }
 2651|       |
 2652|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2653|      0|        return static_cast<difference_type>(
 2654|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2655|      0|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|     16|    {
  268|     16|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     16|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     16|    {
  161|     16|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     16|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 16]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|     16|        else {
  169|     16|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 16]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|     16|        }
  173|     16|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2822|     64|    {
 2823|     64|        return take_width_view{r, n};
 2824|     64|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2790|     64|        : m_base(base), m_count(count)
 2791|     64|    {
 2792|     64|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2704|     64|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|     16|{
 2946|     16|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 16, False: 0]
  ------------------
 2947|     16|        auto it = read_while_classic_space(range);
 2948|     16|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|     16|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2950|      0|            return unexpected(e);
 2951|      0|        }
 2952|       |
 2953|     16|        return it;
 2954|     16|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|     16|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|     16|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|     16|    else {
 2116|     16|        auto it = range.begin();
 2117|       |
 2118|     16|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|     16|            auto seg = get_contiguous_beginning(range);
 2120|     16|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|     16|                seg_it != seg.end()) {
  ------------------
  |  Branch (2121:17): [True: 0, False: 16]
  ------------------
 2122|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|      0|            }
 2124|     16|            ranges::advance(it, seg.size());
 2125|     16|        }
 2126|       |
 2127|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|     16|            return detail::is_cp_space(cp);
 2129|     16|        });
 2130|     16|    }
 2131|     16|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|     16|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|     16|    else {
 1059|     16|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|     16|    }
 1061|     16|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|     16|{
 2072|     16|    return read_until_code_point(range, std::not_fn(pred));
 2073|     16|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|     16|{
 2051|     16|    auto it = range.begin();
 2052|     16|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 16, False: 0]
  ------------------
 2053|     16|        const auto val =
 2054|     16|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|     16|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 2056|     16|            const auto cp = detail::decode_code_point_exhaustive(
 2057|     16|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|     16|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 16, False: 0]
  ------------------
 2059|     16|                return it;
 2060|     16|            }
 2061|     16|        }
 2062|      0|        it = val.iterator;
 2063|      0|    }
 2064|       |
 2065|      0|    return it;
 2066|     16|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1888|     16|{
 1889|     16|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|     16|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|     16|    auto it = range.begin();
 1893|     16|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|     16|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|     16|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 16, False: 0]
  ------------------
 1902|     16|        ++it;
 1903|     16|        return {it, string_type(1, *range.begin())};
 1904|     16|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|     16|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|     32|{
  945|     32|    return is_range_eof(r.begin(), r.end());
  946|     32|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|     32|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|     32|    {
  938|     32|        return begin == end;
  939|     32|    }
  940|     32|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1879|     16|    {
 1880|     16|        return !codepoint.empty();
 1881|     16|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|     16|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|     16|            return detail::is_cp_space(cp);
 2129|     16|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     16|{
  951|     16|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     16|    return eof_error::good;
  955|     16|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2403|    160|    {
 2404|    160|        return m_current;
 2405|    160|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2407|    160|    {
 2408|    160|        return m_count;
 2409|    160|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|  12.7k|    {
 5954|  12.7k|        const bool need_skipped_width =
 5955|  12.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 180, False: 12.5k]
  |  Branch (5955:33): [True: 0, False: 12.5k]
  ------------------
 5956|  12.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  12.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 72, False: 12.6k]
  ------------------
 5960|  12.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 2.18k, False: 10.4k]
  ------------------
 5961|  2.25k|            return skip_fill(rng, specs.precision, specs.fill,
 5962|  2.25k|                             need_skipped_width);
 5963|  2.25k|        }
 5964|  10.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 10.4k, False: 0]
  |  Branch (5964:56): [True: 0, False: 10.4k]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 0]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|      0|                            make_eof_scan_error));
 5975|       |
 5976|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 0]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|      0|            return result_type{it, 0};
 5984|      0|        }
 5985|       |
 5986|  10.4k|        return result_type{rng.begin(), 0};
 5987|  10.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|  2.06k|    {
 5996|  2.06k|        const bool need_skipped_width =
 5997|  2.06k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 150, False: 1.91k]
  |  Branch (5997:33): [True: 14, False: 1.90k]
  ------------------
 5998|  2.06k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  2.06k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 2.06k]
  ------------------
 6001|  2.06k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 2.06k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  2.06k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 1.99k, False: 72]
  ------------------
 6010|  2.06k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 1.99k, False: 0]
  ------------------
 6011|  2.06k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 78, False: 1.91k]
  |  Branch (6011:35): [True: 72, False: 6]
  ------------------
 6012|  1.99k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 14, False: 1.90k]
  ------------------
 6013|  1.92k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 14, False: 0]
  ------------------
 6014|     86|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 14, False: 72]
  ------------------
 6015|     14|                const auto initial_width =
 6016|     14|                    specs.precision - prefix_width - value_width;
 6017|     14|                auto max_width_view = take_width(rng, initial_width);
 6018|     14|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|     14|                                  .transform_error(make_eof_scan_error));
 6020|     14|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|     14|            }
 6022|    144|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|    144|                            make_eof_scan_error));
 6024|       |
 6025|    144|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 72, False: 0]
  ------------------
 6026|     72|                return result_type{
 6027|     72|                    it,
 6028|     72|                    calculate_text_width(make_contiguous_buffer(
 6029|     72|                                             ranges::subrange{rng.begin(), it})
 6030|     72|                                             .view())};
 6031|     72|            }
 6032|      0|            return result_type{it, 0};
 6033|    144|        }
 6034|  1.98k|        return result_type{rng.begin(), 0};
 6035|  2.06k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.38k|    }
  ------------------
 6112|      2|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|      2|    {
 6041|      2|        const bool need_skipped_width =
 6042|      2|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 2]
  |  Branch (6042:33): [True: 2, False: 0]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|      2|        auto it = rng.begin();
 6046|      2|        std::ptrdiff_t prefix_width = 0;
 6047|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 2, False: 0]
  ------------------
 6048|      2|            auto max_width_view = take_width(rng, specs.precision);
 6049|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      2|            it = prefix_result.first.base();
 6052|      2|            prefix_width = prefix_result.second;
 6053|      2|        }
 6054|      0|        else {
 6055|      0|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|      0|            std::tie(it, prefix_width) = prefix_result;
 6057|      0|        }
 6058|      2|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|      2|        std::ptrdiff_t value_width = 0;
 6062|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 2, False: 0]
  ------------------
 6063|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 2]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      2|            const auto initial_width = specs.precision - prefix_width;
 6071|      2|            auto max_width_view =
 6072|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|      0|        else {
 6078|      0|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.38k|    }
  ------------------
 6112|      2|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|      2|    {
 6041|      2|        const bool need_skipped_width =
 6042|      2|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 2]
  |  Branch (6042:33): [True: 2, False: 0]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|      2|        auto it = rng.begin();
 6046|      2|        std::ptrdiff_t prefix_width = 0;
 6047|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 2, False: 0]
  ------------------
 6048|      2|            auto max_width_view = take_width(rng, specs.precision);
 6049|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      2|            it = prefix_result.first.base();
 6052|      2|            prefix_width = prefix_result.second;
 6053|      2|        }
 6054|      0|        else {
 6055|      0|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|      0|            std::tie(it, prefix_width) = prefix_result;
 6057|      0|        }
 6058|      2|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|      2|        std::ptrdiff_t value_width = 0;
 6062|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 2, False: 0]
  ------------------
 6063|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 2]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      2|            const auto initial_width = specs.precision - prefix_width;
 6071|      2|            auto max_width_view =
 6072|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|      0|        else {
 6078|      0|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.38k|    }
  ------------------
 6112|      2|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5671|  4.38k|    {
 5672|  4.38k|        reader_error_handler eh{};
 5673|  4.38k|        detail::check_pointer_type_specs(specs, eh);
 5674|  4.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  ------------------
  ------------------
 5675|  4.38k|            return detail::unexpected_scan_error(
 5676|  4.38k|                scan_error::invalid_format_string, eh.m_msg);
 5677|  4.38k|        }
 5678|      2|        return {};
 5679|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6040|      2|    {
 6041|      2|        const bool need_skipped_width =
 6042|      2|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 2]
  |  Branch (6042:33): [True: 2, False: 0]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|      2|        auto it = rng.begin();
 6046|      2|        std::ptrdiff_t prefix_width = 0;
 6047|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 2, False: 0]
  ------------------
 6048|      2|            auto max_width_view = take_width(rng, specs.precision);
 6049|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      2|            it = prefix_result.first.base();
 6052|      2|            prefix_width = prefix_result.second;
 6053|      2|        }
 6054|      0|        else {
 6055|      0|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|      0|            std::tie(it, prefix_width) = prefix_result;
 6057|      0|        }
 6058|      2|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|      2|        std::ptrdiff_t value_width = 0;
 6062|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 2, False: 0]
  ------------------
 6063|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 2]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      2|            const auto initial_width = specs.precision - prefix_width;
 6071|      2|            auto max_width_view =
 6072|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|      0|        else {
 6078|      0|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5701|      2|    {
 5702|      2|        SCN_UNUSED(specs);
  ------------------
  |  |  915|      2|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5703|      2|        return read_default(range, value, loc);
 5704|      2|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5684|      2|    {
 5685|      2|        detail::format_specs specs{};
 5686|      2|        specs.type = detail::presentation_type::int_hex;
 5687|       |
 5688|      2|        std::uintptr_t intvalue{};
 5689|      2|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|      0|                                                                intvalue, loc));
 5691|      0|        value = reinterpret_cast<void*>(intvalue);
 5692|      0|        return result;
 5693|      2|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.38k|    }
  ------------------
 6112|      2|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|  4.38k|    {
 3036|  4.38k|        reader_error_handler eh{};
 3037|  4.38k|        get_derived().check_specs_impl(specs, eh);
 3038|  4.38k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  ------------------
  ------------------
 3039|  4.38k|            return detail::unexpected_scan_error(
 3040|  4.38k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  4.38k|        }
 3042|      2|        return {};
 3043|  4.38k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3047|  4.38k|    {
 3048|  4.38k|        return static_cast<Derived&>(*this);
 3049|  4.38k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5414|  4.38k|    {
 5415|  4.38k|        detail::check_bool_type_specs(specs, eh);
 5416|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|      2|    {
 6041|      2|        const bool need_skipped_width =
 6042|      2|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 2]
  |  Branch (6042:33): [True: 2, False: 0]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|      2|        auto it = rng.begin();
 6046|      2|        std::ptrdiff_t prefix_width = 0;
 6047|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 2, False: 0]
  ------------------
 6048|      2|            auto max_width_view = take_width(rng, specs.precision);
 6049|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      2|            it = prefix_result.first.base();
 6052|      2|            prefix_width = prefix_result.second;
 6053|      2|        }
 6054|      0|        else {
 6055|      0|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|      0|            std::tie(it, prefix_width) = prefix_result;
 6057|      0|        }
 6058|      2|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|      2|        std::ptrdiff_t value_width = 0;
 6062|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 2, False: 0]
  ------------------
 6063|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 2]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      2|            const auto initial_width = specs.precision - prefix_width;
 6071|      2|            auto max_width_view =
 6072|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|      0|        else {
 6078|      0|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5433|      2|    {
 5434|      2|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5435|       |
 5436|      2|#if !SCN_DISABLE_LOCALE
 5437|      2|        if (specs.localized) {
  ------------------
  |  Branch (5437:13): [True: 0, False: 2]
  ------------------
 5438|      0|            return rd.read_localized(range, loc, value);
 5439|      0|        }
 5440|      2|#endif
 5441|       |
 5442|      2|        return rd.read_classic(range, value);
 5443|      2|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5446|      2|    {
 5447|      2|        SCN_GCC_COMPAT_PUSH
 5448|      2|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5449|       |
 5450|      2|        switch (specs.type) {
 5451|      0|            case detail::presentation_type::string:
  ------------------
  |  Branch (5451:13): [True: 0, False: 2]
  ------------------
 5452|      0|                return bool_reader_base::allow_text;
 5453|       |
 5454|      0|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5454:13): [True: 0, False: 2]
  ------------------
 5455|      0|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5455:13): [True: 0, False: 2]
  ------------------
 5456|      0|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5456:13): [True: 0, False: 2]
  ------------------
 5457|      0|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5457:13): [True: 0, False: 2]
  ------------------
 5458|      0|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5458:13): [True: 0, False: 2]
  ------------------
 5459|      0|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5459:13): [True: 0, False: 2]
  ------------------
 5460|      0|                return bool_reader_base::allow_numeric;
 5461|       |
 5462|      2|            default:
  ------------------
  |  Branch (5462:13): [True: 2, False: 0]
  ------------------
 5463|      2|                return bool_reader_base::allow_text |
 5464|      2|                       bool_reader_base::allow_numeric;
 5465|      2|        }
 5466|       |
 5467|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5468|      2|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5300|      2|    {
 5301|      2|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5301:18): [True: 0, False: 2]
  ------------------
 5302|      0|            value = false;
 5303|      0|            return *r;
 5304|      0|        }
 5305|      2|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5305:18): [True: 0, False: 2]
  ------------------
 5306|      0|            value = true;
 5307|      0|            return *r;
 5308|      0|        }
 5309|       |
 5310|      2|        return detail::unexpected_scan_error(
 5311|      2|            scan_error::invalid_scanned_value,
 5312|      2|            "Failed to read numeric boolean value: No match");
 5313|      2|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2136|      4|{
 2137|      4|    auto it = read_code_unit(range);
 2138|      4|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2139|      0|        return unexpected(make_eof_parse_error(it.error()));
 2140|      0|    }
 2141|       |
 2142|      4|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 2143|      4|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|      4|        return unexpected(parse_error::error);
 2145|      4|    }
 2146|       |
 2147|      0|    return *it;
 2148|      4|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1846|      4|{
 1847|      4|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|      4|    else {
 1858|      4|        auto it = range.begin();
 1859|      4|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 0, False: 4]
  ------------------
 1860|      0|            return ranges::next(it, count);
 1861|      0|        }
 1862|       |
 1863|     22|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 18, False: 4]
  ------------------
 1864|     18|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 0, False: 18]
  ------------------
 1865|      0|                return unexpected(eof_error::eof);
 1866|      0|            }
 1867|     18|        }
 1868|       |
 1869|      4|        return it;
 1870|      4|    }
 1871|      4|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|      4|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|      4|    else {
 1116|      4|        return 0;
 1117|      4|    }
 1118|      4|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5271|      2|    {
 5272|      2|        scan_error err{scan_error::invalid_scanned_value,
 5273|      2|                       "Failed to read boolean"};
 5274|       |
 5275|      2|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5275:13): [True: 2, False: 0]
  ------------------
 5276|      2|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5276:22): [True: 0, False: 2]
  ------------------
 5277|      0|                return *r;
 5278|      0|            }
 5279|      2|            else {
 5280|      2|                err = r.error();
 5281|      2|            }
 5282|      2|        }
 5283|       |
 5284|      2|        if (m_options & allow_text) {
  ------------------
  |  Branch (5284:13): [True: 2, False: 0]
  ------------------
 5285|      2|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5285:22): [True: 0, False: 2]
  ------------------
 5286|      0|                return *r;
 5287|      0|            }
 5288|      2|            else {
 5289|      2|                err = r.error();
 5290|      2|            }
 5291|      2|        }
 5292|       |
 5293|      2|        return unexpected(err);
 5294|      2|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5318|      2|    {
 5319|      2|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5319:18): [True: 0, False: 2]
  ------------------
 5320|      0|            value = true;
 5321|      0|            return *r;
 5322|      0|        }
 5323|      2|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5323:18): [True: 0, False: 2]
  ------------------
 5324|      0|            value = false;
 5325|      0|            return *r;
 5326|      0|        }
 5327|       |
 5328|      2|        return detail::unexpected_scan_error(
 5329|      2|            scan_error::invalid_scanned_value,
 5330|      2|            "Failed to read textual boolean value: No match");
 5331|      2|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2184|      4|{
 2185|      4|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2186|      4|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2187|      4|                    .transform_error(make_eof_parse_error));
 2188|       |
 2189|      4|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2190|      4|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2191|      4|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 2192|      4|            return unexpected(parse_error::error);
 2193|      4|        }
 2194|      0|        return it;
 2195|       |    }
 2196|       |    else {
 2197|       |        auto range_it = range.begin();
 2198|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2199|       |            if (SCN_UNLIKELY(*range_it !=
 2200|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2201|       |                return unexpected(parse_error::error);
 2202|       |            }
 2203|       |        }
 2204|       |        return it;
 2205|       |    }
 2206|      4|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.38k|    }
  ------------------
 6112|      2|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|      2|    {
 6041|      2|        const bool need_skipped_width =
 6042|      2|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 2]
  |  Branch (6042:33): [True: 2, False: 0]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|      2|        auto it = rng.begin();
 6046|      2|        std::ptrdiff_t prefix_width = 0;
 6047|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 2, False: 0]
  ------------------
 6048|      2|            auto max_width_view = take_width(rng, specs.precision);
 6049|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      2|            it = prefix_result.first.base();
 6052|      2|            prefix_width = prefix_result.second;
 6053|      2|        }
 6054|      0|        else {
 6055|      0|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|      0|            std::tie(it, prefix_width) = prefix_result;
 6057|      0|        }
 6058|      2|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|      2|        std::ptrdiff_t value_width = 0;
 6062|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 2, False: 0]
  ------------------
 6063|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 2]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      2|            const auto initial_width = specs.precision - prefix_width;
 6071|      2|            auto max_width_view =
 6072|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      2|            it = w_it.base();
 6075|      2|            value_width = initial_width - w_it.count();
 6076|      2|        }
 6077|      0|        else {
 6078|      0|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      2|        std::ptrdiff_t postfix_width = 0;
 6090|      2|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 2, False: 0]
  ------------------
 6091|      2|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      2|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      2|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      2|                                 value_width));
 6095|      2|            std::tie(it, postfix_width) = postfix_result;
 6096|      2|        }
 6097|       |
 6098|      2|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      2|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      2|            specs, prefix_width, value_width, postfix_width));
 6100|      2|        return it;
 6101|      2|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.38k, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.38k|    }
  ------------------
 6112|      2|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|      2|    {
 6041|      2|        const bool need_skipped_width =
 6042|      2|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 2]
  |  Branch (6042:33): [True: 2, False: 0]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|      2|        auto it = rng.begin();
 6046|      2|        std::ptrdiff_t prefix_width = 0;
 6047|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 2, False: 0]
  ------------------
 6048|      2|            auto max_width_view = take_width(rng, specs.precision);
 6049|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      2|            it = prefix_result.first.base();
 6052|      2|            prefix_width = prefix_result.second;
 6053|      2|        }
 6054|      0|        else {
 6055|      0|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|      0|            std::tie(it, prefix_width) = prefix_result;
 6057|      0|        }
 6058|      2|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|      2|        std::ptrdiff_t value_width = 0;
 6062|      2|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 2, False: 0]
  ------------------
 6063|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 2]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      2|            const auto initial_width = specs.precision - prefix_width;
 6071|      2|            auto max_width_view =
 6072|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|      0|        else {
 6078|      0|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  4.38k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6040|  4.38k|    {
 6041|  4.38k|        const bool need_skipped_width =
 6042|  4.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 60, False: 4.32k]
  |  Branch (6042:33): [True: 148, False: 4.17k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  4.38k|        auto it = rng.begin();
 6046|  4.38k|        std::ptrdiff_t prefix_width = 0;
 6047|  4.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 148, False: 4.23k]
  ------------------
 6048|    148|            auto max_width_view = take_width(rng, specs.precision);
 6049|    148|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    148|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|    148|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|    148|            it = prefix_result.first.base();
 6052|    148|            prefix_width = prefix_result.second;
 6053|    148|        }
 6054|  4.23k|        else {
 6055|  4.23k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  4.23k|            std::tie(it, prefix_width) = prefix_result;
 6057|  4.23k|        }
 6058|  4.38k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  4.38k|        std::ptrdiff_t value_width = 0;
 6062|  4.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 148, False: 4.23k]
  ------------------
 6063|    148|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 148]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|    148|            const auto initial_width = specs.precision - prefix_width;
 6071|    148|            auto max_width_view =
 6072|    148|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|    148|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|    148|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      4|            it = w_it.base();
 6075|      4|            value_width = initial_width - w_it.count();
 6076|      4|        }
 6077|  4.23k|        else {
 6078|  4.23k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.52k, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.52k|    }                                                  \
  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    708|                                             specs, value, loc));
 6080|       |
 6081|    708|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 60, False: 648]
  ------------------
 6082|     60|                value_width = calculate_text_width(
 6083|     60|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|     60|                        .view());
 6085|     60|            }
 6086|    708|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    712|        std::ptrdiff_t postfix_width = 0;
 6090|    712|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 688, False: 24]
  ------------------
 6091|    688|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 688]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    688|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    688|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    688|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    688|                                 value_width));
 6095|    688|            std::tie(it, postfix_width) = postfix_result;
 6096|    688|        }
 6097|       |
 6098|    712|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    712|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    712|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 48, False: 664]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     48|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     48|    }
  ------------------
 6099|    712|            specs, prefix_width, value_width, postfix_width));
 6100|    664|        return it;
 6101|    712|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  4.38k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6040|  4.38k|    {
 6041|  4.38k|        const bool need_skipped_width =
 6042|  4.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 60, False: 4.32k]
  |  Branch (6042:33): [True: 148, False: 4.17k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  4.38k|        auto it = rng.begin();
 6046|  4.38k|        std::ptrdiff_t prefix_width = 0;
 6047|  4.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 148, False: 4.23k]
  ------------------
 6048|    148|            auto max_width_view = take_width(rng, specs.precision);
 6049|    148|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    148|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|    148|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|    148|            it = prefix_result.first.base();
 6052|    148|            prefix_width = prefix_result.second;
 6053|    148|        }
 6054|  4.23k|        else {
 6055|  4.23k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  4.23k|            std::tie(it, prefix_width) = prefix_result;
 6057|  4.23k|        }
 6058|  4.38k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  4.38k|        std::ptrdiff_t value_width = 0;
 6062|  4.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 148, False: 4.23k]
  ------------------
 6063|    148|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 148]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|    148|            const auto initial_width = specs.precision - prefix_width;
 6071|    148|            auto max_width_view =
 6072|    148|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|    148|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|    148|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      4|            it = w_it.base();
 6075|      4|            value_width = initial_width - w_it.count();
 6076|      4|        }
 6077|  4.23k|        else {
 6078|  4.23k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.52k, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.52k|    }                                                  \
  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    708|                                             specs, value, loc));
 6080|       |
 6081|    708|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 60, False: 648]
  ------------------
 6082|     60|                value_width = calculate_text_width(
 6083|     60|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|     60|                        .view());
 6085|     60|            }
 6086|    708|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    712|        std::ptrdiff_t postfix_width = 0;
 6090|    712|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 688, False: 24]
  ------------------
 6091|    688|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 688]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    688|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    688|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    688|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    688|                                 value_width));
 6095|    688|            std::tie(it, postfix_width) = postfix_result;
 6096|    688|        }
 6097|       |
 6098|    712|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    712|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    712|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 48, False: 664]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     48|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     48|    }
  ------------------
 6099|    712|            specs, prefix_width, value_width, postfix_width));
 6100|    664|        return it;
 6101|    712|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  4.38k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  4.38k|            auto rd = make_reader<T, char_type>();
 6111|  4.38k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  4.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  4.38k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  4.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6040|  4.38k|    {
 6041|  4.38k|        const bool need_skipped_width =
 6042|  4.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 60, False: 4.32k]
  |  Branch (6042:33): [True: 148, False: 4.17k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  4.38k|        auto it = rng.begin();
 6046|  4.38k|        std::ptrdiff_t prefix_width = 0;
 6047|  4.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 148, False: 4.23k]
  ------------------
 6048|    148|            auto max_width_view = take_width(rng, specs.precision);
 6049|    148|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    148|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|    148|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|    148|            it = prefix_result.first.base();
 6052|    148|            prefix_width = prefix_result.second;
 6053|    148|        }
 6054|  4.23k|        else {
 6055|  4.23k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  4.23k|            std::tie(it, prefix_width) = prefix_result;
 6057|  4.23k|        }
 6058|  4.38k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  4.38k|        std::ptrdiff_t value_width = 0;
 6062|  4.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 148, False: 4.23k]
  ------------------
 6063|    148|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 148]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|    148|            const auto initial_width = specs.precision - prefix_width;
 6071|    148|            auto max_width_view =
 6072|    148|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|    148|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|    148|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      4|            it = w_it.base();
 6075|      4|            value_width = initial_width - w_it.count();
 6076|      4|        }
 6077|  4.23k|        else {
 6078|  4.23k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.52k, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.52k|    }                                                  \
  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    708|                                             specs, value, loc));
 6080|       |
 6081|    708|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 60, False: 648]
  ------------------
 6082|     60|                value_width = calculate_text_width(
 6083|     60|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|     60|                        .view());
 6085|     60|            }
 6086|    708|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    712|        std::ptrdiff_t postfix_width = 0;
 6090|    712|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 688, False: 24]
  ------------------
 6091|    688|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 688]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    688|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    688|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    688|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    688|                                 value_width));
 6095|    688|            std::tie(it, postfix_width) = postfix_result;
 6096|    688|        }
 6097|       |
 6098|    712|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    712|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    712|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 48, False: 664]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     48|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     48|    }
  ------------------
 6099|    712|            specs, prefix_width, value_width, postfix_width));
 6100|    664|        return it;
 6101|    712|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|    684|{
 5715|    684|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 684]
  |  |  ------------------
  ------------------
 5716|      0|        return unexpected(e);
 5717|      0|    }
 5718|       |
 5719|    684|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 76, False: 608]
  ------------------
 5720|     76|        return range.begin();
 5721|     76|    }
 5722|       |
 5723|    608|    return skip_classic_whitespace(range);
 5724|    684|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|     76|    {
 3459|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|     76|        return read_default_with_base(range, value, 10);
 3461|     76|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|     76|    {
 3423|     76|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|     76|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|     76|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 76]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|    152|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|    152|                parse_integer_digits_without_thsep(
 3442|    152|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|    152|                    prefix_result.parsed_base));
 3444|       |
 3445|    152|        auto buf = make_contiguous_buffer(
 3446|    152|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|    152|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 76, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     76|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     76|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     76|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     76|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     76|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|      0|                                    prefix_result.parsed_base));
 3450|       |
 3451|      0|        return ranges::next(prefix_result.iterator,
 3452|      0|                            ranges::distance(buf.view().begin(), result_it));
 3453|    152|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|     76|    {
 3459|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|     76|        return read_default_with_base(range, value, 10);
 3461|     76|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|     76|    {
 3423|     76|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|     76|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|     76|        if constexpr (!std::is_signed_v<T>) {
 3427|     76|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 0, False: 76]
  ------------------
 3428|      0|                return detail::unexpected_scan_error(
 3429|      0|                    scan_error::invalid_scanned_value,
 3430|      0|                    "Unexpected '-' sign when parsing an "
 3431|      0|                    "unsigned value");
 3432|      0|            }
 3433|     76|        }
 3434|       |
 3435|     76|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 76]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|    152|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|    152|                parse_integer_digits_without_thsep(
 3442|    152|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|    152|                    prefix_result.parsed_base));
 3444|       |
 3445|    152|        auto buf = make_contiguous_buffer(
 3446|    152|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|    152|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 76, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     76|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     76|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     76|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     76|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     76|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|      0|                                    prefix_result.parsed_base));
 3450|       |
 3451|      0|        return ranges::next(prefix_result.iterator,
 3452|      0|                            ranges::distance(buf.view().begin(), result_it));
 3453|    152|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5666|    118|    {
 5667|    118|        return true;
 5668|    118|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5684|     98|    {
 5685|     98|        detail::format_specs specs{};
 5686|     98|        specs.type = detail::presentation_type::int_hex;
 5687|       |
 5688|     98|        std::uintptr_t intvalue{};
 5689|     98|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     98|    }                                                  \
  |  |  |  | 3939|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|      0|                                                                intvalue, loc));
 5691|      0|        value = reinterpret_cast<void*>(intvalue);
 5692|      0|        return result;
 5693|     98|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3030|    122|    {
 3031|    122|        return true;
 3032|    122|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5421|     76|    {
 5422|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5423|       |
 5424|     76|        return bool_reader<CharT>{}.read_classic(range, value);
 5425|     76|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5271|    102|    {
 5272|    102|        scan_error err{scan_error::invalid_scanned_value,
 5273|    102|                       "Failed to read boolean"};
 5274|       |
 5275|    102|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5275:13): [True: 98, False: 4]
  ------------------
 5276|     98|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5276:22): [True: 0, False: 98]
  ------------------
 5277|      0|                return *r;
 5278|      0|            }
 5279|     98|            else {
 5280|     98|                err = r.error();
 5281|     98|            }
 5282|     98|        }
 5283|       |
 5284|    102|        if (m_options & allow_text) {
  ------------------
  |  Branch (5284:13): [True: 102, False: 0]
  ------------------
 5285|    102|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5285:22): [True: 0, False: 102]
  ------------------
 5286|      0|                return *r;
 5287|      0|            }
 5288|    102|            else {
 5289|    102|                err = r.error();
 5290|    102|            }
 5291|    102|        }
 5292|       |
 5293|    102|        return unexpected(err);
 5294|    102|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5300|     98|    {
 5301|     98|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5301:18): [True: 0, False: 98]
  ------------------
 5302|      0|            value = false;
 5303|      0|            return *r;
 5304|      0|        }
 5305|     98|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5305:18): [True: 0, False: 98]
  ------------------
 5306|      0|            value = true;
 5307|      0|            return *r;
 5308|      0|        }
 5309|       |
 5310|     98|        return detail::unexpected_scan_error(
 5311|     98|            scan_error::invalid_scanned_value,
 5312|     98|            "Failed to read numeric boolean value: No match");
 5313|     98|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5318|    102|    {
 5319|    102|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5319:18): [True: 0, False: 102]
  ------------------
 5320|      0|            value = true;
 5321|      0|            return *r;
 5322|      0|        }
 5323|    102|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5323:18): [True: 0, False: 102]
  ------------------
 5324|      0|            value = false;
 5325|      0|            return *r;
 5326|      0|        }
 5327|       |
 5328|    102|        return detail::unexpected_scan_error(
 5329|    102|            scan_error::invalid_scanned_value,
 5330|    102|            "Failed to read textual boolean value: No match");
 5331|    102|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2184|    204|{
 2185|    204|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 204]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2186|    204|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2187|    204|                    .transform_error(make_eof_parse_error));
 2188|       |
 2189|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2191|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2192|       |            return unexpected(parse_error::error);
 2193|       |        }
 2194|       |        return it;
 2195|       |    }
 2196|    204|    else {
 2197|    204|        auto range_it = range.begin();
 2198|    204|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2198:28): [True: 204, False: 0]
  ------------------
 2199|    204|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 204, False: 0]
  |  |  ------------------
  ------------------
 2200|    204|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2201|    204|                return unexpected(parse_error::error);
 2202|    204|            }
 2203|    204|        }
 2204|      0|        return it;
 2205|    204|    }
 2206|    204|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3579|     76|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|     76|    {
 4065|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|     76|        float_reader<CharT> rd{};
 4068|     76|        return read_impl<Range>(
 4069|     76|            range, rd,
 4070|     76|            [](float_reader<CharT>& r, auto&&... args) {
 4071|     76|                return r.read_source(SCN_FWD(args)...);
 4072|     76|            },
 4073|     76|            value);
 4074|     76|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|     76|        : m_fptr([](storage fn,
  743|     76|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     76|              cvref<T> obj = *get<T>(fn);
  745|     76|              if constexpr (std::is_void_v<R>) {
  746|     76|                  obj(static_cast<decltype(args)>(args)...);
  747|     76|              }
  748|     76|              else {
  749|     76|                  return obj(static_cast<decltype(args)>(args)...);
  750|     76|              }
  751|     76|          }),
  752|     76|          m_storage(std::addressof(f))
  753|     76|    {
  754|     76|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|     76|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     76|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     76|              else {
  749|     76|                  return obj(static_cast<decltype(args)>(args)...);
  750|     76|              }
  751|     76|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     76|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     76|        else if constexpr (std::is_object_v<T>) {
  688|     76|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     76|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|     76|            [](float_reader<CharT>& r, auto&&... args) {
 4071|     76|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|     76|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     76|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     76|        {
  662|     76|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5182|     76|    {
 5183|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|     76|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5182|     76|    {
 5183|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|     76|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|     76|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|     76|                          basic_contiguous_scan_context<char_type>>) {
 5795|     76|            auto rd = make_reader<T, char_type>();
 5796|     76|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|     76|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5782|     76|    {
 5783|     76|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|     76|                        .transform_error(make_eof_scan_error));
 5785|     76|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|     76|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5182|     76|    {
 5183|     76|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     76|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|     76|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|     76|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2865|   109k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|   109k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|   109k|          m_current(m_range.begin())
 2868|   109k|    {
 2869|   109k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2877|   449M|    {
 2878|   449M|        return m_range.end();
 2879|   449M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1209|   224M|{
 1210|       |    // TODO: optimize
 1211|   224M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|   224M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   224M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1212|   224M|    auto res = get_next_code_point(str);
 1213|   224M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1214|   224M|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 2892|   224M|    {
 2893|   224M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   224M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   224M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|   224M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|   224M|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 224M]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|   224M|        }
 2899|   224M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   224M|    static_cast<    \
  |  |  935|   224M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|   224M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2882|  15.5k|    {
 2883|  15.5k|        return ranges::subrange{begin(), end()};
 2884|  15.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 5953|    180|    {
 5954|    180|        const bool need_skipped_width =
 5955|    180|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 180]
  |  Branch (5955:33): [True: 180, False: 0]
  ------------------
 5956|    180|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|    180|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 180]
  ------------------
 5960|    180|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 180]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|    180|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 180, False: 0]
  |  Branch (5964:56): [True: 160, False: 20]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|    160|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 160, False: 0]
  ------------------
 5968|    160|                auto max_width_view = take_width(rng, specs.precision);
 5969|    160|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|    160|                                  .transform_error(make_eof_scan_error));
 5971|    160|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|    160|            }
 5973|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|      0|                            make_eof_scan_error));
 5975|       |
 5976|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 0]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|      0|            return result_type{it, 0};
 5984|      0|        }
 5985|       |
 5986|     20|        return result_type{rng.begin(), 0};
 5987|    180|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2800|    320|    {
 2801|    320|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2802|    320|                                      m_count};
 2803|    320|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2707|  1.12k|    {
 2708|  1.12k|        return view;
 2709|  1.12k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2371|    320|        : m_current(x), m_end(s), m_count(n)
 2372|    320|    {
 2373|    320|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2771|    160|        {
 2772|    160|            return !(y == x);
 2773|    160|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2760|    480|        {
 2761|    480|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2761:21): [True: 0, False: 480]
  |  Branch (2761:39): [True: 0, False: 0]
  ------------------
 2762|    480|                   y.base() == x.m_end;
  ------------------
  |  Branch (2762:20): [True: 0, False: 480]
  ------------------
 2763|    480|        }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2806|    480|    {
 2807|    480|        return sentinel<true>{m_base.get().end()};
 2808|    480|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2741|    480|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|    480|    static_cast<    \
  |  |  935|    480|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2416|    320|    {
 2417|    320|        return *m_current;
 2418|    320|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2425|    160|    {
 2426|    160|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2427|    160|        _increment_current();
 2428|    160|        return *this;
 2429|    160|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2658|    160|    {
 2659|    160|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2659:13): [True: 160, False: 0]
  ------------------
 2660|    160|            auto cplen = _get_cp_length_at_current();
 2661|    160|            m_multibyte_left = cplen - 1;
 2662|    160|            m_count -= _get_width_at_current_cp_start(cplen);
 2663|    160|        }
 2664|      0|        else {
 2665|      0|            --m_multibyte_left;
 2666|      0|        }
 2667|       |
 2668|    160|        ++m_current;
 2669|    160|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2629|    160|    {
 2630|    160|        return static_cast<difference_type>(
 2631|    160|            detail::code_point_length_by_starting_code_unit(*m_current));
 2632|    160|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2635|    160|    {
 2636|    160|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 2637|      0|            return 0;
 2638|      0|        }
 2639|       |
 2640|    160|        if (cplen == 1) {
  ------------------
  |  Branch (2640:13): [True: 160, False: 0]
  ------------------
 2641|    160|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2642|    160|            auto cp = static_cast<char32_t>(*m_current);
 2643|    160|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2644|    160|        }
 2645|       |
 2646|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2647|      0|                                           cplen);
 2648|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2649|      0|            return 0;
 2650|      0|        }
 2651|       |
 2652|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2653|      0|        return static_cast<difference_type>(
 2654|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2655|      0|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2822|    160|    {
 2823|    160|        return take_width_view{r, n};
 2824|    160|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2790|    160|        : m_base(base), m_count(count)
 2791|    160|    {
 2792|    160|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2704|    160|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|    160|{
 2946|    160|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 160, False: 0]
  ------------------
 2947|    160|        auto it = read_while_classic_space(range);
 2948|    160|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|    160|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 2950|      0|            return unexpected(e);
 2951|      0|        }
 2952|       |
 2953|    160|        return it;
 2954|    160|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|    160|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|    160|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|    160|    else {
 2116|    160|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|    160|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|    160|            return detail::is_cp_space(cp);
 2129|    160|        });
 2130|    160|    }
 2131|    160|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|    160|{
 2072|    160|    return read_until_code_point(range, std::not_fn(pred));
 2073|    160|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|    160|{
 2051|    160|    auto it = range.begin();
 2052|    160|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 160, False: 0]
  ------------------
 2053|    160|        const auto val =
 2054|    160|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|    160|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    160|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 160, False: 0]
  |  |  ------------------
  ------------------
 2056|    160|            const auto cp = detail::decode_code_point_exhaustive(
 2057|    160|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|    160|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 160, False: 0]
  ------------------
 2059|    160|                return it;
 2060|    160|            }
 2061|    160|        }
 2062|      0|        it = val.iterator;
 2063|      0|    }
 2064|       |
 2065|      0|    return it;
 2066|    160|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1888|    160|{
 1889|    160|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|    160|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|    160|    auto it = range.begin();
 1893|    160|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|    160|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|    160|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 160, False: 0]
  ------------------
 1902|    160|        ++it;
 1903|    160|        return {it, string_type(1, *range.begin())};
 1904|    160|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|    160|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|    320|{
  945|    320|    return is_range_eof(r.begin(), r.end());
  946|    320|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|    320|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|    320|    {
  938|    320|        return begin == end;
  939|    320|    }
  940|    320|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1879|    160|    {
 1880|    160|        return !codepoint.empty();
 1881|    160|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    160|        : m_fptr([](storage fn,
  743|    160|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    160|              cvref<T> obj = *get<T>(fn);
  745|    160|              if constexpr (std::is_void_v<R>) {
  746|    160|                  obj(static_cast<decltype(args)>(args)...);
  747|    160|              }
  748|    160|              else {
  749|    160|                  return obj(static_cast<decltype(args)>(args)...);
  750|    160|              }
  751|    160|          }),
  752|    160|          m_storage(std::addressof(f))
  753|    160|    {
  754|    160|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    160|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    160|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    160|              else {
  749|    160|                  return obj(static_cast<decltype(args)>(args)...);
  750|    160|              }
  751|    160|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    160|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    160|        else if constexpr (std::is_object_v<T>) {
  688|    160|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    160|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|    160|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|    160|            return detail::is_cp_space(cp);
 2129|    160|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    160|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    160|        {
  662|    160|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    160|{
  951|    160|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    160|    return eof_error::good;
  955|    160|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2403|    640|    {
 2404|    640|        return m_current;
 2405|    640|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2407|    640|    {
 2408|    640|        return m_count;
 2409|    640|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|  4.84k|    {
 5954|  4.84k|        const bool need_skipped_width =
 5955|  4.84k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 4.15k, False: 688]
  |  Branch (5955:33): [True: 0, False: 688]
  ------------------
 5956|  4.84k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  4.84k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 4.84k]
  ------------------
 5960|  4.84k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 4.84k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  4.84k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 4.77k, False: 76]
  |  Branch (5964:56): [True: 176, False: 4.59k]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|    176|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 176]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|    352|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|    352|                            make_eof_scan_error));
 5975|       |
 5976|    352|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 160, False: 16]
  ------------------
 5977|    160|                return result_type{
 5978|    160|                    it,
 5979|    160|                    calculate_text_width(make_contiguous_buffer(
 5980|    160|                                             ranges::subrange{rng.begin(), it})
 5981|    160|                                             .view())};
 5982|    160|            }
 5983|     16|            return result_type{it, 0};
 5984|    352|        }
 5985|       |
 5986|  4.67k|        return result_type{rng.begin(), 0};
 5987|  4.84k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|    888|    {
 5996|    888|        const bool need_skipped_width =
 5997|    888|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 836, False: 52]
  |  Branch (5997:33): [True: 20, False: 32]
  ------------------
 5998|    888|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|    888|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 6, False: 882]
  ------------------
 6001|    888|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 882]
  ------------------
 6002|      6|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 6]
  ------------------
 6003|      6|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      6|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      6|                             specs.fill, need_skipped_width);
 6008|      6|        }
 6009|    882|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 882, False: 0]
  ------------------
 6010|    882|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 882, False: 0]
  ------------------
 6011|    882|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 836, False: 46]
  |  Branch (6011:35): [True: 836, False: 0]
  ------------------
 6012|    882|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 20, False: 26]
  ------------------
 6013|    856|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 20, False: 0]
  ------------------
 6014|    856|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 20, False: 836]
  ------------------
 6015|     20|                const auto initial_width =
 6016|     20|                    specs.precision - prefix_width - value_width;
 6017|     20|                auto max_width_view = take_width(rng, initial_width);
 6018|     20|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|     20|                                  .transform_error(make_eof_scan_error));
 6020|     20|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|     20|            }
 6022|  1.67k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    836|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    836|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    836|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 836]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    836|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    836|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|  1.67k|                            make_eof_scan_error));
 6024|       |
 6025|  1.67k|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 836, False: 0]
  ------------------
 6026|    836|                return result_type{
 6027|    836|                    it,
 6028|    836|                    calculate_text_width(make_contiguous_buffer(
 6029|    836|                                             ranges::subrange{rng.begin(), it})
 6030|    836|                                             .view())};
 6031|    836|            }
 6032|      0|            return result_type{it, 0};
 6033|  1.67k|        }
 6034|     26|        return result_type{rng.begin(), 0};
 6035|    882|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.54k|    }
  ------------------
 6112|     42|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|     42|    {
 6041|     42|        const bool need_skipped_width =
 6042|     42|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 20, False: 22]
  |  Branch (6042:33): [True: 20, False: 2]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|     42|        auto it = rng.begin();
 6046|     42|        std::ptrdiff_t prefix_width = 0;
 6047|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 22]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|     22|        else {
 6055|     22|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|     22|            std::tie(it, prefix_width) = prefix_result;
 6057|     22|        }
 6058|     42|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|     42|        std::ptrdiff_t value_width = 0;
 6062|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 22]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|     22|        else {
 6078|     22|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.54k|    }
  ------------------
 6112|     42|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|     42|    {
 6041|     42|        const bool need_skipped_width =
 6042|     42|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 20, False: 22]
  |  Branch (6042:33): [True: 20, False: 2]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|     42|        auto it = rng.begin();
 6046|     42|        std::ptrdiff_t prefix_width = 0;
 6047|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 22]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|     22|        else {
 6055|     22|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|     22|            std::tie(it, prefix_width) = prefix_result;
 6057|     22|        }
 6058|     42|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|     42|        std::ptrdiff_t value_width = 0;
 6062|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 22]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|     22|        else {
 6078|     22|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.54k|    }
  ------------------
 6112|     42|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5671|  1.59k|    {
 5672|  1.59k|        reader_error_handler eh{};
 5673|  1.59k|        detail::check_pointer_type_specs(specs, eh);
 5674|  1.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  ------------------
  ------------------
 5675|  1.54k|            return detail::unexpected_scan_error(
 5676|  1.54k|                scan_error::invalid_format_string, eh.m_msg);
 5677|  1.54k|        }
 5678|     42|        return {};
 5679|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6040|     42|    {
 6041|     42|        const bool need_skipped_width =
 6042|     42|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 20, False: 22]
  |  Branch (6042:33): [True: 20, False: 2]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|     42|        auto it = rng.begin();
 6046|     42|        std::ptrdiff_t prefix_width = 0;
 6047|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 22]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|     22|        else {
 6055|     22|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|     22|            std::tie(it, prefix_width) = prefix_result;
 6057|     22|        }
 6058|     42|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|     42|        std::ptrdiff_t value_width = 0;
 6062|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 22]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|     22|        else {
 6078|     22|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5701|     20|    {
 5702|     20|        SCN_UNUSED(specs);
  ------------------
  |  |  915|     20|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5703|     20|        return read_default(range, value, loc);
 5704|     20|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5684|     20|    {
 5685|     20|        detail::format_specs specs{};
 5686|     20|        specs.type = detail::presentation_type::int_hex;
 5687|       |
 5688|     20|        std::uintptr_t intvalue{};
 5689|     20|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|      0|                                                                intvalue, loc));
 5691|      0|        value = reinterpret_cast<void*>(intvalue);
 5692|      0|        return result;
 5693|     20|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5701|     22|    {
 5702|     22|        SCN_UNUSED(specs);
  ------------------
  |  |  915|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5703|     22|        return read_default(range, value, loc);
 5704|     22|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 46]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.54k|    }
  ------------------
 6112|     46|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|  1.59k|    {
 3036|  1.59k|        reader_error_handler eh{};
 3037|  1.59k|        get_derived().check_specs_impl(specs, eh);
 3038|  1.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 46]
  |  |  ------------------
  ------------------
 3039|  1.54k|            return detail::unexpected_scan_error(
 3040|  1.54k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  1.54k|        }
 3042|     46|        return {};
 3043|  1.59k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3047|  1.59k|    {
 3048|  1.59k|        return static_cast<Derived&>(*this);
 3049|  1.59k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5414|  1.59k|    {
 5415|  1.59k|        detail::check_bool_type_specs(specs, eh);
 5416|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|     46|    {
 6041|     46|        const bool need_skipped_width =
 6042|     46|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 20, False: 26]
  |  Branch (6042:33): [True: 20, False: 6]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|     46|        auto it = rng.begin();
 6046|     46|        std::ptrdiff_t prefix_width = 0;
 6047|     46|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 26]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|     26|        else {
 6055|     26|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|     26|            std::tie(it, prefix_width) = prefix_result;
 6057|     26|        }
 6058|     46|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|     46|        std::ptrdiff_t value_width = 0;
 6062|     46|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 26]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|     26|        else {
 6078|     26|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 26, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     26|    }                                                  \
  |  | 3939|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5433|     20|    {
 5434|     20|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5435|       |
 5436|     20|#if !SCN_DISABLE_LOCALE
 5437|     20|        if (specs.localized) {
  ------------------
  |  Branch (5437:13): [True: 0, False: 20]
  ------------------
 5438|      0|            return rd.read_localized(range, loc, value);
 5439|      0|        }
 5440|     20|#endif
 5441|       |
 5442|     20|        return rd.read_classic(range, value);
 5443|     20|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5446|     46|    {
 5447|     46|        SCN_GCC_COMPAT_PUSH
 5448|     46|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5449|       |
 5450|     46|        switch (specs.type) {
 5451|      4|            case detail::presentation_type::string:
  ------------------
  |  Branch (5451:13): [True: 4, False: 42]
  ------------------
 5452|      4|                return bool_reader_base::allow_text;
 5453|       |
 5454|      0|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5454:13): [True: 0, False: 46]
  ------------------
 5455|      0|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5455:13): [True: 0, False: 46]
  ------------------
 5456|      0|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5456:13): [True: 0, False: 46]
  ------------------
 5457|      0|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5457:13): [True: 0, False: 46]
  ------------------
 5458|      0|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5458:13): [True: 0, False: 46]
  ------------------
 5459|      0|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5459:13): [True: 0, False: 46]
  ------------------
 5460|      0|                return bool_reader_base::allow_numeric;
 5461|       |
 5462|     42|            default:
  ------------------
  |  Branch (5462:13): [True: 42, False: 4]
  ------------------
 5463|     42|                return bool_reader_base::allow_text |
 5464|     42|                       bool_reader_base::allow_numeric;
 5465|     46|        }
 5466|       |
 5467|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5468|     46|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5300|     20|    {
 5301|     20|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5301:18): [True: 0, False: 20]
  ------------------
 5302|      0|            value = false;
 5303|      0|            return *r;
 5304|      0|        }
 5305|     20|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5305:18): [True: 0, False: 20]
  ------------------
 5306|      0|            value = true;
 5307|      0|            return *r;
 5308|      0|        }
 5309|       |
 5310|     20|        return detail::unexpected_scan_error(
 5311|     20|            scan_error::invalid_scanned_value,
 5312|     20|            "Failed to read numeric boolean value: No match");
 5313|     20|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2136|     40|{
 2137|     40|    auto it = read_code_unit(range);
 2138|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2139|      0|        return unexpected(make_eof_parse_error(it.error()));
 2140|      0|    }
 2141|       |
 2142|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2143|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|     40|        return unexpected(parse_error::error);
 2145|     40|    }
 2146|       |
 2147|      0|    return *it;
 2148|     40|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1846|     40|{
 1847|     40|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|     40|    else {
 1858|     40|        auto it = range.begin();
 1859|     40|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 0, False: 40]
  ------------------
 1860|      0|            return ranges::next(it, count);
 1861|      0|        }
 1862|       |
 1863|    220|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 180, False: 40]
  ------------------
 1864|    180|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 0, False: 180]
  ------------------
 1865|      0|                return unexpected(eof_error::eof);
 1866|      0|            }
 1867|    180|        }
 1868|       |
 1869|     40|        return it;
 1870|     40|    }
 1871|     40|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|     40|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|     40|    else {
 1116|     40|        return 0;
 1117|     40|    }
 1118|     40|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5271|     20|    {
 5272|     20|        scan_error err{scan_error::invalid_scanned_value,
 5273|     20|                       "Failed to read boolean"};
 5274|       |
 5275|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5275:13): [True: 20, False: 0]
  ------------------
 5276|     20|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5276:22): [True: 0, False: 20]
  ------------------
 5277|      0|                return *r;
 5278|      0|            }
 5279|     20|            else {
 5280|     20|                err = r.error();
 5281|     20|            }
 5282|     20|        }
 5283|       |
 5284|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5284:13): [True: 20, False: 0]
  ------------------
 5285|     20|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5285:22): [True: 0, False: 20]
  ------------------
 5286|      0|                return *r;
 5287|      0|            }
 5288|     20|            else {
 5289|     20|                err = r.error();
 5290|     20|            }
 5291|     20|        }
 5292|       |
 5293|     20|        return unexpected(err);
 5294|     20|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5318|     20|    {
 5319|     20|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5319:18): [True: 0, False: 20]
  ------------------
 5320|      0|            value = true;
 5321|      0|            return *r;
 5322|      0|        }
 5323|     20|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5323:18): [True: 0, False: 20]
  ------------------
 5324|      0|            value = false;
 5325|      0|            return *r;
 5326|      0|        }
 5327|       |
 5328|     20|        return detail::unexpected_scan_error(
 5329|     20|            scan_error::invalid_scanned_value,
 5330|     20|            "Failed to read textual boolean value: No match");
 5331|     20|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2184|     40|{
 2185|     40|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2186|     40|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2187|     40|                    .transform_error(make_eof_parse_error));
 2188|       |
 2189|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2191|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2192|       |            return unexpected(parse_error::error);
 2193|       |        }
 2194|       |        return it;
 2195|       |    }
 2196|     40|    else {
 2197|     40|        auto range_it = range.begin();
 2198|     40|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2198:28): [True: 40, False: 0]
  ------------------
 2199|     40|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2200|     40|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2201|     40|                return unexpected(parse_error::error);
 2202|     40|            }
 2203|     40|        }
 2204|      0|        return it;
 2205|     40|    }
 2206|     40|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5433|     26|    {
 5434|     26|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5435|       |
 5436|     26|#if !SCN_DISABLE_LOCALE
 5437|     26|        if (specs.localized) {
  ------------------
  |  Branch (5437:13): [True: 0, False: 26]
  ------------------
 5438|      0|            return rd.read_localized(range, loc, value);
 5439|      0|        }
 5440|     26|#endif
 5441|       |
 5442|     26|        return rd.read_classic(range, value);
 5443|     26|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.54k|    }
  ------------------
 6112|     42|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|     42|    {
 6041|     42|        const bool need_skipped_width =
 6042|     42|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 20, False: 22]
  |  Branch (6042:33): [True: 20, False: 2]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|     42|        auto it = rng.begin();
 6046|     42|        std::ptrdiff_t prefix_width = 0;
 6047|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 22]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|     22|        else {
 6055|     22|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|     22|            std::tie(it, prefix_width) = prefix_result;
 6057|     22|        }
 6058|     42|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|     42|        std::ptrdiff_t value_width = 0;
 6062|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 22]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|     20|            it = w_it.base();
 6075|     20|            value_width = initial_width - w_it.count();
 6076|     20|        }
 6077|     22|        else {
 6078|     22|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|     22|                                             specs, value, loc));
 6080|       |
 6081|     22|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 20, False: 2]
  ------------------
 6082|     20|                value_width = calculate_text_width(
 6083|     20|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|     20|                        .view());
 6085|     20|            }
 6086|     22|        }
 6087|       |
 6088|       |        // Read postfix
 6089|     42|        std::ptrdiff_t postfix_width = 0;
 6090|     42|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 42, False: 0]
  ------------------
 6091|     42|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|     42|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|     42|                                 rd.skip_ws_before_read(), prefix_width,
 6094|     42|                                 value_width));
 6095|     42|            std::tie(it, postfix_width) = postfix_result;
 6096|     42|        }
 6097|       |
 6098|     42|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     42|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20, False: 22]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     20|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     20|    }
  ------------------
 6099|     42|            specs, prefix_width, value_width, postfix_width));
 6100|     22|        return it;
 6101|     42|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.54k|    }
  ------------------
 6112|     42|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|     42|    {
 6041|     42|        const bool need_skipped_width =
 6042|     42|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 20, False: 22]
  |  Branch (6042:33): [True: 20, False: 2]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|     42|        auto it = rng.begin();
 6046|     42|        std::ptrdiff_t prefix_width = 0;
 6047|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 22]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|     22|        else {
 6055|     22|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|     22|            std::tie(it, prefix_width) = prefix_result;
 6057|     22|        }
 6058|     42|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|     42|        std::ptrdiff_t value_width = 0;
 6062|     42|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 22]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|     22|        else {
 6078|     22|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|      0|                                             specs, value, loc));
 6080|       |
 6081|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 0]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|      0|        }
 6087|       |
 6088|       |        // Read postfix
 6089|      0|        std::ptrdiff_t postfix_width = 0;
 6090|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 0, False: 0]
  ------------------
 6091|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6094|      0|                                 value_width));
 6095|      0|            std::tie(it, postfix_width) = postfix_result;
 6096|      0|        }
 6097|       |
 6098|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|      0|            specs, prefix_width, value_width, postfix_width));
 6100|      0|        return it;
 6101|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  1.59k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6040|  1.59k|    {
 6041|  1.59k|        const bool need_skipped_width =
 6042|  1.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 1.34k, False: 244]
  |  Branch (6042:33): [True: 20, False: 224]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  1.59k|        auto it = rng.begin();
 6046|  1.59k|        std::ptrdiff_t prefix_width = 0;
 6047|  1.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 1.57k]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|  1.57k|        else {
 6055|  1.57k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  1.57k|            std::tie(it, prefix_width) = prefix_result;
 6057|  1.57k|        }
 6058|  1.59k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  1.59k|        std::ptrdiff_t value_width = 0;
 6062|  1.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 1.57k]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  1.57k|        else {
 6078|  1.57k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 290]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.28k|    }                                                  \
  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    290|                                             specs, value, loc));
 6080|       |
 6081|    290|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 278, False: 12]
  ------------------
 6082|    278|                value_width = calculate_text_width(
 6083|    278|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|    278|                        .view());
 6085|    278|            }
 6086|    290|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    290|        std::ptrdiff_t postfix_width = 0;
 6090|    290|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 282, False: 8]
  ------------------
 6091|    282|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    282|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    282|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    282|                                 value_width));
 6095|    282|            std::tie(it, postfix_width) = postfix_result;
 6096|    282|        }
 6097|       |
 6098|    290|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    290|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 272, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    272|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    272|    }
  ------------------
 6099|    290|            specs, prefix_width, value_width, postfix_width));
 6100|     18|        return it;
 6101|    290|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  1.59k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6040|  1.59k|    {
 6041|  1.59k|        const bool need_skipped_width =
 6042|  1.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 1.34k, False: 244]
  |  Branch (6042:33): [True: 20, False: 224]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  1.59k|        auto it = rng.begin();
 6046|  1.59k|        std::ptrdiff_t prefix_width = 0;
 6047|  1.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 1.57k]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|  1.57k|        else {
 6055|  1.57k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  1.57k|            std::tie(it, prefix_width) = prefix_result;
 6057|  1.57k|        }
 6058|  1.59k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  1.59k|        std::ptrdiff_t value_width = 0;
 6062|  1.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 1.57k]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  1.57k|        else {
 6078|  1.57k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 290]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.28k|    }                                                  \
  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    290|                                             specs, value, loc));
 6080|       |
 6081|    290|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 278, False: 12]
  ------------------
 6082|    278|                value_width = calculate_text_width(
 6083|    278|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|    278|                        .view());
 6085|    278|            }
 6086|    290|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    290|        std::ptrdiff_t postfix_width = 0;
 6090|    290|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 282, False: 8]
  ------------------
 6091|    282|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    282|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    282|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    282|                                 value_width));
 6095|    282|            std::tie(it, postfix_width) = postfix_result;
 6096|    282|        }
 6097|       |
 6098|    290|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    290|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 272, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    272|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    272|    }
  ------------------
 6099|    290|            specs, prefix_width, value_width, postfix_width));
 6100|     18|        return it;
 6101|    290|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  1.59k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.59k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.59k|            auto rd = make_reader<T, char_type>();
 6111|  1.59k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.59k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  1.59k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6040|  1.59k|    {
 6041|  1.59k|        const bool need_skipped_width =
 6042|  1.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 1.34k, False: 244]
  |  Branch (6042:33): [True: 20, False: 224]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  1.59k|        auto it = rng.begin();
 6046|  1.59k|        std::ptrdiff_t prefix_width = 0;
 6047|  1.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 20, False: 1.57k]
  ------------------
 6048|     20|            auto max_width_view = take_width(rng, specs.precision);
 6049|     20|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|     20|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|     20|            it = prefix_result.first.base();
 6052|     20|            prefix_width = prefix_result.second;
 6053|     20|        }
 6054|  1.57k|        else {
 6055|  1.57k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  1.57k|            std::tie(it, prefix_width) = prefix_result;
 6057|  1.57k|        }
 6058|  1.59k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  1.59k|        std::ptrdiff_t value_width = 0;
 6062|  1.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 20, False: 1.57k]
  ------------------
 6063|     20|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 20]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|     20|            const auto initial_width = specs.precision - prefix_width;
 6071|     20|            auto max_width_view =
 6072|     20|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|     20|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  1.57k|        else {
 6078|  1.57k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 290]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  1.28k|    }                                                  \
  |  | 3939|  1.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    290|                                             specs, value, loc));
 6080|       |
 6081|    290|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 278, False: 12]
  ------------------
 6082|    278|                value_width = calculate_text_width(
 6083|    278|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|    278|                        .view());
 6085|    278|            }
 6086|    290|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    290|        std::ptrdiff_t postfix_width = 0;
 6090|    290|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 282, False: 8]
  ------------------
 6091|    282|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    282|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    282|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    282|                                 value_width));
 6095|    282|            std::tie(it, postfix_width) = postfix_result;
 6096|    282|        }
 6097|       |
 6098|    290|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    290|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 272, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    272|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    272|    }
  ------------------
 6099|    290|            specs, prefix_width, value_width, postfix_width));
 6100|     18|        return it;
 6101|    290|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|     24|    {
 3423|     24|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|     24|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|     24|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 24]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|     48|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|     48|                parse_integer_digits_without_thsep(
 3442|     48|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|     48|                    prefix_result.parsed_base));
 3444|       |
 3445|     48|        auto buf = make_contiguous_buffer(
 3446|     48|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|     48|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|      0|                                    prefix_result.parsed_base));
 3450|       |
 3451|      0|        return ranges::next(prefix_result.iterator,
 3452|      0|                            ranges::distance(buf.view().begin(), result_it));
 3453|     48|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|     24|    {
 3423|     24|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|     24|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|     24|        if constexpr (!std::is_signed_v<T>) {
 3427|     24|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 0, False: 24]
  ------------------
 3428|      0|                return detail::unexpected_scan_error(
 3429|      0|                    scan_error::invalid_scanned_value,
 3430|      0|                    "Unexpected '-' sign when parsing an "
 3431|      0|                    "unsigned value");
 3432|      0|            }
 3433|     24|        }
 3434|       |
 3435|     24|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 24]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|     48|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|     48|                parse_integer_digits_without_thsep(
 3442|     48|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|     48|                    prefix_result.parsed_base));
 3444|       |
 3445|     48|        auto buf = make_contiguous_buffer(
 3446|     48|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|     48|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|      0|                                    prefix_result.parsed_base));
 3450|       |
 3451|      0|        return ranges::next(prefix_result.iterator,
 3452|      0|                            ranges::distance(buf.view().begin(), result_it));
 3453|     48|    }

LLVMFuzzerTestOneInput:
   68|  3.04k|{
   69|  3.04k|    scn::fuzz::run(data, size);
   70|  3.04k|    return 0;
   71|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  3.04k|{
   52|  3.04k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 3.04k]
  |  Branch (52:35): [True: 0, False: 3.04k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  3.04k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  3.04k|    run_for_source(sv);
   59|  3.04k|    run_for_source(wsv_reinterpret);
   60|  3.04k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 3.04k, False: 0]
  ------------------
   61|  3.04k|        run_for_source(wsv_transcode);
   62|  3.04k|    }
   63|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  3.04k|{
   37|  3.04k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  3.04k|    run_for_type<char_type>(source);
   40|  3.04k|    run_for_type<int>(source);
   41|  3.04k|    run_for_type<unsigned>(source);
   42|  3.04k|    run_for_type<double>(source);
   43|  3.04k|    run_for_type<bool>(source);
   44|  3.04k|    run_for_type<void*>(source);
   45|  3.04k|    run_for_type<std::string>(source);
   46|  3.04k|    run_for_type<std::wstring>(source);
   47|  3.04k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  3.04k|{
   25|  3.04k|    {
   26|  3.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.04k|    }
   28|  3.04k|    {
   29|  3.04k|        auto _ =
   30|  3.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.04k|    }
   32|  3.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  6.09k|{
   37|  6.09k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  6.09k|    run_for_type<char_type>(source);
   40|  6.09k|    run_for_type<int>(source);
   41|  6.09k|    run_for_type<unsigned>(source);
   42|  6.09k|    run_for_type<double>(source);
   43|  6.09k|    run_for_type<bool>(source);
   44|  6.09k|    run_for_type<void*>(source);
   45|  6.09k|    run_for_type<std::string>(source);
   46|  6.09k|    run_for_type<std::wstring>(source);
   47|  6.09k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  6.09k|{
   25|  6.09k|    {
   26|  6.09k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.09k|    }
   28|  6.09k|    {
   29|  6.09k|        auto _ =
   30|  6.09k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.09k|    }
   32|  6.09k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.04k|{
   52|  3.04k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  3.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.04k|    string_buffer.resize(size);
   56|  3.04k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.04k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.04k|    const auto wsv_reinterpret_size =
   61|  3.04k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 0, False: 3.04k]
  ------------------
   62|  3.04k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.04k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.04k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.04k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.04k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.04k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.04k|}

