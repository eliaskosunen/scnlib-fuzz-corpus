_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|     44|                    parse_options_t<UC> options) noexcept {
  286|     44|  chars_format const fmt = options.format;
  287|     44|  UC const decimal_point = options.decimal_point;
  288|       |
  289|     44|  parsed_number_string_t<UC> answer;
  290|     44|  answer.valid = false;
  291|     44|  answer.too_many_digits = false;
  292|     44|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|     44|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 44]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|     44|  UC const *const start_digits = p;
  318|       |
  319|     44|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|     88|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 70, False: 18]
  |  Branch (321:25): [True: 44, False: 26]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|     44|    i = 10 * i +
  325|     44|        uint64_t(*p -
  326|     44|                 UC('0')); // might overflow, we will handle the overflow later
  327|     44|    ++p;
  328|     44|  }
  329|     44|  UC const *const end_of_integer_part = p;
  330|     44|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|     44|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|     44|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|     44|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 44]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|     44|  int64_t exponent = 0;
  344|     44|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 26, False: 18]
  |  Branch (344:49): [True: 0, False: 26]
  ------------------
  345|     44|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 0, False: 44]
  ------------------
  346|      0|    ++p;
  347|      0|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|      0|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 0, False: 0]
  |  Branch (352:27): [True: 0, False: 0]
  ------------------
  353|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  354|      0|      ++p;
  355|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|      0|    }
  357|      0|    exponent = before - p;
  358|      0|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|      0|    digit_count -= exponent;
  360|      0|  }
  361|     44|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|     44|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 44]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|     44|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 44]
  ------------------
  368|     44|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|     44|  int64_t exp_number = 0; // explicit exponential part
  372|     44|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 40, False: 4]
  |  Branch (372:44): [True: 26, False: 14]
  ------------------
  373|     44|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 0, False: 26]
  |  Branch (373:28): [True: 0, False: 26]
  ------------------
  374|     44|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|     44|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 44]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|     44|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|      0|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|      0|    UC const *location_of_e = p;
  378|      0|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 0, False: 0]
  |  Branch (378:28): [True: 0, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|      0|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|      0|      ++p;
  381|      0|    }
  382|      0|    bool neg_exp = false;
  383|      0|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 0, False: 0]
  |  Branch (383:24): [True: 0, False: 0]
  ------------------
  384|      0|      neg_exp = true;
  385|      0|      ++p;
  386|      0|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 0, False: 0]
  ------------------
  387|      0|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 0, False: 0]
  ------------------
  388|      0|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|      0|      ++p;
  390|      0|    }
  391|      0|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 0, False: 0]
  |  Branch (391:24): [True: 0, False: 0]
  ------------------
  392|      0|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 0]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|      0|      p = location_of_e;
  400|      0|    } else {
  401|      0|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 0, False: 0]
  |  Branch (401:29): [True: 0, False: 0]
  ------------------
  402|      0|        uint8_t digit = uint8_t(*p - UC('0'));
  403|      0|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 0, False: 0]
  ------------------
  404|      0|          exp_number = 10 * exp_number + digit;
  405|      0|        }
  406|      0|        ++p;
  407|      0|      }
  408|      0|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 0, False: 0]
  ------------------
  409|      0|        exp_number = -exp_number;
  410|      0|      }
  411|      0|      exponent += exp_number;
  412|      0|    }
  413|     44|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|     44|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 40, False: 4]
  |  Branch (415:45): [True: 0, False: 40]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|     44|  }
  419|     44|  answer.lastmatch = p;
  420|     44|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|     44|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 0, False: 44]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|      0|    UC const *start = start_digits;
  433|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 0, False: 0]
  |  Branch (433:32): [True: 0, False: 0]
  |  Branch (433:53): [True: 0, False: 0]
  ------------------
  434|      0|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 0, False: 0]
  ------------------
  435|      0|        digit_count--;
  436|      0|      }
  437|      0|      start++;
  438|      0|    }
  439|       |
  440|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 0, False: 0]
  ------------------
  441|      0|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|      0|      i = 0;
  446|      0|      p = answer.integer.ptr;
  447|      0|      UC const *int_end = p + answer.integer.len();
  448|      0|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 0, False: 0]
  |  Branch (449:54): [True: 0, False: 0]
  ------------------
  450|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  451|      0|        ++p;
  452|      0|      }
  453|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 0, False: 0]
  ------------------
  454|      0|        exponent = end_of_integer_part - p + exp_number;
  455|      0|      } else { // We have a value with a fractional component.
  456|      0|        p = answer.fraction.ptr;
  457|      0|        UC const *frac_end = p + answer.fraction.len();
  458|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 0, False: 0]
  |  Branch (458:56): [True: 0, False: 0]
  ------------------
  459|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  460|      0|          ++p;
  461|      0|        }
  462|      0|        exponent = answer.fraction.ptr - p + exp_number;
  463|      0|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|      0|    }
  466|      0|  }
  467|     44|  answer.exponent = exponent;
  468|     44|  answer.mantissa = i;
  469|     44|  return answer;
  470|     44|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|     70|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|     70|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 26, False: 44]
  |  Branch (35:27): [True: 0, False: 44]
  ------------------
   36|     70|}

_ZN10fast_float4spanIKDiEC2Ev:
  234|     88|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  233|     44|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   44|     44|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  488|     44|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  489|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  490|       |  return 0;
  491|       |#else
  492|     44|  return -22;
  493|     44|#endif
  494|     44|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  556|     44|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  557|     44|  return 22;
  558|     44|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  565|     44|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  566|     44|  return uint64_t(2) << mantissa_explicit_bits();
  567|     44|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  506|     44|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  507|     44|  return 52;
  508|     44|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  593|     44|binary_format<double>::exact_power_of_ten(int64_t power) {
  594|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  595|     44|  return (void)powers_of_ten[0], powers_of_ten[power];
  596|     44|}

_ZN10fast_float6detail17rounds_to_nearestEv:
   81|     44|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   82|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   83|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   84|       |  return false;
   85|       |#endif
   86|       |  // See
   87|       |  // A fast function to check your floating-point rounding mode
   88|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   89|       |  //
   90|       |  // This function is meant to be equivalent to :
   91|       |  // prior: #include <cfenv>
   92|       |  //  return fegetround() == FE_TONEAREST;
   93|       |  // However, it is expected to be much faster than the fegetround()
   94|       |  // function call.
   95|       |  //
   96|       |  // The volatile keywoard prevents the compiler from computing the function
   97|       |  // at compile-time.
   98|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   99|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
  100|       |  // small value so that 1 + x should round to 1 would do (after accounting for
  101|       |  // excess precision, as in 387 instructions).
  102|     44|  static volatile float fmin = std::numeric_limits<float>::min();
  103|     44|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  104|       |//
  105|       |// Explanation:
  106|       |// Only when fegetround() == FE_TONEAREST do we have that
  107|       |// fmin + 1.0f == 1.0f - fmin.
  108|       |//
  109|       |// FE_UPWARD:
  110|       |//  fmin + 1.0f > 1
  111|       |//  1.0f - fmin == 1
  112|       |//
  113|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  114|       |//  fmin + 1.0f == 1
  115|       |//  1.0f - fmin < 1
  116|       |//
  117|       |// Note: This may fail to be accurate if fast-math has been
  118|       |// enabled, as rounding conventions may not apply.
  119|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  120|       |#pragma warning(push)
  121|       |//  todo: is there a VS warning?
  122|       |//  see
  123|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  124|       |#elif defined(__clang__)
  125|       |#pragma clang diagnostic push
  126|     44|#pragma clang diagnostic ignored "-Wfloat-equal"
  127|       |#elif defined(__GNUC__)
  128|       |#pragma GCC diagnostic push
  129|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  130|       |#endif
  131|     44|  return (fmini + 1.0f == 1.0f - fmini);
  132|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  133|       |#pragma warning(pop)
  134|       |#elif defined(__clang__)
  135|       |#pragma clang diagnostic pop
  136|       |#elif defined(__GNUC__)
  137|       |#pragma GCC diagnostic pop
  138|       |#endif
  139|     44|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|     44|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|     44|  return from_chars_caller<T>::call(first, last, value,
  191|     44|                                    parse_options_t<UC>(fmt));
  192|     44|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|     44|       parse_options_t<UC> options) noexcept {
  148|     44|    return from_chars_advanced(first, last, value, options);
  149|     44|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|     44|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|     44|  static_assert(is_supported_float_type<T>(),
  293|     44|                "only some floating-point types are supported");
  294|     44|  static_assert(is_supported_char_type<UC>(),
  295|     44|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|     44|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|     44|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 44]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|     44|  parsed_number_string_t<UC> pns =
  309|     44|      parse_number_string<UC>(first, last, options);
  310|     44|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 44]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|     44|  return from_chars_advanced(pns, value);
  322|     44|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|     44|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|     44|  static_assert(is_supported_float_type<T>(),
  204|     44|                "only some floating-point types are supported");
  205|     44|  static_assert(is_supported_char_type<UC>(),
  206|     44|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|     44|  from_chars_result_t<UC> answer;
  209|       |
  210|     44|  answer.ec = std::errc(); // be optimistic
  211|     44|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|     44|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 44, False: 0]
  ------------------
  218|     44|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 44, False: 0]
  ------------------
  219|     44|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 44, False: 0]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|     44|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 44, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|     44|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 44, False: 0]
  ------------------
  231|     44|        value = T(pns.mantissa);
  232|     44|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 0, False: 44]
  ------------------
  233|      0|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|     44|        } else {
  235|     44|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|     44|        }
  237|     44|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 44]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|     44|        return answer;
  241|     44|      }
  242|     44|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|     44|  }
  265|      0|  adjusted_mantissa am =
  266|      0|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|      0|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  |  Branch (267:30): [True: 0, False: 0]
  ------------------
  268|      0|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 0, False: 0]
  ------------------
  269|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|      0|    }
  271|      0|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|      0|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 0, False: 0]
  ------------------
  276|      0|    am = digit_comp<T>(pns, am);
  277|      0|  }
  278|      0|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|      0|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 0, False: 0]
  |  Branch (280:29): [True: 0, False: 0]
  |  Branch (280:49): [True: 0, False: 0]
  ------------------
  281|      0|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 0, False: 0]
  ------------------
  282|      0|    answer.ec = std::errc::result_out_of_range;
  283|      0|  }
  284|      0|  return answer;
  285|     44|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  865|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  865|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  3.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.74M|{
 4068|  2.74M|    if constexpr (sizeof(U) == 1) {
 4069|  2.74M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.74M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.74M|{
 4032|  2.74M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.74M|    SCN_GCC_COMPAT_PUSH
 4035|  2.74M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.74M|    constexpr char lengths[] =
 4037|  2.74M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.74M|        "\1\1\1\1\1\1\1\1"
 4039|  2.74M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.74M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.74M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.74M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.74M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.74M|    SCN_GCC_COMPAT_POP
 4046|  2.74M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.51M|{
 4274|  2.51M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.51M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.51M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.51M|{
 4087|  2.51M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.51M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.51M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.51M|    };
 4092|       |
 4093|  2.51M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.09M, False: 415k]
  ------------------
 4094|  2.09M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 114, False: 2.09M]
  ------------------
 4095|    114|            SCN_UNLIKELY_ATTR
 4096|    114|            return invalid_code_point;
 4097|    114|        }
 4098|  2.09M|        return static_cast<char32_t>(input[0]);
 4099|  2.09M|    }
 4100|       |
 4101|   415k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 370k, False: 45.4k]
  ------------------
 4102|   370k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 24, False: 370k]
  ------------------
 4103|     24|            SCN_UNLIKELY_ATTR
 4104|     24|            return invalid_code_point;
 4105|     24|        }
 4106|   370k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 4.04k, False: 366k]
  ------------------
 4107|  4.04k|            SCN_UNLIKELY_ATTR
 4108|  4.04k|            return invalid_code_point;
 4109|  4.04k|        }
 4110|       |
 4111|   366k|        char32_t cp{};
 4112|   366k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   366k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   366k|        return cp;
 4115|   370k|    }
 4116|       |
 4117|  45.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 40.2k, False: 5.19k]
  ------------------
 4118|  40.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 18, False: 40.2k]
  ------------------
 4119|     18|            SCN_UNLIKELY_ATTR
 4120|     18|            return invalid_code_point;
 4121|     18|        }
 4122|  40.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 1.19k, False: 39.0k]
  ------------------
 4123|  40.2k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 326, False: 38.6k]
  ------------------
 4124|  1.52k|            SCN_UNLIKELY_ATTR
 4125|  1.52k|            return invalid_code_point;
 4126|  1.52k|        }
 4127|       |
 4128|  38.6k|        char32_t cp{};
 4129|  38.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  38.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  38.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  38.6k|        return cp;
 4133|  40.2k|    }
 4134|       |
 4135|  5.19k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 5.19k, False: 0]
  ------------------
 4136|  5.19k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 5.19k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  5.19k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 277, False: 4.92k]
  ------------------
 4141|    277|            SCN_UNLIKELY_ATTR
 4142|    277|            return invalid_code_point;
 4143|    277|        }
 4144|  4.92k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 854, False: 4.06k]
  ------------------
 4145|  4.92k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 431, False: 3.63k]
  ------------------
 4146|  4.92k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 552, False: 3.08k]
  ------------------
 4147|  1.83k|            SCN_UNLIKELY_ATTR
 4148|  1.83k|            return invalid_code_point;
 4149|  1.83k|        }
 4150|       |
 4151|  3.08k|        char32_t cp{};
 4152|  3.08k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  3.08k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  3.08k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  3.08k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  3.08k|        return cp;
 4157|  4.92k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   462k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   462k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   462k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   792k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   792k|    else {
 3966|   792k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   792k|                                       to_address(first), to_address(last)))};
 3968|   792k|    }
 3969|   792k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.42M|{
  316|  2.42M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.42M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.56M|{
  294|  2.56M|    return p;
  295|  2.56M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   350k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   350k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   350k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   350k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   350k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   350k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|  49.2k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  49.2k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6384|  5.47k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.20k, False: 270]
  |  |  ------------------
  ------------------
 9647|  5.20k|        out = unexpected(in.error());
 9648|  5.20k|    }
 9649|    270|    else {
 9650|    270|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    270|    static_cast<    \
  |  |  935|    270|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    270|    }
 9652|  5.47k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  49.2k|    {
 1740|  49.2k|        return has_value();
 1741|  49.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  98.5k|    {
  490|  98.5k|        return m_has_value;
  491|  98.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  47.1k|    {
 1746|  47.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  47.1k|        return this->get_unexpected().error();
 1748|  47.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  47.1k|    {
  473|  47.1k|        return m_unexpected;
  474|  47.1k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.31M|    {
  365|  1.31M|        return m_unexpected;
  366|  1.31M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   652k|        : m_unexpected(std::forward<Err>(e))
  350|   652k|    {
  351|   652k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   652k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   652k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.20k|        : base(unexpect, std::move(e.error())),
 1616|  5.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.20k|    {
 1618|  5.20k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.20k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.20k|          m_has_value(false)
  451|  5.20k|    {
  452|  5.20k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   798k|        : m_unexpected(std::forward<Args>(args)...)
  359|   798k|    {
  360|   798k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   798k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   798k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.20k|    {
 1316|  5.20k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.20k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.20k|    {
  903|  5.20k|        assign_common(std::move(other));
  904|  5.20k|        return *this;
  905|  5.20k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.20k|    {
  950|  5.20k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.20k, False: 0]
  ------------------
  951|  5.20k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.20k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.20k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.20k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.1k|    {
  490|  16.1k|        return m_has_value;
  491|  16.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.74k|    {
  456|  5.74k|        return m_value;
  457|  5.74k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.20k|    {
 1046|  5.20k|        this->destroy_value();
 1047|  5.20k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.20k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.20k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.20k|    {
  504|  5.20k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.20k|                                  std::forward<Args>(args)...);
  506|  5.20k|        m_has_value = false;
  507|  5.20k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   143k|{
  396|   143k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   143k|        T(std::forward<Args>(args)...);
  398|   143k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.20k|    {
  473|  5.20k|        return m_unexpected;
  474|  5.20k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.20k|    {
  481|  5.20k|        return std::move(m_unexpected);
  482|  5.20k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|  2.16k|    {
 6485|  2.16k|        m_range = std::forward<Other>(r);
 6486|  2.16k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  2.16k|    {
 1795|  2.16k|        return value();
 1796|  2.16k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  2.16k|    {
 1769|  2.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.16k|        return this->get_value();
 1771|  2.16k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.16k|    {
  456|  2.16k|        return m_value;
  457|  2.16k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9484|  24.6k|{
 9485|  24.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  24.6k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9421|  24.6k|{
 9422|  24.6k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  24.6k|    auto result = vscan_impl(buffer, format, args);
 9425|  24.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.5k, False: 1.08k]
  |  |  ------------------
  ------------------
 9426|  23.5k|        return unexpected(result.error());
 9427|  23.5k|    }
 9428|  1.08k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  24.6k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5380|  49.2k|{
 5381|  49.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  49.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  49.2k|                  "\n"
 5385|  49.2k|                  "Unsupported range type given as input to a scanning "
 5386|  49.2k|                  "function.\n"
 5387|  49.2k|                  "A range needs to have a character type (value type) "
 5388|  49.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  49.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  49.2k|                  "to be included.\n"
 5391|  49.2k|                  "See the scnlib documentation for more details.");
 5392|  49.2k|    static_assert(
 5393|  49.2k|        !std::is_same_v<T, custom_char_traits>,
 5394|  49.2k|        "\n"
 5395|  49.2k|        "Unsupported range type given as input to a scanning "
 5396|  49.2k|        "function.\n"
 5397|  49.2k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  49.2k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  49.2k|        "not supported.");
 5400|  49.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  49.2k|                  "\n"
 5402|  49.2k|                  "Unsupported range type given as input to a scanning "
 5403|  49.2k|                  "function.\n"
 5404|  49.2k|                  "file_marker_found cannot be used as an "
 5405|  49.2k|                  "source range type to scn::scan.\n"
 5406|  49.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  49.2k|                  "and do not provide an explicit source range, "
 5408|  49.2k|                  "or use scn::scan with a FILE* directly.");
 5409|  49.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  49.2k|                  "\n"
 5411|  49.2k|                  "Unsupported range type given as input to a scanning "
 5412|  49.2k|                  "function.\n"
 5413|  49.2k|                  "In order to be scannable, a range needs to satisfy "
 5414|  49.2k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  49.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  49.2k|                  "\n"
 5417|  49.2k|                  "Unsupported range type given as input to a scanning "
 5418|  49.2k|                  "function.\n"
 5419|  49.2k|                  "A range needs to model forward_range and have a valid "
 5420|  49.2k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  49.2k|                  "Examples of scannable ranges are std::string, "
 5422|  49.2k|                  "std::string_view, "
 5423|  49.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  49.2k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  49.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  49.2k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  49.2k|{
 5273|  49.2k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  49.2k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  49.2k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   153k|    {
 1740|   153k|        return has_value();
 1741|   153k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   308k|    {
  490|   308k|        return m_has_value;
  491|   308k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   150k|    {
 1746|   150k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   150k|        return this->get_unexpected().error();
 1748|   150k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   150k|    {
  473|   150k|        return m_unexpected;
  474|   150k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  47.1k|        : base(unexpect, std::move(e.error())),
 1616|  47.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  47.1k|    {
 1618|  47.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  47.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  47.1k|          m_has_value(false)
  451|  47.1k|    {
  452|  47.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  49.2k|    {
 1316|  49.2k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6714|  2.16k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  2.16k|                      ranges::iterator_t<SourceRange>>) {
 6717|  2.16k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  2.16k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.16k|    {
 2869|  2.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.16k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.16k|    {
 2850|  2.16k|        return decay_copy(t.begin());
 2851|  2.16k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   136k|{
 2094|   136k|    return SCN_FWD(t);
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   136k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6701|  2.16k|{
 6702|  2.16k|    return ranges::end(source);
 6703|  2.16k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.16k|    {
 2926|  2.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.16k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.16k|    {
 2908|  2.16k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.16k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   501k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   501k|    static_cast<    \
  |  |  935|   501k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   501k|    static_cast<    \
  |  |  935|   501k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   501k|    {
 3466|   501k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.16k|    {
 1795|  4.16k|        return value();
 1796|  4.16k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  4.36k|    {
 1769|  4.36k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.36k|        return this->get_value();
 1771|  4.36k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  4.36k|    {
  456|  4.36k|        return m_value;
  457|  4.36k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.16k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.16k|    {
 1572|  2.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  2.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.16k|    {
  442|  2.16k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5829|  5.47k|{
 5830|  5.47k|    constexpr bool default_constructible_constraint =
 5831|  5.47k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  5.47k|    static_assert(default_constructible_constraint,
 5833|  5.47k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  5.47k|    constexpr bool destructible_constraint =
 5836|  5.47k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  5.47k|    static_assert(destructible_constraint,
 5838|  5.47k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  5.47k|    constexpr bool non_reference_constraint =
 5841|  5.47k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  5.47k|    static_assert(non_reference_constraint,
 5843|  5.47k|                  "Scan argument types must not be references");
 5844|       |
 5845|  5.47k|    constexpr bool movable_constraint =
 5846|  5.47k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  5.47k|    static_assert(movable_constraint,
 5848|  5.47k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  5.47k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  5.47k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  5.47k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5683|  5.47k|    {
 5684|       |        if constexpr (std::is_same_v<char_type, char> &&
 5685|  5.47k|                      !is_type_disabled<char_type>) {
 5686|  5.47k|            return val;
 5687|       |        }
 5688|       |        else if constexpr (is_type_disabled<char_type>) {
 5689|       |            return unscannable_disabled{val};
 5690|       |        }
 5691|       |        else {
 5692|       |            SCN_UNUSED(val);
 5693|       |            return unscannable_char{};
 5694|       |        }
 5695|  5.47k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5783|  5.47k|{
 5784|  5.47k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  5.47k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  5.47k|    constexpr bool scannable_char =
 5788|  5.47k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  5.47k|    static_assert(scannable_char,
 5790|  5.47k|                  "Cannot scan an argument of an unsupported character "
 5791|  5.47k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  5.47k|    constexpr bool scannable_const =
 5794|  5.47k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  5.47k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  5.47k|    constexpr bool scannable_disabled =
 5798|  5.47k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  5.47k|    static_assert(scannable_disabled,
 5800|  5.47k|                  "Cannot scan an argument that has been disabled by "
 5801|  5.47k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  5.47k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  5.47k|    static_assert(
 5805|  5.47k|        scannable,
 5806|  5.47k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  5.47k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  5.47k|    return arg_value{arg};
 5810|  5.47k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5596|  5.47k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  5.47k|    {
 5598|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1814|  5.74k|    {
 1815|  5.74k|        return &value();
 1816|  5.74k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.74k|    {
 1769|  5.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.74k|        return this->get_value();
 1771|  5.74k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6393|  5.47k|    {
 6394|  5.47k|        return m_values;
 6395|  5.47k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|  49.2k|        : m_desc(desc), m_builtin_values(data)
 6193|  49.2k|    {
 6194|  49.2k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|  49.2k|{
 8444|  49.2k|    return s;
 8445|  49.2k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|  49.2k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9502|  24.6k|{
 9503|  24.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  24.6k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9437|  24.6k|{
 9438|  24.6k|#if !SCN_DISABLE_LOCALE
 9439|  24.6k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  24.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  24.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  24.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  24.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.5k, False: 1.08k]
  |  |  ------------------
  ------------------
 9446|  23.5k|        return unexpected(result.error());
 9447|  23.5k|    }
 9448|  1.08k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  24.6k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.47k, False: 0]
  |  |  ------------------
  ------------------
 9647|  5.47k|        out = unexpected(in.error());
 9648|  5.47k|    }
 9649|      0|    else {
 9650|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|      0|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.47k|        : base(unexpect, std::move(e.error())),
 1616|  5.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.47k|    {
 1618|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.47k|          m_has_value(false)
  451|  5.47k|    {
  452|  5.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.47k|    {
 1316|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.47k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.47k|    {
  903|  5.47k|        assign_common(std::move(other));
  904|  5.47k|        return *this;
  905|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.47k|    {
  950|  5.47k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.47k, False: 0]
  ------------------
  951|  5.47k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.47k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.47k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.47k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.4k|    {
  490|  16.4k|        return m_has_value;
  491|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.47k|    {
  456|  5.47k|        return m_value;
  457|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.47k|    {
 1046|  5.47k|        this->destroy_value();
 1047|  5.47k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.47k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.47k|    {
  504|  5.47k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.47k|                                  std::forward<Args>(args)...);
  506|  5.47k|        m_has_value = false;
  507|  5.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.47k|    {
  473|  5.47k|        return m_unexpected;
  474|  5.47k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.47k|    {
  481|  5.47k|        return std::move(m_unexpected);
  482|  5.47k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  5.47k|    {
 1815|  5.47k|        return &value();
 1816|  5.47k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.47k|    {
 1769|  5.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.47k|        return this->get_value();
 1771|  5.47k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.47k, False: 0]
  |  |  ------------------
  ------------------
 9647|  5.47k|        out = unexpected(in.error());
 9648|  5.47k|    }
 9649|      0|    else {
 9650|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|      0|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.47k|        : base(unexpect, std::move(e.error())),
 1616|  5.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.47k|    {
 1618|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.47k|          m_has_value(false)
  451|  5.47k|    {
  452|  5.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.47k|    {
 1316|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.47k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.47k|    {
  903|  5.47k|        assign_common(std::move(other));
  904|  5.47k|        return *this;
  905|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.47k|    {
  950|  5.47k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.47k, False: 0]
  ------------------
  951|  5.47k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.47k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.47k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.47k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.4k|    {
  490|  16.4k|        return m_has_value;
  491|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.47k|    {
  456|  5.47k|        return m_value;
  457|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.47k|    {
 1046|  5.47k|        this->destroy_value();
 1047|  5.47k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.47k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.47k|    {
  504|  5.47k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.47k|                                  std::forward<Args>(args)...);
  506|  5.47k|        m_has_value = false;
  507|  5.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.47k|    {
  473|  5.47k|        return m_unexpected;
  474|  5.47k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.47k|    {
  481|  5.47k|        return std::move(m_unexpected);
  482|  5.47k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  5.47k|    {
 1815|  5.47k|        return &value();
 1816|  5.47k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.47k|    {
 1769|  5.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.47k|        return this->get_value();
 1771|  5.47k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.47k, False: 0]
  |  |  ------------------
  ------------------
 9647|  5.47k|        out = unexpected(in.error());
 9648|  5.47k|    }
 9649|      0|    else {
 9650|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|      0|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.47k|        : base(unexpect, std::move(e.error())),
 1616|  5.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.47k|    {
 1618|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.47k|          m_has_value(false)
  451|  5.47k|    {
  452|  5.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.47k|    {
 1316|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.47k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.47k|    {
  903|  5.47k|        assign_common(std::move(other));
  904|  5.47k|        return *this;
  905|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.47k|    {
  950|  5.47k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.47k, False: 0]
  ------------------
  951|  5.47k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.47k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.47k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.47k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.4k|    {
  490|  16.4k|        return m_has_value;
  491|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.47k|    {
  456|  5.47k|        return m_value;
  457|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.47k|    {
 1046|  5.47k|        this->destroy_value();
 1047|  5.47k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.47k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.47k|    {
  504|  5.47k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.47k|                                  std::forward<Args>(args)...);
  506|  5.47k|        m_has_value = false;
  507|  5.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.47k|    {
  473|  5.47k|        return m_unexpected;
  474|  5.47k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.47k|    {
  481|  5.47k|        return std::move(m_unexpected);
  482|  5.47k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  5.47k|    {
 1815|  5.47k|        return &value();
 1816|  5.47k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.47k|    {
 1769|  5.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.47k|        return this->get_value();
 1771|  5.47k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.47k, False: 0]
  |  |  ------------------
  ------------------
 9647|  5.47k|        out = unexpected(in.error());
 9648|  5.47k|    }
 9649|      0|    else {
 9650|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|      0|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.47k|        : base(unexpect, std::move(e.error())),
 1616|  5.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.47k|    {
 1618|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.47k|          m_has_value(false)
  451|  5.47k|    {
  452|  5.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.47k|    {
 1316|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.47k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.47k|    {
  903|  5.47k|        assign_common(std::move(other));
  904|  5.47k|        return *this;
  905|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.47k|    {
  950|  5.47k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.47k, False: 0]
  ------------------
  951|  5.47k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.47k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.47k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.47k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.4k|    {
  490|  16.4k|        return m_has_value;
  491|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.47k|    {
  456|  5.47k|        return m_value;
  457|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.47k|    {
 1046|  5.47k|        this->destroy_value();
 1047|  5.47k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.47k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.47k|    {
  504|  5.47k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.47k|                                  std::forward<Args>(args)...);
  506|  5.47k|        m_has_value = false;
  507|  5.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.47k|    {
  473|  5.47k|        return m_unexpected;
  474|  5.47k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.47k|    {
  481|  5.47k|        return std::move(m_unexpected);
  482|  5.47k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  5.47k|    {
 1815|  5.47k|        return &value();
 1816|  5.47k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.47k|    {
 1769|  5.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.47k|        return this->get_value();
 1771|  5.47k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.47k, False: 0]
  |  |  ------------------
  ------------------
 9647|  5.47k|        out = unexpected(in.error());
 9648|  5.47k|    }
 9649|      0|    else {
 9650|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|      0|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  5.47k|        : base(unexpect, std::move(e.error())),
 1616|  5.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.47k|    {
 1618|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  5.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.47k|          m_has_value(false)
  451|  5.47k|    {
  452|  5.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.47k|    {
 1316|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  5.47k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  5.47k|    {
  903|  5.47k|        assign_common(std::move(other));
  904|  5.47k|        return *this;
  905|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  5.47k|    {
  950|  5.47k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.47k, False: 0]
  ------------------
  951|  5.47k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.47k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.47k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.47k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.4k|    {
  490|  16.4k|        return m_has_value;
  491|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.47k|    {
  456|  5.47k|        return m_value;
  457|  5.47k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  5.47k|    {
 1046|  5.47k|        this->destroy_value();
 1047|  5.47k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.47k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  5.47k|    {
  504|  5.47k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.47k|                                  std::forward<Args>(args)...);
  506|  5.47k|        m_has_value = false;
  507|  5.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.47k|    {
  473|  5.47k|        return m_unexpected;
  474|  5.47k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.47k|    {
  481|  5.47k|        return std::move(m_unexpected);
  482|  5.47k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  5.47k|    {
 1815|  5.47k|        return &value();
 1816|  5.47k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  5.47k|    {
 1769|  5.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.47k|        return this->get_value();
 1771|  5.47k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  5.47k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  5.47k|    {
  613|  5.47k|        construct();
  614|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  5.47k|    {
  694|  5.47k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  5.47k|        m_has_value = true;
  696|  5.47k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  5.47k|{
  396|  5.47k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  5.47k|        T(std::forward<Args>(args)...);
  398|  5.47k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  17.0k|    {
  718|  17.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  17.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  17.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.84k, False: 632]
  |  |  ------------------
  ------------------
 9647|  4.84k|        out = unexpected(in.error());
 9648|  4.84k|    }
 9649|    632|    else {
 9650|    632|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    632|    static_cast<    \
  |  |  935|    632|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    632|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  4.84k|        : base(unexpect, std::move(e.error())),
 1616|  4.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.84k|    {
 1618|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  4.84k|        : m_has_value(false)
  637|  4.84k|    {
  638|  4.84k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  4.84k|    {
  701|  4.84k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.84k|                                  std::forward<Args>(args)...);
  703|  4.84k|        m_has_value = false;
  704|  4.84k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  30.6k|{
  396|  30.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.6k|        T(std::forward<Args>(args)...);
  398|  30.6k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  24.2k|    {
  730|  24.2k|        return reinterpret_cast<unexpected<E>*>(
  731|  24.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  24.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  24.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.84k|    {
 1316|  4.84k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  4.84k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  4.84k|    {
  903|  4.84k|        assign_common(std::move(other));
  904|  4.84k|        return *this;
  905|  4.84k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  4.84k|    {
  950|  4.84k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.84k, False: 0]
  ------------------
  951|  4.84k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.84k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.84k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.84k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  26.1k|    {
  687|  26.1k|        return m_has_value;
  688|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  6.10k|    {
  653|  6.10k|        return *value_ptr();
  654|  6.10k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  4.84k|    {
 1046|  4.84k|        this->destroy_value();
 1047|  4.84k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  5.47k|    {
  708|  5.47k|        scn::detail::destroy_at(value_ptr());
  709|  5.47k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  5.47k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  5.47k|    else {
  408|  5.47k|        p->~T();
  409|  5.47k|    }
  410|  5.47k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6617|  5.47k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  4.84k|    {
  701|  4.84k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.84k|                                  std::forward<Args>(args)...);
  703|  4.84k|        m_has_value = false;
  704|  4.84k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  4.84k|    {
  678|  4.84k|        return std::move(*unexpected_ptr());
  679|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  9.68k|    {
  712|  9.68k|        scn::detail::destroy_at(unexpected_ptr());
  713|  9.68k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  61.1k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  61.1k|    else {
  408|  61.1k|        p->~T();
  409|  61.1k|    }
  410|  61.1k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  6.10k|    {
 1815|  6.10k|        return &value();
 1816|  6.10k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  6.10k|    {
 1769|  6.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.10k|        return this->get_value();
 1771|  6.10k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  10.3k|    {
  643|  10.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 632, False: 9.68k]
  ------------------
  644|    632|            destroy_value();
  645|    632|        }
  646|  9.68k|        else {
  647|  9.68k|            destroy_unexpected();
  648|  9.68k|        }
  649|  10.3k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  5.47k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  5.47k|    {
  613|  5.47k|        construct();
  614|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  5.47k|    {
  694|  5.47k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  5.47k|        m_has_value = true;
  696|  5.47k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  5.47k|{
  396|  5.47k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  5.47k|        T(std::forward<Args>(args)...);
  398|  5.47k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6384|  16.4k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  17.0k|    {
  718|  17.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  17.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  17.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.84k, False: 632]
  |  |  ------------------
  ------------------
 9647|  4.84k|        out = unexpected(in.error());
 9648|  4.84k|    }
 9649|    632|    else {
 9650|    632|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    632|    static_cast<    \
  |  |  935|    632|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    632|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  4.84k|        : base(unexpect, std::move(e.error())),
 1616|  4.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.84k|    {
 1618|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  4.84k|        : m_has_value(false)
  637|  4.84k|    {
  638|  4.84k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  4.84k|    {
  701|  4.84k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.84k|                                  std::forward<Args>(args)...);
  703|  4.84k|        m_has_value = false;
  704|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  24.2k|    {
  730|  24.2k|        return reinterpret_cast<unexpected<E>*>(
  731|  24.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  24.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  24.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.84k|    {
 1316|  4.84k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  4.84k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  4.84k|    {
  903|  4.84k|        assign_common(std::move(other));
  904|  4.84k|        return *this;
  905|  4.84k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  4.84k|    {
  950|  4.84k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.84k, False: 0]
  ------------------
  951|  4.84k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.84k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.84k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.84k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  26.1k|    {
  687|  26.1k|        return m_has_value;
  688|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  6.10k|    {
  653|  6.10k|        return *value_ptr();
  654|  6.10k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  4.84k|    {
 1046|  4.84k|        this->destroy_value();
 1047|  4.84k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  5.47k|    {
  708|  5.47k|        scn::detail::destroy_at(value_ptr());
  709|  5.47k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  5.47k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  5.47k|    else {
  408|  5.47k|        p->~T();
  409|  5.47k|    }
  410|  5.47k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6617|  5.47k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  4.84k|    {
  701|  4.84k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.84k|                                  std::forward<Args>(args)...);
  703|  4.84k|        m_has_value = false;
  704|  4.84k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  4.84k|    {
  678|  4.84k|        return std::move(*unexpected_ptr());
  679|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  9.68k|    {
  712|  9.68k|        scn::detail::destroy_at(unexpected_ptr());
  713|  9.68k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5829|  16.4k|{
 5830|  16.4k|    constexpr bool default_constructible_constraint =
 5831|  16.4k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  16.4k|    static_assert(default_constructible_constraint,
 5833|  16.4k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  16.4k|    constexpr bool destructible_constraint =
 5836|  16.4k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  16.4k|    static_assert(destructible_constraint,
 5838|  16.4k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  16.4k|    constexpr bool non_reference_constraint =
 5841|  16.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  16.4k|    static_assert(non_reference_constraint,
 5843|  16.4k|                  "Scan argument types must not be references");
 5844|       |
 5845|  16.4k|    constexpr bool movable_constraint =
 5846|  16.4k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  16.4k|    static_assert(movable_constraint,
 5848|  16.4k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  16.4k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  16.4k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  16.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5783|  16.4k|{
 5784|  16.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  16.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  16.4k|    constexpr bool scannable_char =
 5788|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  16.4k|    static_assert(scannable_char,
 5790|  16.4k|                  "Cannot scan an argument of an unsupported character "
 5791|  16.4k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  16.4k|    constexpr bool scannable_const =
 5794|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  16.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  16.4k|    constexpr bool scannable_disabled =
 5798|  16.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  16.4k|    static_assert(scannable_disabled,
 5800|  16.4k|                  "Cannot scan an argument that has been disabled by "
 5801|  16.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  16.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  16.4k|    static_assert(
 5805|  16.4k|        scannable,
 5806|  16.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  16.4k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  16.4k|    return arg_value{arg};
 5810|  16.4k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5596|  16.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  16.4k|    {
 5598|  16.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  6.10k|    {
 1815|  6.10k|        return &value();
 1816|  6.10k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  6.10k|    {
 1769|  6.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.10k|        return this->get_value();
 1771|  6.10k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6393|  16.4k|    {
 6394|  16.4k|        return m_values;
 6395|  16.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  10.3k|    {
  643|  10.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 632, False: 9.68k]
  ------------------
  644|    632|            destroy_value();
  645|    632|        }
  646|  9.68k|        else {
  647|  9.68k|            destroy_unexpected();
  648|  9.68k|        }
  649|  10.3k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9704|  2.73k|{
 9705|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9706|  2.73k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  2.73k|                                   make_scan_args(result->values())));
 9708|  2.73k|    return result;
 9709|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9660|  5.47k|{
 9661|  5.47k|    return scan_result_type<Source, Args...>();
 9662|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  5.47k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.47k|        : m_value(T{}), m_has_value(true)
  427|  5.47k|    {
  428|  5.47k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6610|  5.47k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6384|  5.47k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|  5.47k|{
 9646|  5.47k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.84k, False: 632]
  |  |  ------------------
  ------------------
 9647|  4.84k|        out = unexpected(in.error());
 9648|  4.84k|    }
 9649|    632|    else {
 9650|    632|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    632|    static_cast<    \
  |  |  935|    632|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    632|    }
 9652|  5.47k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  4.84k|        : base(unexpect, std::move(e.error())),
 1616|  4.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.84k|    {
 1618|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  4.84k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.84k|          m_has_value(false)
  451|  4.84k|    {
  452|  4.84k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.84k|    {
 1316|  4.84k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  4.84k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  4.84k|    {
  903|  4.84k|        assign_common(std::move(other));
  904|  4.84k|        return *this;
  905|  4.84k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  4.84k|    {
  950|  4.84k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.84k, False: 0]
  ------------------
  951|  4.84k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.84k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.84k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.84k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.7k|    {
  490|  15.7k|        return m_has_value;
  491|  15.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.10k|    {
  456|  6.10k|        return m_value;
  457|  6.10k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  4.84k|    {
 1046|  4.84k|        this->destroy_value();
 1047|  4.84k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  4.84k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  4.84k|    {
  504|  4.84k|        scn::detail::construct_at(&get_unexpected(),
  505|  4.84k|                                  std::forward<Args>(args)...);
  506|  4.84k|        m_has_value = false;
  507|  4.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  4.84k|    {
  473|  4.84k|        return m_unexpected;
  474|  4.84k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  4.84k|    {
  481|  4.84k|        return std::move(m_unexpected);
  482|  4.84k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8782|  5.47k|    {
 8783|  5.47k|        return m_str;
 8784|  5.47k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  5.47k|{
 6115|  5.47k|    detail::check_scan_arg_types<Args...>();
 6116|  5.47k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  5.47k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5829|  5.47k|{
 5830|  5.47k|    constexpr bool default_constructible_constraint =
 5831|  5.47k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  5.47k|    static_assert(default_constructible_constraint,
 5833|  5.47k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  5.47k|    constexpr bool destructible_constraint =
 5836|  5.47k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  5.47k|    static_assert(destructible_constraint,
 5838|  5.47k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  5.47k|    constexpr bool non_reference_constraint =
 5841|  5.47k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  5.47k|    static_assert(non_reference_constraint,
 5843|  5.47k|                  "Scan argument types must not be references");
 5844|       |
 5845|  5.47k|    constexpr bool movable_constraint =
 5846|  5.47k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  5.47k|    static_assert(movable_constraint,
 5848|  5.47k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  5.47k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  5.47k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  5.47k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|  5.47k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  5.47k|    {
 6092|  5.47k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  5.47k|    {
 6100|  5.47k|        return {detail::make_arg<
 6101|  5.47k|            kind, Context,
 6102|  5.47k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  5.47k|                                 typename Context::char_type>::value>(args)...};
 6104|  5.47k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5879|  5.47k|{
 5880|  5.47k|    return make_value<Context>(value).ref_value;
 5881|  5.47k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5814|  5.47k|{
 5815|  5.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  5.47k|                                  needs_context_tag>) {
 5819|  5.47k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  5.47k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5653|  5.47k|    {                                                                        \
 5654|  5.47k|        return val;                                                          \
 5655|  5.47k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5783|  5.47k|{
 5784|  5.47k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  5.47k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  5.47k|    constexpr bool scannable_char =
 5788|  5.47k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  5.47k|    static_assert(scannable_char,
 5790|  5.47k|                  "Cannot scan an argument of an unsupported character "
 5791|  5.47k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  5.47k|    constexpr bool scannable_const =
 5794|  5.47k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  5.47k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  5.47k|    constexpr bool scannable_disabled =
 5798|  5.47k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  5.47k|    static_assert(scannable_disabled,
 5800|  5.47k|                  "Cannot scan an argument that has been disabled by "
 5801|  5.47k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  5.47k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  5.47k|    static_assert(
 5805|  5.47k|        scannable,
 5806|  5.47k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  5.47k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  5.47k|    return arg_value{arg};
 5810|  5.47k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5596|  5.47k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  5.47k|    {
 5598|  5.47k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  6.10k|    {
 1815|  6.10k|        return &value();
 1816|  6.10k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  6.10k|    {
 1769|  6.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.10k|        return this->get_value();
 1771|  6.10k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6393|  5.47k|    {
 6394|  5.47k|        return m_values;
 6395|  5.47k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  5.47k|        : basic_scan_args(store.desc, store.args.data())
 6141|  5.47k|    {
 6142|  5.47k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  5.47k|        : m_str(r.str)
 8778|  5.47k|    {
 8779|  5.47k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9773|  2.73k|{
 9774|  2.73k|    auto result = make_scan_result<Source, Args...>();
 9775|  2.73k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  2.73k|                                   make_scan_args(result->values())));
 9777|  2.73k|    return result;
 9778|  2.73k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  98.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  98.5k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6384|  10.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.7k, False: 244]
  |  |  ------------------
  ------------------
 9647|  10.7k|        out = unexpected(in.error());
 9648|  10.7k|    }
 9649|    244|    else {
 9650|    244|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    244|    static_cast<    \
  |  |  935|    244|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    244|    }
 9652|  10.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  98.5k|    {
 1740|  98.5k|        return has_value();
 1741|  98.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   197k|    {
  490|   197k|        return m_has_value;
  491|   197k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  96.5k|    {
 1746|  96.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  96.5k|        return this->get_unexpected().error();
 1748|  96.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  96.5k|    {
  473|  96.5k|        return m_unexpected;
  474|  96.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.7k|        : base(unexpect, std::move(e.error())),
 1616|  10.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.7k|    {
 1618|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.7k|          m_has_value(false)
  451|  10.7k|    {
  452|  10.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.7k|    {
 1316|  10.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.7k|    {
  903|  10.7k|        assign_common(std::move(other));
  904|  10.7k|        return *this;
  905|  10.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.7k|    {
  950|  10.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.7k, False: 0]
  ------------------
  951|  10.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.6k|    {
  490|  32.6k|        return m_has_value;
  491|  32.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.1k|    {
  456|  11.1k|        return m_value;
  457|  11.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.7k|    {
 1046|  10.7k|        this->destroy_value();
 1047|  10.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.7k|    {
  504|  10.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.7k|                                  std::forward<Args>(args)...);
  506|  10.7k|        m_has_value = false;
  507|  10.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.7k|    {
  473|  10.7k|        return m_unexpected;
  474|  10.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.7k|    {
  481|  10.7k|        return std::move(m_unexpected);
  482|  10.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  1.99k|    {
 6485|  1.99k|        m_range = std::forward<Other>(r);
 6486|  1.99k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.99k|    {
 1795|  1.99k|        return value();
 1796|  1.99k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.99k|    {
 1769|  1.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.99k|        return this->get_value();
 1771|  1.99k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.99k|    {
  456|  1.99k|        return m_value;
  457|  1.99k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9421|  49.2k|{
 9422|  49.2k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  49.2k|    auto result = vscan_impl(buffer, format, args);
 9425|  49.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 48.2k, False: 998]
  |  |  ------------------
  ------------------
 9426|  48.2k|        return unexpected(result.error());
 9427|  48.2k|    }
 9428|    998|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    998|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  49.2k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5380|  98.5k|{
 5381|  98.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  98.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  98.5k|                  "\n"
 5385|  98.5k|                  "Unsupported range type given as input to a scanning "
 5386|  98.5k|                  "function.\n"
 5387|  98.5k|                  "A range needs to have a character type (value type) "
 5388|  98.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  98.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  98.5k|                  "to be included.\n"
 5391|  98.5k|                  "See the scnlib documentation for more details.");
 5392|  98.5k|    static_assert(
 5393|  98.5k|        !std::is_same_v<T, custom_char_traits>,
 5394|  98.5k|        "\n"
 5395|  98.5k|        "Unsupported range type given as input to a scanning "
 5396|  98.5k|        "function.\n"
 5397|  98.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  98.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  98.5k|        "not supported.");
 5400|  98.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  98.5k|                  "\n"
 5402|  98.5k|                  "Unsupported range type given as input to a scanning "
 5403|  98.5k|                  "function.\n"
 5404|  98.5k|                  "file_marker_found cannot be used as an "
 5405|  98.5k|                  "source range type to scn::scan.\n"
 5406|  98.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  98.5k|                  "and do not provide an explicit source range, "
 5408|  98.5k|                  "or use scn::scan with a FILE* directly.");
 5409|  98.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  98.5k|                  "\n"
 5411|  98.5k|                  "Unsupported range type given as input to a scanning "
 5412|  98.5k|                  "function.\n"
 5413|  98.5k|                  "In order to be scannable, a range needs to satisfy "
 5414|  98.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  98.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  98.5k|                  "\n"
 5417|  98.5k|                  "Unsupported range type given as input to a scanning "
 5418|  98.5k|                  "function.\n"
 5419|  98.5k|                  "A range needs to model forward_range and have a valid "
 5420|  98.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  98.5k|                  "Examples of scannable ranges are std::string, "
 5422|  98.5k|                  "std::string_view, "
 5423|  98.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  98.5k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  98.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  98.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  98.5k|{
 5273|  98.5k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  98.5k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  98.5k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  96.5k|        : base(unexpect, std::move(e.error())),
 1616|  96.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  96.5k|    {
 1618|  96.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  96.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  96.5k|          m_has_value(false)
  451|  96.5k|    {
  452|  96.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  98.5k|    {
 1316|  98.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6714|  1.99k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  1.99k|                      ranges::iterator_t<SourceRange>>) {
 6717|  1.99k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  1.99k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.99k|    {
 2869|  1.99k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.99k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.99k|    {
 2850|  1.99k|        return decay_copy(t.begin());
 2851|  1.99k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   211k|{
 2094|   211k|    return SCN_FWD(t);
  ------------------
  |  |  936|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   211k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6701|  1.99k|{
 6702|  1.99k|    return ranges::end(source);
 6703|  1.99k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.99k|    {
 2926|  1.99k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.99k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.99k|    {
 2908|  1.99k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.99k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   307k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   307k|    static_cast<    \
  |  |  935|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   307k|    static_cast<    \
  |  |  935|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   307k|    {
 3466|   307k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.99k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.99k|    {
 1572|  1.99k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.99k|    {
  442|  1.99k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5829|  10.9k|{
 5830|  10.9k|    constexpr bool default_constructible_constraint =
 5831|  10.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  10.9k|    static_assert(default_constructible_constraint,
 5833|  10.9k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  10.9k|    constexpr bool destructible_constraint =
 5836|  10.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  10.9k|    static_assert(destructible_constraint,
 5838|  10.9k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  10.9k|    constexpr bool non_reference_constraint =
 5841|  10.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  10.9k|    static_assert(non_reference_constraint,
 5843|  10.9k|                  "Scan argument types must not be references");
 5844|       |
 5845|  10.9k|    constexpr bool movable_constraint =
 5846|  10.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  10.9k|    static_assert(movable_constraint,
 5848|  10.9k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  10.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  10.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5783|  10.9k|{
 5784|  10.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  10.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  10.9k|    constexpr bool scannable_char =
 5788|  10.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  10.9k|    static_assert(scannable_char,
 5790|  10.9k|                  "Cannot scan an argument of an unsupported character "
 5791|  10.9k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  10.9k|    constexpr bool scannable_const =
 5794|  10.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  10.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  10.9k|    constexpr bool scannable_disabled =
 5798|  10.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  10.9k|    static_assert(scannable_disabled,
 5800|  10.9k|                  "Cannot scan an argument that has been disabled by "
 5801|  10.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  10.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  10.9k|    static_assert(
 5805|  10.9k|        scannable,
 5806|  10.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  10.9k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  10.9k|    return arg_value{arg};
 5810|  10.9k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5596|  10.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  10.9k|    {
 5598|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1814|  11.1k|    {
 1815|  11.1k|        return &value();
 1816|  11.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  11.1k|    {
 1769|  11.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.1k|        return this->get_value();
 1771|  11.1k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6393|  10.9k|    {
 6394|  10.9k|        return m_values;
 6395|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  98.5k|        : m_desc(desc), m_builtin_values(data)
 6193|  98.5k|    {
 6194|  98.5k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  98.5k|{
 8449|  98.5k|    return s;
 8450|  98.5k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  98.5k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9437|  49.2k|{
 9438|  49.2k|#if !SCN_DISABLE_LOCALE
 9439|  49.2k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  49.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  49.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  49.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  49.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 48.2k, False: 998]
  |  |  ------------------
  ------------------
 9446|  48.2k|        return unexpected(result.error());
 9447|  48.2k|    }
 9448|    998|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    998|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  49.2k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 40]
  |  |  ------------------
  ------------------
 9647|  10.9k|        out = unexpected(in.error());
 9648|  10.9k|    }
 9649|     40|    else {
 9650|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     40|    static_cast<    \
  |  |  935|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|     40|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.9k|        : base(unexpect, std::move(e.error())),
 1616|  10.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.9k|    {
 1618|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.9k|          m_has_value(false)
  451|  10.9k|    {
  452|  10.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.9k|    {
 1316|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.9k|    {
  903|  10.9k|        assign_common(std::move(other));
  904|  10.9k|        return *this;
  905|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.9k|    {
  950|  10.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.9k, False: 0]
  ------------------
  951|  10.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.8k|    {
  490|  32.8k|        return m_has_value;
  491|  32.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.9k|    {
  456|  10.9k|        return m_value;
  457|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.9k|    {
 1046|  10.9k|        this->destroy_value();
 1047|  10.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.9k|    {
  504|  10.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.9k|                                  std::forward<Args>(args)...);
  506|  10.9k|        m_has_value = false;
  507|  10.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.9k|    {
  473|  10.9k|        return m_unexpected;
  474|  10.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.9k|    {
  481|  10.9k|        return std::move(m_unexpected);
  482|  10.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  10.9k|    {
 1815|  10.9k|        return &value();
 1816|  10.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.9k|    {
 1769|  10.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.9k|        return this->get_value();
 1771|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 40]
  |  |  ------------------
  ------------------
 9647|  10.9k|        out = unexpected(in.error());
 9648|  10.9k|    }
 9649|     40|    else {
 9650|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     40|    static_cast<    \
  |  |  935|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|     40|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.9k|        : base(unexpect, std::move(e.error())),
 1616|  10.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.9k|    {
 1618|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.9k|          m_has_value(false)
  451|  10.9k|    {
  452|  10.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.9k|    {
 1316|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.9k|    {
  903|  10.9k|        assign_common(std::move(other));
  904|  10.9k|        return *this;
  905|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.9k|    {
  950|  10.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.9k, False: 0]
  ------------------
  951|  10.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.8k|    {
  490|  32.8k|        return m_has_value;
  491|  32.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.9k|    {
  456|  10.9k|        return m_value;
  457|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.9k|    {
 1046|  10.9k|        this->destroy_value();
 1047|  10.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.9k|    {
  504|  10.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.9k|                                  std::forward<Args>(args)...);
  506|  10.9k|        m_has_value = false;
  507|  10.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.9k|    {
  473|  10.9k|        return m_unexpected;
  474|  10.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.9k|    {
  481|  10.9k|        return std::move(m_unexpected);
  482|  10.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  10.9k|    {
 1815|  10.9k|        return &value();
 1816|  10.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.9k|    {
 1769|  10.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.9k|        return this->get_value();
 1771|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 42]
  |  |  ------------------
  ------------------
 9647|  10.9k|        out = unexpected(in.error());
 9648|  10.9k|    }
 9649|     42|    else {
 9650|     42|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     42|    static_cast<    \
  |  |  935|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|     42|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.9k|        : base(unexpect, std::move(e.error())),
 1616|  10.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.9k|    {
 1618|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.9k|          m_has_value(false)
  451|  10.9k|    {
  452|  10.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.9k|    {
 1316|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.9k|    {
  903|  10.9k|        assign_common(std::move(other));
  904|  10.9k|        return *this;
  905|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.9k|    {
  950|  10.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.9k, False: 0]
  ------------------
  951|  10.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.8k|    {
  490|  32.8k|        return m_has_value;
  491|  32.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.9k|    {
  456|  10.9k|        return m_value;
  457|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.9k|    {
 1046|  10.9k|        this->destroy_value();
 1047|  10.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.9k|    {
  504|  10.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.9k|                                  std::forward<Args>(args)...);
  506|  10.9k|        m_has_value = false;
  507|  10.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.9k|    {
  473|  10.9k|        return m_unexpected;
  474|  10.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.9k|    {
  481|  10.9k|        return std::move(m_unexpected);
  482|  10.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  10.9k|    {
 1815|  10.9k|        return &value();
 1816|  10.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.9k|    {
 1769|  10.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.9k|        return this->get_value();
 1771|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 40]
  |  |  ------------------
  ------------------
 9647|  10.9k|        out = unexpected(in.error());
 9648|  10.9k|    }
 9649|     40|    else {
 9650|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     40|    static_cast<    \
  |  |  935|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|     40|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.9k|        : base(unexpect, std::move(e.error())),
 1616|  10.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.9k|    {
 1618|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.9k|          m_has_value(false)
  451|  10.9k|    {
  452|  10.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.9k|    {
 1316|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.9k|    {
  903|  10.9k|        assign_common(std::move(other));
  904|  10.9k|        return *this;
  905|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.9k|    {
  950|  10.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.9k, False: 0]
  ------------------
  951|  10.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.8k|    {
  490|  32.8k|        return m_has_value;
  491|  32.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.9k|    {
  456|  10.9k|        return m_value;
  457|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.9k|    {
 1046|  10.9k|        this->destroy_value();
 1047|  10.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.9k|    {
  504|  10.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.9k|                                  std::forward<Args>(args)...);
  506|  10.9k|        m_has_value = false;
  507|  10.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.9k|    {
  473|  10.9k|        return m_unexpected;
  474|  10.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.9k|    {
  481|  10.9k|        return std::move(m_unexpected);
  482|  10.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  10.9k|    {
 1815|  10.9k|        return &value();
 1816|  10.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.9k|    {
 1769|  10.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.9k|        return this->get_value();
 1771|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 18]
  |  |  ------------------
  ------------------
 9647|  10.9k|        out = unexpected(in.error());
 9648|  10.9k|    }
 9649|     18|    else {
 9650|     18|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|     18|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  10.9k|        : base(unexpect, std::move(e.error())),
 1616|  10.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.9k|    {
 1618|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  10.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.9k|          m_has_value(false)
  451|  10.9k|    {
  452|  10.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.9k|    {
 1316|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  10.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  10.9k|    {
  903|  10.9k|        assign_common(std::move(other));
  904|  10.9k|        return *this;
  905|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  10.9k|    {
  950|  10.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.9k, False: 0]
  ------------------
  951|  10.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.8k|    {
  490|  32.8k|        return m_has_value;
  491|  32.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.9k|    {
  456|  10.9k|        return m_value;
  457|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  10.9k|    {
 1046|  10.9k|        this->destroy_value();
 1047|  10.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  10.9k|    {
  504|  10.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.9k|                                  std::forward<Args>(args)...);
  506|  10.9k|        m_has_value = false;
  507|  10.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.9k|    {
  473|  10.9k|        return m_unexpected;
  474|  10.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.9k|    {
  481|  10.9k|        return std::move(m_unexpected);
  482|  10.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  10.9k|    {
 1815|  10.9k|        return &value();
 1816|  10.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  10.9k|    {
 1769|  10.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.9k|        return this->get_value();
 1771|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  10.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  10.9k|    {
  613|  10.9k|        construct();
  614|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  10.9k|    {
  694|  10.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  10.9k|        m_has_value = true;
  696|  10.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  10.9k|{
  396|  10.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  10.9k|        T(std::forward<Args>(args)...);
  398|  10.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  33.3k|    {
  718|  33.3k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  33.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  33.3k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 524]
  |  |  ------------------
  ------------------
 9647|  10.4k|        out = unexpected(in.error());
 9648|  10.4k|    }
 9649|    524|    else {
 9650|    524|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    524|    static_cast<    \
  |  |  935|    524|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    524|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  10.4k|        : base(unexpect, std::move(e.error())),
 1616|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.4k|    {
 1618|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  10.4k|        : m_has_value(false)
  637|  10.4k|    {
  638|  10.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  10.4k|    {
  701|  10.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.4k|                                  std::forward<Args>(args)...);
  703|  10.4k|        m_has_value = false;
  704|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  52.1k|    {
  730|  52.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  52.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  52.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  52.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.4k|    {
 1316|  10.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  10.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  10.4k|    {
  903|  10.4k|        assign_common(std::move(other));
  904|  10.4k|        return *this;
  905|  10.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  10.4k|    {
  950|  10.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.4k, False: 0]
  ------------------
  951|  10.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  53.6k|    {
  687|  53.6k|        return m_has_value;
  688|  53.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  11.4k|    {
  653|  11.4k|        return *value_ptr();
  654|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  10.4k|    {
 1046|  10.4k|        this->destroy_value();
 1047|  10.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  10.9k|    {
  708|  10.9k|        scn::detail::destroy_at(value_ptr());
  709|  10.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  10.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  10.9k|    else {
  408|  10.9k|        p->~T();
  409|  10.9k|    }
  410|  10.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6617|  10.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  10.4k|    {
  701|  10.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.4k|                                  std::forward<Args>(args)...);
  703|  10.4k|        m_has_value = false;
  704|  10.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  10.4k|    {
  678|  10.4k|        return std::move(*unexpected_ptr());
  679|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  20.8k|    {
  712|  20.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  20.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  11.4k|    {
 1815|  11.4k|        return &value();
 1816|  11.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  11.4k|    {
 1769|  11.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.4k|        return this->get_value();
 1771|  11.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  21.3k|    {
  643|  21.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 524, False: 20.8k]
  ------------------
  644|    524|            destroy_value();
  645|    524|        }
  646|  20.8k|        else {
  647|  20.8k|            destroy_unexpected();
  648|  20.8k|        }
  649|  21.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  10.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  10.9k|    {
  613|  10.9k|        construct();
  614|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  10.9k|    {
  694|  10.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  10.9k|        m_has_value = true;
  696|  10.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  10.9k|{
  396|  10.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  10.9k|        T(std::forward<Args>(args)...);
  398|  10.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  33.3k|    {
  718|  33.3k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  33.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  33.3k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 524]
  |  |  ------------------
  ------------------
 9647|  10.4k|        out = unexpected(in.error());
 9648|  10.4k|    }
 9649|    524|    else {
 9650|    524|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    524|    static_cast<    \
  |  |  935|    524|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    524|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  10.4k|        : base(unexpect, std::move(e.error())),
 1616|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.4k|    {
 1618|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  10.4k|        : m_has_value(false)
  637|  10.4k|    {
  638|  10.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  10.4k|    {
  701|  10.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.4k|                                  std::forward<Args>(args)...);
  703|  10.4k|        m_has_value = false;
  704|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  52.1k|    {
  730|  52.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  52.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  52.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  52.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.4k|    {
 1316|  10.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  10.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  10.4k|    {
  903|  10.4k|        assign_common(std::move(other));
  904|  10.4k|        return *this;
  905|  10.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  10.4k|    {
  950|  10.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.4k, False: 0]
  ------------------
  951|  10.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  53.6k|    {
  687|  53.6k|        return m_has_value;
  688|  53.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  11.4k|    {
  653|  11.4k|        return *value_ptr();
  654|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  10.4k|    {
 1046|  10.4k|        this->destroy_value();
 1047|  10.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  10.9k|    {
  708|  10.9k|        scn::detail::destroy_at(value_ptr());
  709|  10.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  10.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  10.9k|    else {
  408|  10.9k|        p->~T();
  409|  10.9k|    }
  410|  10.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6617|  10.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  10.4k|    {
  701|  10.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.4k|                                  std::forward<Args>(args)...);
  703|  10.4k|        m_has_value = false;
  704|  10.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  10.4k|    {
  678|  10.4k|        return std::move(*unexpected_ptr());
  679|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  20.8k|    {
  712|  20.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  20.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  11.4k|    {
 1815|  11.4k|        return &value();
 1816|  11.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  11.4k|    {
 1769|  11.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.4k|        return this->get_value();
 1771|  11.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  21.3k|    {
  643|  21.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 524, False: 20.8k]
  ------------------
  644|    524|            destroy_value();
  645|    524|        }
  646|  20.8k|        else {
  647|  20.8k|            destroy_unexpected();
  648|  20.8k|        }
  649|  21.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9660|  10.9k|{
 9661|  10.9k|    return scan_result_type<Source, Args...>();
 9662|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  10.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.9k|        : m_value(T{}), m_has_value(true)
  427|  10.9k|    {
  428|  10.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6610|  10.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6384|  10.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|  10.9k|{
 9646|  10.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 524]
  |  |  ------------------
  ------------------
 9647|  10.4k|        out = unexpected(in.error());
 9648|  10.4k|    }
 9649|    524|    else {
 9650|    524|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    524|    static_cast<    \
  |  |  935|    524|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    524|    }
 9652|  10.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  10.4k|        : base(unexpect, std::move(e.error())),
 1616|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.4k|    {
 1618|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  10.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.4k|          m_has_value(false)
  451|  10.4k|    {
  452|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.4k|    {
 1316|  10.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  10.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  10.4k|    {
  903|  10.4k|        assign_common(std::move(other));
  904|  10.4k|        return *this;
  905|  10.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  10.4k|    {
  950|  10.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.4k, False: 0]
  ------------------
  951|  10.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  32.3k|    {
  490|  32.3k|        return m_has_value;
  491|  32.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.4k|    {
  456|  11.4k|        return m_value;
  457|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  10.4k|    {
 1046|  10.4k|        this->destroy_value();
 1047|  10.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  10.4k|    {
  504|  10.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.4k|                                  std::forward<Args>(args)...);
  506|  10.4k|        m_has_value = false;
  507|  10.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.4k|    {
  473|  10.4k|        return m_unexpected;
  474|  10.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.4k|    {
  481|  10.4k|        return std::move(m_unexpected);
  482|  10.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8782|  10.9k|    {
 8783|  10.9k|        return m_str;
 8784|  10.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  10.9k|{
 6115|  10.9k|    detail::check_scan_arg_types<Args...>();
 6116|  10.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  10.9k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5829|  10.9k|{
 5830|  10.9k|    constexpr bool default_constructible_constraint =
 5831|  10.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  10.9k|    static_assert(default_constructible_constraint,
 5833|  10.9k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  10.9k|    constexpr bool destructible_constraint =
 5836|  10.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  10.9k|    static_assert(destructible_constraint,
 5838|  10.9k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  10.9k|    constexpr bool non_reference_constraint =
 5841|  10.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  10.9k|    static_assert(non_reference_constraint,
 5843|  10.9k|                  "Scan argument types must not be references");
 5844|       |
 5845|  10.9k|    constexpr bool movable_constraint =
 5846|  10.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  10.9k|    static_assert(movable_constraint,
 5848|  10.9k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  10.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  10.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  10.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|  10.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  10.9k|    {
 6092|  10.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  10.9k|    {
 6100|  10.9k|        return {detail::make_arg<
 6101|  10.9k|            kind, Context,
 6102|  10.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  10.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  10.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5879|  10.9k|{
 5880|  10.9k|    return make_value<Context>(value).ref_value;
 5881|  10.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5814|  10.9k|{
 5815|  10.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  10.9k|                                  needs_context_tag>) {
 5819|  10.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  10.9k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5653|  10.9k|    {                                                                        \
 5654|  10.9k|        return val;                                                          \
 5655|  10.9k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5783|  10.9k|{
 5784|  10.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  10.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  10.9k|    constexpr bool scannable_char =
 5788|  10.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  10.9k|    static_assert(scannable_char,
 5790|  10.9k|                  "Cannot scan an argument of an unsupported character "
 5791|  10.9k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  10.9k|    constexpr bool scannable_const =
 5794|  10.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  10.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  10.9k|    constexpr bool scannable_disabled =
 5798|  10.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  10.9k|    static_assert(scannable_disabled,
 5800|  10.9k|                  "Cannot scan an argument that has been disabled by "
 5801|  10.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  10.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  10.9k|    static_assert(
 5805|  10.9k|        scannable,
 5806|  10.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  10.9k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  10.9k|    return arg_value{arg};
 5810|  10.9k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5596|  10.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  10.9k|    {
 5598|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  11.4k|    {
 1815|  11.4k|        return &value();
 1816|  11.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  11.4k|    {
 1769|  11.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.4k|        return this->get_value();
 1771|  11.4k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6393|  10.9k|    {
 6394|  10.9k|        return m_values;
 6395|  10.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  10.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  10.9k|    {
 6142|  10.9k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  10.9k|        : m_str(r.str)
 8778|  10.9k|    {
 8779|  10.9k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   290k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   290k|    {
 3742|   290k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   290k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   290k|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|  3.45k|    {
 3753|  3.45k|        return m_code;
 3754|  3.45k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  69.0k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  69.0k|    else {
 3981|  69.0k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  69.0k|    }
 3983|  69.0k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  2.04M|    {
  572|  2.04M|        return m_has_value;
  573|  2.04M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   163k|    {
  555|   163k|        return m_unexpected;
  556|   163k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   159k|    {
 1746|   159k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   159k|        return this->get_unexpected().error();
 1748|   159k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6935|  4.65k|    {
 6936|  4.65k|        return m_size;
 6937|  4.65k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6976|  4.75k|    {
 6977|  4.75k|        SCN_GCC_COMPAT_PUSH
 6978|  4.75k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6979|  4.75k|        switch (type) {
 6980|  2.13k|            case presentation_type::none:
  ------------------
  |  Branch (6980:13): [True: 2.13k, False: 2.62k]
  ------------------
 6981|  2.13k|                return 10;
 6982|    112|            case presentation_type::int_generic:
  ------------------
  |  Branch (6982:13): [True: 112, False: 4.64k]
  ------------------
 6983|    112|                return 0;
 6984|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6984:13): [True: 0, False: 4.75k]
  ------------------
 6985|      0|                return arbitrary_base;
 6986|       |
 6987|     88|            case presentation_type::int_binary:
  ------------------
  |  Branch (6987:13): [True: 88, False: 4.66k]
  ------------------
 6988|     88|                return 2;
 6989|     86|            case presentation_type::int_octal:
  ------------------
  |  Branch (6989:13): [True: 86, False: 4.66k]
  ------------------
 6990|     86|                return 8;
 6991|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6991:13): [True: 40, False: 4.71k]
  ------------------
 6992|    104|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6992:13): [True: 64, False: 4.69k]
  ------------------
 6993|    104|                return 10;
 6994|  2.23k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6994:13): [True: 2.23k, False: 2.52k]
  ------------------
 6995|  2.23k|                return 16;
 6996|       |
 6997|      0|            default:
  ------------------
  |  Branch (6997:13): [True: 0, False: 4.75k]
  ------------------
 6998|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6999|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7000|  4.75k|        }
 7001|  4.75k|        SCN_GCC_COMPAT_POP
 7002|  4.75k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  37.7k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7017|  7.76k|    {
 7018|  7.76k|        m_specs.align = align;
 7019|  7.76k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7037|  7.00k|    {
 7038|  7.00k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7038:13): [True: 0, False: 7.00k]
  |  Branch (7038:39): [True: 0, False: 0]
  ------------------
 7039|       |            // clang-format off
 7040|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7041|       |            // clang-format on
 7042|      0|        }
 7043|       |
 7044|  7.00k|        m_specs.width = width;
 7045|  7.00k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7047|  13.3k|    {
 7048|  13.3k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7048:13): [True: 68, False: 13.3k]
  ------------------
 7049|       |            // clang-format off
 7050|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7051|       |            // clang-format on
 7052|     68|        }
 7053|       |
 7054|  13.3k|        m_specs.precision = prec;
 7055|  13.3k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  31.8k|    {
 7059|  31.8k|        m_specs.type = type;
 7060|  31.8k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7063|  1.12M|    {
 7064|  1.12M|        const auto cp_value = static_cast<unsigned>(cp);
 7065|  1.12M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  864|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 937k, False: 187k]
  |  |  ------------------
  ------------------
 7066|   937k|            m_specs.charset_literals[cp_value / 8] |=
 7067|   937k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7068|   937k|        }
 7069|   187k|        else {
 7070|   187k|            m_specs.charset_has_nonascii = true;
 7071|   187k|        }
 7072|  1.12M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7075|  11.9k|    {
 7076|  11.9k|        const auto begin_value = static_cast<unsigned>(begin);
 7077|  11.9k|        const auto end_value = static_cast<unsigned>(end);
 7078|  11.9k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7079|       |
 7080|  11.9k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  11.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.26k, False: 5.66k]
  |  |  ------------------
  ------------------
 7081|       |            // No need to bit-twiddle with a mask, because with the
 7082|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7083|  6.26k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  6.26k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7084|   428k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7084:40): [True: 421k, False: 6.26k]
  ------------------
 7085|   421k|                m_specs.charset_literals[v / 8] |=
 7086|   421k|                    static_cast<unsigned char>(1ul << (v % 8));
 7087|   421k|            }
 7088|  6.26k|        }
 7089|  5.66k|        else {
 7090|  5.66k|            m_specs.charset_has_nonascii = true;
 7091|  5.66k|        }
 7092|  11.9k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7095|  4.05k|    {
 7096|  4.05k|        m_specs.charset_is_inverted = true;
 7097|  4.05k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7114|  1.31k|    {
 7115|  1.31k|        m_specs.regexp_flags = flags;
 7116|  1.31k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7120|  9.75k|    {
 7121|  9.75k|        SCN_UNLIKELY_ATTR
 7122|  9.75k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7123|  9.75k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  1.18M|    {
 7132|  1.18M|        return m_error;
 7133|  1.18M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   140k|{
 3918|   140k|    return unexpected(scan_error{c, m});
 3919|   140k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4168|   105k|{
 4169|   105k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4170|       |
 4171|   105k|    const auto is_trailing_code_unit = [](char ch) {
 4172|   105k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|   105k|    };
 4174|       |
 4175|   105k|    if (input.size() == 1) {
  ------------------
  |  Branch (4175:9): [True: 90.1k, False: 15.8k]
  ------------------
 4176|  90.1k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  930|  90.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  90.1k|        return static_cast<char32_t>(input[0]);
 4178|  90.1k|    }
 4179|       |
 4180|  15.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (4180:9): [True: 15.0k, False: 750]
  ------------------
 4181|  15.0k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|  15.0k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4183|       |
 4184|  15.0k|        char32_t cp{};
 4185|  15.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4186|  15.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4187|  15.0k|        return cp;
 4188|  15.0k|    }
 4189|       |
 4190|    750|    if (input.size() == 3) {
  ------------------
  |  Branch (4190:9): [True: 628, False: 122]
  ------------------
 4191|    628|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  930|    628|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    628|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|    628|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    628|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    628|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|    628|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    628|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    628|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4194|       |
 4195|    628|        char32_t cp{};
 4196|    628|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4197|    628|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4198|    628|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4199|    628|        return cp;
 4200|    628|    }
 4201|       |
 4202|    122|    if (input.size() == 4) {
  ------------------
  |  Branch (4202:9): [True: 122, False: 0]
  ------------------
 4203|    122|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|    122|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|    122|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|    122|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|    122|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4208|       |
 4209|    122|        char32_t cp{};
 4210|    122|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4211|    122|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4212|    122|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4213|    122|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4214|    122|        return cp;
 4215|    122|    }
 4216|       |
 4217|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4218|       |    // gcc 7 thinks we'll get here, even when we won't
 4219|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|      0|#endif
 4221|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4222|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   282k|{
 4308|       |    // Pattern_White_Space property
 4309|   282k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 152k, False: 129k]
  |  Branch (4309:27): [True: 8.51k, False: 144k]
  ------------------
 4310|   282k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 6.76k, False: 266k]
  ------------------
 4311|   282k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 8.20k, False: 258k]
  ------------------
 4312|   282k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 3.64k, False: 254k]
  ------------------
 4313|   282k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 4.08k, False: 250k]
  ------------------
 4314|   282k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 4.70k, False: 246k]
  ------------------
 4315|   282k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 504, False: 245k]
  ------------------
 4316|   282k|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6865|  1.48k|{
 6866|  1.48k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6867|  1.48k|                                    static_cast<unsigned>(b));
 6868|  1.48k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6870|    222|{
 6871|    222|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6872|    222|                                    static_cast<unsigned>(b));
 6873|    222|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6885|    222|{
 6886|    222|    return a = a | b;
 6887|    222|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|  1.20k|{
 7815|  1.20k|    switch (type) {
 7816|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 100, False: 1.10k]
  ------------------
 7817|    100|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 1.20k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 1.20k]
  ------------------
 7821|    124|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 124, False: 1.08k]
  ------------------
 7822|    124|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 1.20k]
  ------------------
 7823|    124|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 1.20k]
  ------------------
 7824|    124|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 1.20k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 1.20k]
  ------------------
 7828|    124|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 124, False: 1.08k]
  ------------------
 7829|    124|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 1.20k]
  ------------------
 7830|    124|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 1.20k]
  ------------------
 7831|    124|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|    122|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 122, False: 1.08k]
  ------------------
 7834|    122|            return arg_type_category::pointer;
 7835|    124|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 124, False: 1.08k]
  ------------------
 7836|    124|            return arg_type_category::boolean;
 7837|     58|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 58, False: 1.14k]
  ------------------
 7838|    122|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 64, False: 1.14k]
  ------------------
 7839|    122|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 1.20k]
  ------------------
 7840|    122|            return arg_type_category::character;
 7841|       |
 7842|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 1.20k]
  ------------------
 7843|    124|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 124, False: 1.08k]
  ------------------
 7844|    124|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 1.20k]
  ------------------
 7845|    124|            return arg_type_category::floating;
 7846|       |
 7847|     58|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 58, False: 1.14k]
  ------------------
 7848|    180|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 122, False: 1.08k]
  ------------------
 7849|    244|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 64, False: 1.14k]
  ------------------
 7850|    366|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 122, False: 1.08k]
  ------------------
 7851|    366|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 1.20k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 1.20k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|  1.20k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|  1.20k|            SCN_CLANG_POP
 7862|  1.20k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|  1.20k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  4.35k|    {
 1756|  4.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.35k|        return std::move(this->get_unexpected().error());
 1758|  4.35k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7900|  7.19k|{
 7901|  7.19k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  7.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.60k, False: 2.59k]
  |  |  ------------------
  ------------------
 7902|  4.60k|        return handler.on_error("Invalid type specifier for integer type");
 7903|  4.60k|    }
 7904|  2.59k|    if (specs.localized) {
  ------------------
  |  Branch (7904:9): [True: 168, False: 2.42k]
  ------------------
 7905|    168|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 152]
  |  |  ------------------
  ------------------
 7906|       |            // clang-format off
 7907|     16|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7908|       |            // clang-format on
 7909|     16|            return;
 7910|     16|        }
 7911|    152|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 7912|       |            // clang-format off
 7913|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7914|       |            // clang-format on
 7915|      0|        }
 7916|    152|    }
 7917|  2.59k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   147k|{
 2094|   147k|    return SCN_FWD(t);
  ------------------
  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   147k|}
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|    100|    {
 3041|    100|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|    100|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|    100|    {
 3075|    100|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|    100|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|    100|    {
 3098|    100|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|    100|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|    100|    {
 3107|    100|        return fn::impl(std::forward<T>(t));
 3108|    100|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7944|  3.59k|{
 7945|  3.59k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7945:9): [True: 2.49k, False: 1.10k]
  ------------------
 7946|  3.59k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7946:10): [True: 190, False: 2.30k]
  ------------------
 7947|  2.49k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7947:10): [True: 2.08k, False: 212]
  ------------------
 7948|  2.27k|        SCN_UNLIKELY_ATTR
 7949|  2.27k|        return handler.on_error("Invalid type specifier for float type");
 7950|  2.27k|    }
 7951|  3.59k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  1.88M|    {
 1740|  1.88M|        return has_value();
 1741|  1.88M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7956|  10.4k|{
 7957|  10.4k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7957:9): [True: 3.17k, False: 7.29k]
  ------------------
 7958|  10.4k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7958:9): [True: 1.02k, False: 6.27k]
  ------------------
 7959|  10.4k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7959:9): [True: 4.45k, False: 1.81k]
  ------------------
 7960|  10.4k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7960:9): [True: 102, False: 1.71k]
  ------------------
 7961|  10.4k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7961:9): [True: 312, False: 1.40k]
  ------------------
 7962|  9.06k|        return;
 7963|  9.06k|    }
 7964|  1.40k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7964:9): [True: 270, False: 1.13k]
  ------------------
 7965|    270|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 258]
  |  |  ------------------
  ------------------
 7966|       |            // clang-format off
 7967|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7968|       |            // clang-format on
 7969|     12|        }
 7970|    258|        return;
 7971|    270|    }
 7972|  1.13k|    SCN_UNLIKELY_ATTR
 7973|  1.13k|    handler.on_error("Invalid type specifier for string");
 7974|  1.13k|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7990|  3.59k|{
 7991|  3.59k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7991:9): [True: 2.49k, False: 1.10k]
  ------------------
 7992|  3.59k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7992:9): [True: 2.13k, False: 360]
  ------------------
 7993|  3.59k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7993:9): [True: 2.08k, False: 46]
  ------------------
 7994|  3.59k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7994:9): [True: 2.05k, False: 30]
  ------------------
 7995|  3.59k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7995:9): [True: 2.01k, False: 40]
  ------------------
 7996|  3.59k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7996:9): [True: 1.99k, False: 24]
  ------------------
 7997|  3.59k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7997:9): [True: 1.95k, False: 34]
  ------------------
 7998|  3.59k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7998:9): [True: 1.94k, False: 16]
  ------------------
 7999|  1.94k|        SCN_UNLIKELY_ATTR
 8000|  1.94k|        return handler.on_error("Invalid type specifier for boolean");
 8001|  1.94k|    }
 8002|  3.59k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7922|  3.48k|{
 7923|  3.48k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7923:9): [True: 2.27k, False: 1.21k]
  ------------------
 7924|  3.48k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7924:9): [True: 0, False: 1.21k]
  ------------------
 7925|  2.27k|        SCN_UNLIKELY_ATTR
 7926|  2.27k|        return handler.on_error("Invalid type specifier for character type");
 7927|  2.27k|    }
 7928|  3.48k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7979|  3.48k|{
 7980|  3.48k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7980:9): [True: 2.43k, False: 1.05k]
  ------------------
 7981|  3.48k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7981:9): [True: 2.41k, False: 16]
  ------------------
 7982|  2.41k|        SCN_UNLIKELY_ATTR
 7983|  2.41k|        return handler.on_error("Invalid type specifier for pointer");
 7984|  2.41k|    }
 7985|  3.48k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   129k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   129k|    else {
 3981|   129k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   129k|    }
 3983|   129k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.19M|    {
 3480|  1.19M|        return m_iterator;
 3481|  1.19M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.22M|    {
 3484|  1.22M|        return m_sentinel;
 3485|  1.22M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   567k|    {
 3480|   567k|        return m_iterator;
 3481|   567k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   481k|    {
 3484|   481k|        return m_sentinel;
 3485|   481k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  80.7k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    354|{
 1350|    354|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    354|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  3.55k|    {
  365|  3.55k|        return m_unexpected;
  366|  3.55k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   141k|        : m_unexpected(std::forward<Err>(e))
  350|   141k|    {
  351|   141k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   141k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   141k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   147k|        : base(unexpect, std::move(e.error())),
 1616|   147k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   147k|    {
 1618|   147k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   147k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   147k|          m_has_value(false)
  451|   147k|    {
  452|   147k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   151k|    {
 1316|   151k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  31.0k|        : base(unexpect, std::move(e.error())),
 1616|  31.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.0k|    {
 1618|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  32.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  32.0k|          m_has_value(false)
  451|  32.0k|    {
  452|  32.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  54.7k|    {
 1316|  54.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  21.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  21.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  21.2k|    {
 1572|  21.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  21.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  21.2k|    {
  442|  21.2k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  55.6k|    {
 1740|  55.6k|        return has_value();
 1741|  55.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   108k|    {
  490|   108k|        return m_has_value;
  491|   108k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  31.1k|    {
 1746|  31.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  31.1k|        return this->get_unexpected().error();
 1748|  31.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  31.1k|    {
  473|  31.1k|        return m_unexpected;
  474|  31.1k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  14.7k|    {
 1805|  14.7k|        return std::move(value());
 1806|  14.7k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  21.8k|    {
 1769|  21.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  21.8k|        return this->get_value();
 1771|  21.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  21.8k|    {
  456|  21.8k|        return m_value;
  457|  21.8k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  18.4k|        : base(unexpect, std::move(e.error())),
 1616|  18.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  18.4k|    {
 1618|  18.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  19.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  19.4k|          m_has_value(false)
  451|  19.4k|    {
  452|  19.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  39.0k|    {
 1316|  39.0k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  19.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  19.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  19.0k|    {
 1572|  19.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  19.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  19.0k|    {
  442|  19.0k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  39.9k|    {
 1740|  39.9k|        return has_value();
 1741|  39.9k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  77.1k|    {
  490|  77.1k|        return m_has_value;
  491|  77.1k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  18.5k|    {
 1746|  18.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  18.5k|        return this->get_unexpected().error();
 1748|  18.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  18.5k|    {
  473|  18.5k|        return m_unexpected;
  474|  18.5k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  13.9k|    {
 1805|  13.9k|        return std::move(value());
 1806|  13.9k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  18.6k|    {
 1769|  18.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  18.6k|        return this->get_value();
 1771|  18.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  18.6k|    {
  456|  18.6k|        return m_value;
  457|  18.6k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  8.37k|    {
 1979|  8.37k|        return detail::transform_error_impl(std::move(*this),
 1980|  8.37k|                                            std::forward<F>(f));
 1981|  8.37k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  8.37k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  8.37k|    else {
 1472|  8.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  8.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  8.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 1474|  8.37k|                   ? result(*std::forward<Exp>(exp))
 1475|  8.37k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  8.37k|    }
 1479|  8.37k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  95.4k|    {
  490|  95.4k|        return m_has_value;
  491|  95.4k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  10.3k|    {
 1805|  10.3k|        return std::move(value());
 1806|  10.3k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  44.8k|    {
 1769|  44.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  44.8k|        return this->get_value();
 1771|  44.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  44.8k|    {
  456|  44.8k|        return m_value;
  457|  44.8k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    102|    {
 1756|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    102|        return std::move(this->get_unexpected().error());
 1758|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    102|    {
  473|    102|        return m_unexpected;
  474|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    936|        : base(unexpect, std::forward<Args>(args)...),
 1626|    936|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    936|    {
 1628|    936|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8851|  5.70k|    {
 8852|  5.70k|        return m_args;
 8853|  5.70k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|  26.6k|    {
 8857|  26.6k|        return m_locale;
 8858|  26.6k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|  49.2k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|  49.2k|    {
 8864|  49.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  7.62k|    {
 3000|  7.62k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  7.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  7.62k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  7.62k|    {
 2981|  7.62k|        return t.data();
 2982|  7.62k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8851|  4.51k|    {
 8852|  4.51k|        return m_args;
 8853|  4.51k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|  15.6k|    {
 8857|  15.6k|        return m_locale;
 8858|  15.6k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|  98.5k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|  98.5k|    {
 8864|  98.5k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   303k|        : base(unexpect, std::move(e.error())),
 1616|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   303k|    {
 1618|   303k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   303k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   303k|          m_has_value(false)
  550|   303k|    {
  551|   303k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   303k|    {
 1316|   303k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|   371k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   371k|        : m_deferred_init(), m_has_value(true)
  529|   371k|    {
  530|   371k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6941|  1.15k|    {
 6942|  1.15k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6943|  1.15k|        CharT r{};
 6944|  1.15k|        std::memcpy(&r, m_data, m_size);
 6945|  1.15k|        return r;
 6946|  1.15k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  1.72k|        : m_unexpected(std::forward<Err>(e))
  350|  1.72k|    {
  351|  1.72k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.72k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.72k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  2.09k|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.09k|    {
  360|  2.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.09k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6950|  1.59k|    {
 6951|  1.59k|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6952|  1.59k|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3106|     94|    {
 3107|     94|        return fn::impl(std::forward<T>(t));
 3108|     94|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3097|     94|    {
 3098|     94|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|     94|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|     94|    {
 3075|     94|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|     94|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|     94|    {
 3041|     94|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|     94|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|    368|        : m_unexpected(std::forward<Err>(e))
  350|    368|    {
  351|    368|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|    368|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|    368|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|     22|        : m_unexpected(std::forward<Err>(e))
  350|     22|    {
  351|     22|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|     22|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  20.6k|    {
  365|  20.6k|        return m_unexpected;
  366|  20.6k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  4.56k|        : m_unexpected(std::forward<Args>(args)...)
  359|  4.56k|    {
  360|  4.56k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  4.56k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  29.9k|        : m_unexpected(std::forward<Err>(e))
  350|  29.9k|    {
  351|  29.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  29.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  29.9k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  29.9k|    {
  365|  29.9k|        return m_unexpected;
  366|  29.9k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  29.9k|        : m_unexpected(std::forward<Args>(args)...)
  359|  29.9k|    {
  360|  29.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  29.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  29.9k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  1.08k|{
 1350|  1.08k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  1.08k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.45k|        : m_unexpected(std::forward<Err>(e))
  350|  3.45k|    {
  351|  3.45k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.45k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.45k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|  1.44k|{
 1350|  1.44k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  1.44k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3106|     16|    {
 3107|     16|        return fn::impl(std::forward<T>(t));
 3108|     16|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3097|     16|    {
 3098|     16|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|     16|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3074|     16|    {
 3075|     16|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|     16|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3040|     16|    {
 3041|     16|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|     16|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   141k|{
  316|   141k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   141k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   119k|    {
 3496|   119k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   119k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    530|        : base(unexpect, std::move(e.error())),
 1616|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    530|    {
 1618|    530|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    530|          m_has_value(false)
  451|    530|    {
  452|    530|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  50.4k|    {
 1316|  50.4k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  49.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  49.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  49.9k|    {
 1572|  49.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  49.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  49.9k|    {
  442|  49.9k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  40.0k|    {
 1740|  40.0k|        return has_value();
 1741|  40.0k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  34.5k|    {
 1795|  34.5k|        return value();
 1796|  34.5k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  10.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  10.4k|    {
 1572|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  10.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.4k|    {
  442|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.9k|    {
 1316|  10.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    514|        : base(unexpect, std::move(e.error())),
 1616|    514|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    514|    {
 1618|    514|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    514|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    514|          m_has_value(false)
  451|    514|    {
  452|    514|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1739|  7.80k|    {
 1740|  7.80k|        return has_value();
 1741|  7.80k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  20.1k|    {
  490|  20.1k|        return m_has_value;
  491|  20.1k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|  5.95k|    {
 1795|  5.95k|        return value();
 1796|  5.95k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  8.69k|    {
 1769|  8.69k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.69k|        return this->get_value();
 1771|  8.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  8.69k|    {
  456|  8.69k|        return m_value;
  457|  8.69k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    238|        : base(unexpect, std::move(e.error())),
 1616|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    238|    {
 1618|    238|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    238|          m_has_value(false)
  451|    238|    {
  452|    238|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.78k|    {
 1316|  4.78k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  4.54k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.54k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.54k|    {
 1572|  4.54k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  4.54k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.54k|    {
  442|  4.54k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    882|    {
 1979|    882|        return detail::transform_error_impl(std::move(*this),
 1980|    882|                                            std::forward<F>(f));
 1981|    882|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    882|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    882|    else {
 1472|    882|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    882|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    882|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 882, False: 0]
  |  |  ------------------
  ------------------
 1474|    882|                   ? result(*std::forward<Exp>(exp))
 1475|    882|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    882|    }
 1479|    882|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.74k|    {
 1805|  2.74k|        return std::move(value());
 1806|  2.74k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.59k|    {
 1572|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59k|    {
  442|  2.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.44k|    {
 1316|  9.44k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1755|    444|    {
 1756|    444|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    444|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    444|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    444|        return std::move(this->get_unexpected().error());
 1758|    444|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    444|    {
  473|    444|        return m_unexpected;
  474|    444|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.72k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.72k|    {
 1628|  1.72k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  6.05k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.05k|          m_has_value(false)
  451|  6.05k|    {
  452|  6.05k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.10k|    {
 2869|  2.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.10k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.10k|    {
 2850|  2.10k|        return decay_copy(t.begin());
 2851|  2.10k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2093|  4.55k|{
 2094|  4.55k|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.55k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3479|  2.10k|    {
 3480|  2.10k|        return m_iterator;
 3481|  2.10k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.10k|    {
 2926|  2.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.10k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.10k|    {
 2908|  2.10k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.10k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3483|  2.10k|    {
 3484|  2.10k|        return m_sentinel;
 3485|  2.10k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|  2.10k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.10k|    {
 3466|  2.10k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  4.78k|    {
 1740|  4.78k|        return has_value();
 1741|  4.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.57k|    {
  490|  9.57k|        return m_has_value;
  491|  9.57k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1745|    238|    {
 1746|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    238|        return this->get_unexpected().error();
 1748|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  4.54k|    {
 1805|  4.54k|        return std::move(value());
 1806|  4.54k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  4.54k|    {
 1769|  4.54k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.54k|        return this->get_value();
 1771|  4.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.54k|    {
  456|  4.54k|        return m_value;
  457|  4.54k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.16k|    {
 1316|  9.16k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  9.16k|        : base(std::in_place, std::forward<U>(val)),
 1570|  9.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  9.16k|    {
 1572|  9.16k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  9.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  9.16k|    {
  442|  9.16k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  9.16k|    {
 1740|  9.16k|        return has_value();
 1741|  9.16k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.3k|    {
  490|  18.3k|        return m_has_value;
  491|  18.3k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  9.16k|    {
 1805|  9.16k|        return std::move(value());
 1806|  9.16k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  9.16k|    {
 1769|  9.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.16k|        return this->get_value();
 1771|  9.16k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  9.16k|    {
  456|  9.16k|        return m_value;
  457|  9.16k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  4.32k|        : base(unexpect, std::move(e.error())),
 1616|  4.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.32k|    {
 1618|  4.32k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    802|        : base(unexpect, std::move(e.error())),
 1616|    802|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    802|    {
 1618|    802|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.24k|          m_has_value(false)
  451|  1.24k|    {
  452|  1.24k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.52k|    {
 1316|  8.52k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  5.41k|        : base(unexpect, std::move(e.error())),
 1616|  5.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.41k|    {
 1618|  5.41k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.41k|          m_has_value(false)
  451|  5.41k|    {
  452|  5.41k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1739|  7.86k|    {
 1740|  7.86k|        return has_value();
 1741|  7.86k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  15.3k|    {
  490|  15.3k|        return m_has_value;
  491|  15.3k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1745|  2.91k|    {
 1746|  2.91k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.91k|        return this->get_unexpected().error();
 1748|  2.91k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  3.92k|    {
  473|  3.92k|        return m_unexpected;
  474|  3.92k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|  1.39k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.39k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.39k|    {
 1572|  1.39k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|  1.39k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.39k|    {
  442|  1.39k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.39k|    {
 1316|  1.39k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.86k|    {
 1769|  1.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.86k|        return this->get_value();
 1771|  1.86k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|  1.86k|    {
  456|  1.86k|        return m_value;
  457|  1.86k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|  1.03k|    {
 1740|  1.03k|        return has_value();
 1741|  1.03k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  2.78k|    {
  490|  2.78k|        return m_has_value;
  491|  2.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.03k|    {
 1316|  1.03k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|  1.39k|    {
 1805|  1.39k|        return std::move(value());
 1806|  1.39k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.39k|    {
 1769|  1.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.39k|        return this->get_value();
 1771|  1.39k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|  1.39k|    {
  456|  1.39k|        return m_value;
  457|  1.39k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  81.0k|    {
 3484|  81.0k|        return m_sentinel;
 3485|  81.0k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|  2.31k|    {
 1979|  2.31k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.31k|                                            std::forward<F>(f));
 1981|  2.31k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  2.31k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.31k|    else {
 1472|  2.31k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.31k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.31k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.86k, False: 444]
  |  |  ------------------
  ------------------
 1474|  2.31k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.31k|                   : result(unexpect,
 1476|    444|                            trivial_invoke(std::forward<F>(f),
 1477|    444|                                           std::forward<Exp>(exp).error()));
 1478|  2.31k|    }
 1479|  2.31k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|  1.86k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.86k|    {
 1572|  1.86k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.86k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.86k|    {
  442|  1.86k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    444|        : base(unexpect, std::forward<Args>(args)...),
 1626|    444|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    444|    {
 1628|    444|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.86k|    {
 1805|  1.86k|        return std::move(value());
 1806|  1.86k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  92.2k|    {
 3480|  92.2k|        return m_iterator;
 3481|  92.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|  1.03k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.03k|    {
 1572|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|  1.03k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.03k|    {
  442|  1.03k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|  1.03k|    {
 1979|  1.03k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.03k|                                            std::forward<F>(f));
 1981|  1.03k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|  1.03k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.03k|    else {
 1472|  1.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.03k, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.03k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.03k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.03k|    }
 1479|  1.03k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  2.07k|    {
  490|  2.07k|        return m_has_value;
  491|  2.07k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.03k|    {
 1805|  1.03k|        return std::move(value());
 1806|  1.03k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.03k|    {
 1769|  1.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03k|        return this->get_value();
 1771|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.03k|    {
  456|  1.03k|        return m_value;
  457|  1.03k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|  1.03k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.03k|    {
 1572|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|  1.03k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.03k|    {
  442|  1.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.03k|    {
 1316|  1.03k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1739|  1.03k|    {
 1740|  1.03k|        return has_value();
 1741|  1.03k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.07k|    {
  490|  2.07k|        return m_has_value;
  491|  2.07k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.03k|    {
 1805|  1.03k|        return std::move(value());
 1806|  1.03k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.03k|    {
 1769|  1.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03k|        return this->get_value();
 1771|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03k|    {
  456|  1.03k|        return m_value;
  457|  1.03k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|  1.01k|    {
 1979|  1.01k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.01k|                                            std::forward<F>(f));
 1981|  1.01k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  1.01k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.01k|    else {
 1472|  1.01k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.01k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 1474|  1.01k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.01k|                   : result(unexpect,
 1476|  1.01k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.01k|                                           std::forward<Exp>(exp).error()));
 1478|  1.01k|    }
 1479|  1.01k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1755|  1.01k|    {
 1756|  1.01k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.01k|        return std::move(this->get_unexpected().error());
 1758|  1.01k|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|  1.72k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.72k|    static_cast<    \
  |  |  935|  1.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.72k|    {
 3912|  1.72k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  38.0k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  38.0k|    static_cast<    \
  |  |  935|  38.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  38.0k|    static_cast<    \
  |  |  935|  38.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  38.0k|    {
 3466|  38.0k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|     24|        : m_has_value(false)
  637|     24|    {
  638|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|     24|    {
  701|     24|        scn::detail::construct_at(unexpected_ptr(),
  702|     24|                                  std::forward<Args>(args)...);
  703|     24|        m_has_value = false;
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     72|    {
  730|     72|        return reinterpret_cast<unexpected<E>*>(
  731|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     24|    {
 1316|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1739|     24|    {
 1740|     24|        return has_value();
 1741|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     72|    {
  687|     72|        return m_has_value;
  688|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1745|     24|    {
 1746|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     24|        return this->get_unexpected().error();
 1748|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     24|    {
  670|     24|        return *unexpected_ptr();
  671|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  642|     24|    {
  643|     24|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 24]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     24|        else {
  647|     24|            destroy_unexpected();
  648|     24|        }
  649|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     24|    {
  712|     24|        scn::detail::destroy_at(unexpected_ptr());
  713|     24|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1739|  9.80k|    {
 1740|  9.80k|        return has_value();
 1741|  9.80k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.8k|    {
  490|  18.8k|        return m_has_value;
  491|  18.8k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1745|  5.69k|    {
 1746|  5.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.69k|        return this->get_unexpected().error();
 1748|  5.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.69k|    {
  473|  5.69k|        return m_unexpected;
  474|  5.69k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.59k|    {
 1805|  2.59k|        return std::move(value());
 1806|  2.59k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.39k|    {
 1769|  3.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.39k|        return this->get_value();
 1771|  3.39k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.39k|    {
  456|  3.39k|        return m_value;
  457|  3.39k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.02k|        : base(unexpect, std::move(e.error())),
 1616|  1.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.02k|    {
 1618|  1.02k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.12k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.12k|          m_has_value(false)
  451|  1.12k|    {
  452|  1.12k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.3k|    {
 1316|  14.3k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  11.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.2k|          m_has_value(false)
  451|  11.2k|    {
  452|  11.2k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  15.2k|    {
 1740|  15.2k|        return has_value();
 1741|  15.2k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  23.7k|    {
  490|  23.7k|        return m_has_value;
  491|  23.7k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  5.59k|    {
 1746|  5.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.59k|        return this->get_unexpected().error();
 1748|  5.59k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.59k|    {
  473|  5.59k|        return m_unexpected;
  474|  5.59k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.64k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.64k|    {
 1572|  3.64k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.64k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.64k|    {
  442|  3.64k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.64k|    {
 1316|  3.64k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.95k|    {
 1769|  1.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.95k|        return this->get_value();
 1771|  1.95k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.95k|    {
  456|  1.95k|        return m_value;
  457|  1.95k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.73k|    {
 1740|  2.73k|        return has_value();
 1741|  2.73k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  7.28k|    {
  490|  7.28k|        return m_has_value;
  491|  7.28k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.73k|    {
 1316|  2.73k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.64k|    {
 1805|  3.64k|        return std::move(value());
 1806|  3.64k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.64k|    {
 1769|  3.64k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.64k|        return this->get_value();
 1771|  3.64k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.64k|    {
  456|  3.64k|        return m_value;
  457|  3.64k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   132k|    {
 3375|   132k|        return detail::to_address(ranges::begin(derived()));
 3376|   132k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   132k|    {
 2869|   132k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   132k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   132k|    {
 2850|   132k|        return decay_copy(t.begin());
 2851|   132k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   132k|    {
 3334|   132k|        return static_cast<D&>(*this);
 3335|   132k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.95k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.95k|    {
 1572|  1.95k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.95k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.95k|    {
  442|  1.95k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.73k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.73k|    {
 1572|  2.73k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.73k|    {
  442|  2.73k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.73k|    {
 1979|  2.73k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.73k|                                            std::forward<F>(f));
 1981|  2.73k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.73k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.73k|    else {
 1472|  2.73k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.73k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.73k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.73k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.73k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.73k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.73k|    }
 1479|  2.73k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.46k|    {
  490|  5.46k|        return m_has_value;
  491|  5.46k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.73k|    {
 1805|  2.73k|        return std::move(value());
 1806|  2.73k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.73k|    {
 1769|  2.73k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.73k|        return this->get_value();
 1771|  2.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.73k|    {
  456|  2.73k|        return m_value;
  457|  2.73k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.73k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.73k|    {
 1572|  2.73k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.73k|    {
  442|  2.73k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.73k|    {
 1316|  2.73k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|  2.73k|    {
 1740|  2.73k|        return has_value();
 1741|  2.73k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.46k|    {
  490|  5.46k|        return m_has_value;
  491|  5.46k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.73k|    {
 1805|  2.73k|        return std::move(value());
 1806|  2.73k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.73k|    {
 1769|  2.73k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.73k|        return this->get_value();
 1771|  2.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.73k|    {
  456|  2.73k|        return m_value;
  457|  2.73k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|     20|        : base(unexpect, std::move(e.error())),
 1616|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     20|    {
 1618|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|     20|        : m_has_value(false)
  637|     20|    {
  638|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|     20|    {
  701|     20|        scn::detail::construct_at(unexpected_ptr(),
  702|     20|                                  std::forward<Args>(args)...);
  703|     20|        m_has_value = false;
  704|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     60|    {
  730|     60|        return reinterpret_cast<unexpected<E>*>(
  731|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     60|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     20|    {
 1316|     20|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|     20|    {
 1740|     20|        return has_value();
 1741|     20|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     60|    {
  687|     60|        return m_has_value;
  688|     60|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|     20|    {
 1746|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     20|        return this->get_unexpected().error();
 1748|     20|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     20|    {
  670|     20|        return *unexpected_ptr();
  671|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|     20|    {
  643|     20|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 20]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     20|        else {
  647|     20|            destroy_unexpected();
  648|     20|        }
  649|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     20|    {
  712|     20|        scn::detail::destroy_at(unexpected_ptr());
  713|     20|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   128k|    {
 3000|   128k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   128k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   128k|    {
 2981|   128k|        return t.data();
 2982|   128k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  4.36k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.36k|    {
 1572|  4.36k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  4.36k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.36k|    {
  442|  4.36k|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|    200|    {
 1805|    200|        return std::move(value());
 1806|    200|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  2.91k|{
 1350|  2.91k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  2.91k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    358|    {
 1979|    358|        return detail::transform_error_impl(std::move(*this),
 1980|    358|                                            std::forward<F>(f));
 1981|    358|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    358|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    358|    else {
 1472|    358|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    358|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    358|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 358, False: 0]
  |  |  ------------------
  ------------------
 1474|    358|                   ? result(*std::forward<Exp>(exp))
 1475|    358|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    358|    }
 1479|    358|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    358|        : base(std::in_place, std::forward<U>(val)),
 1570|    358|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    358|    {
 1572|    358|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    358|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    358|    {
  442|    358|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    358|    {
 1316|    358|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    358|    {
 1740|    358|        return has_value();
 1741|    358|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    716|    {
  490|    716|        return m_has_value;
  491|    716|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    358|    {
 1805|    358|        return std::move(value());
 1806|    358|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    358|    {
 1769|    358|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    358|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    358|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    358|        return this->get_value();
 1771|    358|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    358|    {
  456|    358|        return m_value;
  457|    358|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1964|    716|    {
 1965|    716|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    716|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1461|    716|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    716|    else {
 1472|    716|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    716|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    716|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 716]
  |  |  ------------------
  ------------------
 1474|    716|                   ? result(*std::forward<Exp>(exp))
 1475|    716|                   : result(unexpect,
 1476|    716|                            trivial_invoke(std::forward<F>(f),
 1477|    716|                                           std::forward<Exp>(exp).error()));
 1478|    716|    }
 1479|    716|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    792|    {
 1795|    792|        return value();
 1796|    792|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    350|    {
 2869|    350|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    350|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    350|    {
 2850|    350|        return decay_copy(t.begin());
 2851|    350|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|    318|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    914|    {
 1979|    914|        return detail::transform_error_impl(std::move(*this),
 1980|    914|                                            std::forward<F>(f));
 1981|    914|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    914|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    914|    else {
 1472|    914|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    914|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    914|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 914, False: 0]
  |  |  ------------------
  ------------------
 1474|    914|                   ? result(*std::forward<Exp>(exp))
 1475|    914|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    914|    }
 1479|    914|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    914|        : base(std::in_place, std::forward<U>(val)),
 1570|    914|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    914|    {
 1572|    914|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    914|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    914|    {
  442|    914|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    914|    {
 1316|    914|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    914|    {
 1740|    914|        return has_value();
 1741|    914|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.82k|    {
  490|  1.82k|        return m_has_value;
  491|  1.82k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    914|    {
 1805|    914|        return std::move(value());
 1806|    914|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    914|    {
 1769|    914|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    914|        return this->get_value();
 1771|    914|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    914|    {
  456|    914|        return m_value;
  457|    914|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|    936|    {
 1965|    936|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    936|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|    936|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    936|    else {
 1472|    936|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    936|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    936|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 936]
  |  |  ------------------
  ------------------
 1474|    936|                   ? result(*std::forward<Exp>(exp))
 1475|    936|                   : result(unexpect,
 1476|    936|                            trivial_invoke(std::forward<F>(f),
 1477|    936|                                           std::forward<Exp>(exp).error()));
 1478|    936|    }
 1479|    936|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    936|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    936|    static_cast<    \
  |  |  935|    936|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    936|    {
 3912|    936|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  7.04k|    {
 1795|  7.04k|        return value();
 1796|  7.04k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7447|  2.76k|{
 7448|  2.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  2.76k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  2.76k|    auto start = begin;
 7452|  2.76k|    ++begin;
 7453|       |
 7454|  2.76k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.76k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  2.76k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 444, False: 2.31k]
  ------------------
 7461|    444|        handler.on_charset_inverted();
 7462|    444|        ++begin;
 7463|    444|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 444]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|    444|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 6, False: 438]
  ------------------
 7470|      6|            handler.on_charset_single(char32_t{']'});
 7471|      6|            ++begin;
 7472|      6|        }
 7473|    444|    }
 7474|  2.31k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 2.31k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|   371k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 371k, False: 0]
  ------------------
 7479|   371k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|   371k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 2.76k, False: 368k]
  ------------------
 7484|  2.76k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  2.76k|        }
 7486|       |
 7487|   368k|        parse_presentation_set_literal(begin, end, handler);
 7488|   368k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  2.76k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7411|   368k|{
 7412|   368k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|   368k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|   368k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|   368k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 368k, False: 0]
  |  Branch (7419:25): [True: 2.85k, False: 365k]
  |  Branch (7419:49): [True: 2.85k, False: 0]
  ------------------
 7420|   368k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 2.79k, False: 60]
  ------------------
 7421|  2.79k|        ++begin;
 7422|       |
 7423|  2.79k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  2.79k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.79k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  2.79k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.79k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  2.79k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  2.79k|        return;
 7437|  2.79k|    }
 7438|       |
 7439|   365k|    handler.on_charset_single(cp_first);
 7440|   365k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7387|   371k|{
 7388|   371k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|   371k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|   371k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 371k]
  |  |  |  Branch (865:45): [True: 0, False: 371k]
  |  |  |  Branch (865:45): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|   371k|    const auto cp =
 7397|   371k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|   371k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|   371k|    begin += len;
 7404|   371k|    return cp;
 7405|   371k|}
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7006|  3.17k|    {
 7007|  3.17k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7008|  3.17k|                charset_string_size};
 7009|  3.17k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    792|        : base(std::in_place, std::forward<U>(val)),
 1570|    792|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    792|    {
 1572|    792|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    792|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    792|    {
  442|    792|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.44k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.44k|    {
 1572|  1.44k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.44k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.44k|    {
  442|  1.44k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4293|   105k|{
 4294|   105k|    if constexpr (sizeof(CharT) == 1) {
 4295|   105k|        return decode_utf8_code_point_exhaustive_valid(input);
 4296|       |    }
 4297|       |    else if constexpr (sizeof(CharT) == 2) {
 4298|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4299|       |    }
 4300|       |    else {
 4301|       |        SCN_EXPECT(input.size() == 1);
 4302|       |        return static_cast<char32_t>(input.front());
 4303|       |    }
 4304|   105k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4171|  16.6k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  16.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  16.6k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6941|  1.91k|    {
 6942|  1.91k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6943|  1.91k|        CharT r{};
 6944|  1.91k|        std::memcpy(&r, m_data, m_size);
 6945|  1.91k|        return r;
 6946|  1.91k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   309k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   309k|    else {
 4075|       |        // utf-32
 4076|   309k|        static_assert(sizeof(U) == 4);
 4077|   309k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   309k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   309k|        return 1;
 4079|   309k|    }
 4080|   309k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   275k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   275k|    else {
 4281|   275k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   275k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   275k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   275k|        auto cp = static_cast<char32_t>(input.front());
 4283|   275k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36.7k, False: 239k]
  |  |  ------------------
  ------------------
 4284|  36.7k|            return invalid_code_point;
 4285|  36.7k|        }
 4286|   239k|        return cp;
 4287|   275k|    }
 4288|   275k|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  54.7k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  54.7k|    else {
 3966|  54.7k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  54.7k|                                       to_address(first), to_address(last)))};
 3968|  54.7k|    }
 3969|  54.7k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   178k|{
  316|   178k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   178k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   387k|{
  294|   387k|    return p;
  295|   387k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  9.30k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  9.30k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  9.30k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  9.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  9.30k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  9.30k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   209k|{
  316|   209k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   209k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   114k|    {
 3496|   114k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   114k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    172|        : base(unexpect, std::move(e.error())),
 1616|    172|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    172|    {
 1618|    172|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    172|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    172|          m_has_value(false)
  451|    172|    {
  452|    172|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  19.0k|    {
 1316|  19.0k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  18.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  18.9k|    {
 1572|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  18.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  18.9k|    {
  442|  18.9k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|  5.42k|    {
 1740|  5.42k|        return has_value();
 1741|  5.42k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  32.8k|    {
  490|  32.8k|        return m_has_value;
  491|  32.8k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|     52|    {
 1795|     52|        return value();
 1796|     52|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  13.5k|    {
 1769|  13.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  13.5k|        return this->get_value();
 1771|  13.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  13.5k|    {
  456|  13.5k|        return m_value;
  457|  13.5k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  2.42k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.42k|    {
 1572|  2.42k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.42k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.42k|    {
  442|  2.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.80k|    {
 1316|  2.80k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    382|        : base(unexpect, std::move(e.error())),
 1616|    382|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    382|    {
 1618|    382|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    382|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    382|          m_has_value(false)
  451|    382|    {
  452|    382|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1739|  1.15k|    {
 1740|  1.15k|        return has_value();
 1741|  1.15k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.51k|    {
  490|  4.51k|        return m_has_value;
  491|  4.51k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|     40|    {
 1795|     40|        return value();
 1796|     40|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.32k|    {
 1769|  1.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.32k|        return this->get_value();
 1771|  1.32k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.32k|    {
  456|  1.32k|        return m_value;
  457|  1.32k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    116|        : base(unexpect, std::move(e.error())),
 1616|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    116|    {
 1618|    116|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    116|          m_has_value(false)
  451|    116|    {
  452|    116|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.27k|    {
 1316|  2.27k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  2.15k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.15k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.15k|    {
 1572|  2.15k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  2.15k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.15k|    {
  442|  2.15k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    534|    {
 1979|    534|        return detail::transform_error_impl(std::move(*this),
 1980|    534|                                            std::forward<F>(f));
 1981|    534|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    534|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    534|    else {
 1472|    534|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    534|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    534|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 534, False: 0]
  |  |  ------------------
  ------------------
 1474|    534|                   ? result(*std::forward<Exp>(exp))
 1475|    534|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    534|    }
 1479|    534|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.28k|    {
 1805|  1.28k|        return std::move(value());
 1806|  1.28k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|  1.73k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.73k|    {
 1572|  1.73k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.73k|    {
  442|  1.73k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.62k|    {
 1316|  4.62k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1755|    368|    {
 1756|    368|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    368|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    368|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    368|        return std::move(this->get_unexpected().error());
 1758|    368|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    382|    {
  473|    382|        return m_unexpected;
  474|    382|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    738|        : base(unexpect, std::forward<Args>(args)...),
 1626|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    738|    {
 1628|    738|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  2.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.33k|          m_has_value(false)
  451|  2.33k|    {
  452|  2.33k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    768|    {
 2869|    768|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    768|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    768|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    768|    {
 2850|    768|        return decay_copy(t.begin());
 2851|    768|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2093|  1.68k|{
 2094|  1.68k|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.68k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3479|    768|    {
 3480|    768|        return m_iterator;
 3481|    768|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|    768|    {
 2926|    768|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    768|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|    768|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|    768|    {
 2908|    768|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|    768|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|    768|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3483|    768|    {
 3484|    768|        return m_sentinel;
 3485|    768|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|    768|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    768|    static_cast<    \
  |  |  935|    768|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    768|    static_cast<    \
  |  |  935|    768|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|    768|    {
 3466|    768|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  2.27k|    {
 1740|  2.27k|        return has_value();
 1741|  2.27k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.54k|    {
  490|  4.54k|        return m_has_value;
  491|  4.54k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5errorEv:
 1745|    116|    {
 1746|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    116|        return this->get_unexpected().error();
 1748|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    116|    {
  473|    116|        return m_unexpected;
  474|    116|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  2.15k|    {
 1805|  2.15k|        return std::move(value());
 1806|  2.15k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  2.15k|    {
 1769|  2.15k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.15k|        return this->get_value();
 1771|  2.15k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.15k|    {
  456|  2.15k|        return m_value;
  457|  2.15k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.53k|    {
 1316|  6.53k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  6.53k|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.53k|    {
 1572|  6.53k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  6.53k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.53k|    {
  442|  6.53k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  8.11k|    {
 1979|  8.11k|        return detail::transform_error_impl(std::move(*this),
 1980|  8.11k|                                            std::forward<F>(f));
 1981|  8.11k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  8.11k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  8.11k|    else {
 1472|  8.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  8.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  8.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.11k, False: 0]
  |  |  ------------------
  ------------------
 1474|  8.11k|                   ? result(*std::forward<Exp>(exp))
 1475|  8.11k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  8.11k|    }
 1479|  8.11k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  13.4k|    {
 1805|  13.4k|        return std::move(value());
 1806|  13.4k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    172|    {
 1756|    172|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    172|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    172|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    172|        return std::move(this->get_unexpected().error());
 1758|    172|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    172|    {
  473|    172|        return m_unexpected;
  474|    172|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    948|        : base(unexpect, std::forward<Args>(args)...),
 1626|    948|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    948|    {
 1628|    948|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  6.53k|    {
 1740|  6.53k|        return has_value();
 1741|  6.53k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  13.0k|    {
  490|  13.0k|        return m_has_value;
  491|  13.0k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  6.53k|    {
 1805|  6.53k|        return std::move(value());
 1806|  6.53k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  6.53k|    {
 1769|  6.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.53k|        return this->get_value();
 1771|  6.53k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.53k|    {
  456|  6.53k|        return m_value;
  457|  6.53k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1745|     14|    {
 1746|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     14|        return this->get_unexpected().error();
 1748|     14|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    548|        : base(unexpect, std::move(e.error())),
 1616|    548|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    548|    {
 1618|    548|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    916|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    916|          m_has_value(false)
  451|    916|    {
  452|    916|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.27k|    {
 1316|  4.27k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IRS7_vEEOT_:
 1569|     58|        : base(std::in_place, std::forward<U>(val)),
 1570|     58|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     58|    {
 1572|     58|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  440|     58|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     58|    {
  442|     58|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  2.49k|        : base(unexpect, std::move(e.error())),
 1616|  2.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.49k|    {
 1618|  2.49k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.49k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.49k|          m_has_value(false)
  451|  2.49k|    {
  452|  2.49k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1739|  3.97k|    {
 1740|  3.97k|        return has_value();
 1741|  3.97k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  7.61k|    {
  490|  7.61k|        return m_has_value;
  491|  7.61k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1745|  1.54k|    {
 1746|  1.54k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.54k|        return this->get_unexpected().error();
 1748|  1.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  1.97k|    {
  473|  1.97k|        return m_unexpected;
  474|  1.97k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|    702|        : base(std::in_place, std::forward<U>(val)),
 1570|    702|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    702|    {
 1572|    702|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    702|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    702|    {
  442|    702|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    702|    {
 1316|    702|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    102|    {
 1795|    102|        return value();
 1796|    102|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    890|    {
 1769|    890|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    890|        return this->get_value();
 1771|    890|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|    890|    {
  456|    890|        return m_value;
  457|    890|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    536|    {
 1740|    536|        return has_value();
 1741|    536|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  1.40k|    {
  490|  1.40k|        return m_has_value;
  491|  1.40k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    536|    {
 1316|    536|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    702|    {
 1805|    702|        return std::move(value());
 1806|    702|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    702|    {
 1769|    702|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    702|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    702|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    702|        return this->get_value();
 1771|    702|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|    702|    {
  456|    702|        return m_value;
  457|    702|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  21.1k|    {
 3484|  21.1k|        return m_sentinel;
 3485|  21.1k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|  1.11k|    {
 1979|  1.11k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.11k|                                            std::forward<F>(f));
 1981|  1.11k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  1.11k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.11k|    else {
 1472|  1.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 750, False: 368]
  |  |  ------------------
  ------------------
 1474|  1.11k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.11k|                   : result(unexpect,
 1476|    368|                            trivial_invoke(std::forward<F>(f),
 1477|    368|                                           std::forward<Exp>(exp).error()));
 1478|  1.11k|    }
 1479|  1.11k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|    810|        : base(std::in_place, std::forward<U>(val)),
 1570|    810|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    810|    {
 1572|    810|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    810|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    810|    {
  442|    810|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    368|        : base(unexpect, std::forward<Args>(args)...),
 1626|    368|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    368|    {
 1628|    368|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    788|    {
 1805|    788|        return std::move(value());
 1806|    788|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  32.7k|    {
 3480|  32.7k|        return m_iterator;
 3481|  32.7k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    536|        : base(std::in_place, std::forward<U>(val)),
 1570|    536|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    536|    {
 1572|    536|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    536|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    536|    {
  442|    536|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    536|    {
 1979|    536|        return detail::transform_error_impl(std::move(*this),
 1980|    536|                                            std::forward<F>(f));
 1981|    536|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    536|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    536|    else {
 1472|    536|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    536|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    536|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 536, False: 0]
  |  |  ------------------
  ------------------
 1474|    536|                   ? result(*std::forward<Exp>(exp))
 1475|    536|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    536|    }
 1479|    536|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.07k|    {
  490|  1.07k|        return m_has_value;
  491|  1.07k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    536|    {
 1805|    536|        return std::move(value());
 1806|    536|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    536|    {
 1769|    536|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    536|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    536|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    536|        return this->get_value();
 1771|    536|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    536|    {
  456|    536|        return m_value;
  457|    536|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    536|        : base(std::in_place, std::forward<U>(val)),
 1570|    536|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    536|    {
 1572|    536|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    536|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    536|    {
  442|    536|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    536|    {
 1316|    536|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    536|    {
 1740|    536|        return has_value();
 1741|    536|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.07k|    {
  490|  1.07k|        return m_has_value;
  491|  1.07k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    536|    {
 1805|    536|        return std::move(value());
 1806|    536|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    536|    {
 1769|    536|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    536|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    536|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    536|        return this->get_value();
 1771|    536|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    536|    {
  456|    536|        return m_value;
  457|    536|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    466|    {
 1979|    466|        return detail::transform_error_impl(std::move(*this),
 1980|    466|                                            std::forward<F>(f));
 1981|    466|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1461|    466|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    466|    else {
 1472|    466|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    466|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    466|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38, False: 428]
  |  |  ------------------
  ------------------
 1474|    466|                   ? result(*std::forward<Exp>(exp))
 1475|    466|                   : result(unexpect,
 1476|    428|                            trivial_invoke(std::forward<F>(f),
 1477|    428|                                           std::forward<Exp>(exp).error()));
 1478|    466|    }
 1479|    466|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1755|    428|    {
 1756|    428|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    428|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    428|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    428|        return std::move(this->get_unexpected().error());
 1758|    428|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|    776|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    776|    static_cast<    \
  |  |  935|    776|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    776|    {
 3912|    776|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  11.2k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  11.2k|    static_cast<    \
  |  |  935|  11.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  11.2k|    static_cast<    \
  |  |  935|  11.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  11.2k|    {
 3466|  11.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1615|     44|        : base(unexpect, std::move(e.error())),
 1616|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     44|    {
 1618|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  636|     44|        : m_has_value(false)
  637|     44|    {
  638|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  700|     44|    {
  701|     44|        scn::detail::construct_at(unexpected_ptr(),
  702|     44|                                  std::forward<Args>(args)...);
  703|     44|        m_has_value = false;
  704|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    132|    {
  730|    132|        return reinterpret_cast<unexpected<E>*>(
  731|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     52|    {
 1316|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISJ_vEEOT_:
 1569|      8|        : base(std::in_place, std::forward<U>(val)),
 1570|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      8|    {
 1572|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS3_10in_place_tEDpOT_:
  626|      8|        : m_has_value(true)
  627|      8|    {
  628|      8|        construct(std::forward<Args>(args)...);
  629|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSK_EEEvDpOT_:
  693|      8|    {
  694|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|      8|        m_has_value = true;
  696|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEJSK_EEEPT_SM_DpOT0_:
  395|      8|{
  396|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|      8|        T(std::forward<Args>(args)...);
  398|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|     24|    {
  718|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     52|    {
 1740|     52|        return has_value();
 1741|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    156|    {
  687|    156|        return m_has_value;
  688|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     44|    {
 1746|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     44|        return this->get_unexpected().error();
 1748|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     44|    {
  670|     44|        return *unexpected_ptr();
  671|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEdeISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSO_v:
 1804|      8|    {
 1805|      8|        return std::move(value());
 1806|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5valueISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSO_v:
 1768|      8|    {
 1769|      8|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      8|        return this->get_value();
 1771|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|      8|    {
  653|      8|        return *value_ptr();
  654|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     52|    {
  643|     52|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8, False: 44]
  ------------------
  644|      8|            destroy_value();
  645|      8|        }
  646|     44|        else {
  647|     44|            destroy_unexpected();
  648|     44|        }
  649|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|      8|    {
  708|      8|        scn::detail::destroy_at(value_ptr());
  709|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEEEvPT_:
  401|      8|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|      8|    else {
  408|      8|        p->~T();
  409|      8|    }
  410|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     44|    {
  712|     44|        scn::detail::destroy_at(unexpected_ptr());
  713|     44|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1739|  4.78k|    {
 1740|  4.78k|        return has_value();
 1741|  4.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.22k|    {
  490|  9.22k|        return m_has_value;
  491|  9.22k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1745|  2.16k|    {
 1746|  2.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.16k|        return this->get_unexpected().error();
 1748|  2.16k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.16k|    {
  473|  2.16k|        return m_unexpected;
  474|  2.16k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.73k|    {
 1805|  1.73k|        return std::move(value());
 1806|  1.73k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  2.26k|    {
 1769|  2.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.26k|        return this->get_value();
 1771|  2.26k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.26k|    {
  456|  2.26k|        return m_value;
  457|  2.26k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.10k|        : base(unexpect, std::move(e.error())),
 1616|  1.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.10k|    {
 1618|  1.10k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.27k|          m_has_value(false)
  451|  1.27k|    {
  452|  1.27k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.5k|    {
 1316|  17.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|     68|        : base(std::in_place, std::forward<U>(val)),
 1570|     68|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     68|    {
 1572|     68|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|     68|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     68|    {
  442|     68|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  10.8k|        : base(unexpect, std::move(e.error())),
 1616|  10.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.8k|    {
 1618|  10.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  10.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.8k|          m_has_value(false)
  451|  10.8k|    {
  452|  10.8k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  18.4k|    {
 1740|  18.4k|        return has_value();
 1741|  18.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  30.5k|    {
  490|  30.5k|        return m_has_value;
  491|  30.5k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  5.65k|    {
 1746|  5.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.65k|        return this->get_unexpected().error();
 1748|  5.65k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.65k|    {
  473|  5.65k|        return m_unexpected;
  474|  5.65k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.60k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.60k|    {
 1572|  3.60k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.60k|    {
  442|  3.60k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.60k|    {
 1316|  3.60k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|     80|    {
 1795|     80|        return value();
 1796|     80|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  5.46k|    {
 1769|  5.46k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.46k|        return this->get_value();
 1771|  5.46k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  5.46k|    {
  456|  5.46k|        return m_value;
  457|  5.46k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.67k|    {
 1740|  2.67k|        return has_value();
 1741|  2.67k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  7.20k|    {
  490|  7.20k|        return m_has_value;
  491|  7.20k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.67k|    {
 1316|  2.67k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.60k|    {
 1805|  3.60k|        return std::move(value());
 1806|  3.60k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.60k|    {
 1769|  3.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.60k|        return this->get_value();
 1771|  3.60k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.60k|    {
  456|  3.60k|        return m_value;
  457|  3.60k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  5.55k|    {
 1979|  5.55k|        return detail::transform_error_impl(std::move(*this),
 1980|  5.55k|                                            std::forward<F>(f));
 1981|  5.55k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  5.55k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  5.55k|    else {
 1472|  5.55k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  5.55k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  5.55k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.38k, False: 172]
  |  |  ------------------
  ------------------
 1474|  5.55k|                   ? result(*std::forward<Exp>(exp))
 1475|  5.55k|                   : result(unexpect,
 1476|    172|                            trivial_invoke(std::forward<F>(f),
 1477|    172|                                           std::forward<Exp>(exp).error()));
 1478|  5.55k|    }
 1479|  5.55k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  5.38k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.38k|    {
 1572|  5.38k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  5.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.38k|    {
  442|  5.38k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    172|        : base(unexpect, std::forward<Args>(args)...),
 1626|    172|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    172|    {
 1628|    172|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  5.38k|    {
 1805|  5.38k|        return std::move(value());
 1806|  5.38k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.67k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.67k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.67k|    {
 1572|  2.67k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.67k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.67k|    {
  442|  2.67k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.67k|    {
 1979|  2.67k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.67k|                                            std::forward<F>(f));
 1981|  2.67k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.67k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.67k|    else {
 1472|  2.67k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.67k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.67k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.67k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.67k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.67k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.67k|    }
 1479|  2.67k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.34k|    {
  490|  5.34k|        return m_has_value;
  491|  5.34k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.67k|    {
 1805|  2.67k|        return std::move(value());
 1806|  2.67k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.67k|    {
 1769|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.67k|        return this->get_value();
 1771|  2.67k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.67k|    {
  456|  2.67k|        return m_value;
  457|  2.67k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.67k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.67k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.67k|    {
 1572|  2.67k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.67k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.67k|    {
  442|  2.67k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.67k|    {
 1316|  2.67k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|  2.67k|    {
 1740|  2.67k|        return has_value();
 1741|  2.67k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.34k|    {
  490|  5.34k|        return m_has_value;
  491|  5.34k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.67k|    {
 1805|  2.67k|        return std::move(value());
 1806|  2.67k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.67k|    {
 1769|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.67k|        return this->get_value();
 1771|  2.67k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.67k|    {
  456|  2.67k|        return m_value;
  457|  2.67k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|     40|        : base(unexpect, std::move(e.error())),
 1616|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     40|    {
 1618|     40|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|     40|        : m_has_value(false)
  637|     40|    {
  638|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     40|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|     40|    {
  701|     40|        scn::detail::construct_at(unexpected_ptr(),
  702|     40|                                  std::forward<Args>(args)...);
  703|     40|        m_has_value = false;
  704|     40|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    120|    {
  730|    120|        return reinterpret_cast<unexpected<E>*>(
  731|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    120|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     48|    {
 1316|     48|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1569|      8|        : base(std::in_place, std::forward<U>(val)),
 1570|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      8|    {
 1572|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|      8|        : m_has_value(true)
  627|      8|    {
  628|      8|        construct(std::forward<Args>(args)...);
  629|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|      8|    {
  694|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|      8|        m_has_value = true;
  696|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|      8|{
  396|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|      8|        T(std::forward<Args>(args)...);
  398|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|     24|    {
  718|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     48|    {
 1740|     48|        return has_value();
 1741|     48|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    144|    {
  687|    144|        return m_has_value;
  688|    144|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     40|    {
 1746|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     40|        return this->get_unexpected().error();
 1748|     40|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     40|    {
  670|     40|        return *unexpected_ptr();
  671|     40|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1804|      8|    {
 1805|      8|        return std::move(value());
 1806|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|      8|    {
 1769|      8|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      8|        return this->get_value();
 1771|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|      8|    {
  653|      8|        return *value_ptr();
  654|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     48|    {
  643|     48|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8, False: 40]
  ------------------
  644|      8|            destroy_value();
  645|      8|        }
  646|     40|        else {
  647|     40|            destroy_unexpected();
  648|     40|        }
  649|     48|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|      8|    {
  708|      8|        scn::detail::destroy_at(value_ptr());
  709|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|      8|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|      8|    else {
  408|      8|        p->~T();
  409|      8|    }
  410|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     40|    {
  712|     40|        scn::detail::destroy_at(unexpected_ptr());
  713|     40|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   207k|    {
 3000|   207k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   207k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   207k|    {
 2981|   207k|        return t.data();
 2982|   207k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   207k|    {
 3375|   207k|        return detail::to_address(ranges::begin(derived()));
 3376|   207k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   207k|    {
 2869|   207k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   207k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   207k|    {
 2850|   207k|        return decay_copy(t.begin());
 2851|   207k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   207k|    {
 3334|   207k|        return static_cast<D&>(*this);
 3335|   207k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    166|    {
 1979|    166|        return detail::transform_error_impl(std::move(*this),
 1980|    166|                                            std::forward<F>(f));
 1981|    166|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    166|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    166|    else {
 1472|    166|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    166|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    166|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 166, False: 0]
  |  |  ------------------
  ------------------
 1474|    166|                   ? result(*std::forward<Exp>(exp))
 1475|    166|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    166|    }
 1479|    166|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    166|        : base(std::in_place, std::forward<U>(val)),
 1570|    166|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    166|    {
 1572|    166|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    166|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    166|    {
  442|    166|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    166|    {
 1316|    166|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    166|    {
 1740|    166|        return has_value();
 1741|    166|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    332|    {
  490|    332|        return m_has_value;
  491|    332|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    166|    {
 1805|    166|        return std::move(value());
 1806|    166|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    166|    {
 1769|    166|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    166|        return this->get_value();
 1771|    166|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    166|    {
  456|    166|        return m_value;
  457|    166|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1964|    310|    {
 1965|    310|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    310|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1461|    310|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    310|    else {
 1472|    310|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    310|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    310|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 310]
  |  |  ------------------
  ------------------
 1474|    310|                   ? result(*std::forward<Exp>(exp))
 1475|    310|                   : result(unexpect,
 1476|    310|                            trivial_invoke(std::forward<F>(f),
 1477|    310|                                           std::forward<Exp>(exp).error()));
 1478|    310|    }
 1479|    310|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRS7_vEEOT_:
 1569|     44|        : base(std::in_place, std::forward<U>(val)),
 1570|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     44|    {
 1572|     44|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  440|     44|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     44|    {
  442|     44|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    532|    {
 1795|    532|        return value();
 1796|    532|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    148|    {
 2869|    148|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    148|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    148|    {
 2850|    148|        return decay_copy(t.begin());
 2851|    148|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|    136|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    932|    {
 1979|    932|        return detail::transform_error_impl(std::move(*this),
 1980|    932|                                            std::forward<F>(f));
 1981|    932|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    932|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    932|    else {
 1472|    932|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    932|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    932|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 932, False: 0]
  |  |  ------------------
  ------------------
 1474|    932|                   ? result(*std::forward<Exp>(exp))
 1475|    932|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    932|    }
 1479|    932|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    932|        : base(std::in_place, std::forward<U>(val)),
 1570|    932|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    932|    {
 1572|    932|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    932|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    932|    {
  442|    932|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    932|    {
 1316|    932|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    932|    {
 1740|    932|        return has_value();
 1741|    932|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.86k|    {
  490|  1.86k|        return m_has_value;
  491|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    932|    {
 1805|    932|        return std::move(value());
 1806|    932|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    932|    {
 1769|    932|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    932|        return this->get_value();
 1771|    932|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    932|    {
  456|    932|        return m_value;
  457|    932|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|    948|    {
 1965|    948|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    948|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|    948|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    948|    else {
 1472|    948|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    948|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    948|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 948]
  |  |  ------------------
  ------------------
 1474|    948|                   ? result(*std::forward<Exp>(exp))
 1475|    948|                   : result(unexpect,
 1476|    948|                            trivial_invoke(std::forward<F>(f),
 1477|    948|                                           std::forward<Exp>(exp).error()));
 1478|    948|    }
 1479|    948|}
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|     72|        : base(std::in_place, std::forward<U>(val)),
 1570|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     72|    {
 1572|     72|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|     72|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     72|    {
  442|     72|    }
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    948|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    948|    static_cast<    \
  |  |  935|    948|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    948|    {
 3912|    948|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  4.71k|    {
 1795|  4.71k|        return value();
 1796|  4.71k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7447|    750|{
 7448|    750|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|    750|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|    750|    auto start = begin;
 7452|    750|    ++begin;
 7453|       |
 7454|    750|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|    750|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 402, False: 348]
  ------------------
 7461|    402|        handler.on_charset_inverted();
 7462|    402|        ++begin;
 7463|    402|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 402]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|    402|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 6, False: 396]
  ------------------
 7470|      6|            handler.on_charset_single(char32_t{']'});
 7471|      6|            ++begin;
 7472|      6|        }
 7473|    402|    }
 7474|    348|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 348]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  7.81k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 7.81k, False: 0]
  ------------------
 7479|  7.81k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  7.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.81k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  7.81k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 750, False: 7.06k]
  ------------------
 7484|    750|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|    750|        }
 7486|       |
 7487|  7.06k|        parse_presentation_set_literal(begin, end, handler);
 7488|  7.06k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|    750|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7411|  7.06k|{
 7412|  7.06k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  7.06k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  7.06k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  7.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.06k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  7.06k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 7.06k, False: 0]
  |  Branch (7419:25): [True: 594, False: 6.46k]
  |  Branch (7419:49): [True: 594, False: 0]
  ------------------
 7420|  7.06k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 588, False: 6]
  ------------------
 7421|    588|        ++begin;
 7422|       |
 7423|    588|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|    588|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|    588|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|    588|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|    588|        return;
 7437|    588|    }
 7438|       |
 7439|  6.47k|    handler.on_charset_single(cp_first);
 7440|  6.47k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7387|  7.65k|{
 7388|  7.65k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  7.65k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  7.65k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.65k]
  |  |  |  Branch (865:45): [True: 0, False: 7.65k]
  |  |  |  Branch (865:45): [True: 0, False: 7.65k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  7.65k|    const auto cp =
 7397|  7.65k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  7.65k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  7.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.65k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  7.65k|    begin += len;
 7404|  7.65k|    return cp;
 7405|  7.65k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7006|    750|    {
 7007|    750|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7008|    750|                charset_string_size};
 7009|    750|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    510|        : base(std::in_place, std::forward<U>(val)),
 1570|    510|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    510|    {
 1572|    510|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    510|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    510|    {
  442|    510|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    516|        : base(std::in_place, std::forward<U>(val)),
 1570|    516|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    516|    {
 1572|    516|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    516|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    516|    {
  442|    516|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|  49.2k|    {
 6182|  49.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 49.2k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  49.2k|        return static_cast<std::size_t>(m_desc &
 6187|  49.2k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  49.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|  79.0k|    {
 6208|  79.0k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  79.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|  29.7k|    {
 6150|  29.7k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.7k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  29.7k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 29.7k]
  |  |  ------------------
  ------------------
 6158|     68|            return {};
 6159|     68|        }
 6160|       |
 6161|  29.7k|        const auto t = type(id);
 6162|  29.7k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.31k, False: 28.3k]
  |  |  ------------------
  ------------------
 6163|  1.31k|            return {};
 6164|  1.31k|        }
 6165|       |
 6166|  28.3k|        basic_scan_arg<Context> arg;
 6167|  28.3k|        arg.m_type = t;
 6168|  28.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 28.3k, False: 0]
  ------------------
 6169|  28.3k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  28.3k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  28.3k|        return arg;
 6175|  29.7k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|  29.7k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  48.0k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|  29.7k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  29.7k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  29.7k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  29.7k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  29.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|  28.3k|    {
 6212|  28.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  28.3k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|  56.1k|    {
 5966|  56.1k|        return m_type != detail::arg_type::none_type;
 5967|  56.1k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  5.59k|{
 9324|  5.59k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  5.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  5.59k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  5.59k|{
 9225|  5.59k|#define SCN_VISIT(Type)                                                \
 9226|  5.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  5.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  5.59k|    }                                                                  \
 9229|  5.59k|    else {                                                             \
 9230|  5.59k|        return vis(monostate_val);                                     \
 9231|  5.59k|    }
 9232|       |
 9233|  5.59k|    monostate monostate_val{};
 9234|       |
 9235|  5.59k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 5.59k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 5.59k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|    622|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 622, False: 4.97k]
  ------------------
 9241|    622|            SCN_VISIT(int);
  ------------------
  |  | 9226|    622|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    622|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    622|    }                                                                  \
  |  | 9229|    622|    else {                                                             \
  |  | 9230|    622|        return vis(monostate_val);                                     \
  |  | 9231|    622|    }
  ------------------
 9242|    622|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 5.59k]
  ------------------
 9243|    622|            SCN_VISIT(long);
  ------------------
  |  | 9226|    622|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    622|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    622|    }                                                                  \
  |  | 9229|    622|    else {                                                             \
  |  | 9230|    622|        return vis(monostate_val);                                     \
  |  | 9231|    622|    }
  ------------------
 9244|    622|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 5.59k]
  ------------------
 9245|    622|            SCN_VISIT(long long);
  ------------------
  |  | 9226|    622|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    622|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    622|    }                                                                  \
  |  | 9229|    622|    else {                                                             \
  |  | 9230|    622|        return vis(monostate_val);                                     \
  |  | 9231|    622|    }
  ------------------
 9246|    622|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 5.59k]
  ------------------
 9247|    622|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|    622|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    622|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    622|    }                                                                  \
  |  | 9229|    622|    else {                                                             \
  |  | 9230|    622|        return vis(monostate_val);                                     \
  |  | 9231|    622|    }
  ------------------
 9248|    622|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 5.59k]
  ------------------
 9249|    622|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|    622|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    622|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    622|    }                                                                  \
  |  | 9229|    622|    else {                                                             \
  |  | 9230|    622|        return vis(monostate_val);                                     \
  |  | 9231|    622|    }
  ------------------
 9250|  1.24k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 622, False: 4.97k]
  ------------------
 9251|  1.24k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  1.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.24k|    }                                                                  \
  |  | 9229|  1.24k|    else {                                                             \
  |  | 9230|  1.24k|        return vis(monostate_val);                                     \
  |  | 9231|  1.24k|    }
  ------------------
 9252|  1.24k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 5.59k]
  ------------------
 9253|  1.24k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  1.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.24k|    }                                                                  \
  |  | 9229|  1.24k|    else {                                                             \
  |  | 9230|  1.24k|        return vis(monostate_val);                                     \
  |  | 9231|  1.24k|    }
  ------------------
 9254|  1.24k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 5.59k]
  ------------------
 9255|  1.24k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  1.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.24k|    }                                                                  \
  |  | 9229|  1.24k|    else {                                                             \
  |  | 9230|  1.24k|        return vis(monostate_val);                                     \
  |  | 9231|  1.24k|    }
  ------------------
 9256|  1.86k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 622, False: 4.97k]
  ------------------
 9257|  1.86k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  1.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.86k|    }                                                                  \
  |  | 9229|  1.86k|    else {                                                             \
  |  | 9230|  1.86k|        return vis(monostate_val);                                     \
  |  | 9231|  1.86k|    }
  ------------------
 9258|  2.48k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 622, False: 4.97k]
  ------------------
 9259|  2.48k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  2.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.48k|    }                                                                  \
  |  | 9229|  2.48k|    else {                                                             \
  |  | 9230|  2.48k|        return vis(monostate_val);                                     \
  |  | 9231|  2.48k|    }
  ------------------
 9260|  3.11k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 622, False: 4.97k]
  ------------------
 9261|  3.11k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  3.11k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.11k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.11k|    }                                                                  \
  |  | 9229|  3.11k|    else {                                                             \
  |  | 9230|  3.11k|        return vis(monostate_val);                                     \
  |  | 9231|  3.11k|    }
  ------------------
 9262|  3.11k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.59k]
  ------------------
 9263|  3.11k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  3.11k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.11k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.11k|    }                                                                  \
  |  | 9229|  3.11k|    else {                                                             \
  |  | 9230|  3.11k|        return vis(monostate_val);                                     \
  |  | 9231|  3.11k|    }
  ------------------
 9264|  3.11k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.59k]
  ------------------
 9265|  3.11k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  3.11k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.11k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.11k|    }                                                                  \
  |  | 9229|  3.11k|    else {                                                             \
  |  | 9230|  3.11k|        return vis(monostate_val);                                     \
  |  | 9231|  3.11k|    }
  ------------------
 9266|  3.11k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.59k]
  ------------------
 9267|  3.11k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  3.11k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.11k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.11k|    }                                                                  \
  |  | 9229|  3.11k|    else {                                                             \
  |  | 9230|  3.11k|        return vis(monostate_val);                                     \
  |  | 9231|  3.11k|    }
  ------------------
 9268|  3.73k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 622, False: 4.97k]
  ------------------
 9269|  3.73k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  3.73k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.73k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.73k|    }                                                                  \
  |  | 9229|  3.73k|    else {                                                             \
  |  | 9230|  3.73k|        return vis(monostate_val);                                     \
  |  | 9231|  3.73k|    }
  ------------------
 9270|  3.73k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.59k]
  ------------------
 9271|  3.73k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  3.73k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.73k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.73k|    }                                                                  \
  |  | 9229|  3.73k|    else {                                                             \
  |  | 9230|  3.73k|        return vis(monostate_val);                                     \
  |  | 9231|  3.73k|    }
  ------------------
 9272|  4.35k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 622, False: 4.97k]
  ------------------
 9273|  4.35k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  4.35k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.35k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.35k|    }                                                                  \
  |  | 9229|  4.35k|    else {                                                             \
  |  | 9230|  4.35k|        return vis(monostate_val);                                     \
  |  | 9231|  4.35k|    }
  ------------------
 9274|  4.97k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 622, False: 4.97k]
  ------------------
 9275|  4.97k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  4.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.97k|    }                                                                  \
  |  | 9229|  4.97k|    else {                                                             \
  |  | 9230|  4.97k|        return vis(monostate_val);                                     \
  |  | 9231|  4.97k|    }
  ------------------
 9276|  4.97k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 5.59k]
  ------------------
 9277|  4.97k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  4.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.97k|    }                                                                  \
  |  | 9229|  4.97k|    else {                                                             \
  |  | 9230|  4.97k|        return vis(monostate_val);                                     \
  |  | 9231|  4.97k|    }
  ------------------
 9278|  5.59k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 622, False: 4.97k]
  ------------------
 9279|  5.59k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  5.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  5.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  5.59k|    }                                                                  \
  |  | 9229|  5.59k|    else {                                                             \
  |  | 9230|  5.59k|        return vis(monostate_val);                                     \
  |  | 9231|  5.59k|    }
  ------------------
 9280|  5.59k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.59k]
  ------------------
 9281|  5.59k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  5.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  5.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  5.59k|    }                                                                  \
  |  | 9229|  5.59k|    else {                                                             \
  |  | 9230|  5.59k|        return vis(monostate_val);                                     \
  |  | 9231|  5.59k|    }
  ------------------
 9282|  5.59k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.59k]
  ------------------
 9283|  5.59k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  5.59k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  5.59k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  5.59k|    }                                                                  \
  |  | 9229|  5.59k|    else {                                                             \
  |  | 9230|  5.59k|        return vis(monostate_val);                                     \
  |  | 9231|  5.59k|    }
  ------------------
 9284|       |
 9285|  5.59k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 5.59k]
  ------------------
 9286|  5.59k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  5.59k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  5.59k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 5.59k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.59k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  5.59k|            SCN_CLANG_POP
 9303|  5.59k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  74.4k|{
 6011|  74.4k|    return arg.m_type;
 6012|  74.4k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  26.3k|{
 6023|  26.3k|    return arg.m_value;
 6024|  26.3k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  2.06k|    {
 1979|  2.06k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.06k|                                            std::forward<F>(f));
 1981|  2.06k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  2.06k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.06k|    else {
 1472|  2.06k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.06k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.95k, False: 102]
  |  |  ------------------
  ------------------
 1474|  2.06k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.06k|                   : result(unexpect,
 1476|    102|                            trivial_invoke(std::forward<F>(f),
 1477|    102|                                           std::forward<Exp>(exp).error()));
 1478|  2.06k|    }
 1479|  2.06k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    102|        : base(unexpect, std::forward<Args>(args)...),
 1626|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    102|    {
 1628|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.95k|    {
 1805|  1.95k|        return std::move(value());
 1806|  1.95k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|  49.2k|        : m_format{format},
 6280|  49.2k|          m_next_arg_id{next_arg_id},
 6281|  49.2k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  49.2k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  49.2k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  49.2k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  49.2k|    {
 6287|  49.2k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  49.2k|    {
 3075|  49.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  49.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  49.2k|    {
 3041|  49.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  49.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  49.2k|{
 7796|  49.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  49.2k|    handler.check_args_exhausted();
 7798|  49.2k|    return handler.get_error();
 7799|  49.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  49.2k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  49.2k|    auto begin = format.data();
 7764|  49.2k|    auto it = begin;
 7765|  49.2k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   176k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 170k, False: 5.86k]
  ------------------
 7768|   170k|        const auto ch = *it++;
 7769|   170k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 54.6k, False: 115k]
  ------------------
 7770|  54.6k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  54.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  54.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 42.5k, False: 12.0k]
  ------------------
 7774|  42.5k|                return;
 7775|  42.5k|            }
 7776|  54.6k|        }
 7777|   115k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 1.97k, False: 113k]
  ------------------
 7778|  1.97k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 800, False: 1.17k]
  |  |  |  Branch (865:45): [True: 278, False: 1.69k]
  |  |  |  Branch (865:45): [True: 522, False: 1.17k]
  |  |  ------------------
  ------------------
 7779|    800|                handler.on_error("Unmatched '}' in format string");
 7780|    800|                return;
 7781|    800|            }
 7782|       |
 7783|  1.17k|            handler.on_literal_text(begin, it);
 7784|  1.17k|            begin = ++it;
 7785|  1.17k|        }
 7786|   170k|    }
 7787|       |
 7788|  5.86k|    handler.on_literal_text(begin, end);
 7789|  5.86k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|  54.6k|{
 7693|  54.6k|    struct id_adapter {
 7694|  54.6k|        constexpr void operator()()
 7695|  54.6k|        {
 7696|  54.6k|            arg_id = handler.on_arg_id();
 7697|  54.6k|        }
 7698|  54.6k|        constexpr void operator()(std::size_t id)
 7699|  54.6k|        {
 7700|  54.6k|            arg_id = handler.on_arg_id(id);
 7701|  54.6k|        }
 7702|       |
 7703|  54.6k|        constexpr void on_error(const char* msg)
 7704|  54.6k|        {
 7705|  54.6k|            SCN_UNLIKELY_ATTR
 7706|  54.6k|            handler.on_error(msg);
 7707|  54.6k|        }
 7708|       |
 7709|  54.6k|        Handler& handler;
 7710|  54.6k|        std::size_t arg_id;
 7711|  54.6k|    };
 7712|       |
 7713|  54.6k|    ++begin;
 7714|  54.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100, False: 54.5k]
  |  |  ------------------
  ------------------
 7715|    100|        handler.on_error("Unexpected end of replacement field");
 7716|    100|        return begin;
 7717|    100|    }
 7718|       |
 7719|  54.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 5.56k, False: 48.9k]
  ------------------
 7720|  5.56k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|  5.56k|    }
 7722|  48.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 6.61k, False: 42.3k]
  ------------------
 7723|  6.61k|        handler.on_literal_text(begin, begin + 1);
 7724|  6.61k|    }
 7725|  42.3k|    else {
 7726|  42.3k|        auto adapter = id_adapter{handler, 0};
 7727|  42.3k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  42.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 110, False: 42.2k]
  |  |  ------------------
  ------------------
 7730|    110|            handler.on_error("Missing '}' in format string");
 7731|    110|            return begin;
 7732|    110|        }
 7733|       |
 7734|  42.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 140, False: 42.1k]
  ------------------
 7735|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|    140|        }
 7737|  42.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 24.1k, False: 17.9k]
  ------------------
 7738|  24.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74, False: 24.0k]
  |  |  ------------------
  ------------------
 7739|     74|                handler.on_error("Unexpected end of replacement field");
 7740|     74|                return begin;
 7741|     74|            }
 7742|  24.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  24.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.85k, False: 21.2k]
  |  |  |  Branch (865:45): [True: 0, False: 24.0k]
  |  |  |  Branch (865:45): [True: 2.85k, False: 21.2k]
  |  |  ------------------
  ------------------
 7744|  2.85k|                handler.on_error("Unknown format specifier");
 7745|  2.85k|                return begin;
 7746|  2.85k|            }
 7747|  24.0k|        }
 7748|  17.9k|        else {
 7749|  17.9k|            SCN_UNLIKELY_ATTR
 7750|  17.9k|            handler.on_error("Missing '}' in format string");
 7751|  17.9k|            return begin;
 7752|  17.9k|        }
 7753|  42.2k|    }
 7754|  33.5k|    return begin + 1;
 7755|  54.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|  29.7k|    {
 8847|  29.7k|        return m_args.get(id);
 8848|  29.7k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|  29.3k|    {
 6315|  29.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 29.3k]
  |  |  ------------------
  ------------------
 6316|     42|            on_error(
 6317|     42|                "Cannot switch from manual to automatic argument indexing");
 6318|     42|            return 0;
 6319|     42|        }
 6320|       |
 6321|  29.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|  29.3k|        do_check_arg_id(id);
 6323|  29.3k|        return id;
 6324|  29.3k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6344|    112|    {
 6345|    112|        m_error = unexpected(detail::handle_error(
 6346|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6347|    112|        return m_error.error();
 6348|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|  29.7k|{
 6809|  29.7k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|  29.7k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|  29.7k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  42.3k|{
 7194|  42.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  42.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 42.3k, False: 0]
  |  Branch (7195:26): [True: 18.5k, False: 23.8k]
  ------------------
 7196|  18.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|  18.5k|    }
 7198|       |
 7199|  23.8k|    handler();
 7200|  23.8k|    return begin;
 7201|  42.3k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7163|  18.5k|{
 7164|  18.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7165|       |
 7166|  18.5k|    CharT c = *begin;
 7167|  18.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7167:9): [True: 17.8k, False: 682]
  |  Branch (7167:27): [True: 52, False: 630]
  ------------------
 7168|  17.9k|        handler.on_error("Invalid argument ID");
 7169|  17.9k|        return begin;
 7170|  17.9k|    }
 7171|       |
 7172|    630|    int idx = 0;
 7173|    630|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7173:9): [True: 306, False: 324]
  ------------------
 7174|    306|        idx = parse_simple_int(begin, end);
 7175|    306|    }
 7176|    324|    else {
 7177|    324|        ++begin;
 7178|    324|    }
 7179|       |
 7180|    630|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7180:9): [True: 110, False: 520]
  |  Branch (7180:26): [True: 380, False: 140]
  |  Branch (7180:50): [True: 72, False: 308]
  ------------------
 7181|    182|        handler.on_error("Invalid argument ID");
 7182|    182|        return begin;
 7183|    182|    }
 7184|    448|    handler(idx);
 7185|       |
 7186|    448|    return begin;
 7187|    630|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7704|  18.0k|        {
 7705|  18.0k|            SCN_UNLIKELY_ATTR
 7706|  18.0k|            handler.on_error(msg);
 7707|  18.0k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7142|  12.4k|{
 7143|  12.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  12.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  12.4k|    unsigned long long value = 0;
 7147|  26.1k|    do {
 7148|  26.1k|        value *= 10;
 7149|  26.1k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  26.1k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 116, False: 26.0k]
  ------------------
 7151|  26.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|    116|            return -1;
 7153|    116|        }
 7154|  26.0k|        ++begin;
 7155|  26.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 25.7k, False: 294]
  |  Branch (7155:30): [True: 24.2k, False: 1.51k]
  |  Branch (7155:47): [True: 13.7k, False: 10.4k]
  ------------------
 7156|  12.3k|    return static_cast<int>(value);
 7157|  12.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7699|    448|        {
 7700|    448|            arg_id = handler.on_arg_id(id);
 7701|    448|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6327|    448|    {
 6328|    448|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 378]
  |  |  ------------------
  ------------------
 6329|     70|            on_error(
 6330|     70|                "Cannot switch from manual to automatic argument indexing");
 6331|     70|            return;
 6332|     70|        }
 6333|    378|        m_next_arg_id = -1;
 6334|    378|        do_check_arg_id(id);
 6335|    378|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  23.8k|        {
 7696|  23.8k|            arg_id = handler.on_arg_id();
 7697|  23.8k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|  20.9k|    {
 6310|  20.9k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|  20.9k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|  44.9k|    {
 6299|  44.9k|        return m_format.data();
 6300|  44.9k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|  24.0k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  24.0k|    {
 7874|  24.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  24.0k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|  24.0k|{
 7609|  24.0k|    auto do_presentation = [&]() -> const CharT* {
 7610|  24.0k|        if (*begin == CharT{'['}) {
 7611|  24.0k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  24.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  24.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  24.0k|                return begin;
 7617|  24.0k|            }
 7618|  24.0k|            handler.on_character_set_string(set);
 7619|  24.0k|            return begin;
 7620|  24.0k|        }
 7621|  24.0k|        if (*begin == CharT{'/'}) {
 7622|  24.0k|            return parse_presentation_regex(begin, end, handler);
 7623|  24.0k|        }
 7624|  24.0k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  24.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  24.0k|            handler.on_error("Invalid type specifier in format string");
 7627|  24.0k|            return begin;
 7628|  24.0k|        }
 7629|  24.0k|        handler.on_type(type);
 7630|  24.0k|        return begin;
 7631|  24.0k|    };
 7632|       |
 7633|  24.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 22.9k, False: 1.08k]
  |  Branch (7633:28): [True: 2.42k, False: 20.5k]
  ------------------
 7634|  24.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 968, False: 1.45k]
  |  Branch (7634:36): [True: 934, False: 34]
  ------------------
 7635|    934|        return do_presentation();
 7636|    934|    }
 7637|       |
 7638|  23.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.1k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  23.1k|    begin = parse_align(begin, end, handler);
 7644|  23.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 126, False: 22.9k]
  |  |  ------------------
  ------------------
 7645|    126|        handler.on_error("Unexpected end of format string");
 7646|    126|        return begin;
 7647|    126|    }
 7648|       |
 7649|  22.9k|    begin = parse_width(begin, end, handler);
 7650|  22.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 22.8k]
  |  |  ------------------
  ------------------
 7651|    102|        handler.on_error("Unexpected end of format string");
 7652|    102|        return begin;
 7653|    102|    }
 7654|       |
 7655|  22.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 8.65k, False: 14.2k]
  ------------------
 7656|  8.65k|        ++begin;
 7657|  8.65k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 8.62k]
  |  |  ------------------
  ------------------
 7658|     34|            handler.on_error("Unexpected end of format string");
 7659|     34|            return begin;
 7660|     34|        }
 7661|  8.62k|        begin = parse_precision(begin, end, handler);
 7662|  8.62k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 114, False: 8.50k]
  |  |  ------------------
  ------------------
 7663|    114|            handler.on_error("Unexpected end of format string");
 7664|    114|            return begin;
 7665|    114|        }
 7666|  8.62k|    }
 7667|       |
 7668|  22.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 572, False: 22.1k]
  ------------------
 7669|    572|        handler.on_localized();
 7670|    572|        ++begin;
 7671|    572|    }
 7672|  22.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 22.6k]
  |  |  ------------------
  ------------------
 7673|     52|        handler.on_error("Unexpected end of format string");
 7674|     52|        return begin;
 7675|     52|    }
 7676|       |
 7677|  22.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 22.6k, False: 0]
  |  Branch (7677:25): [True: 17.1k, False: 5.57k]
  ------------------
 7678|  17.1k|        do_presentation();
 7679|  17.1k|    }
 7680|  22.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.92k, False: 20.7k]
  |  |  ------------------
  ------------------
 7681|  1.92k|        handler.on_error("Unexpected end of format string");
 7682|  1.92k|        return begin;
 7683|  1.92k|    }
 7684|       |
 7685|  20.7k|    return begin;
 7686|  22.6k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|  2.42k|{
 7258|  2.42k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 932, False: 1.49k]
  |  Branch (7258:33): [True: 880, False: 52]
  ------------------
 7259|  2.42k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 250, False: 1.29k]
  |  Branch (7259:33): [True: 88, False: 162]
  ------------------
 7260|  2.42k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|  18.0k|    auto do_presentation = [&]() -> const CharT* {
 7610|  18.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 10.8k, False: 7.16k]
  ------------------
 7611|  10.8k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  10.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 810, False: 10.0k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|    810|                return begin;
 7617|    810|            }
 7618|  10.0k|            handler.on_character_set_string(set);
 7619|  10.0k|            return begin;
 7620|  10.8k|        }
 7621|  7.16k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 1.67k, False: 5.49k]
  ------------------
 7622|  1.67k|            return parse_presentation_regex(begin, end, handler);
 7623|  1.67k|        }
 7624|  5.49k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  5.49k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 482, False: 5.01k]
  |  |  ------------------
  ------------------
 7626|    482|            handler.on_error("Invalid type specifier in format string");
 7627|    482|            return begin;
 7628|    482|        }
 7629|  5.01k|        handler.on_type(type);
 7630|  5.01k|        return begin;
 7631|  5.49k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  10.8k|{
 7448|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  10.8k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  10.8k|    auto start = begin;
 7452|  10.8k|    ++begin;
 7453|       |
 7454|  10.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 10.8k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|     42|        return {};
 7459|     42|    }
 7460|  10.8k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 2.24k, False: 8.60k]
  ------------------
 7461|  2.24k|        handler.on_charset_inverted();
 7462|  2.24k|        ++begin;
 7463|  2.24k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.21k]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|     34|            return {};
 7468|     34|        }
 7469|  2.21k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 52, False: 2.15k]
  ------------------
 7470|     52|            handler.on_charset_single(char32_t{']'});
 7471|     52|            ++begin;
 7472|     52|        }
 7473|  2.21k|    }
 7474|  8.60k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 34, False: 8.57k]
  ------------------
 7475|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|     34|    }
 7477|       |
 7478|  1.12M|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 1.12M, False: 484]
  ------------------
 7479|  1.12M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 216, False: 1.12M]
  |  |  ------------------
  ------------------
 7480|    216|            break;
 7481|    216|        }
 7482|       |
 7483|  1.12M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 10.0k, False: 1.11M]
  ------------------
 7484|  10.0k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  10.0k|        }
 7486|       |
 7487|  1.11M|        parse_presentation_set_literal(begin, end, handler);
 7488|  1.11M|    }
 7489|       |
 7490|    700|    SCN_UNLIKELY_ATTR
 7491|    700|    handler.on_error("Invalid [character set] specifier in format string");
 7492|    700|    return {};
 7493|  10.7k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7411|  1.11M|{
 7412|  1.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  1.11M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  1.11M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 94, False: 1.11M]
  |  |  ------------------
  ------------------
 7416|     94|        return;
 7417|     94|    }
 7418|       |
 7419|  1.11M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 1.11M, False: 188]
  |  Branch (7419:25): [True: 9.85k, False: 1.10M]
  |  Branch (7419:49): [True: 9.82k, False: 34]
  ------------------
 7420|  1.11M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 9.61k, False: 214]
  ------------------
 7421|  9.61k|        ++begin;
 7422|       |
 7423|  9.61k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  9.61k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  9.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 9.54k]
  |  |  ------------------
  ------------------
 7425|     70|            return;
 7426|     70|        }
 7427|       |
 7428|  9.54k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  9.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 9.50k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|     34|            return;
 7433|     34|        }
 7434|       |
 7435|  9.50k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  9.50k|        return;
 7437|  9.54k|    }
 7438|       |
 7439|  1.10M|    handler.on_charset_single(cp_first);
 7440|  1.10M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7387|  1.12M|{
 7388|  1.12M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  1.12M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  1.12M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96, False: 1.12M]
  |  |  |  Branch (865:45): [True: 70, False: 1.12M]
  |  |  |  Branch (865:45): [True: 26, False: 1.12M]
  |  |  ------------------
  ------------------
 7392|     96|        handler.on_error("Invalid encoding in format string");
 7393|     96|        return invalid_code_point;
 7394|     96|    }
 7395|       |
 7396|  1.12M|    const auto cp =
 7397|  1.12M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  1.12M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 1.12M]
  |  |  ------------------
  ------------------
 7399|     68|        handler.on_error("Invalid encoding in format string");
 7400|     68|        return invalid_code_point;
 7401|     68|    }
 7402|       |
 7403|  1.12M|    begin += len;
 7404|  1.12M|    return cp;
 7405|  1.12M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  10.0k|    {
 7102|  10.0k|        m_specs.charset_string_data = fmt.data();
 7103|  10.0k|        m_specs.charset_string_size = fmt.size();
 7104|  10.0k|        on_type(presentation_type::string_set);
 7105|  10.0k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7499|  1.67k|{
 7500|  1.67k|#if !SCN_DISABLE_REGEX
 7501|  1.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7502|  1.67k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7503|       |
 7504|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7505|       |                  std::is_same_v<CharT, wchar_t>) {
 7506|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7507|       |        return begin;
 7508|       |    }
 7509|       |
 7510|  1.67k|    auto start = begin;
 7511|  1.67k|    ++begin;
 7512|       |
 7513|  1.67k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.63k]
  |  |  ------------------
  ------------------
 7514|     34|        handler.on_error("Unexpected end of regex in format string");
 7515|     34|        return begin;
 7516|     34|    }
 7517|       |
 7518|  1.63k|    handler.on_type(presentation_type::regex);
 7519|  79.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7519:12): [True: 79.2k, False: 166]
  ------------------
 7520|  79.2k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7520:13): [True: 9.03k, False: 70.2k]
  ------------------
 7521|  9.03k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7521:17): [True: 1.47k, False: 7.55k]
  ------------------
 7522|  1.47k|                break;
 7523|  1.47k|            }
 7524|  7.55k|            else {
 7525|  7.55k|                handler.on_type(presentation_type::regex_escaped);
 7526|  7.55k|            }
 7527|  9.03k|        }
 7528|  79.2k|    }
 7529|  1.63k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 166, False: 1.47k]
  |  |  ------------------
  ------------------
 7530|    166|        handler.on_error("Unexpected end of regex in format string");
 7531|    166|        return begin;
 7532|    166|    }
 7533|       |
 7534|  1.47k|    auto regex_end = begin;
 7535|  1.47k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7536|  1.47k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.43k]
  |  |  ------------------
  ------------------
 7537|     34|        handler.on_error("Invalid (empty) regex in format string");
 7538|     34|        return begin;
 7539|     34|    }
 7540|  1.43k|    handler.on_regex_pattern(regex_pattern);
 7541|  1.43k|    ++begin;
 7542|       |
 7543|  1.43k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.40k]
  |  |  ------------------
  ------------------
 7544|     34|        handler.on_error("Unexpected end of regex in format string");
 7545|     34|        return begin;
 7546|     34|    }
 7547|       |
 7548|  1.40k|    regex_flags flags{regex_flags::none};
 7549|  1.40k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7550|  1.40k|        {{'m', regex_flags::multiline},
 7551|  1.40k|         {'s', regex_flags::singleline},
 7552|  1.40k|         {'i', regex_flags::nocase},
 7553|  1.40k|         {'n', regex_flags::nocapture}}};
 7554|  1.62k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7554:12): [True: 1.58k, False: 42]
  ------------------
 7555|  1.58k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7555:13): [True: 1.27k, False: 310]
  ------------------
 7556|  1.27k|            break;
 7557|  1.27k|        }
 7558|    310|        bool found_flag = false;
 7559|    874|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7559:24): [True: 874, False: 54]
  ------------------
 7560|    874|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7560:17): [True: 618, False: 256]
  ------------------
 7561|    618|                continue;
 7562|    618|            }
 7563|    256|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7563:17): [True: 34, False: 222]
  ------------------
 7564|     34|                handler.on_error("Flag set multiple times in regex");
 7565|     34|                return begin;
 7566|     34|            }
 7567|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7568|       |            if (*begin == CharT{'s'}) {
 7569|       |                // clang-format off
 7570|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7571|       |                // clang-format on
 7572|       |            }
 7573|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7574|       |            if (*begin == CharT{'m'}) {
 7575|       |                // clang-format off
 7576|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7577|       |                // clang-format on
 7578|       |            }
 7579|       |#endif
 7580|       |#endif
 7581|    222|            flags |= flag.second;
 7582|    222|            found_flag = true;
 7583|    222|            break;
 7584|    256|        }
 7585|    276|        if (!found_flag) {
  ------------------
  |  Branch (7585:13): [True: 54, False: 222]
  ------------------
 7586|     54|            handler.on_error("Invalid flag in regex");
 7587|     54|            return begin;
 7588|     54|        }
 7589|    276|    }
 7590|  1.31k|    handler.on_regex_flags(flags);
 7591|       |
 7592|  1.31k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 1.27k]
  |  |  ------------------
  ------------------
 7593|     42|        handler.on_error("Unexpected end of regex in format string");
 7594|     42|        return begin;
 7595|     42|    }
 7596|       |
 7597|  1.27k|    return begin;
 7598|       |#else
 7599|       |    handler.on_error("Regular expression support is disabled");
 7600|       |    return {};
 7601|       |#endif
 7602|  1.31k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7109|  1.43k|    {
 7110|  1.43k|        m_specs.charset_string_data = pattern.data();
 7111|  1.43k|        m_specs.charset_string_size = pattern.size();
 7112|  1.43k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|  5.49k|{
 7206|  5.49k|    switch (type) {
 7207|    142|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 142, False: 5.35k]
  ------------------
 7208|    194|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 52, False: 5.44k]
  ------------------
 7209|    194|            return presentation_type::int_binary;
 7210|    126|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 126, False: 5.36k]
  ------------------
 7211|    126|            return presentation_type::int_decimal;
 7212|    196|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 196, False: 5.29k]
  ------------------
 7213|    196|            return presentation_type::int_generic;
 7214|     88|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 88, False: 5.40k]
  ------------------
 7215|     88|            return presentation_type::int_unsigned_decimal;
 7216|    178|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 178, False: 5.31k]
  ------------------
 7217|    178|            return presentation_type::int_octal;
 7218|     98|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 98, False: 5.39k]
  ------------------
 7219|    150|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 52, False: 5.44k]
  ------------------
 7220|    150|            return presentation_type::int_hex;
 7221|     34|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 34, False: 5.46k]
  ------------------
 7222|     68|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 34, False: 5.46k]
  ------------------
 7223|     68|            return presentation_type::int_arbitrary_base;
 7224|    124|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 124, False: 5.37k]
  ------------------
 7225|    230|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 106, False: 5.38k]
  ------------------
 7226|    230|            return presentation_type::float_hex;
 7227|     88|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 88, False: 5.40k]
  ------------------
 7228|    230|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 142, False: 5.35k]
  ------------------
 7229|    230|            return presentation_type::float_scientific;
 7230|    214|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 214, False: 5.28k]
  ------------------
 7231|    320|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 106, False: 5.38k]
  ------------------
 7232|    320|            return presentation_type::float_fixed;
 7233|    150|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 150, False: 5.34k]
  ------------------
 7234|    226|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 76, False: 5.41k]
  ------------------
 7235|    226|            return presentation_type::float_general;
 7236|  2.32k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 2.32k, False: 3.17k]
  ------------------
 7237|  2.32k|            return presentation_type::string;
 7238|    574|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 574, False: 4.92k]
  ------------------
 7239|    574|            return presentation_type::character;
 7240|     34|        case '?':
  ------------------
  |  Branch (7240:9): [True: 34, False: 5.46k]
  ------------------
 7241|     34|            return presentation_type::escaped_character;
 7242|     78|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 78, False: 5.41k]
  ------------------
 7243|     78|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 5.49k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 5.49k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|    482|        default:
  ------------------
  |  Branch (7250:9): [True: 482, False: 5.01k]
  ------------------
 7251|    482|            return presentation_type::none;
 7252|  5.49k|    }
 7253|  5.49k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|  23.1k|{
 7283|  23.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  23.1k|    auto check_align = [](wchar_t ch) {
 7286|  23.1k|        switch (ch) {
 7287|  23.1k|            case L'<':
 7288|  23.1k|                return align_type::left;
 7289|  23.1k|            case L'>':
 7290|  23.1k|                return align_type::right;
 7291|  23.1k|            case L'^':
 7292|  23.1k|                return align_type::center;
 7293|  23.1k|            default:
 7294|  23.1k|                return align_type::none;
 7295|  23.1k|        }
 7296|  23.1k|    };
 7297|       |
 7298|  23.1k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  23.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 23.0k]
  |  |  |  Branch (865:45): [True: 38, False: 23.0k]
  |  |  |  Branch (865:45): [True: 4, False: 23.0k]
  |  |  ------------------
  ------------------
 7300|  23.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|     42|        handler.on_error("Invalid encoding in fill character");
 7302|     42|        return begin;
 7303|     42|    }
 7304|       |
 7305|  23.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  23.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  23.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  23.0k|    const auto begin_before_fill = begin;
 7310|  23.0k|    begin += potential_fill_len;
 7311|       |
 7312|  23.0k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 1.04k, False: 22.0k]
  ------------------
 7313|  1.04k|        return begin_before_fill;
 7314|  1.04k|    }
 7315|       |
 7316|  22.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  22.0k|    const auto begin_after_fill = begin;
 7318|  22.0k|    ++begin;
 7319|       |
 7320|  22.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 19.8k, False: 2.23k]
  ------------------
 7321|  19.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60, False: 19.7k]
  |  |  ------------------
  ------------------
 7322|     60|            handler.on_error("Invalid fill character '{' in format string");
 7323|     60|            return begin;
 7324|     60|        }
 7325|  19.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 7.79k, False: 11.9k]
  ------------------
 7326|  7.79k|            return begin_before_fill;
 7327|  7.79k|        }
 7328|  19.7k|    }
 7329|       |
 7330|  14.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 11.7k, False: 2.40k]
  ------------------
 7331|  11.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 2.11k, False: 9.67k]
  ------------------
 7332|  2.11k|            handler.on_align(potential_align_on_fill);
 7333|  2.11k|            return begin_after_fill;
 7334|  2.11k|        }
 7335|  9.67k|        return begin_before_fill;
 7336|  11.7k|    }
 7337|       |
 7338|  2.40k|    handler.on_fill(potential_fill);
 7339|  2.40k|    handler.on_align(potential_align_after_fill);
 7340|  2.40k|    return begin;
 7341|  14.1k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|  23.1k|{
 7265|  23.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|  23.1k|    else {
 7270|  23.1k|        const auto lengths =
 7271|  23.1k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|  23.1k|            "\3\4";
 7273|  23.1k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|  23.1k|        return len;
 7275|  23.1k|    }
 7276|  23.1k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  45.1k|    auto check_align = [](wchar_t ch) {
 7286|  45.1k|        switch (ch) {
 7287|  1.48k|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 1.48k, False: 43.6k]
  ------------------
 7288|  1.48k|                return align_type::left;
 7289|    922|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 922, False: 44.1k]
  ------------------
 7290|    922|                return align_type::right;
 7291|  3.13k|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 3.13k, False: 41.9k]
  ------------------
 7292|  3.13k|                return align_type::center;
 7293|  39.5k|            default:
  ------------------
  |  Branch (7293:13): [True: 39.5k, False: 5.54k]
  ------------------
 7294|  39.5k|                return align_type::none;
 7295|  45.1k|        }
 7296|  45.1k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7022|  2.40k|    {
 7023|  2.40k|        m_specs.fill = fill;
 7024|  2.40k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6903|  2.40k|    {
 6904|  2.40k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6905|  2.40k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6906|  2.40k|        if constexpr (sizeof(CharT) == 1) {
 6907|  8.64k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6907:32): [True: 6.23k, False: 2.40k]
  ------------------
 6908|  6.23k|                SCN_GCC_PUSH
 6909|  6.23k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6910|  6.23k|                m_data[i] = s[i];
 6911|  6.23k|                SCN_GCC_POP
 6912|  6.23k|            }
 6913|  2.40k|            m_size = static_cast<unsigned char>(s.size());
 6914|       |        }
 6915|       |        else if constexpr (sizeof(CharT) == 2) {
 6916|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6917|       |            m_data[1] =
 6918|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6919|       |            if (s.size() == 1) {
 6920|       |                return;
 6921|       |            }
 6922|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6923|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6924|       |        }
 6925|       |        else {
 6926|       |            const auto front = static_cast<unsigned>(s.front());
 6927|       |            m_data[0] = static_cast<char>(front);
 6928|       |            m_data[1] = static_cast<char>(front >> 8);
 6929|       |            m_data[2] = static_cast<char>(front >> 16);
 6930|       |            m_data[3] = static_cast<char>(front >> 24);
 6931|       |        }
 6932|  2.40k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|  22.9k|{
 7348|  22.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  22.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 13.9k, False: 9.07k]
  |  Branch (7350:33): [True: 3.58k, False: 10.3k]
  ------------------
 7351|  3.58k|        int width = parse_simple_int(begin, end);
 7352|  3.58k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.55k, False: 34]
  |  |  ------------------
  ------------------
 7353|  3.55k|            handler.on_width(width);
 7354|  3.55k|        }
 7355|     34|        else {
 7356|     34|            handler.on_error("Invalid field width");
 7357|     34|            return begin;
 7358|     34|        }
 7359|  3.58k|    }
 7360|  22.9k|    return begin;
 7361|  22.9k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7367|  8.62k|{
 7368|  8.62k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7369|       |
 7370|  8.62k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7370:9): [True: 8.58k, False: 40]
  |  Branch (7370:33): [True: 8.53k, False: 52]
  ------------------
 7371|  8.53k|        int prec = parse_simple_int(begin, end);
 7372|  8.53k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  8.53k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.48k, False: 48]
  |  |  ------------------
  ------------------
 7373|  8.48k|            handler.on_precision(prec);
 7374|  8.48k|        }
 7375|     48|        else {
 7376|     48|            handler.on_error("Invalid field precision");
 7377|     48|            return begin;
 7378|     48|        }
 7379|  8.53k|    }
 7380|  8.57k|    return begin;
 7381|  8.62k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|    572|    {
 7879|    572|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|    572|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 514, False: 58]
  ------------------
 7881|    572|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 456, False: 58]
  ------------------
 7882|    572|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 398, False: 58]
  ------------------
 7883|    572|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 340, False: 58]
  ------------------
 7884|    340|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|    340|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|    340|        }
 7889|       |
 7890|    232|        Handler::on_localized();
 7891|    232|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7027|    496|    {
 7028|    496|        if constexpr (!SCN_DISABLE_LOCALE) {
 7029|    496|            m_specs.localized = true;
 7030|       |        }
 7031|       |        else {
 7032|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7033|       |        }
 7034|    496|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  20.7k|{
 9324|  20.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  20.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  20.7k|{
 9225|  20.7k|#define SCN_VISIT(Type)                                                \
 9226|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  20.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  20.7k|    }                                                                  \
 9229|  20.7k|    else {                                                             \
 9230|  20.7k|        return vis(monostate_val);                                     \
 9231|  20.7k|    }
 9232|       |
 9233|  20.7k|    monostate monostate_val{};
 9234|       |
 9235|  20.7k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 20.7k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 20.7k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|  2.33k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 2.33k, False: 18.4k]
  ------------------
 9241|  2.33k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  2.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.33k|    }                                                                  \
  |  | 9229|  2.33k|    else {                                                             \
  |  | 9230|  2.33k|        return vis(monostate_val);                                     \
  |  | 9231|  2.33k|    }
  ------------------
 9242|  2.33k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 20.7k]
  ------------------
 9243|  2.33k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  2.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.33k|    }                                                                  \
  |  | 9229|  2.33k|    else {                                                             \
  |  | 9230|  2.33k|        return vis(monostate_val);                                     \
  |  | 9231|  2.33k|    }
  ------------------
 9244|  2.33k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 20.7k]
  ------------------
 9245|  2.33k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  2.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.33k|    }                                                                  \
  |  | 9229|  2.33k|    else {                                                             \
  |  | 9230|  2.33k|        return vis(monostate_val);                                     \
  |  | 9231|  2.33k|    }
  ------------------
 9246|  2.33k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 20.7k]
  ------------------
 9247|  2.33k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  2.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.33k|    }                                                                  \
  |  | 9229|  2.33k|    else {                                                             \
  |  | 9230|  2.33k|        return vis(monostate_val);                                     \
  |  | 9231|  2.33k|    }
  ------------------
 9248|  2.33k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 20.7k]
  ------------------
 9249|  2.33k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  2.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.33k|    }                                                                  \
  |  | 9229|  2.33k|    else {                                                             \
  |  | 9230|  2.33k|        return vis(monostate_val);                                     \
  |  | 9231|  2.33k|    }
  ------------------
 9250|  4.66k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 2.33k, False: 18.4k]
  ------------------
 9251|  4.66k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  4.66k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.66k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.66k|    }                                                                  \
  |  | 9229|  4.66k|    else {                                                             \
  |  | 9230|  4.66k|        return vis(monostate_val);                                     \
  |  | 9231|  4.66k|    }
  ------------------
 9252|  4.66k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 20.7k]
  ------------------
 9253|  4.66k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  4.66k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.66k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.66k|    }                                                                  \
  |  | 9229|  4.66k|    else {                                                             \
  |  | 9230|  4.66k|        return vis(monostate_val);                                     \
  |  | 9231|  4.66k|    }
  ------------------
 9254|  4.66k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 20.7k]
  ------------------
 9255|  4.66k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  4.66k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.66k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.66k|    }                                                                  \
  |  | 9229|  4.66k|    else {                                                             \
  |  | 9230|  4.66k|        return vis(monostate_val);                                     \
  |  | 9231|  4.66k|    }
  ------------------
 9256|  6.95k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 2.28k, False: 18.4k]
  ------------------
 9257|  6.95k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  6.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  6.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  6.95k|    }                                                                  \
  |  | 9229|  6.95k|    else {                                                             \
  |  | 9230|  6.95k|        return vis(monostate_val);                                     \
  |  | 9231|  6.95k|    }
  ------------------
 9258|  9.29k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 2.33k, False: 18.4k]
  ------------------
 9259|  9.29k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  9.29k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  9.29k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  9.29k|    }                                                                  \
  |  | 9229|  9.29k|    else {                                                             \
  |  | 9230|  9.29k|        return vis(monostate_val);                                     \
  |  | 9231|  9.29k|    }
  ------------------
 9260|  11.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 2.28k, False: 18.4k]
  ------------------
 9261|  11.5k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  11.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.5k|    }                                                                  \
  |  | 9229|  11.5k|    else {                                                             \
  |  | 9230|  11.5k|        return vis(monostate_val);                                     \
  |  | 9231|  11.5k|    }
  ------------------
 9262|  11.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 20.7k]
  ------------------
 9263|  11.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  11.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.5k|    }                                                                  \
  |  | 9229|  11.5k|    else {                                                             \
  |  | 9230|  11.5k|        return vis(monostate_val);                                     \
  |  | 9231|  11.5k|    }
  ------------------
 9264|  11.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 20.7k]
  ------------------
 9265|  11.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  11.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.5k|    }                                                                  \
  |  | 9229|  11.5k|    else {                                                             \
  |  | 9230|  11.5k|        return vis(monostate_val);                                     \
  |  | 9231|  11.5k|    }
  ------------------
 9266|  11.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 20.7k]
  ------------------
 9267|  11.5k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  11.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.5k|    }                                                                  \
  |  | 9229|  11.5k|    else {                                                             \
  |  | 9230|  11.5k|        return vis(monostate_val);                                     \
  |  | 9231|  11.5k|    }
  ------------------
 9268|  13.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 2.33k, False: 18.4k]
  ------------------
 9269|  13.9k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  13.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  13.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  13.9k|    }                                                                  \
  |  | 9229|  13.9k|    else {                                                             \
  |  | 9230|  13.9k|        return vis(monostate_val);                                     \
  |  | 9231|  13.9k|    }
  ------------------
 9270|  13.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 20.7k]
  ------------------
 9271|  13.9k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  13.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  13.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  13.9k|    }                                                                  \
  |  | 9229|  13.9k|    else {                                                             \
  |  | 9230|  13.9k|        return vis(monostate_val);                                     \
  |  | 9231|  13.9k|    }
  ------------------
 9272|  16.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 2.28k, False: 18.4k]
  ------------------
 9273|  16.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  16.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.2k|    }                                                                  \
  |  | 9229|  16.2k|    else {                                                             \
  |  | 9230|  16.2k|        return vis(monostate_val);                                     \
  |  | 9231|  16.2k|    }
  ------------------
 9274|  18.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 2.28k, False: 18.4k]
  ------------------
 9275|  18.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  18.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  18.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  18.4k|    }                                                                  \
  |  | 9229|  18.4k|    else {                                                             \
  |  | 9230|  18.4k|        return vis(monostate_val);                                     \
  |  | 9231|  18.4k|    }
  ------------------
 9276|  18.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 20.7k]
  ------------------
 9277|  18.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  18.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  18.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  18.4k|    }                                                                  \
  |  | 9229|  18.4k|    else {                                                             \
  |  | 9230|  18.4k|        return vis(monostate_val);                                     \
  |  | 9231|  18.4k|    }
  ------------------
 9278|  20.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 2.28k, False: 18.4k]
  ------------------
 9279|  20.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  20.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  20.7k|    }                                                                  \
  |  | 9229|  20.7k|    else {                                                             \
  |  | 9230|  20.7k|        return vis(monostate_val);                                     \
  |  | 9231|  20.7k|    }
  ------------------
 9280|  20.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 20.7k]
  ------------------
 9281|  20.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  20.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  20.7k|    }                                                                  \
  |  | 9229|  20.7k|    else {                                                             \
  |  | 9230|  20.7k|        return vis(monostate_val);                                     \
  |  | 9231|  20.7k|    }
  ------------------
 9282|  20.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 20.7k]
  ------------------
 9283|  20.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  20.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  20.7k|    }                                                                  \
  |  | 9229|  20.7k|    else {                                                             \
  |  | 9230|  20.7k|        return vis(monostate_val);                                     \
  |  | 9231|  20.7k|    }
  ------------------
 9284|       |
 9285|  20.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 20.7k]
  ------------------
 9286|  20.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  20.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  20.7k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 20.7k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 20.7k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  20.7k|            SCN_CLANG_POP
 9303|  20.7k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  13.9k|    {
 3480|  13.9k|        return m_iterator;
 3481|  13.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|  3.09k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.09k|    {
 1572|  3.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  3.09k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.09k|    {
  442|  3.09k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.47k|    {
 1316|  3.47k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  10.4k|    {
 3484|  10.4k|        return m_sentinel;
 3485|  10.4k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1615|    382|        : base(unexpect, std::move(e.error())),
 1616|    382|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    382|    {
 1618|    382|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    382|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    382|          m_has_value(false)
  451|    382|    {
  452|    382|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  6.95k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.95k|    static_cast<    \
  |  |  935|  6.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.95k|    static_cast<    \
  |  |  935|  6.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.95k|    {
 3466|  6.95k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1739|  1.24k|    {
 1740|  1.24k|        return has_value();
 1741|  1.24k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  7.39k|    {
  490|  7.39k|        return m_has_value;
  491|  7.39k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1794|  1.68k|    {
 1795|  1.68k|        return value();
 1796|  1.68k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  3.67k|    {
 1769|  3.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.67k|        return this->get_value();
 1771|  3.67k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  3.67k|    {
  456|  3.67k|        return m_value;
  457|  3.67k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|  2.23k|    {
 1979|  2.23k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.23k|                                            std::forward<F>(f));
 1981|  2.23k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|  2.23k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.23k|    else {
 1472|  2.23k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.23k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.99k, False: 238]
  |  |  ------------------
  ------------------
 1474|  2.23k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.23k|                   : result(unexpect,
 1476|    238|                            trivial_invoke(std::forward<F>(f),
 1477|    238|                                           std::forward<Exp>(exp).error()));
 1478|  2.23k|    }
 1479|  2.23k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  1.99k|    {
 1805|  1.99k|        return std::move(value());
 1806|  1.99k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|  1.99k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.99k|    {
 1572|  1.99k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.99k|    {
  442|  1.99k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.23k|    {
 1316|  2.23k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1755|    238|    {
 1756|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    238|        return std::move(this->get_unexpected().error());
 1758|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1625|    238|        : base(unexpect, std::forward<Args>(args)...),
 1626|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    238|    {
 1628|    238|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    238|          m_has_value(false)
  451|    238|    {
  452|    238|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|  2.23k|    {
 1740|  2.23k|        return has_value();
 1741|  2.23k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.47k|    {
  490|  4.47k|        return m_has_value;
  491|  4.47k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1745|    238|    {
 1746|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    238|        return this->get_unexpected().error();
 1748|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  1.99k|    {
 1805|  1.99k|        return std::move(value());
 1806|  1.99k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  1.99k|    {
 1769|  1.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.99k|        return this->get_value();
 1771|  1.99k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.99k|    {
  456|  1.99k|        return m_value;
  457|  1.99k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  98.5k|    {
 6182|  98.5k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  98.5k|        return static_cast<std::size_t>(m_desc &
 6187|  98.5k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  98.5k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|   116k|    {
 6208|   116k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   116k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  18.2k|    {
 6150|  18.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  18.2k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 18.1k]
  |  |  ------------------
  ------------------
 6158|     68|            return {};
 6159|     68|        }
 6160|       |
 6161|  18.1k|        const auto t = type(id);
 6162|  18.1k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.00k, False: 17.1k]
  |  |  ------------------
  ------------------
 6163|  1.00k|            return {};
 6164|  1.00k|        }
 6165|       |
 6166|  17.1k|        basic_scan_arg<Context> arg;
 6167|  17.1k|        arg.m_type = t;
 6168|  17.1k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 17.1k, False: 0]
  ------------------
 6169|  17.1k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  17.1k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  17.1k|        return arg;
 6175|  18.1k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  18.2k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  18.1k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  18.1k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  18.1k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  18.1k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  18.1k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  17.1k|    {
 6212|  17.1k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  17.1k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  33.6k|    {
 5966|  33.6k|        return m_type != detail::arg_type::none_type;
 5967|  33.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  4.39k|{
 9324|  4.39k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  4.39k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  4.39k|{
 9225|  4.39k|#define SCN_VISIT(Type)                                                \
 9226|  4.39k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  4.39k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  4.39k|    }                                                                  \
 9229|  4.39k|    else {                                                             \
 9230|  4.39k|        return vis(monostate_val);                                     \
 9231|  4.39k|    }
 9232|       |
 9233|  4.39k|    monostate monostate_val{};
 9234|       |
 9235|  4.39k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.39k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.39k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|    488|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 488, False: 3.90k]
  ------------------
 9241|    488|            SCN_VISIT(int);
  ------------------
  |  | 9226|    488|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    488|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    488|    }                                                                  \
  |  | 9229|    488|    else {                                                             \
  |  | 9230|    488|        return vis(monostate_val);                                     \
  |  | 9231|    488|    }
  ------------------
 9242|    488|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.39k]
  ------------------
 9243|    488|            SCN_VISIT(long);
  ------------------
  |  | 9226|    488|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    488|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    488|    }                                                                  \
  |  | 9229|    488|    else {                                                             \
  |  | 9230|    488|        return vis(monostate_val);                                     \
  |  | 9231|    488|    }
  ------------------
 9244|    488|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.39k]
  ------------------
 9245|    488|            SCN_VISIT(long long);
  ------------------
  |  | 9226|    488|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    488|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    488|    }                                                                  \
  |  | 9229|    488|    else {                                                             \
  |  | 9230|    488|        return vis(monostate_val);                                     \
  |  | 9231|    488|    }
  ------------------
 9246|    488|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.39k]
  ------------------
 9247|    488|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|    488|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    488|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    488|    }                                                                  \
  |  | 9229|    488|    else {                                                             \
  |  | 9230|    488|        return vis(monostate_val);                                     \
  |  | 9231|    488|    }
  ------------------
 9248|    488|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.39k]
  ------------------
 9249|    488|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|    488|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    488|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    488|    }                                                                  \
  |  | 9229|    488|    else {                                                             \
  |  | 9230|    488|        return vis(monostate_val);                                     \
  |  | 9231|    488|    }
  ------------------
 9250|    976|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 488, False: 3.90k]
  ------------------
 9251|    976|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|    976|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    976|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    976|    }                                                                  \
  |  | 9229|    976|    else {                                                             \
  |  | 9230|    976|        return vis(monostate_val);                                     \
  |  | 9231|    976|    }
  ------------------
 9252|    976|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.39k]
  ------------------
 9253|    976|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|    976|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    976|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    976|    }                                                                  \
  |  | 9229|    976|    else {                                                             \
  |  | 9230|    976|        return vis(monostate_val);                                     \
  |  | 9231|    976|    }
  ------------------
 9254|    976|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.39k]
  ------------------
 9255|    976|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|    976|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|    976|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|    976|    }                                                                  \
  |  | 9229|    976|    else {                                                             \
  |  | 9230|    976|        return vis(monostate_val);                                     \
  |  | 9231|    976|    }
  ------------------
 9256|  1.46k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 488, False: 3.90k]
  ------------------
 9257|  1.46k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  1.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.46k|    }                                                                  \
  |  | 9229|  1.46k|    else {                                                             \
  |  | 9230|  1.46k|        return vis(monostate_val);                                     \
  |  | 9231|  1.46k|    }
  ------------------
 9258|  1.95k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 488, False: 3.90k]
  ------------------
 9259|  1.95k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  1.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.95k|    }                                                                  \
  |  | 9229|  1.95k|    else {                                                             \
  |  | 9230|  1.95k|        return vis(monostate_val);                                     \
  |  | 9231|  1.95k|    }
  ------------------
 9260|  1.95k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 4.39k]
  ------------------
 9261|  1.95k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  1.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.95k|    }                                                                  \
  |  | 9229|  1.95k|    else {                                                             \
  |  | 9230|  1.95k|        return vis(monostate_val);                                     \
  |  | 9231|  1.95k|    }
  ------------------
 9262|  2.44k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 488, False: 3.90k]
  ------------------
 9263|  2.44k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.44k|    }                                                                  \
  |  | 9229|  2.44k|    else {                                                             \
  |  | 9230|  2.44k|        return vis(monostate_val);                                     \
  |  | 9231|  2.44k|    }
  ------------------
 9264|  2.44k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 4.39k]
  ------------------
 9265|  2.44k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.44k|    }                                                                  \
  |  | 9229|  2.44k|    else {                                                             \
  |  | 9230|  2.44k|        return vis(monostate_val);                                     \
  |  | 9231|  2.44k|    }
  ------------------
 9266|  2.44k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 4.39k]
  ------------------
 9267|  2.44k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.44k|    }                                                                  \
  |  | 9229|  2.44k|    else {                                                             \
  |  | 9230|  2.44k|        return vis(monostate_val);                                     \
  |  | 9231|  2.44k|    }
  ------------------
 9268|  2.92k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 488, False: 3.90k]
  ------------------
 9269|  2.92k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  2.92k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.92k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.92k|    }                                                                  \
  |  | 9229|  2.92k|    else {                                                             \
  |  | 9230|  2.92k|        return vis(monostate_val);                                     \
  |  | 9231|  2.92k|    }
  ------------------
 9270|  2.92k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 4.39k]
  ------------------
 9271|  2.92k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  2.92k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.92k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.92k|    }                                                                  \
  |  | 9229|  2.92k|    else {                                                             \
  |  | 9230|  2.92k|        return vis(monostate_val);                                     \
  |  | 9231|  2.92k|    }
  ------------------
 9272|  2.92k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 4.39k]
  ------------------
 9273|  2.92k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  2.92k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.92k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.92k|    }                                                                  \
  |  | 9229|  2.92k|    else {                                                             \
  |  | 9230|  2.92k|        return vis(monostate_val);                                     \
  |  | 9231|  2.92k|    }
  ------------------
 9274|  3.41k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 488, False: 3.90k]
  ------------------
 9275|  3.41k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  3.41k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.41k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.41k|    }                                                                  \
  |  | 9229|  3.41k|    else {                                                             \
  |  | 9230|  3.41k|        return vis(monostate_val);                                     \
  |  | 9231|  3.41k|    }
  ------------------
 9276|  3.90k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 488, False: 3.90k]
  ------------------
 9277|  3.90k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  3.90k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.90k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.90k|    }                                                                  \
  |  | 9229|  3.90k|    else {                                                             \
  |  | 9230|  3.90k|        return vis(monostate_val);                                     \
  |  | 9231|  3.90k|    }
  ------------------
 9278|  4.39k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 488, False: 3.90k]
  ------------------
 9279|  4.39k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  4.39k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.39k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.39k|    }                                                                  \
  |  | 9229|  4.39k|    else {                                                             \
  |  | 9230|  4.39k|        return vis(monostate_val);                                     \
  |  | 9231|  4.39k|    }
  ------------------
 9280|  4.39k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 4.39k]
  ------------------
 9281|  4.39k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  4.39k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.39k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.39k|    }                                                                  \
  |  | 9229|  4.39k|    else {                                                             \
  |  | 9230|  4.39k|        return vis(monostate_val);                                     \
  |  | 9231|  4.39k|    }
  ------------------
 9282|  4.39k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 4.39k]
  ------------------
 9283|  4.39k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  4.39k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.39k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.39k|    }                                                                  \
  |  | 9229|  4.39k|    else {                                                             \
  |  | 9230|  4.39k|        return vis(monostate_val);                                     \
  |  | 9231|  4.39k|    }
  ------------------
 9284|       |
 9285|  4.39k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 4.39k]
  ------------------
 9286|  4.39k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  4.39k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  4.39k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 4.39k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 4.39k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  4.39k|            SCN_CLANG_POP
 9303|  4.39k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  42.8k|{
 6011|  42.8k|    return arg.m_type;
 6012|  42.8k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  15.4k|{
 6023|  15.4k|    return arg.m_value;
 6024|  15.4k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|  98.5k|        : m_format{format},
 6280|  98.5k|          m_next_arg_id{next_arg_id},
 6281|  98.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  98.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  98.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  98.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  98.5k|    {
 6287|  98.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  98.5k|    {
 3075|  98.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  98.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  98.5k|    {
 3041|  98.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  98.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  98.5k|{
 7796|  98.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  98.5k|    handler.check_args_exhausted();
 7798|  98.5k|    return handler.get_error();
 7799|  98.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  98.5k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  98.5k|    auto begin = format.data();
 7764|  98.5k|    auto it = begin;
 7765|  98.5k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   202M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 202M, False: 34.3k]
  ------------------
 7768|   202M|        const auto ch = *it++;
 7769|   202M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 24.1k, False: 202M]
  ------------------
 7770|  24.1k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  24.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  24.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 14.7k, False: 9.41k]
  ------------------
 7774|  14.7k|                return;
 7775|  14.7k|            }
 7776|  24.1k|        }
 7777|   202M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 50.1k, False: 202M]
  ------------------
 7778|  50.1k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.4k, False: 710]
  |  |  |  Branch (865:45): [True: 112, False: 50.0k]
  |  |  |  Branch (865:45): [True: 49.3k, False: 710]
  |  |  ------------------
  ------------------
 7779|  49.4k|                handler.on_error("Unmatched '}' in format string");
 7780|  49.4k|                return;
 7781|  49.4k|            }
 7782|       |
 7783|    710|            handler.on_literal_text(begin, it);
 7784|    710|            begin = ++it;
 7785|    710|        }
 7786|   202M|    }
 7787|       |
 7788|  34.3k|    handler.on_literal_text(begin, end);
 7789|  34.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|  24.1k|{
 7693|  24.1k|    struct id_adapter {
 7694|  24.1k|        constexpr void operator()()
 7695|  24.1k|        {
 7696|  24.1k|            arg_id = handler.on_arg_id();
 7697|  24.1k|        }
 7698|  24.1k|        constexpr void operator()(std::size_t id)
 7699|  24.1k|        {
 7700|  24.1k|            arg_id = handler.on_arg_id(id);
 7701|  24.1k|        }
 7702|       |
 7703|  24.1k|        constexpr void on_error(const char* msg)
 7704|  24.1k|        {
 7705|  24.1k|            SCN_UNLIKELY_ATTR
 7706|  24.1k|            handler.on_error(msg);
 7707|  24.1k|        }
 7708|       |
 7709|  24.1k|        Handler& handler;
 7710|  24.1k|        std::size_t arg_id;
 7711|  24.1k|    };
 7712|       |
 7713|  24.1k|    ++begin;
 7714|  24.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 24.0k]
  |  |  ------------------
  ------------------
 7715|     70|        handler.on_error("Unexpected end of replacement field");
 7716|     70|        return begin;
 7717|     70|    }
 7718|       |
 7719|  24.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 4.35k, False: 19.6k]
  ------------------
 7720|  4.35k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|  4.35k|    }
 7722|  19.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 5.34k, False: 14.3k]
  ------------------
 7723|  5.34k|        handler.on_literal_text(begin, begin + 1);
 7724|  5.34k|    }
 7725|  14.3k|    else {
 7726|  14.3k|        auto adapter = id_adapter{handler, 0};
 7727|  14.3k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  14.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 112, False: 14.2k]
  |  |  ------------------
  ------------------
 7730|    112|            handler.on_error("Missing '}' in format string");
 7731|    112|            return begin;
 7732|    112|        }
 7733|       |
 7734|  14.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 158, False: 14.0k]
  ------------------
 7735|    158|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|    158|        }
 7737|  14.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 13.7k, False: 314]
  ------------------
 7738|  13.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 13.7k]
  |  |  ------------------
  ------------------
 7739|     50|                handler.on_error("Unexpected end of replacement field");
 7740|     50|                return begin;
 7741|     50|            }
 7742|  13.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  13.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.14k, False: 11.5k]
  |  |  |  Branch (865:45): [True: 0, False: 13.7k]
  |  |  |  Branch (865:45): [True: 2.14k, False: 11.5k]
  |  |  ------------------
  ------------------
 7744|  2.14k|                handler.on_error("Unknown format specifier");
 7745|  2.14k|                return begin;
 7746|  2.14k|            }
 7747|  13.7k|        }
 7748|    314|        else {
 7749|    314|            SCN_UNLIKELY_ATTR
 7750|    314|            handler.on_error("Missing '}' in format string");
 7751|    314|            return begin;
 7752|    314|        }
 7753|  14.2k|    }
 7754|  21.4k|    return begin + 1;
 7755|  24.0k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|  18.2k|    {
 8847|  18.2k|        return m_args.get(id);
 8848|  18.2k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|  16.8k|    {
 6315|  16.8k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 146, False: 16.6k]
  |  |  ------------------
  ------------------
 6316|    146|            on_error(
 6317|    146|                "Cannot switch from manual to automatic argument indexing");
 6318|    146|            return 0;
 6319|    146|        }
 6320|       |
 6321|  16.6k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|  16.6k|        do_check_arg_id(id);
 6323|  16.6k|        return id;
 6324|  16.8k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6344|    224|    {
 6345|    224|        m_error = unexpected(detail::handle_error(
 6346|    224|            scan_error{scan_error::invalid_format_string, msg}));
 6347|    224|        return m_error.error();
 6348|    224|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|  18.0k|{
 6809|  18.0k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|  18.0k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|  18.0k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  14.3k|{
 7194|  14.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  14.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 14.3k, False: 0]
  |  Branch (7195:26): [True: 1.89k, False: 12.4k]
  ------------------
 7196|  1.89k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|  1.89k|    }
 7198|       |
 7199|  12.4k|    handler();
 7200|  12.4k|    return begin;
 7201|  14.3k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7163|  1.89k|{
 7164|  1.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7165|       |
 7166|  1.89k|    CharT c = *begin;
 7167|  1.89k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7167:9): [True: 112, False: 1.77k]
  |  Branch (7167:27): [True: 130, False: 1.64k]
  ------------------
 7168|    242|        handler.on_error("Invalid argument ID");
 7169|    242|        return begin;
 7170|    242|    }
 7171|       |
 7172|  1.64k|    int idx = 0;
 7173|  1.64k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7173:9): [True: 284, False: 1.36k]
  ------------------
 7174|    284|        idx = parse_simple_int(begin, end);
 7175|    284|    }
 7176|  1.36k|    else {
 7177|  1.36k|        ++begin;
 7178|  1.36k|    }
 7179|       |
 7180|  1.64k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7180:9): [True: 112, False: 1.53k]
  |  Branch (7180:26): [True: 1.37k, False: 158]
  |  Branch (7180:50): [True: 72, False: 1.30k]
  ------------------
 7181|    184|        handler.on_error("Invalid argument ID");
 7182|    184|        return begin;
 7183|    184|    }
 7184|  1.46k|    handler(idx);
 7185|       |
 7186|  1.46k|    return begin;
 7187|  1.64k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7704|    426|        {
 7705|    426|            SCN_UNLIKELY_ATTR
 7706|    426|            handler.on_error(msg);
 7707|    426|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7142|  8.70k|{
 7143|  8.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  8.70k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  8.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  8.70k|    unsigned long long value = 0;
 7147|  12.7k|    do {
 7148|  12.7k|        value *= 10;
 7149|  12.7k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  12.7k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 102, False: 12.6k]
  ------------------
 7151|  12.7k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|    102|            return -1;
 7153|    102|        }
 7154|  12.6k|        ++begin;
 7155|  12.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 12.2k, False: 344]
  |  Branch (7155:30): [True: 11.7k, False: 470]
  |  Branch (7155:47): [True: 4.00k, False: 7.79k]
  ------------------
 7156|  8.60k|    return static_cast<int>(value);
 7157|  8.70k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7699|  1.46k|        {
 7700|  1.46k|            arg_id = handler.on_arg_id(id);
 7701|  1.46k|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6327|  1.46k|    {
 6328|  1.46k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 78, False: 1.38k]
  |  |  ------------------
  ------------------
 6329|     78|            on_error(
 6330|     78|                "Cannot switch from manual to automatic argument indexing");
 6331|     78|            return;
 6332|     78|        }
 6333|  1.38k|        m_next_arg_id = -1;
 6334|  1.38k|        do_check_arg_id(id);
 6335|  1.38k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  12.4k|        {
 7696|  12.4k|            arg_id = handler.on_arg_id();
 7697|  12.4k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|  11.1k|    {
 6310|  11.1k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|  11.1k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  24.8k|    {
 6299|  24.8k|        return m_format.data();
 6300|  24.8k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|  13.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  13.7k|    {
 7874|  13.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  13.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|  13.7k|{
 7609|  13.7k|    auto do_presentation = [&]() -> const CharT* {
 7610|  13.7k|        if (*begin == CharT{'['}) {
 7611|  13.7k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  13.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  13.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  13.7k|                return begin;
 7617|  13.7k|            }
 7618|  13.7k|            handler.on_character_set_string(set);
 7619|  13.7k|            return begin;
 7620|  13.7k|        }
 7621|  13.7k|        if (*begin == CharT{'/'}) {
 7622|  13.7k|            return parse_presentation_regex(begin, end, handler);
 7623|  13.7k|        }
 7624|  13.7k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  13.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  13.7k|            handler.on_error("Invalid type specifier in format string");
 7627|  13.7k|            return begin;
 7628|  13.7k|        }
 7629|  13.7k|        handler.on_type(type);
 7630|  13.7k|        return begin;
 7631|  13.7k|    };
 7632|       |
 7633|  13.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 12.5k, False: 1.15k]
  |  Branch (7633:28): [True: 2.73k, False: 9.82k]
  ------------------
 7634|  13.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 590, False: 2.14k]
  |  Branch (7634:36): [True: 538, False: 52]
  ------------------
 7635|    538|        return do_presentation();
 7636|    538|    }
 7637|       |
 7638|  13.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  13.1k|    begin = parse_align(begin, end, handler);
 7644|  13.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 13.0k]
  |  |  ------------------
  ------------------
 7645|    120|        handler.on_error("Unexpected end of format string");
 7646|    120|        return begin;
 7647|    120|    }
 7648|       |
 7649|  13.0k|    begin = parse_width(begin, end, handler);
 7650|  13.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 116, False: 12.9k]
  |  |  ------------------
  ------------------
 7651|    116|        handler.on_error("Unexpected end of format string");
 7652|    116|        return begin;
 7653|    116|    }
 7654|       |
 7655|  12.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 5.07k, False: 7.86k]
  ------------------
 7656|  5.07k|        ++begin;
 7657|  5.07k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 5.04k]
  |  |  ------------------
  ------------------
 7658|     34|            handler.on_error("Unexpected end of format string");
 7659|     34|            return begin;
 7660|     34|        }
 7661|  5.04k|        begin = parse_precision(begin, end, handler);
 7662|  5.04k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 134, False: 4.90k]
  |  |  ------------------
  ------------------
 7663|    134|            handler.on_error("Unexpected end of format string");
 7664|    134|            return begin;
 7665|    134|        }
 7666|  5.04k|    }
 7667|       |
 7668|  12.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 634, False: 12.1k]
  ------------------
 7669|    634|        handler.on_localized();
 7670|    634|        ++begin;
 7671|    634|    }
 7672|  12.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60, False: 12.7k]
  |  |  ------------------
  ------------------
 7673|     60|        handler.on_error("Unexpected end of format string");
 7674|     60|        return begin;
 7675|     60|    }
 7676|       |
 7677|  12.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 12.7k, False: 0]
  |  Branch (7677:25): [True: 8.11k, False: 4.60k]
  ------------------
 7678|  8.11k|        do_presentation();
 7679|  8.11k|    }
 7680|  12.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.41k, False: 11.3k]
  |  |  ------------------
  ------------------
 7681|  1.41k|        handler.on_error("Unexpected end of format string");
 7682|  1.41k|        return begin;
 7683|  1.41k|    }
 7684|       |
 7685|  11.3k|    return begin;
 7686|  12.7k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|  2.73k|{
 7258|  2.73k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 482, False: 2.25k]
  |  Branch (7258:33): [True: 448, False: 34]
  ------------------
 7259|  2.73k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 212, False: 2.07k]
  |  Branch (7259:33): [True: 142, False: 70]
  ------------------
 7260|  2.73k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|  8.64k|    auto do_presentation = [&]() -> const CharT* {
 7610|  8.64k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 3.95k, False: 4.69k]
  ------------------
 7611|  3.95k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  3.95k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 584, False: 3.37k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|    584|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|    584|                return begin;
 7617|    584|            }
 7618|  3.37k|            handler.on_character_set_string(set);
 7619|  3.37k|            return begin;
 7620|  3.95k|        }
 7621|  4.69k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 42, False: 4.65k]
  ------------------
 7622|     42|            return parse_presentation_regex(begin, end, handler);
 7623|     42|        }
 7624|  4.65k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  4.65k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 420, False: 4.23k]
  |  |  ------------------
  ------------------
 7626|    420|            handler.on_error("Invalid type specifier in format string");
 7627|    420|            return begin;
 7628|    420|        }
 7629|  4.23k|        handler.on_type(type);
 7630|  4.23k|        return begin;
 7631|  4.65k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  3.95k|{
 7448|  3.95k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  3.95k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  3.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  3.95k|    auto start = begin;
 7452|  3.95k|    ++begin;
 7453|       |
 7454|  3.95k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 3.92k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|     34|        return {};
 7459|     34|    }
 7460|  3.92k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 1.81k, False: 2.11k]
  ------------------
 7461|  1.81k|        handler.on_charset_inverted();
 7462|  1.81k|        ++begin;
 7463|  1.81k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.77k]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|     34|            return {};
 7468|     34|        }
 7469|  1.77k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 52, False: 1.72k]
  ------------------
 7470|     52|            handler.on_charset_single(char32_t{']'});
 7471|     52|            ++begin;
 7472|     52|        }
 7473|  1.77k|    }
 7474|  2.11k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 34, False: 2.07k]
  ------------------
 7475|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|     34|    }
 7477|       |
 7478|  30.1k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 29.7k, False: 326]
  ------------------
 7479|  29.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 29.6k]
  |  |  ------------------
  ------------------
 7480|    156|            break;
 7481|    156|        }
 7482|       |
 7483|  29.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 3.37k, False: 26.2k]
  ------------------
 7484|  3.37k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  3.37k|        }
 7486|       |
 7487|  26.2k|        parse_presentation_set_literal(begin, end, handler);
 7488|  26.2k|    }
 7489|       |
 7490|    482|    SCN_UNLIKELY_ATTR
 7491|    482|    handler.on_error("Invalid [character set] specifier in format string");
 7492|    482|    return {};
 7493|  3.85k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7411|  26.2k|{
 7412|  26.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  26.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  26.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 26.1k]
  |  |  ------------------
  ------------------
 7416|    120|        return;
 7417|    120|    }
 7418|       |
 7419|  26.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 26.0k, False: 94]
  |  Branch (7419:25): [True: 2.58k, False: 23.4k]
  |  Branch (7419:49): [True: 2.54k, False: 34]
  ------------------
 7420|  26.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 2.49k, False: 52]
  ------------------
 7421|  2.49k|        ++begin;
 7422|       |
 7423|  2.49k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  2.49k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.46k]
  |  |  ------------------
  ------------------
 7425|     34|            return;
 7426|     34|        }
 7427|       |
 7428|  2.46k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|     34|            return;
 7433|     34|        }
 7434|       |
 7435|  2.42k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  2.42k|        return;
 7437|  2.46k|    }
 7438|       |
 7439|  23.6k|    handler.on_charset_single(cp_first);
 7440|  23.6k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7387|  28.7k|{
 7388|  28.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  28.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  28.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.7k]
  |  |  |  Branch (865:45): [True: 0, False: 28.7k]
  |  |  |  Branch (865:45): [True: 0, False: 28.7k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  28.7k|    const auto cp =
 7397|  28.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  28.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 154, False: 28.6k]
  |  |  ------------------
  ------------------
 7399|    154|        handler.on_error("Invalid encoding in format string");
 7400|    154|        return invalid_code_point;
 7401|    154|    }
 7402|       |
 7403|  28.6k|    begin += len;
 7404|  28.6k|    return cp;
 7405|  28.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  3.37k|    {
 7102|  3.37k|        m_specs.charset_string_data = fmt.data();
 7103|  3.37k|        m_specs.charset_string_size = fmt.size();
 7104|  3.37k|        on_type(presentation_type::string_set);
 7105|  3.37k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7499|     42|{
 7500|     42|#if !SCN_DISABLE_REGEX
 7501|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7502|     42|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7503|       |
 7504|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7505|     42|                  std::is_same_v<CharT, wchar_t>) {
 7506|     42|        handler.on_error("Regex backend doesn't support wide strings as input");
 7507|     42|        return begin;
 7508|     42|    }
 7509|       |
 7510|      0|    auto start = begin;
 7511|     42|    ++begin;
 7512|       |
 7513|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7514|      0|        handler.on_error("Unexpected end of regex in format string");
 7515|      0|        return begin;
 7516|      0|    }
 7517|       |
 7518|     42|    handler.on_type(presentation_type::regex);
 7519|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7519:12): [True: 0, False: 42]
  ------------------
 7520|      0|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7520:13): [True: 0, False: 0]
  ------------------
 7521|      0|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7521:17): [True: 0, False: 0]
  ------------------
 7522|      0|                break;
 7523|      0|            }
 7524|      0|            else {
 7525|      0|                handler.on_type(presentation_type::regex_escaped);
 7526|      0|            }
 7527|      0|        }
 7528|      0|    }
 7529|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7530|      0|        handler.on_error("Unexpected end of regex in format string");
 7531|      0|        return begin;
 7532|      0|    }
 7533|       |
 7534|     42|    auto regex_end = begin;
 7535|     42|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7536|     42|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7537|      0|        handler.on_error("Invalid (empty) regex in format string");
 7538|      0|        return begin;
 7539|      0|    }
 7540|     42|    handler.on_regex_pattern(regex_pattern);
 7541|     42|    ++begin;
 7542|       |
 7543|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7544|      0|        handler.on_error("Unexpected end of regex in format string");
 7545|      0|        return begin;
 7546|      0|    }
 7547|       |
 7548|     42|    regex_flags flags{regex_flags::none};
 7549|     42|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7550|     42|        {{'m', regex_flags::multiline},
 7551|     42|         {'s', regex_flags::singleline},
 7552|     42|         {'i', regex_flags::nocase},
 7553|     42|         {'n', regex_flags::nocapture}}};
 7554|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7554:12): [True: 0, False: 42]
  ------------------
 7555|      0|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7555:13): [True: 0, False: 0]
  ------------------
 7556|      0|            break;
 7557|      0|        }
 7558|      0|        bool found_flag = false;
 7559|      0|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7559:24): [True: 0, False: 0]
  ------------------
 7560|      0|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7560:17): [True: 0, False: 0]
  ------------------
 7561|      0|                continue;
 7562|      0|            }
 7563|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7563:17): [True: 0, False: 0]
  ------------------
 7564|      0|                handler.on_error("Flag set multiple times in regex");
 7565|      0|                return begin;
 7566|      0|            }
 7567|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7568|       |            if (*begin == CharT{'s'}) {
 7569|       |                // clang-format off
 7570|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7571|       |                // clang-format on
 7572|       |            }
 7573|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7574|       |            if (*begin == CharT{'m'}) {
 7575|       |                // clang-format off
 7576|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7577|       |                // clang-format on
 7578|       |            }
 7579|       |#endif
 7580|       |#endif
 7581|      0|            flags |= flag.second;
 7582|      0|            found_flag = true;
 7583|      0|            break;
 7584|      0|        }
 7585|      0|        if (!found_flag) {
  ------------------
  |  Branch (7585:13): [True: 0, False: 0]
  ------------------
 7586|      0|            handler.on_error("Invalid flag in regex");
 7587|      0|            return begin;
 7588|      0|        }
 7589|      0|    }
 7590|     42|    handler.on_regex_flags(flags);
 7591|       |
 7592|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7593|      0|        handler.on_error("Unexpected end of regex in format string");
 7594|      0|        return begin;
 7595|      0|    }
 7596|       |
 7597|     42|    return begin;
 7598|       |#else
 7599|       |    handler.on_error("Regular expression support is disabled");
 7600|       |    return {};
 7601|       |#endif
 7602|     42|}
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|  4.65k|{
 7206|  4.65k|    switch (type) {
 7207|    232|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 232, False: 4.41k]
  ------------------
 7208|    284|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 52, False: 4.59k]
  ------------------
 7209|    284|            return presentation_type::int_binary;
 7210|    106|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 106, False: 4.54k]
  ------------------
 7211|    106|            return presentation_type::int_decimal;
 7212|    286|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 286, False: 4.36k]
  ------------------
 7213|    286|            return presentation_type::int_generic;
 7214|    178|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 178, False: 4.47k]
  ------------------
 7215|    178|            return presentation_type::int_unsigned_decimal;
 7216|    196|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 196, False: 4.45k]
  ------------------
 7217|    196|            return presentation_type::int_octal;
 7218|    178|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 178, False: 4.47k]
  ------------------
 7219|    230|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 52, False: 4.59k]
  ------------------
 7220|    230|            return presentation_type::int_hex;
 7221|     34|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 34, False: 4.61k]
  ------------------
 7222|     68|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 34, False: 4.61k]
  ------------------
 7223|     68|            return presentation_type::int_arbitrary_base;
 7224|    204|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 204, False: 4.44k]
  ------------------
 7225|    886|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 682, False: 3.96k]
  ------------------
 7226|    886|            return presentation_type::float_hex;
 7227|     70|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 70, False: 4.58k]
  ------------------
 7228|    194|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 124, False: 4.52k]
  ------------------
 7229|    194|            return presentation_type::float_scientific;
 7230|    142|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 142, False: 4.50k]
  ------------------
 7231|    266|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 124, False: 4.52k]
  ------------------
 7232|    266|            return presentation_type::float_fixed;
 7233|     34|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 34, False: 4.61k]
  ------------------
 7234|    104|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 70, False: 4.58k]
  ------------------
 7235|    104|            return presentation_type::float_general;
 7236|    970|        case 's':
  ------------------
  |  Branch (7236:9): [True: 970, False: 3.68k]
  ------------------
 7237|    970|            return presentation_type::string;
 7238|    304|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 304, False: 4.34k]
  ------------------
 7239|    304|            return presentation_type::character;
 7240|     34|        case '?':
  ------------------
  |  Branch (7240:9): [True: 34, False: 4.61k]
  ------------------
 7241|     34|            return presentation_type::escaped_character;
 7242|    124|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 124, False: 4.52k]
  ------------------
 7243|    124|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 4.65k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 4.65k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|    420|        default:
  ------------------
  |  Branch (7250:9): [True: 420, False: 4.23k]
  ------------------
 7251|    420|            return presentation_type::none;
 7252|  4.65k|    }
 7253|  4.65k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|  13.1k|{
 7283|  13.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  13.1k|    auto check_align = [](wchar_t ch) {
 7286|  13.1k|        switch (ch) {
 7287|  13.1k|            case L'<':
 7288|  13.1k|                return align_type::left;
 7289|  13.1k|            case L'>':
 7290|  13.1k|                return align_type::right;
 7291|  13.1k|            case L'^':
 7292|  13.1k|                return align_type::center;
 7293|  13.1k|            default:
 7294|  13.1k|                return align_type::none;
 7295|  13.1k|        }
 7296|  13.1k|    };
 7297|       |
 7298|  13.1k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  13.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.1k]
  |  |  |  Branch (865:45): [True: 0, False: 13.1k]
  |  |  |  Branch (865:45): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
 7300|  13.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  13.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  13.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  13.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  13.1k|    const auto begin_before_fill = begin;
 7310|  13.1k|    begin += potential_fill_len;
 7311|       |
 7312|  13.1k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 1.15k, False: 12.0k]
  ------------------
 7313|  1.15k|        return begin_before_fill;
 7314|  1.15k|    }
 7315|       |
 7316|  12.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  12.0k|    const auto begin_after_fill = begin;
 7318|  12.0k|    ++begin;
 7319|       |
 7320|  12.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 12.0k, False: 0]
  ------------------
 7321|  12.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 11.9k]
  |  |  ------------------
  ------------------
 7322|     42|            handler.on_error("Invalid fill character '{' in format string");
 7323|     42|            return begin;
 7324|     42|        }
 7325|  11.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 1.58k, False: 10.4k]
  ------------------
 7326|  1.58k|            return begin_before_fill;
 7327|  1.58k|        }
 7328|  11.9k|    }
 7329|       |
 7330|  10.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 8.21k, False: 2.18k]
  ------------------
 7331|  8.21k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 1.06k, False: 7.15k]
  ------------------
 7332|  1.06k|            handler.on_align(potential_align_on_fill);
 7333|  1.06k|            return begin_after_fill;
 7334|  1.06k|        }
 7335|  7.15k|        return begin_before_fill;
 7336|  8.21k|    }
 7337|       |
 7338|  2.18k|    handler.on_fill(potential_fill);
 7339|  2.18k|    handler.on_align(potential_align_after_fill);
 7340|  2.18k|    return begin;
 7341|  10.4k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|  13.1k|{
 7265|  13.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|  13.1k|    if constexpr (sizeof(CharT) != 1) {
 7267|  13.1k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|  13.1k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  25.2k|    auto check_align = [](wchar_t ch) {
 7286|  25.2k|        switch (ch) {
 7287|    500|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 500, False: 24.7k]
  ------------------
 7288|    500|                return align_type::left;
 7289|    482|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 482, False: 24.7k]
  ------------------
 7290|    482|                return align_type::right;
 7291|  2.72k|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 2.72k, False: 22.4k]
  ------------------
 7292|  2.72k|                return align_type::center;
 7293|  21.4k|            default:
  ------------------
  |  Branch (7293:13): [True: 21.4k, False: 3.71k]
  ------------------
 7294|  21.4k|                return align_type::none;
 7295|  25.2k|        }
 7296|  25.2k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7022|  2.18k|    {
 7023|  2.18k|        m_specs.fill = fill;
 7024|  2.18k|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6903|  2.18k|    {
 6904|  2.18k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6905|  2.18k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6906|       |        if constexpr (sizeof(CharT) == 1) {
 6907|       |            for (size_t i = 0; i < s.size(); ++i) {
 6908|       |                SCN_GCC_PUSH
 6909|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6910|       |                m_data[i] = s[i];
 6911|       |                SCN_GCC_POP
 6912|       |            }
 6913|       |            m_size = static_cast<unsigned char>(s.size());
 6914|       |        }
 6915|       |        else if constexpr (sizeof(CharT) == 2) {
 6916|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6917|       |            m_data[1] =
 6918|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6919|       |            if (s.size() == 1) {
 6920|       |                return;
 6921|       |            }
 6922|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6923|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6924|       |        }
 6925|  2.18k|        else {
 6926|  2.18k|            const auto front = static_cast<unsigned>(s.front());
 6927|  2.18k|            m_data[0] = static_cast<char>(front);
 6928|  2.18k|            m_data[1] = static_cast<char>(front >> 8);
 6929|  2.18k|            m_data[2] = static_cast<char>(front >> 16);
 6930|  2.18k|            m_data[3] = static_cast<char>(front >> 24);
 6931|  2.18k|        }
 6932|  2.18k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|  13.0k|{
 7348|  13.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  13.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 8.24k, False: 4.81k]
  |  Branch (7350:33): [True: 3.48k, False: 4.75k]
  ------------------
 7351|  3.48k|        int width = parse_simple_int(begin, end);
 7352|  3.48k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.45k, False: 34]
  |  |  ------------------
  ------------------
 7353|  3.45k|            handler.on_width(width);
 7354|  3.45k|        }
 7355|     34|        else {
 7356|     34|            handler.on_error("Invalid field width");
 7357|     34|            return begin;
 7358|     34|        }
 7359|  3.48k|    }
 7360|  13.0k|    return begin;
 7361|  13.0k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7367|  5.04k|{
 7368|  5.04k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7369|       |
 7370|  5.04k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7370:9): [True: 5.00k, False: 34]
  |  Branch (7370:33): [True: 4.93k, False: 70]
  ------------------
 7371|  4.93k|        int prec = parse_simple_int(begin, end);
 7372|  4.93k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  4.93k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.90k, False: 34]
  |  |  ------------------
  ------------------
 7373|  4.90k|            handler.on_precision(prec);
 7374|  4.90k|        }
 7375|     34|        else {
 7376|     34|            handler.on_error("Invalid field precision");
 7377|     34|            return begin;
 7378|     34|        }
 7379|  4.93k|    }
 7380|  5.00k|    return begin;
 7381|  5.04k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|    634|    {
 7879|    634|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|    634|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 568, False: 66]
  ------------------
 7881|    634|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 502, False: 66]
  ------------------
 7882|    634|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 436, False: 66]
  ------------------
 7883|    634|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 370, False: 66]
  ------------------
 7884|    370|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|    370|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|    370|        }
 7889|       |
 7890|    264|        Handler::on_localized();
 7891|    264|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  11.0k|{
 9324|  11.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  11.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  11.0k|{
 9225|  11.0k|#define SCN_VISIT(Type)                                                \
 9226|  11.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  11.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  11.0k|    }                                                                  \
 9229|  11.0k|    else {                                                             \
 9230|  11.0k|        return vis(monostate_val);                                     \
 9231|  11.0k|    }
 9232|       |
 9233|  11.0k|    monostate monostate_val{};
 9234|       |
 9235|  11.0k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 11.0k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 11.0k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|  1.26k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 1.26k, False: 9.78k]
  ------------------
 9241|  1.26k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.26k|    }                                                                  \
  |  | 9229|  1.26k|    else {                                                             \
  |  | 9230|  1.26k|        return vis(monostate_val);                                     \
  |  | 9231|  1.26k|    }
  ------------------
 9242|  1.26k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 11.0k]
  ------------------
 9243|  1.26k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.26k|    }                                                                  \
  |  | 9229|  1.26k|    else {                                                             \
  |  | 9230|  1.26k|        return vis(monostate_val);                                     \
  |  | 9231|  1.26k|    }
  ------------------
 9244|  1.26k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 11.0k]
  ------------------
 9245|  1.26k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.26k|    }                                                                  \
  |  | 9229|  1.26k|    else {                                                             \
  |  | 9230|  1.26k|        return vis(monostate_val);                                     \
  |  | 9231|  1.26k|    }
  ------------------
 9246|  1.26k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 11.0k]
  ------------------
 9247|  1.26k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.26k|    }                                                                  \
  |  | 9229|  1.26k|    else {                                                             \
  |  | 9230|  1.26k|        return vis(monostate_val);                                     \
  |  | 9231|  1.26k|    }
  ------------------
 9248|  1.26k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 11.0k]
  ------------------
 9249|  1.26k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.26k|    }                                                                  \
  |  | 9229|  1.26k|    else {                                                             \
  |  | 9230|  1.26k|        return vis(monostate_val);                                     \
  |  | 9231|  1.26k|    }
  ------------------
 9250|  2.52k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 1.26k, False: 9.78k]
  ------------------
 9251|  2.52k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.52k|    }                                                                  \
  |  | 9229|  2.52k|    else {                                                             \
  |  | 9230|  2.52k|        return vis(monostate_val);                                     \
  |  | 9231|  2.52k|    }
  ------------------
 9252|  2.52k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 11.0k]
  ------------------
 9253|  2.52k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.52k|    }                                                                  \
  |  | 9229|  2.52k|    else {                                                             \
  |  | 9230|  2.52k|        return vis(monostate_val);                                     \
  |  | 9231|  2.52k|    }
  ------------------
 9254|  2.52k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 11.0k]
  ------------------
 9255|  2.52k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  2.52k|    }                                                                  \
  |  | 9229|  2.52k|    else {                                                             \
  |  | 9230|  2.52k|        return vis(monostate_val);                                     \
  |  | 9231|  2.52k|    }
  ------------------
 9256|  3.72k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 1.20k, False: 9.84k]
  ------------------
 9257|  3.72k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  3.72k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  3.72k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  3.72k|    }                                                                  \
  |  | 9229|  3.72k|    else {                                                             \
  |  | 9230|  3.72k|        return vis(monostate_val);                                     \
  |  | 9231|  3.72k|    }
  ------------------
 9258|  4.98k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 1.26k, False: 9.78k]
  ------------------
 9259|  4.98k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  4.98k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.98k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.98k|    }                                                                  \
  |  | 9229|  4.98k|    else {                                                             \
  |  | 9230|  4.98k|        return vis(monostate_val);                                     \
  |  | 9231|  4.98k|    }
  ------------------
 9260|  4.98k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 11.0k]
  ------------------
 9261|  4.98k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  4.98k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.98k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.98k|    }                                                                  \
  |  | 9229|  4.98k|    else {                                                             \
  |  | 9230|  4.98k|        return vis(monostate_val);                                     \
  |  | 9231|  4.98k|    }
  ------------------
 9262|  6.18k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 1.20k, False: 9.84k]
  ------------------
 9263|  6.18k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  6.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  6.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  6.18k|    }                                                                  \
  |  | 9229|  6.18k|    else {                                                             \
  |  | 9230|  6.18k|        return vis(monostate_val);                                     \
  |  | 9231|  6.18k|    }
  ------------------
 9264|  6.18k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 11.0k]
  ------------------
 9265|  6.18k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  6.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  6.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  6.18k|    }                                                                  \
  |  | 9229|  6.18k|    else {                                                             \
  |  | 9230|  6.18k|        return vis(monostate_val);                                     \
  |  | 9231|  6.18k|    }
  ------------------
 9266|  6.18k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 11.0k]
  ------------------
 9267|  6.18k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  6.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  6.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  6.18k|    }                                                                  \
  |  | 9229|  6.18k|    else {                                                             \
  |  | 9230|  6.18k|        return vis(monostate_val);                                     \
  |  | 9231|  6.18k|    }
  ------------------
 9268|  7.44k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 1.26k, False: 9.78k]
  ------------------
 9269|  7.44k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  7.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  7.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  7.44k|    }                                                                  \
  |  | 9229|  7.44k|    else {                                                             \
  |  | 9230|  7.44k|        return vis(monostate_val);                                     \
  |  | 9231|  7.44k|    }
  ------------------
 9270|  7.44k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 11.0k]
  ------------------
 9271|  7.44k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  7.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  7.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  7.44k|    }                                                                  \
  |  | 9229|  7.44k|    else {                                                             \
  |  | 9230|  7.44k|        return vis(monostate_val);                                     \
  |  | 9231|  7.44k|    }
  ------------------
 9272|  7.44k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 11.0k]
  ------------------
 9273|  7.44k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  7.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  7.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  7.44k|    }                                                                  \
  |  | 9229|  7.44k|    else {                                                             \
  |  | 9230|  7.44k|        return vis(monostate_val);                                     \
  |  | 9231|  7.44k|    }
  ------------------
 9274|  8.64k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 1.20k, False: 9.84k]
  ------------------
 9275|  8.64k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  8.64k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  8.64k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  8.64k|    }                                                                  \
  |  | 9229|  8.64k|    else {                                                             \
  |  | 9230|  8.64k|        return vis(monostate_val);                                     \
  |  | 9231|  8.64k|    }
  ------------------
 9276|  9.84k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 1.20k, False: 9.84k]
  ------------------
 9277|  9.84k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  9.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  9.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  9.84k|    }                                                                  \
  |  | 9229|  9.84k|    else {                                                             \
  |  | 9230|  9.84k|        return vis(monostate_val);                                     \
  |  | 9231|  9.84k|    }
  ------------------
 9278|  11.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 1.20k, False: 9.84k]
  ------------------
 9279|  11.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  11.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.0k|    }                                                                  \
  |  | 9229|  11.0k|    else {                                                             \
  |  | 9230|  11.0k|        return vis(monostate_val);                                     \
  |  | 9231|  11.0k|    }
  ------------------
 9280|  11.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 11.0k]
  ------------------
 9281|  11.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  11.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.0k|    }                                                                  \
  |  | 9229|  11.0k|    else {                                                             \
  |  | 9230|  11.0k|        return vis(monostate_val);                                     \
  |  | 9231|  11.0k|    }
  ------------------
 9282|  11.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 11.0k]
  ------------------
 9283|  11.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  11.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  11.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  11.0k|    }                                                                  \
  |  | 9229|  11.0k|    else {                                                             \
  |  | 9230|  11.0k|        return vis(monostate_val);                                     \
  |  | 9231|  11.0k|    }
  ------------------
 9284|       |
 9285|  11.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 11.0k]
  ------------------
 9286|  11.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  11.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  11.0k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 11.0k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 11.0k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  11.0k|            SCN_CLANG_POP
 9303|  11.0k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  4.77k|    {
 3480|  4.77k|        return m_iterator;
 3481|  4.77k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|    878|        : base(std::in_place, std::forward<U>(val)),
 1570|    878|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    878|    {
 1572|    878|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    878|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    878|    {
  442|    878|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    994|    {
 1316|    994|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  2.25k|    {
 3484|  2.25k|        return m_sentinel;
 3485|  2.25k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1615|    116|        : base(unexpect, std::move(e.error())),
 1616|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    116|    {
 1618|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    116|          m_has_value(false)
  451|    116|    {
  452|    116|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  2.25k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.25k|    static_cast<    \
  |  |  935|  2.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.25k|    static_cast<    \
  |  |  935|  2.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.25k|    {
 3466|  2.25k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.98k|    {
  490|  1.98k|        return m_has_value;
  491|  1.98k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    878|    {
 1769|    878|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    878|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    878|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    878|        return this->get_value();
 1771|    878|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    878|    {
  456|    878|        return m_value;
  457|    878|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|    994|    {
 1979|    994|        return detail::transform_error_impl(std::move(*this),
 1980|    994|                                            std::forward<F>(f));
 1981|    994|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|    994|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    994|    else {
 1472|    994|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    994|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    994|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 878, False: 116]
  |  |  ------------------
  ------------------
 1474|    994|                   ? result(*std::forward<Exp>(exp))
 1475|    994|                   : result(unexpect,
 1476|    116|                            trivial_invoke(std::forward<F>(f),
 1477|    116|                                           std::forward<Exp>(exp).error()));
 1478|    994|    }
 1479|    994|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    878|    {
 1805|    878|        return std::move(value());
 1806|    878|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    878|        : base(std::in_place, std::forward<U>(val)),
 1570|    878|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    878|    {
 1572|    878|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    878|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    878|    {
  442|    878|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    994|    {
 1316|    994|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1755|    116|    {
 1756|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    116|        return std::move(this->get_unexpected().error());
 1758|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    116|    {
  473|    116|        return m_unexpected;
  474|    116|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1625|    116|        : base(unexpect, std::forward<Args>(args)...),
 1626|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    116|    {
 1628|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    116|          m_has_value(false)
  451|    116|    {
  452|    116|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|    994|    {
 1740|    994|        return has_value();
 1741|    994|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.98k|    {
  490|  1.98k|        return m_has_value;
  491|  1.98k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1745|    116|    {
 1746|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    116|        return this->get_unexpected().error();
 1748|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    116|    {
  473|    116|        return m_unexpected;
  474|    116|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    878|    {
 1805|    878|        return std::move(value());
 1806|    878|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    878|    {
 1769|    878|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    878|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    878|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    878|        return this->get_value();
 1771|    878|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    878|    {
  456|    878|        return m_value;
  457|    878|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  49.2k|{
   44|  49.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  49.2k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  49.2k|{
   60|  49.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  49.2k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.47k|{
   89|  5.47k|    auto result = make_scan_result<Source, Args...>();
   90|  5.47k|    fill_scan_result(result,
   91|  5.47k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.47k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.47k|    return result;
   94|  5.47k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.47k|{
  131|  5.47k|    auto result = make_scan_result<Source, Args...>();
  132|  5.47k|    fill_scan_result(result,
  133|  5.47k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.47k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.47k|    return result;
  136|  5.47k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  73.8k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  73.8k|{
  309|  73.8k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  73.8k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    250|{
  315|    250|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    250|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 125, False: 125]
  ------------------
  317|    250|                    : std::locale{};
  318|    250|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    892|{
  895|    892|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    892|                                  m_nan_payload_buffer, value);
  897|    892|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    892|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 892]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|    892|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 892]
  ------------------
  903|    892|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    892|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 892]
  ------------------
  908|    892|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    892|    return n;
  913|    892|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    934|{
  895|    934|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    934|                                  m_nan_payload_buffer, value);
  897|    934|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    934|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 100, False: 834]
  |  |  ------------------
  ------------------
  898|    100|        value = this->setsign(value);
  899|    100|        return n;
  900|    100|    }
  901|       |
  902|    834|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 834]
  ------------------
  903|    834|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    834|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 834]
  ------------------
  908|    834|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    834|    return n;
  913|    834|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     22|{
 1153|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 22, False: 0]
  ------------------
 1159|     22|        SCN_UNLIKELY_ATTR
 1160|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     22|                                             "Invalid integer value");
 1162|     22|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    902|{
 1153|    902|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    902|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    902|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    902|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    902|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 902, False: 0]
  ------------------
 1159|    902|        SCN_UNLIKELY_ATTR
 1160|    902|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    902|                                             "Invalid integer value");
 1162|    902|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    936|{
 1153|    936|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    936|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    936|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    936|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    936|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 882, False: 54]
  ------------------
 1159|    882|        SCN_UNLIKELY_ATTR
 1160|    882|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    882|                                             "Invalid integer value");
 1162|    882|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|     54|    auto start = source.data();
 1166|     54|    const auto end = source.data() + source.size();
 1167|     54|    {
 1168|    108|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 84, False: 24]
  ------------------
 1169|     84|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 30, False: 54]
  ------------------
 1170|     30|                break;
 1171|     30|            }
 1172|     84|        }
 1173|     54|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 54, False: 0]
  |  |  |  Branch (865:45): [True: 24, False: 30]
  |  |  |  Branch (865:45): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 1174|     54|            value = 0;
 1175|     54|            return ranges::next(source.begin(),
 1176|     54|                                ranges::distance(source.data(), start));
 1177|     54|        }
 1178|     54|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    902|{
 1153|    902|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    902|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    902|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    902|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    902|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 902, False: 0]
  ------------------
 1159|    902|        SCN_UNLIKELY_ATTR
 1160|    902|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    902|                                             "Invalid integer value");
 1162|    902|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    888|{
 1153|    888|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    888|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    888|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    888|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    888|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 842, False: 46]
  ------------------
 1159|    842|        SCN_UNLIKELY_ATTR
 1160|    842|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    842|                                             "Invalid integer value");
 1162|    842|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|     46|    auto start = source.data();
 1166|     46|    const auto end = source.data() + source.size();
 1167|     46|    {
 1168|     92|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 72, False: 20]
  ------------------
 1169|     72|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 26, False: 46]
  ------------------
 1170|     26|                break;
 1171|     26|            }
 1172|     72|        }
 1173|     46|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 46, False: 0]
  |  |  |  Branch (865:45): [True: 20, False: 26]
  |  |  |  Branch (865:45): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 1174|     46|            value = 0;
 1175|     46|            return ranges::next(source.begin(),
 1176|     46|                                ranges::distance(source.data(), start));
 1177|     46|        }
 1178|     46|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    884|{
 1153|    884|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    884|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    884|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    884|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    884|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 884, False: 0]
  ------------------
 1159|    884|        SCN_UNLIKELY_ATTR
 1160|    884|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    884|                                             "Invalid integer value");
 1162|    884|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    838|{
 1153|    838|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    838|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    838|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    838|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    838|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    838|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    838|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 804, False: 34]
  ------------------
 1159|    804|        SCN_UNLIKELY_ATTR
 1160|    804|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    804|                                             "Invalid integer value");
 1162|    804|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|     34|    auto start = source.data();
 1166|     34|    const auto end = source.data() + source.size();
 1167|     34|    {
 1168|     68|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 58, False: 10]
  ------------------
 1169|     58|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 24, False: 34]
  ------------------
 1170|     24|                break;
 1171|     24|            }
 1172|     58|        }
 1173|     34|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 0]
  |  |  |  Branch (865:45): [True: 10, False: 24]
  |  |  |  Branch (865:45): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 1174|     34|            value = 0;
 1175|     34|            return ranges::next(source.begin(),
 1176|     34|                                ranges::distance(source.data(), start));
 1177|     34|        }
 1178|     34|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  24.6k|{
 1903|  24.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  24.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  49.2k|{
 1921|  49.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  49.2k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.81k|{
  207|  3.81k|    return find_classic_impl(
  208|  3.81k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.81k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.81k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  24.8k|{
  215|  24.8k|    return find_classic_impl(
  216|  24.8k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  24.8k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  24.8k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    336|{
  329|    336|    SCN_UNLIKELY_ATTR
  330|    336|    return e;
  331|    336|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  24.6k|{
 1872|  24.6k|    return vscan_internal(source, format, args);
 1873|  24.6k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  49.2k|{
 1886|  49.2k|    return vscan_internal(source, format, args);
 1887|  49.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  3.81k|{
  131|  3.81k|    auto it = source.begin();
  132|       |
  133|  10.5k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 7.47k, False: 3.07k]
  ------------------
  134|  7.47k|        auto sv =
  135|  7.47k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  7.47k|                .substr(0, 8);
  137|       |
  138|  7.47k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.51k, False: 4.95k]
  ------------------
  139|  2.51k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.51k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.51k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 420, False: 2.09k]
  ------------------
  142|    420|                break;
  143|    420|            }
  144|  2.09k|            continue;
  145|  2.51k|        }
  146|       |
  147|  18.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 13.9k, False: 4.63k]
  ------------------
  148|  13.9k|            auto tmp =
  149|  13.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  13.9k|            auto res = get_next_code_point(tmp);
  151|  13.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 318, False: 13.6k]
  ------------------
  152|    318|                return it;
  153|    318|            }
  154|  13.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  13.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  13.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  13.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  13.6k|        }
  158|  4.95k|    }
  159|       |
  160|  3.49k|    return detail::make_string_view_iterator(source, it);
  161|  3.81k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  30.9k|{
  118|  30.9k|    static_assert(sizeof(*source.data()) == 1);
  119|  30.9k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  30.9k|    uint64_t word{};
  121|  30.9k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  30.9k|    return has_byte_greater(word, 127) != 0;
  124|  30.9k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  13.9k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  13.9k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  24.8k|{
  131|  24.8k|    auto it = source.begin();
  132|       |
  133|  31.1k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 23.4k, False: 7.72k]
  ------------------
  134|  23.4k|        auto sv =
  135|  23.4k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  23.4k|                .substr(0, 8);
  137|       |
  138|  23.4k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 11.2k, False: 12.1k]
  ------------------
  139|  11.2k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  11.2k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  11.2k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 9.31k, False: 1.97k]
  ------------------
  142|  9.31k|                break;
  143|  9.31k|            }
  144|  1.97k|            continue;
  145|  11.2k|        }
  146|       |
  147|  22.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.7k, False: 4.31k]
  ------------------
  148|  17.7k|            auto tmp =
  149|  17.7k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.7k|            auto res = get_next_code_point(tmp);
  151|  17.7k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 7.85k, False: 9.88k]
  ------------------
  152|  7.85k|                return it;
  153|  7.85k|            }
  154|  9.88k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.88k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.88k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  9.88k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.88k|        }
  158|  12.1k|    }
  159|       |
  160|  17.0k|    return detail::make_string_view_iterator(source, it);
  161|  24.8k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  22.9k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.7k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|     44|    {
  724|     44|        unsigned format_flags{};
  725|     44|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 44, False: 0]
  ------------------
  726|     44|            format_flags |= fast_float::fixed;
  727|     44|        }
  728|     44|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (728:13): [True: 40, False: 4]
  ------------------
  729|     40|            format_flags |= fast_float::scientific;
  730|     40|        }
  731|       |
  732|     44|        return static_cast<fast_float::chars_format>(format_flags);
  733|     44|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|    156|    {
  369|    156|        return {kind, options};
  370|    156|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    892|{
  804|    892|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 892]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    892|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 892]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    892|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 892]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    892|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 892]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    892|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    892|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 8, False: 884]
  ------------------
  851|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
  852|      8|            return detail::unexpected_scan_error(
  853|      8|                scan_error::invalid_scanned_value,
  854|      8|                "Invalid floating-point digit");
  855|      8|        }
  856|      8|    }
  857|    884|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  ------------------
  ------------------
  858|    884|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    884|                                             "Invalid floating-point digit");
  860|    884|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|     56|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|     56|    {
  432|     56|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 56, False: 0]
  |  Branch (432:37): [True: 0, False: 56]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|     56|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 0, False: 56]
  ------------------
  440|     56|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 0]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|     56|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 0, False: 56]
  |  Branch (447:34): [True: 0, False: 0]
  ------------------
  448|      0|            SCN_UNLIKELY_ATTR
  449|      0|            return detail::unexpected_scan_error(
  450|      0|                scan_error::value_positive_underflow,
  451|      0|                "strtod failed: underflow");
  452|      0|        }
  453|       |
  454|     56|        SCN_GCC_COMPAT_PUSH
  455|     56|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|     56|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 56, False: 0]
  ------------------
  458|     56|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 56, False: 0]
  ------------------
  459|     56|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 0, False: 56]
  ------------------
  460|      0|            SCN_UNLIKELY_ATTR
  461|      0|            return detail::unexpected_scan_error(
  462|      0|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|      0|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|     56|            return {};
  468|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|     56|{
  348|     56|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 56, False: 0]
  |  Branch (348:24): [True: 0, False: 0]
  ------------------
  349|     56|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    934|{
  804|    934|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 934]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    934|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 934]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    934|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 934]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    934|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 934]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    934|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    934|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 78, False: 856]
  ------------------
  851|     78|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 56]
  |  |  ------------------
  ------------------
  852|     22|            return detail::unexpected_scan_error(
  853|     22|                scan_error::invalid_scanned_value,
  854|     22|                "Invalid floating-point digit");
  855|     22|        }
  856|     78|    }
  857|    912|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 812, False: 100]
  |  |  ------------------
  ------------------
  858|    812|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    812|                                             "Invalid floating-point digit");
  860|    812|    }
  861|       |
  862|    100|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|    100|    else {
  879|       |        // Default to fast_float
  880|    100|        return fast_float_impl<CharT, T>{data}(value);
  881|    100|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|    100|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  739|    100|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|    100|    {
  741|    100|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  744|    100|    {
  745|    100|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 56, False: 44]
  ------------------
  746|    100|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 0, False: 44]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|     56|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|     56|                                              value);
  750|     56|        }
  751|       |
  752|     44|        const auto flags = get_flags();
  753|     44|        const auto view = get_view();
  754|     44|        const auto result = fast_float::from_chars(
  755|     44|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|     44|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|     44|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|      0|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|      0|                                              value);
  766|      0|        }
  767|       |
  768|     44|        return result.ptr - view.data();
  769|     44|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|     56|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|     56|    {
  709|     56|#if !SCN_DISABLE_STRTOD
  710|     56|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|     56|    }
  717|     56|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|     56|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|     56|    {
  553|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|     56|    {
  557|     56|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|     56|                           generic_strtod);
  559|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|     56|    {
  389|     56|        CharT* end{};
  390|     56|        errno = 0;
  391|     56|        value = strtod_cb(src, &end);
  392|     56|        const auto saved_errno = errno;
  393|     56|        auto chars_read = end - src;
  394|       |
  395|     56|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|     56|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
  396|       |
  397|     56|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 56, False: 0]
  ------------------
  398|     56|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 56, False: 0]
  ------------------
  399|     56|            chars_read -= 2;
  400|     56|        }
  401|       |
  402|     56|        return chars_read;
  403|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|     56|    {
  409|     56|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 50, False: 6]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|     50|            auto first_space = read_until_classic_space(input.view());
  412|     50|            input.assign(
  413|     50|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|     50|        }
  415|       |
  416|     56|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 56, False: 0]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|     56|            else {
  421|     56|                input.get_allocated_string().insert(0, L"0x");
  422|     56|            }
  423|     56|        }
  424|       |
  425|     56|        return input.get_allocated_string().c_str();
  426|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|     56|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|     56|        else {
  568|     56|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|     56|        }
  570|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|     56|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|     56|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|     56|        else if constexpr (std::is_same_v<T, double>) {
  538|     56|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|     56|#endif
  544|     56|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  773|     44|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|     44|        else {
  783|     44|            return std::u32string_view{
  784|     44|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|     44|                m_input.view().size()};
  786|     44|        }
  787|     44|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  49.2k|{
 1317|  49.2k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 48.8k, False: 378]
  ------------------
 1318|  48.8k|        return false;
 1319|  48.8k|    }
 1320|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 252]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|  49.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  49.2k|        : format_handler_base{argcount},
 1593|  49.2k|          parse_ctx{source_tag<Source&&>, format},
 1594|  49.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  49.2k|    {
 1596|  49.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   147k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   147k|    {
 1412|   147k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   147k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  49.2k|        : contiguous_ctx(source, args, loc)
 1544|  49.2k|    {
 1545|  49.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  49.2k|{
 1734|  49.2k|    const auto beg = handler.get_ctx().begin();
 1735|  49.2k|    detail::parse_format_string<false>(format, handler);
 1736|  49.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 47.0k, False: 2.15k]
  |  |  ------------------
  ------------------
 1737|  47.0k|        return unexpected(err.error());
 1738|  47.0k|    }
 1739|  2.15k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  49.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   355k|    {
 1718|   355k|        return ctx.get();
 1719|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   355k|    {
 1549|   355k|        return contiguous_ctx;
 1550|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  68.2k|    {
 1600|   125k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 60.7k, False: 64.3k]
  ------------------
 1601|  60.7k|            auto it = get_ctx().begin();
 1602|  60.7k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 1.09k, False: 59.6k]
  ------------------
 1603|  1.09k|                SCN_UNLIKELY_ATTR
 1604|  1.09k|                return on_error(
 1605|  1.09k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|  1.09k|            }
 1607|       |
 1608|  59.6k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  59.6k|                    detail::make_string_view_from_pointers(begin, end));
 1610|  59.6k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 2.03k, False: 57.6k]
  ------------------
 1611|  2.03k|                SCN_UNLIKELY_ATTR
 1612|  2.03k|                return on_error({scan_error::invalid_format_string,
 1613|  2.03k|                                 "Invalid encoding in format string"});
 1614|  2.03k|            }
 1615|  57.6k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 7.62k, False: 50.0k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  7.62k|                get_ctx().advance_to(
 1618|  7.62k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  7.62k|                auto begin_it = impl::read_while_classic_space(
 1621|  7.62k|                    detail::make_string_view_from_pointers(
 1622|  7.62k|                        detail::to_address(after_space_it),
 1623|  7.62k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  7.62k|                begin = detail::to_address(begin_it) - 1;
 1626|  7.62k|                continue;
 1627|  7.62k|            }
 1628|       |
 1629|  50.0k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 840, False: 49.1k]
  ------------------
 1630|    840|                SCN_UNLIKELY_ATTR
 1631|    840|                return on_error({scan_error::invalid_literal,
 1632|    840|                                 "Unexpected literal character in source"});
 1633|    840|            }
 1634|  49.1k|            get_ctx().advance_to(ranges::next(it));
 1635|  49.1k|        }
 1636|  68.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   178k|    {
 1460|   178k|        error = unexpected(err);
 1461|   178k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1666|  5.70k|    {
 1667|  5.70k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  5.70k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  5.70k|        on_visit_scan_arg(
 1671|  5.70k|            impl::default_arg_reader<context_type>{
 1672|  5.70k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  5.70k|            arg);
 1674|  5.70k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  29.7k|{
 1372|  29.7k|    auto arg = ctx.arg(id);
 1373|  29.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.38k, False: 28.3k]
  |  |  ------------------
  ------------------
 1374|  1.38k|        handler.on_error("Failed to find argument with ID");
 1375|  1.38k|    }
 1376|  29.7k|    return arg;
 1377|  29.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  47.9k|    {
 1486|  47.9k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.45k, False: 45.5k]
  |  |  ------------------
  ------------------
 1487|  2.45k|            on_error({scan_error::invalid_format_string,
 1488|  2.45k|                      "Argument ID out-of-range"});
 1489|  2.45k|            return;
 1490|  2.45k|        }
 1491|       |
 1492|  45.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 228, False: 45.3k]
  |  |  ------------------
  ------------------
 1493|    228|            on_error({scan_error::invalid_format_string,
 1494|    228|                      "Argument with this ID has already been scanned"});
 1495|    228|        }
 1496|       |
 1497|  45.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  45.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.5k, False: 0]
  |  |  ------------------
  ------------------
 1498|  45.5k|            visited_args_lower64 |= (1ull << id);
 1499|  45.5k|            return;
 1500|  45.5k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  45.5k|    {
 1470|  45.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 45.5k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  45.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  45.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.5k, False: 0]
  |  |  ------------------
  ------------------
 1477|  45.5k|            return (visited_args_lower64 >> id) & 1ull;
 1478|  45.5k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  45.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  5.70k|    {
 1651|  5.70k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 126, False: 5.58k]
  |  Branch (1651:13): [True: 126, False: 5.58k]
  |  Branch (1651:29): [True: 0, False: 5.58k]
  ------------------
 1652|    126|            SCN_UNLIKELY_ATTR
 1653|    126|            return;
 1654|    126|        }
 1655|       |
 1656|  5.58k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  5.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  5.58k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  5.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.87k, False: 1.70k]
  |  |  ------------------
  ------------------
 1658|  3.87k|            on_error(r.error());
 1659|  3.87k|        }
 1660|  1.70k|        else {
 1661|  1.70k|            get_ctx().advance_to(*r);
 1662|  1.70k|        }
 1663|  5.58k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  29.3k|    {
 1640|  29.3k|        return parse_ctx.next_arg_id();
 1641|  29.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1643|    448|    {
 1644|    448|        parse_ctx.check_arg_id(id);
 1645|    448|        return id;
 1646|    448|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  24.0k|    {
 1680|  24.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  24.0k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  24.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 24.0k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  24.0k|        auto specs = detail::format_specs{};
 1693|  24.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  24.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  24.0k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  24.0k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  24.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 2.35k, False: 21.7k]
  |  Branch (1698:29): [True: 494, False: 21.2k]
  ------------------
 1699|  2.85k|            SCN_UNLIKELY_ATTR
 1700|  2.85k|            on_error({scan_error::invalid_format_string,
 1701|  2.85k|                      "Missing '}' in format string"});
 1702|  2.85k|            return parse_ctx.begin();
 1703|  2.85k|        }
 1704|  21.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 284, False: 20.9k]
  |  |  ------------------
  ------------------
 1705|    284|            return parse_ctx.begin();
 1706|    284|        }
 1707|  20.9k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  20.9k|        on_visit_scan_arg(
 1710|  20.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  20.9k|                                           get_ctx().locale()},
 1712|  20.9k|            arg);
 1713|  20.9k|        return parse_ctx.begin();
 1714|  21.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  24.0k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  24.0k|    {
 1391|  24.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  20.9k|    {
 1651|  20.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 148, False: 20.7k]
  |  Branch (1651:13): [True: 148, False: 20.7k]
  |  Branch (1651:29): [True: 0, False: 20.7k]
  ------------------
 1652|    148|            SCN_UNLIKELY_ATTR
 1653|    148|            return;
 1654|    148|        }
 1655|       |
 1656|  20.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  20.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.8k, False: 3.90k]
  |  |  ------------------
  ------------------
 1658|  16.8k|            on_error(r.error());
 1659|  16.8k|        }
 1660|  3.90k|        else {
 1661|  3.90k|            get_ctx().advance_to(*r);
 1662|  3.90k|        }
 1663|  20.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  94.9k|    {
 1454|  94.9k|        SCN_UNLIKELY_ATTR
 1455|  94.9k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  94.9k|                                              msg);
 1457|  94.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   147k|    {
 1419|   147k|        {
 1420|   147k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 147k]
  ------------------
 1421|   147k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 147k]
  ------------------
 1422|   147k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   147k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   147k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 102k, False: 45.3k]
  ------------------
 1426|   102k|                return on_error({scan_error::invalid_format_string,
 1427|   102k|                                 "Argument list not exhausted"});
 1428|   102k|            }
 1429|   147k|        }
 1430|       |
 1431|  45.3k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 45.3k, False: 0]
  ------------------
 1432|  45.3k|            return;
 1433|  45.3k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|   416k|    {
 1465|   416k|        return error;
 1466|   416k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  49.2k|{
 1749|  49.2k|    const auto argcount = args.size();
 1750|  49.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 49.2k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|  49.2k|    auto handler = format_handler<true, CharT>{
 1756|  49.2k|        ranges::subrange<const CharT*>{source.data(),
 1757|  49.2k|                                       source.data() + source.size()},
 1758|  49.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  49.2k|    return vscan_parse_format_string(format, handler);
 1760|  49.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  98.5k|{
 1749|  98.5k|    const auto argcount = args.size();
 1750|  98.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 98.5k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|  98.5k|    auto handler = format_handler<true, CharT>{
 1756|  98.5k|        ranges::subrange<const CharT*>{source.data(),
 1757|  98.5k|                                       source.data() + source.size()},
 1758|  98.5k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  98.5k|    return vscan_parse_format_string(format, handler);
 1760|  98.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  98.5k|{
 1317|  98.5k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 92.2k, False: 6.31k]
  ------------------
 1318|  92.2k|        return false;
 1319|  92.2k|    }
 1320|  6.31k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 6.19k]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|  98.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  98.5k|        : format_handler_base{argcount},
 1593|  98.5k|          parse_ctx{source_tag<Source&&>, format},
 1594|  98.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  98.5k|    {
 1596|  98.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  98.5k|        : contiguous_ctx(source, args, loc)
 1544|  98.5k|    {
 1545|  98.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  98.5k|{
 1734|  98.5k|    const auto beg = handler.get_ctx().begin();
 1735|  98.5k|    detail::parse_format_string<false>(format, handler);
 1736|  98.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 96.5k, False: 1.98k]
  |  |  ------------------
  ------------------
 1737|  96.5k|        return unexpected(err.error());
 1738|  96.5k|    }
 1739|  1.98k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  98.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   521k|    {
 1718|   521k|        return ctx.get();
 1719|   521k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   521k|    {
 1549|   521k|        return contiguous_ctx;
 1550|   521k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  64.5k|    {
 1600|   157k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 125k, False: 32.3k]
  ------------------
 1601|   125k|            auto it = get_ctx().begin();
 1602|   125k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 516, False: 124k]
  ------------------
 1603|    516|                SCN_UNLIKELY_ATTR
 1604|    516|                return on_error(
 1605|    516|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|    516|            }
 1607|       |
 1608|   124k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|   124k|                    detail::make_string_view_from_pointers(begin, end));
 1610|   124k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 31.0k, False: 93.8k]
  ------------------
 1611|  31.0k|                SCN_UNLIKELY_ATTR
 1612|  31.0k|                return on_error({scan_error::invalid_format_string,
 1613|  31.0k|                                 "Invalid encoding in format string"});
 1614|  31.0k|            }
 1615|  93.8k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 4.54k, False: 89.2k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  4.54k|                get_ctx().advance_to(
 1618|  4.54k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  4.54k|                auto begin_it = impl::read_while_classic_space(
 1621|  4.54k|                    detail::make_string_view_from_pointers(
 1622|  4.54k|                        detail::to_address(after_space_it),
 1623|  4.54k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  4.54k|                begin = detail::to_address(begin_it) - 1;
 1626|  4.54k|                continue;
 1627|  4.54k|            }
 1628|       |
 1629|  89.2k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 604, False: 88.6k]
  ------------------
 1630|    604|                SCN_UNLIKELY_ATTR
 1631|    604|                return on_error({scan_error::invalid_literal,
 1632|    604|                                 "Unexpected literal character in source"});
 1633|    604|            }
 1634|  88.6k|            get_ctx().advance_to(ranges::next(it));
 1635|  88.6k|        }
 1636|  64.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1666|  4.51k|    {
 1667|  4.51k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  4.51k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  4.51k|        on_visit_scan_arg(
 1671|  4.51k|            impl::default_arg_reader<context_type>{
 1672|  4.51k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  4.51k|            arg);
 1674|  4.51k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  18.2k|{
 1372|  18.2k|    auto arg = ctx.arg(id);
 1373|  18.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.07k, False: 17.1k]
  |  |  ------------------
  ------------------
 1374|  1.07k|        handler.on_error("Failed to find argument with ID");
 1375|  1.07k|    }
 1376|  18.2k|    return arg;
 1377|  18.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  4.51k|    {
 1651|  4.51k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 138, False: 4.37k]
  |  Branch (1651:13): [True: 138, False: 4.37k]
  |  Branch (1651:29): [True: 0, False: 4.37k]
  ------------------
 1652|    138|            SCN_UNLIKELY_ATTR
 1653|    138|            return;
 1654|    138|        }
 1655|       |
 1656|  4.37k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  4.37k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.03k, False: 1.34k]
  |  |  ------------------
  ------------------
 1658|  3.03k|            on_error(r.error());
 1659|  3.03k|        }
 1660|  1.34k|        else {
 1661|  1.34k|            get_ctx().advance_to(*r);
 1662|  1.34k|        }
 1663|  4.37k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  16.8k|    {
 1640|  16.8k|        return parse_ctx.next_arg_id();
 1641|  16.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1643|  1.46k|    {
 1644|  1.46k|        parse_ctx.check_arg_id(id);
 1645|  1.46k|        return id;
 1646|  1.46k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  13.7k|    {
 1680|  13.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  13.7k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  13.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 13.7k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  13.7k|        auto specs = detail::format_specs{};
 1693|  13.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  13.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  13.7k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  13.7k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  13.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 1.87k, False: 11.8k]
  |  Branch (1698:29): [True: 318, False: 11.5k]
  ------------------
 1699|  2.19k|            SCN_UNLIKELY_ATTR
 1700|  2.19k|            on_error({scan_error::invalid_format_string,
 1701|  2.19k|                      "Missing '}' in format string"});
 1702|  2.19k|            return parse_ctx.begin();
 1703|  2.19k|        }
 1704|  11.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 354, False: 11.1k]
  |  |  ------------------
  ------------------
 1705|    354|            return parse_ctx.begin();
 1706|    354|        }
 1707|  11.1k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  11.1k|        on_visit_scan_arg(
 1710|  11.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  11.1k|                                           get_ctx().locale()},
 1712|  11.1k|            arg);
 1713|  11.1k|        return parse_ctx.begin();
 1714|  11.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|  13.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  13.7k|    {
 1391|  13.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  11.1k|    {
 1651|  11.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 122, False: 11.0k]
  |  Branch (1651:13): [True: 122, False: 11.0k]
  |  Branch (1651:29): [True: 0, False: 11.0k]
  ------------------
 1652|    122|            SCN_UNLIKELY_ATTR
 1653|    122|            return;
 1654|    122|        }
 1655|       |
 1656|  11.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  11.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.23k, False: 2.81k]
  |  |  ------------------
  ------------------
 1658|  8.23k|            on_error(r.error());
 1659|  8.23k|        }
 1660|  2.81k|        else {
 1661|  2.81k|            get_ctx().advance_to(*r);
 1662|  2.81k|        }
 1663|  11.0k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.73k|{
 1462|  2.73k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.73k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.73k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.73k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.73k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.73k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.73k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.73k|{
 1355|  2.73k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.73k|    auto it = src.begin();
 1358|   136k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 134k, False: 2.73k]
  ------------------
 1359|   134k|        auto res = get_next_code_point(
 1360|   134k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   134k|                                                                 src.end()));
 1362|   134k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.88k, False: 131k]
  |  |  ------------------
  ------------------
 1363|  2.88k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.88k|        }
 1365|   131k|        else {
 1366|   131k|            dest.push_back(res.value);
 1367|   131k|        }
 1368|   134k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   134k|    }
 1370|  2.73k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   277k|{
 1279|   277k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   277k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   277k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.39k, False: 272k]
  |  |  ------------------
  ------------------
 1283|  5.39k|        return {get_start_for_next_code_point(input),
 1284|  5.39k|                detail::invalid_code_point};
 1285|  5.39k|    }
 1286|   272k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 987, False: 271k]
  |  |  ------------------
  ------------------
 1287|    987|        return {input.end(), detail::invalid_code_point};
 1288|    987|    }
 1289|       |
 1290|   271k|    return {input.begin() + len,
 1291|   271k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   272k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  5.39k|{
 1265|  5.39k|    auto it = input.begin();
 1266|  15.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 13.7k, False: 1.41k]
  ------------------
 1267|  13.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 3.97k, False: 9.77k]
  ------------------
 1268|  3.97k|            break;
 1269|  3.97k|        }
 1270|  13.7k|    }
 1271|  5.39k|    return it;
 1272|  5.39k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  53.4k|    constexpr parse_error(code c) : m_code(c)
  808|  53.4k|    {
  809|  53.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  53.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  53.4k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  22.3k|    {
  823|  22.3k|        return a.m_code == b.m_code;
  824|  22.3k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  4.35k|    {
  827|  4.35k|        return !(a == b);
  828|  4.35k|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|     56|    clocale_restorer(int cat) : m_category(cat)
 1826|     56|    {
 1827|     56|        const auto loc = std::setlocale(cat, nullptr);
 1828|     56|        std::strcpy(m_locbuf, loc);
 1829|     56|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|     56|    {
 1832|       |        // Restore locale to what it was before
 1833|     56|        std::setlocale(m_category, m_locbuf);
 1834|     56|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|     56|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|     56|    {
 1856|     56|        std::setlocale(cat, "C");
 1857|     56|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  14.6k|    {
 3046|  14.6k|        SCN_UNLIKELY_ATTR
 3047|  14.6k|        m_msg = msg;
 3048|  14.6k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  31.8k|    {
 3051|  31.8k|        return m_msg == nullptr;
 3052|  31.8k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  1.26k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5030|   372k|    {
 5031|   372k|        on_charset_range(cp, cp + 1);
 5032|   372k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5035|   375k|    {
 5036|   375k|        if (end <= 127) {
  ------------------
  |  Branch (5036:13): [True: 189k, False: 186k]
  ------------------
 5037|   189k|            return;
 5038|   189k|        }
 5039|       |
 5040|  35.5M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5040:25): [True: 35.5M, False: 183k]
  ------------------
 5041|       |            // TODO: check for overlap
 5042|  35.5M|            if (elem.first == end) {
  ------------------
  |  Branch (5042:17): [True: 546, False: 35.5M]
  ------------------
 5043|    546|                elem.first = begin;
 5044|    546|                return;
 5045|    546|            }
 5046|       |
 5047|  35.5M|            if (elem.second == begin) {
  ------------------
  |  Branch (5047:17): [True: 1.82k, False: 35.5M]
  ------------------
 5048|  1.82k|                elem.second = end;
 5049|  1.82k|                return;
 5050|  1.82k|            }
 5051|  35.5M|        }
 5052|       |
 5053|   183k|        extra_ranges.push_back(std::make_pair(begin, end));
 5054|   183k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5057|    846|    {
 5058|       |        // no-op
 5059|    846|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5072|   382k|    {
 5073|   382k|        return err;
 5074|   382k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5386|  1.58k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  36.9k|{
  458|  36.9k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  36.9k|        static_cast<unsigned char>(ch))];
  460|  36.9k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   278k|{
  469|   278k|    return static_cast<unsigned char>(ch) <= 127;
  470|   278k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  3.73k|{
  474|  3.73k|#if WCHAR_MIN < 0
  475|  3.73k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 3.70k, False: 30]
  |  Branch (475:23): [True: 3.58k, False: 120]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  3.73k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   305k|{
  483|   305k|    return cp <= 127;
  484|   305k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  30.9k|{
  539|  30.9k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  30.9k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  48.0k|{
  784|  48.0k|    return e != eof_error::good;
  785|  48.0k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    354|{
  798|    354|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    354|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    354|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  1.10k|{
  845|  1.10k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  1.10k|    return parse_error::eof;
  847|  1.10k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.35k|{
  854|  4.35k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.35k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.35k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 146, False: 4.20k]
  ------------------
  859|    146|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|    146|    }
  861|       |
  862|  4.20k|    return detail::unexpected_scan_error(code, msg);
  863|  4.35k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.38k|{
  868|  4.38k|    return [code, msg](parse_error err) {
  869|  4.38k|        assert(err != parse_error::good);
  870|  4.38k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  4.38k|    };
  872|  4.38k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  3.68k|{
 2320|  3.68k|    unsigned char running_diff{0};
 2321|  12.8k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 9.19k, False: 3.68k]
  ------------------
 2322|  9.19k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  9.19k|    }
 2324|  3.68k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 0, False: 3.68k]
  |  Branch (2324:33): [True: 0, False: 3.68k]
  ------------------
 2325|  3.68k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2402|   157k|{
 2403|   157k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2403:9): [True: 37.8k, False: 119k]
  ------------------
 2404|   157k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2404:10): [True: 224, False: 37.6k]
  ------------------
 2405|  37.8k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2405:10): [True: 108, False: 37.5k]
  ------------------
 2406|  37.8k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2406:10): [True: 72, False: 37.4k]
  ------------------
 2407|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2408|  37.8k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2408:11): [True: 12.1k, False: 25.2k]
  |  Branch (2408:27): [True: 2.15k, False: 10.0k]
  |  Branch (2408:43): [True: 1.34k, False: 810]
  ------------------
 2409|  37.8k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2409:11): [True: 10.0k, False: 26.1k]
  |  Branch (2409:27): [True: 74, False: 9.94k]
  ------------------
 2410|  37.8k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2410:11): [True: 9.88k, False: 26.1k]
  |  Branch (2410:27): [True: 218, False: 9.66k]
  ------------------
 2411|  37.8k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2411:11): [True: 9.66k, False: 26.1k]
  |  Branch (2411:27): [True: 462, False: 9.20k]
  ------------------
 2412|  37.8k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2412:11): [True: 9.20k, False: 26.1k]
  |  Branch (2412:27): [True: 214, False: 8.98k]
  ------------------
 2413|  37.8k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2413:11): [True: 8.98k, False: 26.1k]
  |  Branch (2413:27): [True: 206, False: 8.78k]
  ------------------
 2414|  37.8k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2414:11): [True: 8.78k, False: 26.1k]
  |  Branch (2414:27): [True: 284, False: 8.49k]
  ------------------
 2415|  37.8k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2415:11): [True: 8.28k, False: 26.3k]
  |  Branch (2415:28): [True: 474, False: 7.81k]
  ------------------
 2416|  37.8k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2416:11): [True: 7.81k, False: 26.3k]
  |  Branch (2416:28): [True: 456, False: 7.35k]
  ------------------
 2417|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2418|  37.8k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2418:11): [True: 7.50k, False: 26.2k]
  |  Branch (2418:28): [True: 78, False: 7.42k]
  ------------------
 2419|       |         // Supplemental Symbols and Pictographs:
 2420|  37.8k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2420:11): [True: 7.42k, False: 26.2k]
  |  Branch (2420:28): [True: 72, False: 7.35k]
  ------------------
 2421|  4.29k|        return 2;
 2422|  4.29k|    }
 2423|   153k|    return 1;
 2424|   157k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2427|  96.1k|{
 2428|  96.1k|    return calculate_text_width_for_fmt_v10(cp);
 2429|  96.1k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2442|    262|{
 2443|    262|    return calculate_text_width_for_fmt_v10(cp);
 2444|    262|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  16.4k|{
 3240|  16.4k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  16.4k|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  7.76k|{
 3244|  7.76k|#if WCHAR_MIN < 0
 3245|  7.76k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 7.76k, False: 0]
  |  Branch (3245:20): [True: 7.65k, False: 112]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  7.65k|        return char_to_int(static_cast<char>(ch));
 3250|  7.65k|    }
 3251|    112|    return 255;
 3252|  7.76k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4351|    306|{
 4352|    306|    RE2::Options opt{RE2::Quiet};
 4353|    306|    std::string_view stringflags{};
 4354|       |
 4355|    306|    if ((flags & detail::regex_flags::multiline) == detail::regex_flags::none) {
  ------------------
  |  Branch (4355:9): [True: 294, False: 12]
  ------------------
 4356|    294|        stringflags = "(?m)";
 4357|    294|    }
 4358|    306|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4358:9): [True: 6, False: 300]
  ------------------
 4359|    306|        detail::regex_flags::none) {
 4360|      6|        opt.set_dot_nl(true);
 4361|      6|    }
 4362|    306|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4362:9): [True: 6, False: 300]
  ------------------
 4363|      6|        opt.set_case_sensitive(false);
 4364|      6|    }
 4365|    306|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4365:9): [True: 6, False: 300]
  ------------------
 4366|      6|        opt.set_never_capture(true);
 4367|      6|    }
 4368|       |
 4369|    306|    return {opt, stringflags};
 4370|    306|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4680|    312|{
 4681|    312|    std::string result{pattern};
 4682|  2.77k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4682:24): [True: 2.46k, False: 312]
  ------------------
 4683|  2.46k|        result.replace(n, 2, "/");
 4684|  2.46k|        ++n;
 4685|  2.46k|    }
 4686|    312|    return result;
 4687|    312|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  7.63k|{
 6047|  7.63k|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 2.08k, False: 5.55k]
  ------------------
 6048|  2.08k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 910, False: 1.17k]
  ------------------
 6049|    910|            return detail::unexpected_scan_error(
 6050|    910|                scan_error::length_too_short,
 6051|    910|                "Scanned value too narrow, width did not exceed what "
 6052|    910|                "was specified in the format string");
 6053|    910|        }
 6054|  2.08k|    }
 6055|  6.72k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 2.85k, False: 3.87k]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|  2.85k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|  2.85k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|  2.85k|                   specs.precision);
 6059|  2.85k|    }
 6060|  6.72k|    return {};
 6061|  6.72k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  61.1k|    {
  304|  61.1k|        ranges::advance(x, n);
  305|  61.1k|        return x;
  306|  61.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  61.1k|    {
  268|  61.1k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  61.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   106k|    {
  151|   106k|        i += n;
  152|   106k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  51.0k|    {
  108|  51.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  51.0k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  51.0k|    {
   87|  51.0k|        return s - i;
   88|  51.0k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.68k|    {
  304|  5.68k|        ranges::advance(x, n);
  305|  5.68k|        return x;
  306|  5.68k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.68k|    {
  268|  5.68k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.68k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.68k|    {
  151|  5.68k|        i += n;
  152|  5.68k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.42k|    {
  108|  2.42k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.42k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.42k|    {
   87|  2.42k|        return s - i;
   88|  2.42k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   146k|    {
 2993|   146k|        return m_current;
 2994|   146k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   246k|    {
 2993|   246k|        return m_current;
 2994|   246k|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5661|  2.28k|    {
 5662|  2.28k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  2.28k|        else {
 5667|  2.28k|            detail::check_char_type_specs(specs, eh);
 5668|  2.28k|        }
 5669|  2.28k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.63k, False: 652]
  |  |  ------------------
  ------------------
 5670|  1.63k|            return detail::unexpected_scan_error(
 5671|  1.63k|                scan_error::invalid_format_string, eh.m_msg);
 5672|  1.63k|        }
 5673|    652|        return {};
 5674|  2.28k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  23.6k|    {
  763|  23.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  23.6k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.64k|        : m_fptr([](storage fn,
  743|  2.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.64k|              cvref<T> obj = *get<T>(fn);
  745|  2.64k|              if constexpr (std::is_void_v<R>) {
  746|  2.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.64k|              }
  748|  2.64k|              else {
  749|  2.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.64k|              }
  751|  2.64k|          }),
  752|  2.64k|          m_storage(std::addressof(f))
  753|  2.64k|    {
  754|  2.64k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.95k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.95k|              else {
  749|  6.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.95k|              }
  751|  6.95k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.95k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.95k|        else if constexpr (std::is_object_v<T>) {
  688|  6.95k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.95k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.64k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.64k|        {
  662|  2.64k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|   693k|    {
  763|   693k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   693k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   693k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  22.7k|        : m_fptr([](storage fn,
  743|  22.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.7k|              cvref<T> obj = *get<T>(fn);
  745|  22.7k|              if constexpr (std::is_void_v<R>) {
  746|  22.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.7k|              }
  748|  22.7k|              else {
  749|  22.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.7k|              }
  751|  22.7k|          }),
  752|  22.7k|          m_storage(std::addressof(f))
  753|  22.7k|    {
  754|  22.7k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   322k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   322k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   322k|              else {
  749|   322k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   322k|              }
  751|   322k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   322k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   322k|        else if constexpr (std::is_object_v<T>) {
  688|   322k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   322k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  22.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  22.7k|        {
  662|  22.7k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5656|  1.86k|    {
 5657|  1.86k|        return false;
 5658|  1.86k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.35k|    return [code, msg](parse_error err) {
  869|  4.35k|        assert(err != parse_error::good);
  870|  4.35k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  4.35k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     62|    {
 1879|     62|        auto stdloc = loc.get<std::locale>();
 1880|     62|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     62|        grouping = numpunct.grouping();
 1882|     62|        thousands_sep =
 1883|     62|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 62]
  ------------------
 1884|     62|        decimal_point = numpunct.decimal_point();
 1885|     62|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|     92|{
 1816|     92|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 92, False: 0]
  ------------------
 1817|     92|        return std::use_facet<Facet>(stdloc);
 1818|     92|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     92|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  40.6k|{
 2449|  40.6k|    size_t count{0};
 2450|  40.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  40.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  40.6k|    });
 2453|  40.6k|    return count;
 2454|  40.6k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  40.6k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  40.6k|    auto it = input.begin();
 1547|  92.7k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 52.0k, False: 40.6k]
  ------------------
 1548|  52.0k|        auto res = get_next_code_point(
 1549|  52.0k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  52.0k|        cb(res.value);
 1551|  52.0k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  52.0k|    }
 1553|  40.6k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  61.3k|    {
  763|  61.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  61.3k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  40.6k|        : m_fptr([](storage fn,
  743|  40.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.6k|              cvref<T> obj = *get<T>(fn);
  745|  40.6k|              if constexpr (std::is_void_v<R>) {
  746|  40.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.6k|              }
  748|  40.6k|              else {
  749|  40.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.6k|              }
  751|  40.6k|          }),
  752|  40.6k|          m_storage(std::addressof(f))
  753|  40.6k|    {
  754|  40.6k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  52.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.0k|              cvref<T> obj = *get<T>(fn);
  745|  52.0k|              if constexpr (std::is_void_v<R>) {
  746|  52.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  52.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  52.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.0k|        else if constexpr (std::is_object_v<T>) {
  688|  52.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.0k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  52.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  52.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  52.0k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  40.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.6k|        {
  662|  40.6k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.34k|    {
 1681|  4.34k|        return m_view;
 1682|  4.34k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.64k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2520|  28.3k|    {
 2521|  28.3k|        return m_multibyte_left;
 2522|  28.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2525|  8.74k|    {
 2526|  8.74k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  8.74k|        return _get_width_at_current_cp_start(
 2528|  8.74k|                   _get_cp_length_at_current()) == 2;
 2529|  8.74k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2753|  92.8k|    {
 2754|  92.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 91.3k]
  |  |  ------------------
  ------------------
 2755|  1.48k|            return 0;
 2756|  1.48k|        }
 2757|       |
 2758|  91.3k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 57.5k, False: 33.8k]
  ------------------
 2759|  57.5k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  57.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  57.5k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  57.5k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  57.5k|        }
 2763|       |
 2764|  33.8k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  33.8k|                                           cplen);
 2766|  33.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 422, False: 33.4k]
  |  |  ------------------
  ------------------
 2767|    422|            return 0;
 2768|    422|        }
 2769|       |
 2770|  33.4k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  33.4k|        return static_cast<difference_type>(
 2772|  33.4k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  33.8k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  36.6k|{
 1956|  36.6k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  36.6k|    if constexpr (ranges::sized_range<Range>) {
 1959|  36.6k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  36.6k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 530, False: 36.0k]
  ------------------
 1961|    530|            return unexpected(eof_error::eof);
 1962|    530|        }
 1963|       |
 1964|  36.0k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  36.6k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2747|  92.8k|    {
 2748|  92.8k|        return static_cast<difference_type>(
 2749|  92.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  92.8k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2532|   133k|    {
 2533|   133k|        return *m_current;
 2534|   133k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2541|   161k|    {
 2542|   161k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|   161k|        _increment_current();
 2544|   161k|        return *this;
 2545|   161k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2776|   161k|    {
 2777|   161k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 84.1k, False: 76.9k]
  ------------------
 2778|  84.1k|            auto cplen = _get_cp_length_at_current();
 2779|  84.1k|            m_multibyte_left = cplen - 1;
 2780|  84.1k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  84.1k|        }
 2782|  76.9k|        else {
 2783|  76.9k|            --m_multibyte_left;
 2784|  76.9k|        }
 2785|       |
 2786|   161k|        ++m_current;
 2787|   161k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|  95.3k|    {
 2638|  95.3k|        return !(a == b);
 2639|  95.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|   107k|    {
 2630|   107k|        return a.m_current == b.m_current;
 2631|   107k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2536|  14.6k|    {
 2537|  14.6k|        return *m_current;
 2538|  14.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.49k|    {
  268|  1.49k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.49k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.49k|    {
  161|  1.49k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.49k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.49k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.49k|        else {
  169|  1.49k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.49k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.49k|        }
  173|  1.49k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  25.9k|    {
 1989|  25.9k|        return !codepoint.empty();
 1990|  25.9k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  2.10k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.10k|    else {
 1788|  2.10k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.10k|    }
 1790|  2.10k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  2.10k|    {
 1636|  2.10k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.10k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  2.10k|    {
 1720|  2.10k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  2.10k|        else {
 1753|  2.10k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  2.10k|            if constexpr (ranges::common_range<Range>) {
 1758|  2.10k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  2.10k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  2.10k|            m_view = string_view_type{str};
 1768|  2.10k|        }
 1769|  2.10k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2480|  25.2k|        : m_current(x), m_end(s), m_count(n)
 2481|  25.2k|    {
 2482|  25.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2512|   153k|    {
 2513|   153k|        return m_current;
 2514|   153k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  10.2k|    {
 2943|  10.2k|        return take_width_view{r, n};
 2944|  10.2k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2910|  10.2k|        : m_base(base), m_count(count)
 2911|  10.2k|    {
 2912|  10.2k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2822|  10.2k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5701|    366|    {
 5702|    366|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 330, False: 36]
  ------------------
 5703|    366|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 36]
  ------------------
 5704|    330|            return read_default(range, value, loc);
 5705|    330|        }
 5706|       |
 5707|     36|        reader_impl_for_int<CharT> reader{};
 5708|     36|        signed char tmp_value{};
 5709|     36|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     36|        value = static_cast<signed char>(value);
 5711|     36|        return ret;
 5712|    366|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5683|    330|    {
 5684|    330|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    330|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    330|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    330|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    330|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5601|    330|    {
 5602|    330|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    330|        ch = *range.begin();
 5604|    330|        return it;
 5605|    330|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  2.42k|{
 1945|  2.42k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  2.42k|    return ranges::next(range.begin());
 1950|  2.42k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  2.42k|{
  951|  2.42k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  2.42k|    return eof_error::good;
  955|  2.42k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  2.42k|{
  945|  2.42k|    return is_range_eof(r.begin(), r.end());
  946|  2.42k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  28.4k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  28.4k|    {
  938|  28.4k|        return begin == end;
  939|  28.4k|    }
  940|  28.4k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|   145k|        {
 2879|   145k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 6.22k, False: 139k]
  |  Branch (2879:39): [True: 1.15k, False: 5.07k]
  ------------------
 2880|   145k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 1.36k, False: 142k]
  ------------------
 2881|   145k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 22.1k, False: 120k]
  |  Branch (2881:39): [True: 8.74k, False: 13.3k]
  ------------------
 2882|   142k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 100, False: 8.64k]
  ------------------
 2883|   145k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2926|  71.1k|    {
 2927|  71.1k|        return sentinel<true>{m_base.get().end()};
 2928|  71.1k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2825|   121k|    {
 2826|   121k|        return view;
 2827|   121k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2859|  71.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  71.1k|    static_cast<    \
  |  |  935|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.46k|    {
  296|  2.46k|        ++x;
  297|  2.46k|        return x;
  298|  2.46k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2920|  25.2k|    {
 2921|  25.2k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  25.2k|                                      m_count};
 2923|  25.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|     36|    {
 3590|     36|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     36|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     36|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 36]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     36|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 36]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     36|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     36|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3616|     36|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|  1.03k|{
 3377|  1.03k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  1.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  1.03k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  1.03k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  1.03k|        parse_integer_base_prefix(
 3382|  1.03k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  1.03k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 1.03k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  1.03k|    else {
 3394|  1.03k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 1.03k]
  |  Branch (3394:13): [True: 1.03k, False: 0]
  ------------------
 3395|  1.03k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 1.03k, False: 0]
  ------------------
 3396|  1.03k|            digits_begin_it = base_prefix_begin_it;
 3397|  1.03k|        }
 3398|  1.03k|    }
 3399|       |
 3400|  1.03k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 1.03k, False: 0]
  ------------------
 3401|  1.03k|        sign = sign_type::plus_sign;
 3402|  1.03k|    }
 3403|  1.03k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  1.03k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  1.03k|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|  1.39k|{
 3258|  1.39k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.39k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 1.39k, False: 0]
  ------------------
 3260|  1.39k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 1.39k, False: 0]
  ------------------
 3261|  1.39k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  1.39k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  1.39k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|  1.39k|{
 2372|  1.39k|    auto it = read_code_unit(range);
 2373|  1.39k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.39k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  2.78k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.78k, False: 1.39k]
  ------------------
 2378|  2.78k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 2.78k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  2.78k|    }
 2382|       |
 2383|  1.39k|    return unexpected(parse_error::error);
 2384|  1.39k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|  1.03k|{
 3344|  1.03k|    switch (base) {
 3345|     14|        case 2:
  ------------------
  |  Branch (3345:9): [True: 14, False: 1.02k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     14|                    false};
 3349|       |
 3350|     14|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 14, False: 1.02k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     14|            bool zero_parsed = false;
 3353|     14|            auto it = apply_opt(
 3354|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     14|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    326|        case 16:
  ------------------
  |  Branch (3358:9): [True: 326, False: 710]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    326|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    326|                    false};
 3362|       |
 3363|     26|        case 0:
  ------------------
  |  Branch (3363:9): [True: 26, False: 1.01k]
  ------------------
 3364|       |            // detect base
 3365|     26|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    656|        default:
  ------------------
  |  Branch (3367:9): [True: 656, False: 380]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    656|            return {range.begin(), base, false};
 3370|  1.03k|    }
 3371|  1.03k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    354|{
 2391|    354|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 354, False: 0]
  ------------------
 2392|    354|        return range.begin();
 2393|    354|    }
 2394|      0|    return *result;
 2395|    354|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     40|{
 3295|     40|    return read_matching_string_classic_nocase(range, "0b");
 3296|     40|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|  1.47k|{
 2331|  1.47k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.47k|    else {
 2344|  1.47k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.47k|            if (ch < 'A' || ch > 'Z') {
 2346|  1.47k|                return ch;
 2347|  1.47k|            }
 2348|  1.47k|            return static_cast<char_type>(ch +
 2349|  1.47k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.47k|        };
 2351|       |
 2352|  1.47k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 1.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.21k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.21k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.21k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.21k, False: 0]
  |  |  ------------------
  ------------------
 2357|  1.21k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.21k|                    return ascii_tolower(a) ==
 2359|  1.21k|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.21k|                }))) {
 2361|  1.21k|            return unexpected(parse_error::error);
 2362|  1.21k|        }
 2363|       |
 2364|      0|        return it;
 2365|  1.21k|    }
 2366|  1.47k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  7.14k|{
 1956|  7.14k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  7.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  7.14k|    else {
 1967|  7.14k|        auto it = range.begin();
 1968|  7.14k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 7.14k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  26.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 19.5k, False: 6.81k]
  ------------------
 1973|  19.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 332, False: 19.2k]
  ------------------
 1974|    332|                return unexpected(eof_error::eof);
 1975|    332|            }
 1976|  19.5k|        }
 1977|       |
 1978|  6.81k|        return it;
 1979|  7.14k|    }
 1980|  7.14k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  7.14k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  7.14k|    else {
 1116|  7.14k|        return 0;
 1117|  7.14k|    }
 1118|  7.14k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  1.21k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.21k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 70, False: 1.14k]
  |  Branch (2345:29): [True: 1.14k, False: 0]
  ------------------
 2346|  1.21k|                return ch;
 2347|  1.21k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.21k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     40|{
 3309|     40|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 40]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     40|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 40]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     40|    return unexpected(parse_error::error);
 3319|     40|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     40|{
 2246|     40|    auto it = read_code_unit(range);
 2247|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2252|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     40|        return unexpected(parse_error::error);
 2254|     40|    }
 2255|       |
 2256|      0|    return *it;
 2257|     40|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     40|{
 1945|     40|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     40|    return ranges::next(range.begin());
 1950|     40|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     40|{
  951|     40|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     40|    return eof_error::good;
  955|     40|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  26.0k|{
  945|  26.0k|    return is_range_eof(r.begin(), r.end());
  946|  26.0k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    352|{
 3302|    352|    return read_matching_string_classic_nocase(range, "0x");
 3303|    352|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     26|{
 3325|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 26]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 26]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     26|    {
 3332|     26|        bool zero_parsed{false};
 3333|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 26]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     26|    }
 3337|     26|    return {range.begin(), 10, false};
 3338|     26|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|  1.01k|{
 3411|  1.01k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|  1.01k|    else {
 3422|  1.01k|        return read_while1_code_unit(range,
 3423|  1.01k|                                     [&](char_type ch) noexcept {
 3424|  1.01k|                                         return char_to_int(ch) < base;
 3425|  1.01k|                                     })
 3426|  1.01k|            .transform_error(map_parse_error_to_scan_error(
 3427|  1.01k|                scan_error::invalid_scanned_value,
 3428|  1.01k|                "Failed to parse integer: No digits found"));
 3429|  1.01k|    }
 3430|  1.01k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|  1.37k|{
 2095|  1.37k|    auto it = read_while_code_unit(range, pred);
 2096|  1.37k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 1.37k, False: 0]
  ------------------
 2097|  1.37k|        return unexpected(parse_error::error);
 2098|  1.37k|    }
 2099|      0|    return it;
 2100|  1.37k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|  1.37k|{
 2075|  1.37k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.37k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|  1.37k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.37k|    else {
 2060|  1.37k|        auto first = range.begin();
 2061|  1.37k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.37k, False: 0]
  ------------------
 2062|  1.37k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.37k, False: 0]
  ------------------
 2063|  1.37k|                return first;
 2064|  1.37k|            }
 2065|  1.37k|        }
 2066|      0|        return first;
 2067|  1.37k|    }
 2068|  1.37k|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  73.5k|        {
 2892|  73.5k|            return !(y == x);
 2893|  73.5k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|  1.01k|        : m_fptr([](storage fn,
  743|  1.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.01k|              cvref<T> obj = *get<T>(fn);
  745|  1.01k|              if constexpr (std::is_void_v<R>) {
  746|  1.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.01k|              }
  748|  1.01k|              else {
  749|  1.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.01k|              }
  751|  1.01k|          }),
  752|  1.01k|          m_storage(std::addressof(f))
  753|  1.01k|    {
  754|  1.01k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.01k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.01k|              else {
  749|  1.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.01k|              }
  751|  1.01k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.01k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.01k|        else if constexpr (std::is_object_v<T>) {
  688|  1.01k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.01k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3423|  1.01k|                                     [&](char_type ch) noexcept {
 3424|  1.01k|                                         return char_to_int(ch) < base;
 3425|  1.01k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|  1.01k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.01k|        {
  662|  1.01k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     24|{
 3441|     24|    std::basic_string<CharT> output;
 3442|     24|    std::string thsep_indices;
 3443|     24|    auto it = range.begin();
 3444|     24|    bool digit_matched = false;
 3445|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 24, False: 0]
  ------------------
 3446|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 24]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24, False: 0]
  ------------------
 3451|     24|            break;
 3452|     24|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     24|    }
 3458|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3459|     24|        return detail::unexpected_scan_error(
 3460|     24|            scan_error::invalid_scanned_value,
 3461|     24|            "Failed to parse integer: No digits found");
 3462|     24|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     24|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2516|   299k|    {
 2517|   299k|        return m_count;
 2518|   299k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5701|    280|    {
 5702|    280|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 258, False: 22]
  ------------------
 5703|    280|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 22]
  ------------------
 5704|    258|            return read_default(range, value, loc);
 5705|    258|        }
 5706|       |
 5707|     22|        reader_impl_for_int<CharT> reader{};
 5708|     22|        signed char tmp_value{};
 5709|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     22|        value = static_cast<signed char>(value);
 5711|     22|        return ret;
 5712|    280|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5683|    880|    {
 5684|    880|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    880|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    880|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    880|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    880|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5601|    880|    {
 5602|    880|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    880|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    880|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    880|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    880|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 880]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    880|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    880|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    880|        ch = *range.begin();
 5604|    880|        return it;
 5605|    880|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.39k|{
 1945|  6.39k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.39k|    return ranges::next(range.begin());
 1950|  6.39k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.3k|{
  951|  21.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.3k|    return eof_error::good;
  955|  21.3k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   306k|{
  945|   306k|    return is_range_eof(r.begin(), r.end());
  946|   306k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   367k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   367k|    {
  938|   367k|        return begin == end;
  939|   367k|    }
  940|   367k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  55.5k|    {
  296|  55.5k|        ++x;
  297|  55.5k|        return x;
  298|  55.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|     22|    {
 3590|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     22|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 22]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 22]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3616|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     22|                    parse_integer_digits_without_thsep(
 3618|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     22|                        prefix_result.parsed_base));
 3620|       |
 3621|     22|            auto buf = make_contiguous_buffer(
 3622|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|     22|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  2.73k|{
 3377|  2.73k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  2.73k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  2.73k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  2.73k|        parse_integer_base_prefix(
 3382|  2.73k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  2.73k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 2.73k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  2.73k|    else {
 3394|  2.73k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 2.73k]
  ------------------
 3395|  2.73k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 2.73k, False: 0]
  ------------------
 3396|  2.73k|            digits_begin_it = base_prefix_begin_it;
 3397|  2.73k|        }
 3398|  2.73k|    }
 3399|       |
 3400|  2.73k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 2.73k, False: 0]
  ------------------
 3401|  2.73k|        sign = sign_type::plus_sign;
 3402|  2.73k|    }
 3403|  2.73k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  2.73k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  2.73k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  3.64k|{
 3258|  3.64k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  3.64k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 3.64k, False: 0]
  ------------------
 3260|  3.64k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 3.64k, False: 0]
  ------------------
 3261|  3.64k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  3.64k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  3.64k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.64k|{
 2372|  3.64k|    auto it = read_code_unit(range);
 2373|  3.64k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.64k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  7.28k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 7.28k, False: 3.64k]
  ------------------
 2378|  7.28k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 7.28k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  7.28k|    }
 2382|       |
 2383|  3.64k|    return unexpected(parse_error::error);
 2384|  3.64k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  2.73k|{
 3344|  2.73k|    switch (base) {
 3345|      6|        case 2:
  ------------------
  |  Branch (3345:9): [True: 6, False: 2.72k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      6|                    false};
 3349|       |
 3350|     26|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 26, False: 2.70k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     26|            bool zero_parsed = false;
 3353|     26|            auto it = apply_opt(
 3354|     26|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     26|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    896|        case 16:
  ------------------
  |  Branch (3358:9): [True: 896, False: 1.83k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    896|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    896|                    false};
 3362|       |
 3363|     16|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16, False: 2.71k]
  ------------------
 3364|       |            // detect base
 3365|     16|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  1.78k|        default:
  ------------------
  |  Branch (3367:9): [True: 1.78k, False: 944]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  1.78k|            return {range.begin(), base, false};
 3370|  2.73k|    }
 3371|  2.73k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    928|{
 2391|    928|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 928, False: 0]
  ------------------
 2392|    928|        return range.begin();
 2393|    928|    }
 2394|      0|    return *result;
 2395|    928|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     22|{
 3295|     22|    return read_matching_string_classic_nocase(range, "0b");
 3296|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.69k|{
 2331|  3.69k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  3.69k|                  std::is_same_v<char_type, char>) {
 2335|  3.69k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 8, False: 3.68k]
  ------------------
 2336|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|      8|        }
 2338|  3.68k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 3.68k, False: 0]
  ------------------
 2339|  3.68k|            return unexpected(parse_error::error);
 2340|  3.68k|        }
 2341|      0|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  3.69k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     42|{
 3309|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 42]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 42]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     42|    return unexpected(parse_error::error);
 3319|     42|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.87k|{
 2246|  1.87k|    auto it = read_code_unit(range);
 2247|  1.87k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.87k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.87k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.87k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.87k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.87k|        return unexpected(parse_error::error);
 2254|  1.87k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.87k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|    912|{
 3302|    912|    return read_matching_string_classic_nocase(range, "0x");
 3303|    912|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     16|{
 3325|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     16|    {
 3332|     16|        bool zero_parsed{false};
 3333|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 16]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     16|    }
 3337|     16|    return {range.begin(), 10, false};
 3338|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  2.71k|{
 3411|  2.71k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  2.71k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  2.71k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.71k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  2.71k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  2.71k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     20|{
 3441|     20|    std::basic_string<CharT> output;
 3442|     20|    std::string thsep_indices;
 3443|     20|    auto it = range.begin();
 3444|     20|    bool digit_matched = false;
 3445|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 20, False: 0]
  ------------------
 3446|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 20]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 20, False: 0]
  ------------------
 3451|     20|            break;
 3452|     20|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     20|    }
 3458|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3459|     20|        return detail::unexpected_scan_error(
 3460|     20|            scan_error::invalid_scanned_value,
 3461|     20|            "Failed to parse integer: No digits found");
 3462|     20|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     20|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  12.0k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  12.0k|                  ranges::sized_range<Range>) {
 1785|  12.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  12.0k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  12.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  12.0k|    {
 1589|  12.0k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  64.3k|    {
 1602|  64.3k|        return sv;
 1603|  64.3k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5989|  1.14k|{
 5990|  1.14k|    using char_type = detail::char_t<Range>;
 5991|  1.14k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|  1.14k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 482, False: 658]
  ------------------
 5994|    482|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|    482|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|    482|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 378, False: 104]
  ------------------
 5998|    378|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|    378|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 112, False: 266]
  ------------------
 6001|    112|                auto prefix_width =
 6002|    112|                    static_cast<std::ptrdiff_t>(
 6003|    112|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|    112|                    ranges::distance(range.begin(), it);
 6005|    112|                return result_type{it, prefix_width};
 6006|    112|            }
 6007|    266|            return result_type{it, 0};
 6008|    378|        }
 6009|       |
 6010|    104|        auto max_width_view = take_width(range, max_width);
 6011|    104|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    104|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 104, False: 0]
  ------------------
 6014|    104|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    104|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    104|    }
 6018|       |
 6019|    658|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|    658|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 334, False: 324]
  ------------------
 6021|    334|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|    334|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 94, False: 240]
  ------------------
 6024|     94|            auto prefix_width =
 6025|     94|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|     94|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|     94|            return result_type{it, prefix_width};
 6028|     94|        }
 6029|    240|        return result_type{it, 0};
 6030|    334|    }
 6031|       |
 6032|    324|    auto max_width_view = take_width(range, max_width);
 6033|    324|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|    324|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 324, False: 0]
  ------------------
 6036|    324|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|    324|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|    324|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    514|{
 2075|    514|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    514|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    700|{
 2056|    700|    if constexpr (ranges::common_range<Range>) {
 2057|    700|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    700|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    482|        : m_fptr([](storage fn,
  743|    482|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    482|              cvref<T> obj = *get<T>(fn);
  745|    482|              if constexpr (std::is_void_v<R>) {
  746|    482|                  obj(static_cast<decltype(args)>(args)...);
  747|    482|              }
  748|    482|              else {
  749|    482|                  return obj(static_cast<decltype(args)>(args)...);
  750|    482|              }
  751|    482|          }),
  752|    482|          m_storage(std::addressof(f))
  753|    482|    {
  754|    482|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|    900|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    900|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    900|              else {
  749|    900|                  return obj(static_cast<decltype(args)>(args)...);
  750|    900|              }
  751|    900|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    900|    {
  684|    900|        if constexpr (std::is_const_v<T>) {
  685|    900|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    900|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5995|    900|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    482|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    482|        {
  667|    482|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    296|{
 2075|    296|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    296|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    590|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    590|    else {
 2060|    590|        auto first = range.begin();
 2061|  9.85k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 9.52k, False: 328]
  ------------------
 2062|  9.52k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 262, False: 9.26k]
  ------------------
 2063|    262|                return first;
 2064|    262|            }
 2065|  9.52k|        }
 2066|    328|        return first;
 2067|    590|    }
 2068|    590|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2135|    334|{
 2136|    334|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    334|    auto it = range.begin();
 2139|    714|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 714, False: 0]
  ------------------
 2140|    714|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    714|                                           needle.size());
 2142|    714|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 6, False: 708]
  ------------------
 2143|      6|            return it;
 2144|      6|        }
 2145|    708|        static_assert(
 2146|    708|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    708|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 328, False: 380]
  ------------------
 2148|    328|            return it;
 2149|    328|        }
 2150|    380|        it = *r;
 2151|    380|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2135|    324|{
 2136|    324|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    324|    auto it = range.begin();
 2139|    674|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 622, False: 52]
  ------------------
 2140|    622|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    622|                                           needle.size());
 2142|    622|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 70, False: 552]
  ------------------
 2143|     70|            return it;
 2144|     70|        }
 2145|    552|        static_assert(
 2146|    552|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    552|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 202, False: 350]
  ------------------
 2148|    202|            return it;
 2149|    202|        }
 2150|    350|        it = *r;
 2151|    350|    }
 2152|     52|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|     52|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     52|    return it;
 2154|     52|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    552|{
 3066|    552|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 552]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    552|    return read_while_classic_space(range);
 3077|    552|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    552|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    552|    else {
 2225|    552|        auto it = range.begin();
 2226|       |
 2227|    552|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|    552|            auto seg = get_contiguous_beginning(range);
 2229|    552|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|    552|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 552]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|    552|            ranges::advance(it, seg.size());
 2234|    552|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    552|            return detail::is_cp_space(cp);
 2238|    552|        });
 2239|    552|    }
 2240|    552|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.49k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.49k|    else {
 1059|  1.49k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.49k|    }
 1061|  1.49k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    780|{
 2181|    780|    return read_until_code_point(range, std::not_fn(pred));
 2182|    780|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|  1.00k|{
 2160|  1.00k|    auto it = range.begin();
 2161|  14.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 14.2k, False: 384]
  ------------------
 2162|  14.2k|        const auto val =
 2163|  14.2k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  14.2k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  14.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12.9k, False: 1.25k]
  |  |  ------------------
  ------------------
 2165|  12.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  12.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  12.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 618, False: 12.3k]
  ------------------
 2168|    618|                return it;
 2169|    618|            }
 2170|  12.9k|        }
 2171|  13.6k|        it = val.iterator;
 2172|  13.6k|    }
 2173|       |
 2174|    384|    return it;
 2175|  1.00k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  25.9k|{
 1998|  25.9k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  25.9k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  25.9k|    auto it = range.begin();
 2002|  25.9k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  25.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.67k, False: 23.3k]
  |  |  ------------------
  ------------------
 2005|  2.67k|        ++it;
 2006|  2.67k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  2.67k|        return {it, {}};
 2008|  2.67k|    }
 2009|       |
 2010|  23.3k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 20.1k, False: 3.18k]
  ------------------
 2011|  20.1k|        ++it;
 2012|  20.1k|        return {it, string_type(1, *range.begin())};
 2013|  20.1k|    }
 2014|       |
 2015|  3.18k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  3.18k|    return {it, string_type{range.begin(), it}};
 2017|  23.3k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  2.67k|{
 1265|  2.67k|    auto it = input.begin();
 1266|  3.49k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 3.28k, False: 204]
  ------------------
 1267|  3.28k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 2.47k, False: 812]
  ------------------
 1268|  2.47k|            break;
 1269|  2.47k|        }
 1270|  3.28k|    }
 1271|  2.67k|    return it;
 1272|  2.67k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  3.18k|    {
  283|  3.18k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.18k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  3.18k|    {
  227|  3.18k|        constexpr iter_difference_t<I> zero{0};
  228|  3.18k|        iter_difference_t<I> counter{0};
  229|       |
  230|  3.18k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.18k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  3.18k|        else {
  237|  10.7k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 7.69k, False: 3.07k]
  |  Branch (237:34): [True: 7.58k, False: 114]
  ------------------
  238|  7.58k|                ++i;
  239|  7.58k|                ++counter;
  240|  7.58k|            }
  241|  3.18k|        }
  242|       |
  243|  3.18k|        return counter;
  244|  3.18k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    552|        : m_fptr([](storage fn,
  743|    552|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    552|              cvref<T> obj = *get<T>(fn);
  745|    552|              if constexpr (std::is_void_v<R>) {
  746|    552|                  obj(static_cast<decltype(args)>(args)...);
  747|    552|              }
  748|    552|              else {
  749|    552|                  return obj(static_cast<decltype(args)>(args)...);
  750|    552|              }
  751|    552|          }),
  752|    552|          m_storage(std::addressof(f))
  753|    552|    {
  754|    552|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.75k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.75k|              else {
  749|  1.75k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.75k|              }
  751|  1.75k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.75k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.75k|        else if constexpr (std::is_object_v<T>) {
  688|  1.75k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.75k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|  1.75k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.75k|            return detail::is_cp_space(cp);
 2238|  1.75k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    552|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    552|        {
  662|    552|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  6.86k|{
 3066|  6.86k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 6.69k, False: 176]
  ------------------
 3067|  6.69k|        auto it = read_while_classic_space(range);
 3068|  6.69k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  6.69k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.69k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  6.69k|        return it;
 3074|  6.69k|    }
 3075|       |
 3076|    176|    return read_while_classic_space(range);
 3077|  6.86k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  14.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  14.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  14.4k|        auto buf = make_contiguous_buffer(range);
 2220|  14.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  14.4k|        return ranges::next(range.begin(),
 2222|  14.4k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  14.4k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  17.3k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  17.3k|                  ranges::sized_range<Range>) {
 1785|  17.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  17.3k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  17.3k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  17.3k|    {
 1589|  17.3k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  4.66k|    {
 3156|  4.66k|        reader_error_handler eh{};
 3157|  4.66k|        get_derived().check_specs_impl(specs, eh);
 3158|  4.66k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.32k, False: 1.34k]
  |  |  ------------------
  ------------------
 3159|  3.32k|            return detail::unexpected_scan_error(
 3160|  3.32k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  3.32k|        }
 3162|  1.34k|        return {};
 3163|  4.66k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|  4.66k|    {
 3168|  4.66k|        return static_cast<Derived&>(*this);
 3169|  4.66k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  4.66k|    {
 3536|  4.66k|        detail::check_int_type_specs(specs, eh);
 3537|  4.66k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  2.59k|    {
 3151|  2.59k|        return true;
 3152|  2.59k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    346|    {
 3590|    346|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    346|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    346|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 346]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    346|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 346]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    346|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    346|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 334, False: 12]
  |  |  ------------------
  ------------------
 3616|    334|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    334|    }                                                  \
  |  |  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    290|    {
 3590|    290|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    290|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    290|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 290]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    290|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 290]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    290|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    290|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 280, False: 10]
  |  |  ------------------
  ------------------
 3616|    280|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    280|                    parse_integer_digits_without_thsep(
 3618|    280|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    280|                        prefix_result.parsed_base));
 3620|       |
 3621|    280|            auto buf = make_contiguous_buffer(
 3622|    280|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    280|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    280|    }                                                  \
  |  |  |  | 3939|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    280|        }
 3631|       |
 3632|     10|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     10|            localized_number_formatting_options<CharT>{loc};
 3637|     10|#endif
 3638|       |
 3639|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    346|    {
 3590|    346|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    346|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    346|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 346]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    346|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 346]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    346|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    346|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 334, False: 12]
  |  |  ------------------
  ------------------
 3616|    334|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    334|    }                                                  \
  |  |  |  | 3939|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    290|    {
 3590|    290|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    290|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    290|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 290]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    290|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 290]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    290|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    290|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 280, False: 10]
  |  |  ------------------
  ------------------
 3616|    280|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    280|                    parse_integer_digits_without_thsep(
 3618|    280|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    280|                        prefix_result.parsed_base));
 3620|       |
 3621|    280|            auto buf = make_contiguous_buffer(
 3622|    280|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    280|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    280|    }                                                  \
  |  |  |  | 3939|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    280|        }
 3631|       |
 3632|     10|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     10|            localized_number_formatting_options<CharT>{loc};
 3637|     10|#endif
 3638|       |
 3639|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    308|    {
 3590|    308|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    308|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    308|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 308]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    308|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 308]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    308|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    308|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 308, False: 0]
  |  |  ------------------
  ------------------
 3616|    308|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    884|    {
 3590|    884|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    884|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    884|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 884]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    884|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 884]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    884|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    884|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 884, False: 0]
  |  |  ------------------
  ------------------
 3616|    884|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    884|                    parse_integer_digits_without_thsep(
 3618|    884|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    884|                        prefix_result.parsed_base));
 3620|       |
 3621|    884|            auto buf = make_contiguous_buffer(
 3622|    884|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    884|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    884|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    884|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.33k|    {
 3156|  2.33k|        reader_error_handler eh{};
 3157|  2.33k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 688]
  |  |  ------------------
  ------------------
 3159|  1.64k|            return detail::unexpected_scan_error(
 3160|  1.64k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.64k|        }
 3162|    688|        return {};
 3163|  2.33k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  2.33k|    {
 3168|  2.33k|        return static_cast<Derived&>(*this);
 3169|  2.33k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  2.33k|    {
 4178|  2.33k|        detail::check_float_type_specs(specs, eh);
 4179|  2.33k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  1.31k|    {
 3151|  1.31k|        return true;
 3152|  1.31k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|    650|    {
 4250|    650|        unsigned options{};
 4251|    650|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 18, False: 632]
  ------------------
 4252|     18|            options |= float_reader_base::allow_thsep;
 4253|     18|        }
 4254|       |
 4255|    650|        SCN_GCC_COMPAT_PUSH
 4256|    650|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    650|        switch (specs.type) {
 4259|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 28, False: 622]
  ------------------
 4260|     28|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|     14|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 14, False: 636]
  ------------------
 4263|     14|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     16|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 16, False: 634]
  ------------------
 4266|     16|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|     12|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 12, False: 638]
  ------------------
 4269|     12|                return options | float_reader_base::allow_scientific |
 4270|     12|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    580|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 580, False: 70]
  ------------------
 4273|    580|                return options | float_reader_base::allow_scientific |
 4274|    580|                       float_reader_base::allow_fixed |
 4275|    580|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 650]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    650|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    650|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    650|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|    650|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.27k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.54k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|    892|    {
 4090|    892|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 892, False: 0]
  ------------------
 4091|    892|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 892, False: 0]
  ------------------
 4092|    892|            return;
 4093|    892|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|    924|    {
 1686|    924|        return m_storage.has_value();
 1687|    924|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    462|    {
 1691|    462|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    462|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    462|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    462|        return *m_storage;
 1693|    462|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    358|    {
  763|    358|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    358|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|     12|    {
 3721|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     12|        return read_source_impl(range);
 3727|     12|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    358|    {
 3747|    358|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    358|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 358]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    358|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    358|        auto it = sign_result.first;
 3750|    358|        m_sign = sign_result.second;
 3751|       |
 3752|    358|        auto digits_begin = it;
 3753|    358|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    358|        else {
 3780|    358|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 358, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    358|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    358|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    358|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    358|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    358|    }                                                  \
  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|      0|                it,
 3782|      0|                do_read_source_impl(
 3783|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|      0|        }
 3786|       |
 3787|    358|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    358|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    358|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 0, False: 0]
  |  Branch (3789:48): [True: 0, False: 0]
  ------------------
 3790|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 0, False: 0]
  ------------------
 3791|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 0, False: 0]
  ------------------
 3792|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|      0|        }
 3794|       |
 3795|      0|        handle_separators();
 3796|       |
 3797|      0|        return it;
 3798|    358|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    358|    {
 4033|    358|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    358|        const bool allowed_nonhex =
 4035|    358|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    358|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    358|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 358, False: 0]
  |  Branch (4038:45): [True: 0, False: 358]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    358|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 358]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    358|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 358, False: 0]
  |  Branch (4047:45): [True: 0, False: 358]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    358|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 358]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    358|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 326, False: 32]
  |  Branch (4054:28): [True: 8, False: 318]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      8|            auto it = range.begin();
 4058|       |
 4059|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 8]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      8|            else {
 4064|      8|                m_kind = float_kind::hex_without_prefix;
 4065|      8|            }
 4066|       |
 4067|      8|            return read_hex(ranges::subrange{it, range.end()});
 4068|      8|        }
 4069|    350|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 32, False: 318]
  |  Branch (4069:29): [True: 32, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     32|            m_kind = float_kind::generic;
 4073|     32|            return read_regular_float(range);
 4074|     32|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    318|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 318]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    318|        m_kind = float_kind::generic;
 4085|    318|        return read_regular(range);
 4086|    318|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    358|    {
 3841|    358|        auto it = range.begin();
 3842|    358|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 358, False: 0]
  ------------------
 3843|    358|            return unexpected(r.error());
 3844|    358|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    358|    {
 3864|    358|        auto it = range.begin();
 3865|    358|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 358, False: 0]
  ------------------
 3866|    358|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    358|                scan_error::invalid_scanned_value,
 3868|    358|                "Invalid floating-point NaN value"));
 3869|    358|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    326|    {
 3834|    326|        return read_matching_string_classic_nocase(range, "0x");
 3835|    326|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|      8|    {
 3935|      8|        auto it = range.begin();
 3936|       |
 3937|      8|        std::ptrdiff_t digits_count = 0;
 3938|      8|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3940|      8|            return r.transform_error(map_parse_error_to_scan_error(
 3941|      8|                scan_error::invalid_scanned_value,
 3942|      8|                "Invalid hexadecimal floating-point value"));
 3943|      8|        }
 3944|      0|        else {
 3945|      0|            digits_count += ranges::distance(it, *r);
 3946|      0|            it = *r;
 3947|      0|        }
 3948|       |
 3949|      0|        m_integral_part_length = digits_count;
 3950|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 0]
  ------------------
 3951|      0|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      0|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 0]
  ------------------
 3956|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      0|        return it;
 3970|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|      8|    {
 3819|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  |  Branch (865:45): [True: 0, False: 8]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|      8|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|      8|        return read_while1_code_unit(
 3828|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|      8|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3828|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    350|    {
 3976|    350|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    350|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 336, False: 14]
  |  Branch (3977:50): [True: 10, False: 326]
  ------------------
 3978|       |
 3979|    350|        auto it = ranges::begin(range);
 3980|    350|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    350|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    350|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 350, False: 0]
  |  |  ------------------
  ------------------
 3984|    350|            return r.transform_error(
 3985|    350|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    350|                                              "Invalid floating-point value"));
 3987|    350|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    350|    {
 3804|    350|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 350]
  |  |  |  Branch (865:45): [True: 0, False: 350]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    350|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    350|        return read_while1_code_unit(
 3813|    350|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    350|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    350|        : m_fptr([](storage fn,
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
  752|    350|          m_storage(std::addressof(f))
  753|    350|    {
  754|    350|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3813|    350|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    350|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    350|        {
  662|    350|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    346|    {
 3707|    346|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 346]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    346|        return read_source_impl(range);
 3713|    346|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    914|    {
  763|    914|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    914|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|      6|    {
 3721|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      6|        return read_source_impl(range);
 3727|      6|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|    914|    {
 3747|    914|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 914]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    914|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    914|        auto it = sign_result.first;
 3750|    914|        m_sign = sign_result.second;
 3751|       |
 3752|    914|        auto digits_begin = it;
 3753|    914|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|    914|                      ranges::sized_range<Range>) {
 3756|    914|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 914]
  |  |  |  Branch (865:45): [True: 0, False: 914]
  |  |  |  Branch (865:45): [True: 0, False: 914]
  |  |  ------------------
  ------------------
 3757|    914|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|    914|            else {
 3766|    914|                auto cb = [&](const auto& rr)
 3767|    914|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    914|                    auto res = read_all(rr);
 3769|    914|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|    914|                        return detail::unexpected_scan_error(
 3771|    914|                            scan_error::invalid_scanned_value,
 3772|    914|                            "Invalid float value");
 3773|    914|                    }
 3774|    914|                    return res;
 3775|    914|                };
 3776|    914|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 892]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|    892|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|    914|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|    892|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 892, False: 0]
  |  Branch (3789:48): [True: 892, False: 0]
  ------------------
 3790|    892|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 892, False: 0]
  ------------------
 3791|    892|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 892, False: 0]
  ------------------
 3792|    892|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|    892|        }
 3794|       |
 3795|    892|        handle_separators();
 3796|       |
 3797|    892|        return it;
 3798|    914|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|    914|    {
 3841|    914|        auto it = range.begin();
 3842|    914|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 914, False: 0]
  ------------------
 3843|    914|            return unexpected(r.error());
 3844|    914|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|    914|    {
 3864|    914|        auto it = range.begin();
 3865|    914|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 914, False: 0]
  ------------------
 3866|    914|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    914|                scan_error::invalid_scanned_value,
 3868|    914|                "Invalid floating-point NaN value"));
 3869|    914|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    892|    {
 3834|    892|        return read_matching_string_classic_nocase(range, "0x");
 3835|    892|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     22|{
 2095|     22|    auto it = read_while_code_unit(range, pred);
 2096|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 22, False: 0]
  ------------------
 2097|     22|        return unexpected(parse_error::error);
 2098|     22|    }
 2099|      0|    return it;
 2100|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|     22|    {
 3976|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 8, False: 14]
  |  Branch (3977:50): [True: 4, False: 4]
  ------------------
 3978|       |
 3979|     22|        auto it = ranges::begin(range);
 3980|     22|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3984|     22|            return r.transform_error(
 3985|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|     22|                                              "Invalid floating-point value"));
 3987|     22|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|     22|    {
 3804|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  Branch (865:45): [True: 0, False: 22]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|     22|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|     22|        return read_while1_code_unit(
 3813|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|    914|    {
 4033|    914|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    914|        const bool allowed_nonhex =
 4035|    914|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    914|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    914|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 914, False: 0]
  |  Branch (4038:45): [True: 0, False: 914]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    914|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 914]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    914|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 914, False: 0]
  |  Branch (4047:45): [True: 0, False: 914]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    914|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 914]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    914|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 892, False: 22]
  |  Branch (4054:28): [True: 8, False: 884]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      8|            auto it = range.begin();
 4058|       |
 4059|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 8]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      8|            else {
 4064|      8|                m_kind = float_kind::hex_without_prefix;
 4065|      8|            }
 4066|       |
 4067|      8|            return read_hex(ranges::subrange{it, range.end()});
 4068|      8|        }
 4069|    906|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 22, False: 884]
  |  Branch (4069:29): [True: 22, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     22|            m_kind = float_kind::generic;
 4073|     22|            return read_regular_float(range);
 4074|     22|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    884|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    884|        m_kind = float_kind::generic;
 4085|    884|        return read_regular(range);
 4086|    884|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|    892|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    892|                    auto res = read_all(rr);
 3769|    892|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 892]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|    892|                    return res;
 3775|    892|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    892|{
 1938|    892|    return ranges::next(range.begin(), range.end());
 1939|    892|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    892|    {
  313|    892|        ranges::advance(x, bound);
  314|    892|        return x;
  315|    892|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    892|    {
  275|    892|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    892|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    970|    {
  190|    970|        i = std::move(bound);
  191|    970|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    892|    {
 1676|    892|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    892|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    892|    {
 1720|    892|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    892|                      ranges::sized_range<Range>) {
 1725|    892|            m_storage.reset();
 1726|    892|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    892|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|    908|    {
 3707|    908|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    908|        return read_source_impl(range);
 3713|    908|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|    892|    {
 3733|    892|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|    892|        const std::ptrdiff_t sign_len =
 3736|    892|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 892]
  ------------------
 3737|       |
 3738|    892|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 892, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    892|    }                                                  \
  |  |  |  | 3939|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|    892|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    358|    {
 4203|    358|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    358|#if !SCN_DISABLE_LOCALE
 4206|    358|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 12, False: 346]
  ------------------
 4207|     12|            return read_impl<Range>(
 4208|     12|                range, rd,
 4209|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     12|                },
 4212|     12|                value, loc);
 4213|     12|        }
 4214|    346|#endif
 4215|       |
 4216|    346|        return read_impl<Range>(
 4217|    346|            range, rd,
 4218|    346|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    346|                return r.read_source(SCN_FWD(args)...);
 4220|    346|            },
 4221|    346|            value);
 4222|    358|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    358|    {
 4239|    358|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    358|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 358, False: 0]
  |  |  ------------------
  ------------------
 4241|    358|            return unexpected(r.error());
 4242|    358|        }
 4243|       |
 4244|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     12|        : m_fptr([](storage fn,
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
  752|     12|          m_storage(std::addressof(f))
  753|     12|    {
  754|     12|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  688|     12|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     12|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     12|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     12|        {
  662|     12|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    346|        : m_fptr([](storage fn,
  743|    346|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    346|              cvref<T> obj = *get<T>(fn);
  745|    346|              if constexpr (std::is_void_v<R>) {
  746|    346|                  obj(static_cast<decltype(args)>(args)...);
  747|    346|              }
  748|    346|              else {
  749|    346|                  return obj(static_cast<decltype(args)>(args)...);
  750|    346|              }
  751|    346|          }),
  752|    346|          m_storage(std::addressof(f))
  753|    346|    {
  754|    346|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    346|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    346|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    346|              else {
  749|    346|                  return obj(static_cast<decltype(args)>(args)...);
  750|    346|              }
  751|    346|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    346|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    346|        else if constexpr (std::is_object_v<T>) {
  688|    346|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    346|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    346|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    346|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    346|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    346|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    346|        {
  662|    346|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    292|    {
 4203|    292|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    292|#if !SCN_DISABLE_LOCALE
 4206|    292|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 6, False: 286]
  ------------------
 4207|      6|            return read_impl<Range>(
 4208|      6|                range, rd,
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      6|                },
 4212|      6|                value, loc);
 4213|      6|        }
 4214|    286|#endif
 4215|       |
 4216|    286|        return read_impl<Range>(
 4217|    286|            range, rd,
 4218|    286|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    286|                return r.read_source(SCN_FWD(args)...);
 4220|    286|            },
 4221|    286|            value);
 4222|    292|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|    914|    {
 4239|    914|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    914|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 892]
  |  |  ------------------
  ------------------
 4241|     22|            return unexpected(r.error());
 4242|     22|        }
 4243|       |
 4244|    892|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 892, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    892|    }                                                  \
  |  |  |  | 3939|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|    892|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    286|        : m_fptr([](storage fn,
  743|    286|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    286|              cvref<T> obj = *get<T>(fn);
  745|    286|              if constexpr (std::is_void_v<R>) {
  746|    286|                  obj(static_cast<decltype(args)>(args)...);
  747|    286|              }
  748|    286|              else {
  749|    286|                  return obj(static_cast<decltype(args)>(args)...);
  750|    286|              }
  751|    286|          }),
  752|    286|          m_storage(std::addressof(f))
  753|    286|    {
  754|    286|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    286|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    286|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    286|              else {
  749|    286|                  return obj(static_cast<decltype(args)>(args)...);
  750|    286|              }
  751|    286|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    286|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    286|        else if constexpr (std::is_object_v<T>) {
  688|    286|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    286|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    286|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    286|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    286|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    286|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    286|        {
  662|    286|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|  2.91k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  2.91k|                       std::is_same_v<T, std::wstring>) {
 5867|  2.91k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  2.91k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|  8.73k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  6.86k|    {
 3156|  6.86k|        reader_error_handler eh{};
 3157|  6.86k|        get_derived().check_specs_impl(specs, eh);
 3158|  6.86k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 438, False: 6.42k]
  |  |  ------------------
  ------------------
 3159|    438|            return detail::unexpected_scan_error(
 3160|    438|                scan_error::invalid_format_string, eh.m_msg);
 3161|    438|        }
 3162|  6.42k|        return {};
 3163|  6.86k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|  6.86k|    {
 3168|  6.86k|        return static_cast<Derived&>(*this);
 3169|  6.86k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  6.86k|    {
 5247|  6.86k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  6.86k|        SCN_GCC_PUSH
 5250|  6.86k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  6.86k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  6.86k|        SCN_CLANG_PUSH
 5254|  6.86k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  6.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  6.86k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 432, False: 6.43k]
  ------------------
 5258|  1.77k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.77k, False: 5.08k]
  ------------------
 5259|  1.77k|                m_type = reader_type::word;
 5260|  1.77k|                break;
 5261|       |
 5262|    714|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 714, False: 6.15k]
  ------------------
 5263|    714|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 120, False: 594]
  ------------------
 5264|    714|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 330, False: 264]
  ------------------
 5265|    450|                    m_type = reader_type::custom_word;
 5266|    450|                }
 5267|    264|                else {
 5268|    264|                    m_type = reader_type::word;
 5269|    264|                }
 5270|    714|                break;
 5271|      0|            }
 5272|       |
 5273|    180|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 180, False: 6.68k]
  ------------------
 5274|    180|                m_type = reader_type::character;
 5275|    180|                break;
 5276|       |
 5277|  3.34k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 3.34k, False: 3.51k]
  ------------------
 5278|  3.34k|                m_type = reader_type::character_set;
 5279|  3.34k|                break;
 5280|       |
 5281|    102|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 102, False: 6.76k]
  ------------------
 5282|    102|                m_type = reader_type::regex;
 5283|    102|                break;
 5284|       |
 5285|    312|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 312, False: 6.55k]
  ------------------
 5286|    312|                m_type = reader_type::regex_escaped;
 5287|    312|                break;
 5288|  6.86k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  6.86k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|  11.0k|    {
 5296|  11.0k|        return m_type == reader_type::word;
 5297|  11.0k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  8.35k|{
 1242|  8.35k|    auto it = src.begin();
 1243|   445k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 438k, False: 6.44k]
  ------------------
 1244|   438k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   438k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.27k, False: 437k]
  ------------------
 1246|  1.27k|            return false;
 1247|  1.27k|        }
 1248|   437k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 234, False: 437k]
  ------------------
 1249|    234|            return false;
 1250|    234|        }
 1251|   437k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   437k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   437k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 396, False: 436k]
  ------------------
 1254|    396|            return false;
 1255|    396|        }
 1256|   436k|        it += len;
 1257|   436k|    }
 1258|  6.44k|    return true;
 1259|  8.35k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    462|{
 3108|    462|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    462|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 462, False: 0]
  ------------------
 3110|    462|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    462|    static_cast<    \
  |  |  935|    462|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    462|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    462|    return {};
 3121|    462|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  3.34k|        {
 5144|  3.34k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 582, False: 2.76k]
  ------------------
 5145|    582|                return {};
 5146|    582|            }
 5147|       |
 5148|  2.76k|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|  2.76k|            auto it = detail::to_address(charset_string.begin());
 5150|  2.76k|            auto set = detail::parse_presentation_set(
 5151|  2.76k|                it, detail::to_address(charset_string.end()), nonascii);
 5152|  2.76k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|  2.76k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.76k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|  2.76k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|  2.76k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|  2.76k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|  2.76k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|  2.76k|            std::sort(nonascii.extra_ranges.begin(),
 5157|  2.76k|                      nonascii.extra_ranges.end());
 5158|  2.76k|            return {};
 5159|  2.76k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|   295k|        {
 5177|   295k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 46.5k, False: 249k]
  ------------------
 5178|  46.5k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  46.5k|            }
 5180|       |
 5181|   249k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|   295k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  46.5k|        {
 5127|       |            // TODO: binary search?
 5128|  46.5k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 46.5k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  46.5k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  46.5k|            return std::find_if(
 5134|  46.5k|                       nonascii.extra_ranges.begin(),
 5135|  46.5k|                       nonascii.extra_ranges.end(),
 5136|  46.5k|                       [cp_val](const auto& pair) noexcept {
 5137|  46.5k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  46.5k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  46.5k|                       }) != nonascii.extra_ranges.end();
 5140|  46.5k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  7.27M|                       [cp_val](const auto& pair) noexcept {
 5137|  7.27M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 7.27M, False: 2.09k]
  ------------------
 5138|  7.27M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 45.0k, False: 7.22M]
  ------------------
 5139|  7.27M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|   257k|        {
 5117|   257k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|   257k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|   257k|            const auto val =
 5119|   257k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|   257k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|   257k|                    (val % 8)) &
 5122|   257k|                   1u;
 5123|   257k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  10.3k|        {
 5168|  10.3k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.89k, False: 8.40k]
  ------------------
 5169|  1.89k|                return false;
 5170|  1.89k|            }
 5171|       |
 5172|  8.40k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  10.3k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  3.34k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    768|    {
 5314|    768|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    768|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    768|        return read_impl(range, specs, value);
 5316|    768|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    768|    {
 5332|    768|        SCN_CLANG_PUSH
 5333|    768|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    768|        switch (m_type) {
 5336|    314|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 314, False: 454]
  ------------------
 5337|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     90|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 90, False: 678]
  ------------------
 5340|     90|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     90|                                                                   value);
 5342|       |
 5343|     56|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 56, False: 712]
  ------------------
 5344|     56|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    272|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 272, False: 496]
  ------------------
 5347|    272|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    272|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 766]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     34|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 34, False: 734]
  ------------------
 5357|     34|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     34|                    range,
 5359|     34|                    get_unescaped_regex_pattern(
 5360|     34|                        specs.charset_string<SourceCharT>()),
 5361|     34|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 768]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    768|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    768|        }
 5368|       |
 5369|    768|        SCN_CLANG_POP
 5370|    768|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    314|    {
 4861|    314|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    314|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    460|{
 4795|    460|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    460|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    460|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 170, False: 290]
  ------------------
 4799|    170|        return detail::unexpected_scan_error(
 4800|    170|            scan_error::invalid_scanned_value,
 4801|    170|            "Invalid encoding in scanned string");
 4802|    170|    }
 4803|       |
 4804|    290|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    290|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 290]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    290|    return SCN_MOVE(result);
  ------------------
  |  |  934|    290|    static_cast<    \
  |  |  935|    290|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    290|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    942|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    942|    else {
 2196|    942|        auto it = range.begin();
 2197|       |
 2198|    942|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|    942|            auto seg = get_contiguous_beginning(range);
 2200|    942|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|    942|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 942]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|    942|            ranges::advance(it, seg.size());
 2205|    942|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|    942|            ranges::subrange{it, range.end()},
 2209|    942|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    942|    }
 2211|    942|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    942|{
 2160|    942|    auto it = range.begin();
 2161|  12.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 11.7k, False: 726]
  ------------------
 2162|  11.7k|        const auto val =
 2163|  11.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  11.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  11.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 10.3k, False: 1.42k]
  |  |  ------------------
  ------------------
 2165|  10.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  10.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  10.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 216, False: 10.1k]
  ------------------
 2168|    216|                return it;
 2169|    216|            }
 2170|  10.3k|        }
 2171|  11.5k|        it = val.iterator;
 2172|  11.5k|    }
 2173|       |
 2174|    726|    return it;
 2175|    942|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    942|        : m_fptr([](storage fn,
  743|    942|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    942|              cvref<T> obj = *get<T>(fn);
  745|    942|              if constexpr (std::is_void_v<R>) {
  746|    942|                  obj(static_cast<decltype(args)>(args)...);
  747|    942|              }
  748|    942|              else {
  749|    942|                  return obj(static_cast<decltype(args)>(args)...);
  750|    942|              }
  751|    942|          }),
  752|    942|          m_storage(std::addressof(f))
  753|    942|    {
  754|    942|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.3k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  10.3k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    942|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    942|        {
  662|    942|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     90|    {
 4882|     90|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 40, False: 50]
  ------------------
 4883|     40|            return read_string_impl(
 4884|     40|                range,
 4885|     40|                read_until_code_unit(
 4886|     40|                    range,
 4887|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     40|                        SourceCharT ch) { return ch == until; }),
 4889|     40|                value);
 4890|     40|        }
 4891|     50|        return read_string_impl(
 4892|     50|            range,
 4893|     50|            read_until_code_units(
 4894|     50|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     50|            value);
 4896|     90|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     40|        : m_fptr([](storage fn,
  743|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     40|              cvref<T> obj = *get<T>(fn);
  745|     40|              if constexpr (std::is_void_v<R>) {
  746|     40|                  obj(static_cast<decltype(args)>(args)...);
  747|     40|              }
  748|     40|              else {
  749|     40|                  return obj(static_cast<decltype(args)>(args)...);
  750|     40|              }
  751|     40|          }),
  752|     40|          m_storage(std::addressof(f))
  753|     40|    {
  754|     40|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    706|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  688|    706|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    706|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|    706|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     40|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     40|        {
  662|     40|        }
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2105|    150|{
 2106|    150|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|       |    if constexpr (ranges::common_range<Range>) {
 2109|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2110|       |                           needle.end());
 2111|       |    }
 2112|    150|    else {
 2113|    150|        auto first = range.begin();
 2114|  1.98k|        while (true) {
  ------------------
  |  Branch (2114:16): [Folded - Ignored]
  ------------------
 2115|  1.98k|            auto it = first;
 2116|  2.38k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|  2.38k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2117:21): [True: 108, False: 2.27k]
  ------------------
 2118|    108|                    return first;
 2119|    108|                }
 2120|  2.27k|                if (it == range.end()) {
  ------------------
  |  Branch (2120:21): [True: 42, False: 2.23k]
  ------------------
 2121|     42|                    return it;
 2122|     42|                }
 2123|  2.23k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2123:21): [True: 1.83k, False: 402]
  ------------------
 2124|  1.83k|                    break;
 2125|  1.83k|                }
 2126|  2.23k|            }
 2127|  1.83k|            ++first;
 2128|  1.83k|        }
 2129|    150|    }
 2130|    150|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     56|    {
 4988|     56|        return read_impl(
 4989|     56|            range,
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
 4993|     56|            detail::priority_tag<1>{});
 4994|     56|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     56|    {
 5015|     56|        return read_cb(range);
 5016|     56|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|    168|{
 1938|    168|    return ranges::next(range.begin(), range.end());
 1939|    168|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    168|    {
  313|    168|        ranges::advance(x, bound);
  314|    168|        return x;
  315|    168|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    168|    {
  275|    168|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    168|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    168|    {
  203|  2.61k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.44k, False: 168]
  ------------------
  204|  2.44k|            ++i;
  205|  2.44k|        }
  206|    168|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    272|    {
 5089|    272|        auto it = read_source_impl(range, {specs});
 5090|    272|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 264]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    264|        return read_string_impl(range, *it, value);
 5095|    272|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    816|    {
 5192|    816|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    816|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    816|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    816|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 816]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    816|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    816|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 450, False: 366]
  ------------------
 5200|    450|            const auto cb = [&](char32_t cp) {
 5201|    450|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    450|            };
 5203|       |
 5204|    450|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 222, False: 228]
  ------------------
 5205|    222|                auto it = read_until_code_point(range, cb);
 5206|    222|                return check_nonempty(it, range);
 5207|    222|            }
 5208|    228|            auto it = read_while_code_point(range, cb);
 5209|    228|            return check_nonempty(it, range);
 5210|    450|        }
 5211|       |
 5212|    366|        const auto cb = [&](SourceCharT ch) {
 5213|    366|            return cb_wrapper.on_ascii_only(ch);
 5214|    366|        };
 5215|       |
 5216|    366|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 174, False: 192]
  ------------------
 5217|    174|            auto it = read_until_code_unit(range, cb);
 5218|    174|            return check_nonempty(it, range);
 5219|    174|        }
 5220|    192|        auto it = read_while_code_unit(range, cb);
 5221|    192|        return check_nonempty(it, range);
 5222|    366|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    450|        : m_fptr([](storage fn,
  743|    450|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    450|              cvref<T> obj = *get<T>(fn);
  745|    450|              if constexpr (std::is_void_v<R>) {
  746|    450|                  obj(static_cast<decltype(args)>(args)...);
  747|    450|              }
  748|    450|              else {
  749|    450|                  return obj(static_cast<decltype(args)>(args)...);
  750|    450|              }
  751|    450|          }),
  752|    450|          m_storage(std::addressof(f))
  753|    450|    {
  754|    450|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  11.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.2k|              else {
  749|  11.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.2k|              }
  751|  11.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  11.2k|    {
  684|  11.2k|        if constexpr (std::is_const_v<T>) {
  685|  11.2k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.2k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  11.2k|            const auto cb = [&](char32_t cp) {
 5201|  11.2k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  11.2k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    450|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    450|        {
  667|    450|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    816|    {
 5228|    816|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 24, False: 792]
  ------------------
 5229|     24|            return detail::unexpected_scan_error(
 5230|     24|                scan_error::invalid_scanned_value,
 5231|     24|                "No characters matched in [character set]");
 5232|     24|        }
 5233|       |
 5234|    792|        return it;
 5235|    816|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    366|        : m_fptr([](storage fn,
  743|    366|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    366|              cvref<T> obj = *get<T>(fn);
  745|    366|              if constexpr (std::is_void_v<R>) {
  746|    366|                  obj(static_cast<decltype(args)>(args)...);
  747|    366|              }
  748|    366|              else {
  749|    366|                  return obj(static_cast<decltype(args)>(args)...);
  750|    366|              }
  751|    366|          }),
  752|    366|          m_storage(std::addressof(f))
  753|    366|    {
  754|    366|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  7.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.11k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.11k|              else {
  749|  7.11k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.11k|              }
  751|  7.11k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.11k|    {
  684|  7.11k|        if constexpr (std::is_const_v<T>) {
  685|  7.11k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.11k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5212|  7.11k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.11k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.11k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    366|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    366|        {
  667|    366|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    264|{
 4795|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 92, False: 172]
  ------------------
 4799|     92|        return detail::unexpected_scan_error(
 4800|     92|            scan_error::invalid_scanned_value,
 4801|     92|            "Invalid encoding in scanned string");
 4802|     92|    }
 4803|       |
 4804|    172|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    172|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    172|    return SCN_MOVE(result);
  ------------------
  |  |  934|    172|    static_cast<    \
  |  |  935|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    172|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|     36|    {
 4932|     36|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|     36|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|    108|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|    108|        else {
 4961|    108|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 108, False: 0]
  ------------------
 4962|    108|                return detail::unexpected_scan_error(
 4963|    108|                    scan_error::invalid_format_string,
 4964|    108|                    "Cannot use regex with a non-contiguous source "
 4965|    108|                    "range");
 4966|    108|            }
 4967|       |
 4968|      0|            auto input = get_as_contiguous(range);
 4969|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|      0|            return ranges::next(range.begin(),
 4972|      0|                                ranges::distance(input.begin(), it));
 4973|      0|        }
 4974|    108|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|    108|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|    108|    else {
  975|    108|        return false;
  976|    108|    }
  977|    108|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.33k|    {
 5314|  1.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.33k|        return read_impl(range, specs, value);
 5316|  1.33k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.33k|    {
 5332|  1.33k|        SCN_CLANG_PUSH
 5333|  1.33k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.33k|        switch (m_type) {
 5336|    334|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 334, False: 1.00k]
  ------------------
 5337|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 58, False: 1.27k]
  ------------------
 5340|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     58|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.33k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    842|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 842, False: 494]
  ------------------
 5347|    842|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    842|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     32|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 32, False: 1.30k]
  ------------------
 5352|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     32|                    range, specs.charset_string<SourceCharT>(),
 5354|     32|                    specs.regexp_flags, value);
 5355|       |
 5356|     70|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 70, False: 1.26k]
  ------------------
 5357|     70|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     70|                    range,
 5359|     70|                    get_unescaped_regex_pattern(
 5360|     70|                        specs.charset_string<SourceCharT>()),
 5361|     70|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.33k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.33k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.33k|        }
 5368|       |
 5369|  1.33k|        SCN_CLANG_POP
 5370|  1.33k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    956|    {
 4861|    956|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    956|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  1.01k|{
 4795|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  1.01k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  1.01k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 322, False: 692]
  ------------------
 4799|    322|        return detail::unexpected_scan_error(
 4800|    322|            scan_error::invalid_scanned_value,
 4801|    322|            "Invalid encoding in scanned string");
 4802|    322|    }
 4803|       |
 4804|    692|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    692|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 692]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    692|    return SCN_MOVE(result);
  ------------------
  |  |  934|    692|    static_cast<    \
  |  |  935|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    692|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.15k|{
 3128|  1.15k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  1.15k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  1.15k|    return {};
 3136|  1.15k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.86k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|  2.86k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|  2.86k|        auto buf = make_contiguous_buffer(range);
 2191|  2.86k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|  2.86k|        return ranges::next(range.begin(),
 2193|  2.86k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|  2.86k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     58|    {
 4882|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 28, False: 30]
  ------------------
 4883|     28|            return read_string_impl(
 4884|     28|                range,
 4885|     28|                read_until_code_unit(
 4886|     28|                    range,
 4887|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     28|                        SourceCharT ch) { return ch == until; }),
 4889|     28|                value);
 4890|     28|        }
 4891|     30|        return read_string_impl(
 4892|     30|            range,
 4893|     30|            read_until_code_units(
 4894|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     30|            value);
 4896|     58|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2105|     90|{
 2106|     90|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|     90|    if constexpr (ranges::common_range<Range>) {
 2109|     90|        return std::search(range.begin(), range.end(), needle.begin(),
 2110|     90|                           needle.end());
 2111|       |    }
 2112|       |    else {
 2113|       |        auto first = range.begin();
 2114|       |        while (true) {
 2115|       |            auto it = first;
 2116|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|       |                if (needle_it == needle.end()) {
 2118|       |                    return first;
 2119|       |                }
 2120|       |                if (it == range.end()) {
 2121|       |                    return it;
 2122|       |                }
 2123|       |                if (*it != *needle_it) {
 2124|       |                    break;
 2125|       |                }
 2126|       |            }
 2127|       |            ++first;
 2128|       |        }
 2129|       |    }
 2130|     90|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    842|    {
 5089|    842|        auto it = read_source_impl(range, {specs});
 5090|    842|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 362, False: 480]
  |  |  ------------------
  ------------------
 5091|    362|            return unexpected(it.error());
 5092|    362|        }
 5093|       |
 5094|    480|        return read_string_impl(range, *it, value);
 5095|    842|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  2.52k|    {
 5192|  2.52k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.52k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.52k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.52k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.52k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.52k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.52k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 2.31k, False: 216]
  ------------------
 5200|  2.31k|            const auto cb = [&](char32_t cp) {
 5201|  2.31k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  2.31k|            };
 5203|       |
 5204|  2.31k|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 222, False: 2.08k]
  ------------------
 5205|    222|                auto it = read_until_code_point(range, cb);
 5206|    222|                return check_nonempty(it, range);
 5207|    222|            }
 5208|  2.08k|            auto it = read_while_code_point(range, cb);
 5209|  2.08k|            return check_nonempty(it, range);
 5210|  2.31k|        }
 5211|       |
 5212|    216|        const auto cb = [&](SourceCharT ch) {
 5213|    216|            return cb_wrapper.on_ascii_only(ch);
 5214|    216|        };
 5215|       |
 5216|    216|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 102, False: 114]
  ------------------
 5217|    102|            auto it = read_until_code_unit(range, cb);
 5218|    102|            return check_nonempty(it, range);
 5219|    102|        }
 5220|    114|        auto it = read_while_code_unit(range, cb);
 5221|    114|        return check_nonempty(it, range);
 5222|    216|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  2.31k|{
 2160|  2.31k|    auto it = range.begin();
 2161|   285k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 285k, False: 150]
  ------------------
 2162|   285k|        const auto val =
 2163|   285k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   285k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   285k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 284k, False: 960]
  |  |  ------------------
  ------------------
 2165|   284k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   284k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   284k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.16k, False: 282k]
  ------------------
 2168|  2.16k|                return it;
 2169|  2.16k|            }
 2170|   284k|        }
 2171|   283k|        it = val.iterator;
 2172|   283k|    }
 2173|       |
 2174|    150|    return it;
 2175|  2.31k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   285k|{
 1998|   285k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   285k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   285k|    auto it = range.begin();
 2002|   285k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   285k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 960, False: 284k]
  |  |  ------------------
  ------------------
 2005|    960|        ++it;
 2006|    960|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|    960|        return {it, {}};
 2008|    960|    }
 2009|       |
 2010|   284k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 239k, False: 45.1k]
  ------------------
 2011|   239k|        ++it;
 2012|   239k|        return {it, string_type(1, *range.begin())};
 2013|   239k|    }
 2014|       |
 2015|  45.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  45.1k|    return {it, string_type{range.begin(), it}};
 2017|   284k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|    960|{
 1265|    960|    auto it = input.begin();
 1266|  1.45k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.39k, False: 54]
  ------------------
 1267|  1.39k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 906, False: 492]
  ------------------
 1268|    906|            break;
 1269|    906|        }
 1270|  1.39k|    }
 1271|    960|    return it;
 1272|    960|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  45.1k|    {
  283|  45.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  45.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  45.1k|    {
  212|  45.1k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 78, False: 45.0k]
  ------------------
  213|     78|            auto dist = bound - i;
  214|     78|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     78|            return dist;
  216|     78|        }
  217|  45.0k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  45.0k|        return n;
  219|  45.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|  90.3k|    {
  132|  90.3k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 90.3k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  90.3k|        return t;
  136|  90.3k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   285k|    {
 1989|   285k|        return !codepoint.empty();
 1990|   285k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  2.31k|        : m_fptr([](storage fn,
  743|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31k|              cvref<T> obj = *get<T>(fn);
  745|  2.31k|              if constexpr (std::is_void_v<R>) {
  746|  2.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.31k|              }
  748|  2.31k|              else {
  749|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31k|              }
  751|  2.31k|          }),
  752|  2.31k|          m_storage(std::addressof(f))
  753|  2.31k|    {
  754|  2.31k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   284k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   284k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   284k|              else {
  749|   284k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   284k|              }
  751|   284k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   284k|    {
  684|   284k|        if constexpr (std::is_const_v<T>) {
  685|   284k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   284k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|   284k|            const auto cb = [&](char32_t cp) {
 5201|   284k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|   284k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  2.31k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.31k|        {
  667|  2.31k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  2.52k|    {
 5228|  2.52k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.08k, False: 1.44k]
  ------------------
 5229|  1.08k|            return detail::unexpected_scan_error(
 5230|  1.08k|                scan_error::invalid_scanned_value,
 5231|  1.08k|                "No characters matched in [character set]");
 5232|  1.08k|        }
 5233|       |
 5234|  1.44k|        return it;
 5235|  2.52k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  2.08k|{
 2181|  2.08k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  2.08k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    216|        : m_fptr([](storage fn,
  743|    216|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    216|              cvref<T> obj = *get<T>(fn);
  745|    216|              if constexpr (std::is_void_v<R>) {
  746|    216|                  obj(static_cast<decltype(args)>(args)...);
  747|    216|              }
  748|    216|              else {
  749|    216|                  return obj(static_cast<decltype(args)>(args)...);
  750|    216|              }
  751|    216|          }),
  752|    216|          m_storage(std::addressof(f))
  753|    216|    {
  754|    216|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.18k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.18k|              else {
  749|  3.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.18k|              }
  751|  3.18k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.18k|    {
  684|  3.18k|        if constexpr (std::is_const_v<T>) {
  685|  3.18k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.18k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  3.18k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.18k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.18k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    216|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    216|        {
  667|    216|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    510|{
 4795|    510|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    510|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    510|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 52, False: 458]
  ------------------
 4799|     52|        return detail::unexpected_scan_error(
 4800|     52|            scan_error::invalid_scanned_value,
 4801|     52|            "Invalid encoding in scanned string");
 4802|     52|    }
 4803|       |
 4804|    458|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    458|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 458]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    458|    return SCN_MOVE(result);
  ------------------
  |  |  934|    458|    static_cast<    \
  |  |  935|    458|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    458|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|    102|    {
 4932|    102|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    102|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     30|        return read_string_impl(range, it, value);
 4934|    102|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|    306|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|    306|        else {
 4961|    306|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 0, False: 306]
  ------------------
 4962|      0|                return detail::unexpected_scan_error(
 4963|      0|                    scan_error::invalid_format_string,
 4964|      0|                    "Cannot use regex with a non-contiguous source "
 4965|      0|                    "range");
 4966|      0|            }
 4967|       |
 4968|    306|            auto input = get_as_contiguous(range);
 4969|    306|            SCN_TRY(it,
  ------------------
  |  | 3940|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 216, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    216|    }                                                  \
  |  |  |  | 3939|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|     90|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|     90|            return ranges::next(range.begin(),
 4972|     90|                                ranges::distance(input.begin(), it));
 4973|    306|        }
 4974|    306|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|    306|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|    306|                  ranges::sized_range<Range>) {
  962|    306|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|    306|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|    306|{
 1066|    306|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|    306|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    306|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|    306|                  ranges::sized_range<Range>) {
 1070|    306|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|    306|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|    306|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|    306|                  ranges::sized_range<Range>) {
  984|    306|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|    306|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4378|    306|{
 4379|    306|    static_assert(ranges::contiguous_range<Input> &&
 4380|    306|                  ranges::borrowed_range<Input> &&
 4381|    306|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4382|       |
 4383|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4384|       |    std::basic_regex<CharT> re{};
 4385|       |    try {
 4386|       |        SCN_TRY(re_flags, make_regex_flags(flags));
 4387|       |        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|       |                                     re_flags | std::regex_constants::nosubs};
 4389|       |    }
 4390|       |    catch (const std::regex_error& err) {
 4391|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4392|       |                                             "Invalid regex");
 4393|       |    }
 4394|       |
 4395|       |    std::match_results<const CharT*> matches{};
 4396|       |    try {
 4397|       |        bool found = std::regex_search(input.data(),
 4398|       |                                       input.data() + input.size(), matches, re,
 4399|       |                                       std::regex_constants::match_continuous);
 4400|       |        if (!found || matches.prefix().matched) {
 4401|       |            return detail::unexpected_scan_error(
 4402|       |                scan_error::invalid_scanned_value,
 4403|       |                "Regular expression didn't match");
 4404|       |        }
 4405|       |    }
 4406|       |    catch (const std::regex_error& err) {
 4407|       |        return detail::unexpected_scan_error(
 4408|       |            scan_error::invalid_format_string,
 4409|       |            "Regex matching failed with an error");
 4410|       |    }
 4411|       |
 4412|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4413|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4414|       |    auto re =
 4415|       |#if SCN_REGEX_BOOST_USE_ICU
 4416|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4417|       |                             make_regex_flags(flags) |
 4418|       |                                 boost::regex_constants::no_except |
 4419|       |                                 boost::regex_constants::nosubs);
 4420|       |#else
 4421|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4422|       |                                  make_regex_flags(flags) |
 4423|       |                                      boost::regex_constants::no_except |
 4424|       |                                      boost::regex_constants::nosubs};
 4425|       |#endif
 4426|       |    if (re.status() != 0) {
 4427|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4428|       |                                             "Invalid regex");
 4429|       |    }
 4430|       |
 4431|       |    boost::match_results<const CharT*> matches{};
 4432|       |    try {
 4433|       |        bool found =
 4434|       |#if SCN_REGEX_BOOST_USE_ICU
 4435|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4436|       |                                   matches, re,
 4437|       |                                   boost::regex_constants::match_continuous);
 4438|       |#else
 4439|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4440|       |                                matches, re,
 4441|       |                                boost::regex_constants::match_continuous);
 4442|       |#endif
 4443|       |        if (!found || matches.prefix().matched) {
 4444|       |            return detail::unexpected_scan_error(
 4445|       |                scan_error::invalid_scanned_value,
 4446|       |                "Regular expression didn't match");
 4447|       |        }
 4448|       |    }
 4449|       |    catch (const std::runtime_error& err) {
 4450|       |        return detail::unexpected_scan_error(
 4451|       |            scan_error::invalid_format_string,
 4452|       |            "Regex matching failed with an error");
 4453|       |    }
 4454|       |
 4455|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4456|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4457|       |    static_assert(std::is_same_v<CharT, char>);
 4458|    306|    std::string flagged_pattern{};
 4459|    306|    auto re = [&]() {
 4460|    306|        auto [opts, flagstr] = make_regex_flags(flags);
 4461|    306|        opts.set_never_capture(true);
 4462|    306|        if (flagstr.empty()) {
 4463|    306|            return re2::RE2{pattern, opts};
 4464|    306|        }
 4465|    306|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|    306|        flagged_pattern.append(flagstr);
 4467|    306|        flagged_pattern.append(pattern);
 4468|    306|        return re2::RE2{flagged_pattern, opts};
 4469|    306|    }();
 4470|    306|    if (!re.ok()) {
  ------------------
  |  Branch (4470:9): [True: 60, False: 246]
  ------------------
 4471|     60|        return detail::unexpected_scan_error(
 4472|     60|            scan_error::invalid_format_string,
 4473|     60|            "Failed to parse regular expression");
 4474|     60|    }
 4475|       |
 4476|    246|    auto new_input = detail::make_string_view_from_pointers(
 4477|    246|        detail::to_address(input.begin()), detail::to_address(input.end()));
 4478|    246|    bool found = re2::RE2::Consume(&new_input, re);
 4479|    246|    if (!found) {
  ------------------
  |  Branch (4479:9): [True: 156, False: 90]
  ------------------
 4480|    156|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4481|    156|                                             "Regular expression didn't match");
 4482|    156|    }
 4483|     90|    return input.begin() + ranges::distance(input.data(), new_input.data());
 4484|    246|#endif  // SCN_REGEX_BACKEND == ...
 4485|    246|}
_ZZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_ENKUlvE_clEv:
 4459|    306|    auto re = [&]() {
 4460|    306|        auto [opts, flagstr] = make_regex_flags(flags);
 4461|    306|        opts.set_never_capture(true);
 4462|    306|        if (flagstr.empty()) {
  ------------------
  |  Branch (4462:13): [True: 12, False: 294]
  ------------------
 4463|     12|            return re2::RE2{pattern, opts};
 4464|     12|        }
 4465|    294|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|    294|        flagged_pattern.append(flagstr);
 4467|    294|        flagged_pattern.append(pattern);
 4468|    294|        return re2::RE2{flagged_pattern, opts};
 4469|    306|    }();
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5848|  2.91k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  2.91k|                       std::is_same_v<T, std::wstring>) {
 5867|  2.91k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  2.91k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    462|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    462|    else {
 3117|    462|        return transcode_impl(source.view(), dest);
 3118|    462|    }
 3119|       |
 3120|      0|    return {};
 3121|    462|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  1.61k|{
 3083|  1.61k|    dst.clear();
 3084|  1.61k|    transcode_valid_to_string(src, dst);
 3085|  1.61k|    return {};
 3086|  1.61k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.61k|{
 1502|  1.61k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.61k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  1.61k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  1.61k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  1.61k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  1.61k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  1.61k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.61k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  1.61k|{
 1376|  1.61k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  1.61k|    auto it = src.begin();
 1379|   107k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 105k, False: 1.61k]
  ------------------
 1380|   105k|        auto res = get_next_code_point_valid(
 1381|   105k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|   105k|                                                                 src.end()));
 1383|   105k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|   105k|        dest.push_back(res.value);
 1385|   105k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|   105k|    }
 1387|  1.61k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|   105k|{
 1299|   105k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|   105k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|   105k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|   105k|    return {input.begin() + len,
 1305|   105k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|   105k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    768|    {
 5314|    768|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    768|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    768|        return read_impl(range, specs, value);
 5316|    768|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    768|    {
 5332|    768|        SCN_CLANG_PUSH
 5333|    768|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    768|        switch (m_type) {
 5336|    314|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 314, False: 454]
  ------------------
 5337|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     90|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 90, False: 678]
  ------------------
 5340|     90|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     90|                                                                   value);
 5342|       |
 5343|     56|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 56, False: 712]
  ------------------
 5344|     56|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    272|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 272, False: 496]
  ------------------
 5347|    272|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    272|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 766]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     34|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 34, False: 734]
  ------------------
 5357|     34|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     34|                    range,
 5359|     34|                    get_unescaped_regex_pattern(
 5360|     34|                        specs.charset_string<SourceCharT>()),
 5361|     34|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 768]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    768|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    768|        }
 5368|       |
 5369|    768|        SCN_CLANG_POP
 5370|    768|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    314|    {
 4861|    314|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    314|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    460|{
 4795|    460|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    460|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    460|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 170, False: 290]
  ------------------
 4799|    170|        return detail::unexpected_scan_error(
 4800|    170|            scan_error::invalid_scanned_value,
 4801|    170|            "Invalid encoding in scanned string");
 4802|    170|    }
 4803|       |
 4804|    290|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    290|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 290]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    290|    return SCN_MOVE(result);
  ------------------
  |  |  934|    290|    static_cast<    \
  |  |  935|    290|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    290|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     90|    {
 4882|     90|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 40, False: 50]
  ------------------
 4883|     40|            return read_string_impl(
 4884|     40|                range,
 4885|     40|                read_until_code_unit(
 4886|     40|                    range,
 4887|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     40|                        SourceCharT ch) { return ch == until; }),
 4889|     40|                value);
 4890|     40|        }
 4891|     50|        return read_string_impl(
 4892|     50|            range,
 4893|     50|            read_until_code_units(
 4894|     50|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     50|            value);
 4896|     90|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     40|        : m_fptr([](storage fn,
  743|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     40|              cvref<T> obj = *get<T>(fn);
  745|     40|              if constexpr (std::is_void_v<R>) {
  746|     40|                  obj(static_cast<decltype(args)>(args)...);
  747|     40|              }
  748|     40|              else {
  749|     40|                  return obj(static_cast<decltype(args)>(args)...);
  750|     40|              }
  751|     40|          }),
  752|     40|          m_storage(std::addressof(f))
  753|     40|    {
  754|     40|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    706|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  688|    706|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    706|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|    706|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     40|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     40|        {
  662|     40|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     56|    {
 4988|     56|        return read_impl(
 4989|     56|            range,
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
 4993|     56|            detail::priority_tag<1>{});
 4994|     56|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     56|    {
 5015|     56|        return read_cb(range);
 5016|     56|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    272|    {
 5089|    272|        auto it = read_source_impl(range, {specs});
 5090|    272|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 264]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    264|        return read_string_impl(range, *it, value);
 5095|    272|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    264|{
 4795|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 92, False: 172]
  ------------------
 4799|     92|        return detail::unexpected_scan_error(
 4800|     92|            scan_error::invalid_scanned_value,
 4801|     92|            "Invalid encoding in scanned string");
 4802|     92|    }
 4803|       |
 4804|    172|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    172|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    172|    return SCN_MOVE(result);
  ------------------
  |  |  934|    172|    static_cast<    \
  |  |  935|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    172|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|     36|    {
 4932|     36|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|     36|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.33k|    {
 5314|  1.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.33k|        return read_impl(range, specs, value);
 5316|  1.33k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.33k|    {
 5332|  1.33k|        SCN_CLANG_PUSH
 5333|  1.33k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.33k|        switch (m_type) {
 5336|    334|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 334, False: 1.00k]
  ------------------
 5337|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 58, False: 1.27k]
  ------------------
 5340|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     58|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.33k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    842|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 842, False: 494]
  ------------------
 5347|    842|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    842|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     32|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 32, False: 1.30k]
  ------------------
 5352|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     32|                    range, specs.charset_string<SourceCharT>(),
 5354|     32|                    specs.regexp_flags, value);
 5355|       |
 5356|     70|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 70, False: 1.26k]
  ------------------
 5357|     70|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     70|                    range,
 5359|     70|                    get_unescaped_regex_pattern(
 5360|     70|                        specs.charset_string<SourceCharT>()),
 5361|     70|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.33k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.33k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.33k|        }
 5368|       |
 5369|  1.33k|        SCN_CLANG_POP
 5370|  1.33k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    956|    {
 4861|    956|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    956|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  1.01k|{
 4795|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  1.01k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  1.01k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 322, False: 692]
  ------------------
 4799|    322|        return detail::unexpected_scan_error(
 4800|    322|            scan_error::invalid_scanned_value,
 4801|    322|            "Invalid encoding in scanned string");
 4802|    322|    }
 4803|       |
 4804|    692|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    692|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 692]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    692|    return SCN_MOVE(result);
  ------------------
  |  |  934|    692|    static_cast<    \
  |  |  935|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    692|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.15k|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|  1.15k|    else {
 3132|  1.15k|        return transcode_impl(source.view(), dest);
 3133|  1.15k|    }
 3134|       |
 3135|      0|    return {};
 3136|  1.15k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     58|    {
 4882|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 28, False: 30]
  ------------------
 4883|     28|            return read_string_impl(
 4884|     28|                range,
 4885|     28|                read_until_code_unit(
 4886|     28|                    range,
 4887|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     28|                        SourceCharT ch) { return ch == until; }),
 4889|     28|                value);
 4890|     28|        }
 4891|     30|        return read_string_impl(
 4892|     30|            range,
 4893|     30|            read_until_code_units(
 4894|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     30|            value);
 4896|     58|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    842|    {
 5089|    842|        auto it = read_source_impl(range, {specs});
 5090|    842|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 362, False: 480]
  |  |  ------------------
  ------------------
 5091|    362|            return unexpected(it.error());
 5092|    362|        }
 5093|       |
 5094|    480|        return read_string_impl(range, *it, value);
 5095|    842|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    510|{
 4795|    510|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    510|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    510|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 52, False: 458]
  ------------------
 4799|     52|        return detail::unexpected_scan_error(
 4800|     52|            scan_error::invalid_scanned_value,
 4801|     52|            "Invalid encoding in scanned string");
 4802|     52|    }
 4803|       |
 4804|    458|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    458|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 458]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    458|    return SCN_MOVE(result);
  ------------------
  |  |  934|    458|    static_cast<    \
  |  |  935|    458|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    458|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|    102|    {
 4932|    102|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    102|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     30|        return read_string_impl(range, it, value);
 4934|    102|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|  2.91k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  2.91k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  2.91k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  2.91k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    768|    {
 5314|    768|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    768|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    768|        return read_impl(range, specs, value);
 5316|    768|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    768|    {
 5332|    768|        SCN_CLANG_PUSH
 5333|    768|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    768|        switch (m_type) {
 5336|    314|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 314, False: 454]
  ------------------
 5337|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     90|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 90, False: 678]
  ------------------
 5340|     90|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     90|                                                                   value);
 5342|       |
 5343|     56|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 56, False: 712]
  ------------------
 5344|     56|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    272|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 272, False: 496]
  ------------------
 5347|    272|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    272|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 766]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     34|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 34, False: 734]
  ------------------
 5357|     34|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     34|                    range,
 5359|     34|                    get_unescaped_regex_pattern(
 5360|     34|                        specs.charset_string<SourceCharT>()),
 5361|     34|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 768]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    768|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    768|        }
 5368|       |
 5369|    768|        SCN_CLANG_POP
 5370|    768|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    314|    {
 4868|    314|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    314|                                     value);
 4870|    314|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    460|{
 4814|    460|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    460|    auto src = [&]() {
 4817|    460|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    460|            return make_contiguous_buffer(
 4819|    460|                ranges::subrange{range.begin().base(), result.base()});
 4820|    460|        }
 4821|    460|        else {
 4822|    460|            return make_contiguous_buffer(
 4823|    460|                ranges::subrange{range.begin(), result});
 4824|    460|        }
 4825|    460|    }();
 4826|    460|    using src_type = decltype(src);
 4827|       |
 4828|    460|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    460|    else {
 4841|    460|        const auto view = src.view();
 4842|    460|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    460|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 170, False: 290]
  ------------------
 4845|    170|            return detail::unexpected_scan_error(
 4846|    170|                scan_error::invalid_scanned_value,
 4847|    170|                "Invalid encoding in scanned string_view");
 4848|    170|        }
 4849|       |
 4850|    290|        return SCN_MOVE(result);
  ------------------
  |  |  934|    290|    static_cast<    \
  |  |  935|    290|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    460|    }
 4852|    460|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    460|    auto src = [&]() {
 4817|    460|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    460|            return make_contiguous_buffer(
 4819|    460|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    460|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     90|    {
 4904|     90|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 40, False: 50]
  ------------------
 4905|     40|            return read_string_view_impl(
 4906|     40|                range,
 4907|     40|                read_until_code_unit(
 4908|     40|                    range,
 4909|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     40|                        SourceCharT ch) { return ch == until; }),
 4911|     40|                value);
 4912|     40|        }
 4913|     50|        return read_string_view_impl(
 4914|     50|            range,
 4915|     50|            read_until_code_units(
 4916|     50|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     50|            value);
 4918|     90|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     40|        : m_fptr([](storage fn,
  743|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     40|              cvref<T> obj = *get<T>(fn);
  745|     40|              if constexpr (std::is_void_v<R>) {
  746|     40|                  obj(static_cast<decltype(args)>(args)...);
  747|     40|              }
  748|     40|              else {
  749|     40|                  return obj(static_cast<decltype(args)>(args)...);
  750|     40|              }
  751|     40|          }),
  752|     40|          m_storage(std::addressof(f))
  753|     40|    {
  754|     40|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    706|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  688|    706|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    706|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4910|    706|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     40|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     40|        {
  662|     40|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     56|    {
 5000|     56|        return read_impl(
 5001|     56|            range,
 5002|     56|            [&](const auto& rng) {
 5003|     56|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     56|            },
 5005|     56|            detail::priority_tag<1>{});
 5006|     56|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     56|    {
 5015|     56|        return read_cb(range);
 5016|     56|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     56|            [&](const auto& rng) {
 5003|     56|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     56|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    272|    {
 5103|    272|        auto it = read_source_impl(range, {specs});
 5104|    272|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 264]
  |  |  ------------------
  ------------------
 5105|      8|            return unexpected(it.error());
 5106|      8|        }
 5107|       |
 5108|    264|        return read_string_view_impl(range, *it, value);
 5109|    272|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    264|{
 4814|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    264|    auto src = [&]() {
 4817|    264|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    264|            return make_contiguous_buffer(
 4819|    264|                ranges::subrange{range.begin().base(), result.base()});
 4820|    264|        }
 4821|    264|        else {
 4822|    264|            return make_contiguous_buffer(
 4823|    264|                ranges::subrange{range.begin(), result});
 4824|    264|        }
 4825|    264|    }();
 4826|    264|    using src_type = decltype(src);
 4827|       |
 4828|    264|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    264|    else {
 4841|    264|        const auto view = src.view();
 4842|    264|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    264|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 92, False: 172]
  ------------------
 4845|     92|            return detail::unexpected_scan_error(
 4846|     92|                scan_error::invalid_scanned_value,
 4847|     92|                "Invalid encoding in scanned string_view");
 4848|     92|        }
 4849|       |
 4850|    172|        return SCN_MOVE(result);
  ------------------
  |  |  934|    172|    static_cast<    \
  |  |  935|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    264|    }
 4852|    264|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    264|    auto src = [&]() {
 4817|    264|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    264|            return make_contiguous_buffer(
 4819|    264|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    264|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4942|     36|    {
 4943|     36|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|      0|        return read_string_view_impl(range, it, value);
 4945|     36|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  1.33k|    {
 5314|  1.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.33k|        return read_impl(range, specs, value);
 5316|  1.33k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  1.33k|    {
 5332|  1.33k|        SCN_CLANG_PUSH
 5333|  1.33k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.33k|        switch (m_type) {
 5336|    334|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 334, False: 1.00k]
  ------------------
 5337|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 58, False: 1.27k]
  ------------------
 5340|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     58|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.33k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    842|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 842, False: 494]
  ------------------
 5347|    842|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    842|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     32|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 32, False: 1.30k]
  ------------------
 5352|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     32|                    range, specs.charset_string<SourceCharT>(),
 5354|     32|                    specs.regexp_flags, value);
 5355|       |
 5356|     70|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 70, False: 1.26k]
  ------------------
 5357|     70|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     70|                    range,
 5359|     70|                    get_unescaped_regex_pattern(
 5360|     70|                        specs.charset_string<SourceCharT>()),
 5361|     70|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.33k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.33k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.33k|        }
 5368|       |
 5369|  1.33k|        SCN_CLANG_POP
 5370|  1.33k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|    956|    {
 4868|    956|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    956|                                     value);
 4870|    956|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  1.01k|{
 4814|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  1.01k|    auto src = [&]() {
 4817|  1.01k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  1.01k|            return make_contiguous_buffer(
 4819|  1.01k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  1.01k|        }
 4821|  1.01k|        else {
 4822|  1.01k|            return make_contiguous_buffer(
 4823|  1.01k|                ranges::subrange{range.begin(), result});
 4824|  1.01k|        }
 4825|  1.01k|    }();
 4826|  1.01k|    using src_type = decltype(src);
 4827|       |
 4828|  1.01k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  1.01k|    else {
 4841|  1.01k|        const auto view = src.view();
 4842|  1.01k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  1.01k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 322, False: 692]
  ------------------
 4845|    322|            return detail::unexpected_scan_error(
 4846|    322|                scan_error::invalid_scanned_value,
 4847|    322|                "Invalid encoding in scanned string_view");
 4848|    322|        }
 4849|       |
 4850|    692|        return SCN_MOVE(result);
  ------------------
  |  |  934|    692|    static_cast<    \
  |  |  935|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  1.01k|    }
 4852|  1.01k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  1.01k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  1.01k|        else {
 4822|  1.01k|            return make_contiguous_buffer(
 4823|  1.01k|                ranges::subrange{range.begin(), result});
 4824|  1.01k|        }
 4825|  1.01k|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     58|    {
 4904|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 28, False: 30]
  ------------------
 4905|     28|            return read_string_view_impl(
 4906|     28|                range,
 4907|     28|                read_until_code_unit(
 4908|     28|                    range,
 4909|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     28|                        SourceCharT ch) { return ch == until; }),
 4911|     28|                value);
 4912|     28|        }
 4913|     30|        return read_string_view_impl(
 4914|     30|            range,
 4915|     30|            read_until_code_units(
 4916|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     30|            value);
 4918|     58|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4910|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    842|    {
 5103|    842|        auto it = read_source_impl(range, {specs});
 5104|    842|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 362, False: 480]
  |  |  ------------------
  ------------------
 5105|    362|            return unexpected(it.error());
 5106|    362|        }
 5107|       |
 5108|    480|        return read_string_view_impl(range, *it, value);
 5109|    842|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    510|{
 4814|    510|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    510|    auto src = [&]() {
 4817|    510|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    510|            return make_contiguous_buffer(
 4819|    510|                ranges::subrange{range.begin().base(), result.base()});
 4820|    510|        }
 4821|    510|        else {
 4822|    510|            return make_contiguous_buffer(
 4823|    510|                ranges::subrange{range.begin(), result});
 4824|    510|        }
 4825|    510|    }();
 4826|    510|    using src_type = decltype(src);
 4827|       |
 4828|    510|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    510|    else {
 4841|    510|        const auto view = src.view();
 4842|    510|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    510|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 52, False: 458]
  ------------------
 4845|     52|            return detail::unexpected_scan_error(
 4846|     52|                scan_error::invalid_scanned_value,
 4847|     52|                "Invalid encoding in scanned string_view");
 4848|     52|        }
 4849|       |
 4850|    458|        return SCN_MOVE(result);
  ------------------
  |  |  934|    458|    static_cast<    \
  |  |  935|    458|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    510|    }
 4852|    510|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    510|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    510|        else {
 4822|    510|            return make_contiguous_buffer(
 4823|    510|                ranges::subrange{range.begin(), result});
 4824|    510|        }
 4825|    510|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4942|    102|    {
 4943|    102|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    102|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    102|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    102|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|    102|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|     30|        return read_string_view_impl(range, it, value);
 4945|    102|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5661|  1.20k|    {
 5662|  1.20k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  1.20k|        else {
 5667|  1.20k|            detail::check_char_type_specs(specs, eh);
 5668|  1.20k|        }
 5669|  1.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 640, False: 560]
  |  |  ------------------
  ------------------
 5670|    640|            return detail::unexpected_scan_error(
 5671|    640|                scan_error::invalid_format_string, eh.m_msg);
 5672|    640|        }
 5673|    560|        return {};
 5674|  1.20k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  16.0k|    {
  763|  16.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  16.0k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.59k|        : m_fptr([](storage fn,
  743|  2.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.59k|              cvref<T> obj = *get<T>(fn);
  745|  2.59k|              if constexpr (std::is_void_v<R>) {
  746|  2.59k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.59k|              }
  748|  2.59k|              else {
  749|  2.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.59k|              }
  751|  2.59k|          }),
  752|  2.59k|          m_storage(std::addressof(f))
  753|  2.59k|    {
  754|  2.59k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  6.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.17k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.17k|              else {
  749|  6.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.17k|              }
  751|  6.17k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  6.17k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.17k|        else if constexpr (std::is_object_v<T>) {
  688|  6.17k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.17k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.59k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.59k|        {
  662|  2.59k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5656|  1.53k|    {
 5657|  1.53k|        return false;
 5658|  1.53k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|    132|    {
 1879|    132|        auto stdloc = loc.get<std::locale>();
 1880|    132|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|    132|        grouping = numpunct.grouping();
 1882|    132|        thousands_sep =
 1883|    132|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 132]
  ------------------
 1884|    132|        decimal_point = numpunct.decimal_point();
 1885|    132|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|    158|{
 1816|    158|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 158, False: 0]
  ------------------
 1817|    158|        return std::use_facet<Facet>(stdloc);
 1818|    158|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|    158|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  3.35k|{
 2449|  3.35k|    size_t count{0};
 2450|  3.35k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  3.35k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  3.35k|    });
 2453|  3.35k|    return count;
 2454|  3.35k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.35k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.35k|    auto it = input.begin();
 1547|  12.6k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 9.30k, False: 3.35k]
  ------------------
 1548|  9.30k|        auto res = get_next_code_point(
 1549|  9.30k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  9.30k|        cb(res.value);
 1551|  9.30k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  9.30k|    }
 1553|  3.35k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   134k|{
 1279|   134k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   134k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   134k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|   134k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|   134k|    return {input.begin() + len,
 1291|   134k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   134k|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.35k|        : m_fptr([](storage fn,
  743|  3.35k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.35k|              cvref<T> obj = *get<T>(fn);
  745|  3.35k|              if constexpr (std::is_void_v<R>) {
  746|  3.35k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.35k|              }
  748|  3.35k|              else {
  749|  3.35k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.35k|              }
  751|  3.35k|          }),
  752|  3.35k|          m_storage(std::addressof(f))
  753|  3.35k|    {
  754|  3.35k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  9.30k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.30k|              cvref<T> obj = *get<T>(fn);
  745|  9.30k|              if constexpr (std::is_void_v<R>) {
  746|  9.30k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  9.30k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  9.30k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.30k|        else if constexpr (std::is_object_v<T>) {
  688|  9.30k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.30k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  9.30k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  9.30k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  9.30k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.35k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.35k|        {
  662|  3.35k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.19k|    {
 1681|  3.19k|        return m_view;
 1682|  3.19k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.94k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2520|  4.46k|    {
 2521|  4.46k|        return m_multibyte_left;
 2522|  4.46k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2525|  3.63k|    {
 2526|  3.63k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  3.63k|        return _get_width_at_current_cp_start(
 2528|  3.63k|                   _get_cp_length_at_current()) == 2;
 2529|  3.63k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2753|  31.6k|    {
 2754|  31.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 31.6k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  31.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 31.6k, False: 0]
  ------------------
 2759|  31.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  31.6k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  31.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  31.6k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  5.55k|{
 1956|  5.55k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  5.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  5.55k|    if constexpr (ranges::sized_range<Range>) {
 1959|  5.55k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  5.55k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 172, False: 5.38k]
  ------------------
 1961|    172|            return unexpected(eof_error::eof);
 1962|    172|        }
 1963|       |
 1964|  5.38k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  5.55k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2747|  31.6k|    {
 2748|  31.6k|        return static_cast<difference_type>(
 2749|  31.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  31.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2532|  38.0k|    {
 2533|  38.0k|        return *m_current;
 2534|  38.0k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2541|  27.9k|    {
 2542|  27.9k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  27.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  27.9k|        _increment_current();
 2544|  27.9k|        return *this;
 2545|  27.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2776|  27.9k|    {
 2777|  27.9k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 27.9k, False: 0]
  ------------------
 2778|  27.9k|            auto cplen = _get_cp_length_at_current();
 2779|  27.9k|            m_multibyte_left = cplen - 1;
 2780|  27.9k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  27.9k|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|  27.9k|        ++m_current;
 2787|  27.9k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SE_EENS1_20incrementable_traitsISE_E15difference_typeEE4typeESE_SF_:
  107|     22|    {
  108|     22|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|     22|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISF_E15difference_typeEE4typeESF_SE_NS0_6detail12priority_tagILm0EEE:
   93|     22|    {
   94|     22|        iter_difference_t<I> counter{0};
   95|     44|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 22, False: 22]
  ------------------
   96|     22|            ++i;
   97|     22|            ++counter;
   98|     22|        }
   99|     22|        return counter;
  100|     22|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|  9.86k|    {
 2638|  9.86k|        return !(a == b);
 2639|  9.86k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|  11.0k|    {
 2630|  11.0k|        return a.m_current == b.m_current;
 2631|  11.0k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2536|  4.37k|    {
 2537|  4.37k|        return *m_current;
 2538|  4.37k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS1_20incrementable_traitsISD_E15difference_typeE:
  303|     66|    {
  304|     66|        ranges::advance(x, n);
  305|     66|        return x;
  306|     66|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     66|    {
  268|     66|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     66|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     66|    {
  161|     66|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     66|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 66, False: 0]
  ------------------
  164|    132|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 66, False: 66]
  ------------------
  165|     66|                ++i;
  166|     66|            }
  167|     66|        }
  168|      0|        else {
  169|      0|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 0]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|      0|        }
  173|     66|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  9.42k|    {
 1989|  9.42k|        return !codepoint.empty();
 1990|  9.42k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    748|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    748|    else {
 1788|    748|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|    748|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    748|    }
 1790|    748|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    748|    {
 1636|    748|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    748|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    748|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    768|    {
 1720|    768|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    768|        else {
 1753|    768|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    768|            if constexpr (ranges::common_range<Range>) {
 1758|    768|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    768|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    768|            m_view = string_view_type{str};
 1768|    768|        }
 1769|    768|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2480|  12.3k|        : m_current(x), m_end(s), m_count(n)
 2481|  12.3k|    {
 2482|  12.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2512|  41.6k|    {
 2513|  41.6k|        return m_current;
 2514|  41.6k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  4.54k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  4.54k|    else {
 2225|  4.54k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  4.54k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  4.54k|            return detail::is_cp_space(cp);
 2238|  4.54k|        });
 2239|  4.54k|    }
 2240|  4.54k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2180|  4.54k|{
 2181|  4.54k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  4.54k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2159|  4.54k|{
 2160|  4.54k|    auto it = range.begin();
 2161|  8.56k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 4.69k, False: 3.87k]
  ------------------
 2162|  4.69k|        const auto val =
 2163|  4.69k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  4.69k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  4.69k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.69k, False: 0]
  |  |  ------------------
  ------------------
 2165|  4.69k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  4.69k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  4.69k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 674, False: 4.02k]
  ------------------
 2168|    674|                return it;
 2169|    674|            }
 2170|  4.69k|        }
 2171|  4.02k|        it = val.iterator;
 2172|  4.02k|    }
 2173|       |
 2174|  3.87k|    return it;
 2175|  4.54k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  49.1k|{
 1998|  49.1k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  49.1k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  49.1k|    auto it = range.begin();
 2002|  49.1k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  49.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 49.1k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  49.1k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 49.1k, False: 0]
  ------------------
 2011|  49.1k|        ++it;
 2012|  49.1k|        return {it, string_type(1, *range.begin())};
 2013|  49.1k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  49.1k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  68.8k|{
  945|  68.8k|    return is_range_eof(r.begin(), r.end());
  946|  68.8k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   194k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   194k|    {
  938|   194k|        return begin == end;
  939|   194k|    }
  940|   194k|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    910|    {
  190|    910|        i = std::move(bound);
  191|    910|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  49.1k|    {
 1989|  49.1k|        return !codepoint.empty();
 1990|  49.1k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  4.54k|        : m_fptr([](storage fn,
  743|  4.54k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.54k|              cvref<T> obj = *get<T>(fn);
  745|  4.54k|              if constexpr (std::is_void_v<R>) {
  746|  4.54k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.54k|              }
  748|  4.54k|              else {
  749|  4.54k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.54k|              }
  751|  4.54k|          }),
  752|  4.54k|          m_storage(std::addressof(f))
  753|  4.54k|    {
  754|  4.54k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  4.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.69k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.69k|              else {
  749|  4.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.69k|              }
  751|  4.69k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  4.69k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.69k|        else if constexpr (std::is_object_v<T>) {
  688|  4.69k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.69k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2236|  4.69k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  4.69k|            return detail::is_cp_space(cp);
 2238|  4.69k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  4.54k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.54k|        {
  662|  4.54k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  19.6k|{
  951|  19.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  19.6k|    return eof_error::good;
  955|  19.6k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  4.99k|    {
 2943|  4.99k|        return take_width_view{r, n};
 2944|  4.99k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2910|  4.99k|        : m_base(base), m_count(count)
 2911|  4.99k|    {
 2912|  4.99k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2822|  4.99k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5737|    174|    {
 5738|    174|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 128, False: 46]
  ------------------
 5739|    174|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 46]
  ------------------
 5740|    128|            return read_default(range, value, loc);
 5741|    128|        }
 5742|       |
 5743|     46|        reader_impl_for_int<CharT> reader{};
 5744|     46|        using integer_type =
 5745|     46|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     46|        integer_type tmp_value{};
 5747|     46|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     46|        value = static_cast<integer_type>(value);
 5749|     46|        return ret;
 5750|    174|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5721|    128|    {
 5722|    128|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    128|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|    128|        else {
 5727|    128|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|    128|        }
 5729|    128|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5601|    128|    {
 5602|    128|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    128|        ch = *range.begin();
 5604|    128|        return it;
 5605|    128|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  1.17k|{
 1945|  1.17k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  1.17k|    return ranges::next(range.begin());
 1950|  1.17k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|  1.17k|{
  951|  1.17k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  1.17k|    return eof_error::good;
  955|  1.17k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|  1.17k|{
  945|  1.17k|    return is_range_eof(r.begin(), r.end());
  946|  1.17k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  10.7k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  10.7k|    {
  938|  10.7k|        return begin == end;
  939|  10.7k|    }
  940|  10.7k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|  37.8k|        {
 2879|  37.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 830, False: 37.0k]
  |  Branch (2879:39): [True: 830, False: 0]
  ------------------
 2880|  37.8k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 282, False: 36.7k]
  ------------------
 2881|  37.8k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 3.63k, False: 33.1k]
  |  Branch (2881:39): [True: 3.63k, False: 0]
  ------------------
 2882|  36.7k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 54, False: 3.58k]
  ------------------
 2883|  37.8k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2926|  25.7k|    {
 2927|  25.7k|        return sentinel<true>{m_base.get().end()};
 2928|  25.7k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2825|  50.5k|    {
 2826|  50.5k|        return view;
 2827|  50.5k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2859|  25.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  25.7k|    static_cast<    \
  |  |  935|  25.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.26k|    {
  296|  1.26k|        ++x;
  297|  1.26k|        return x;
  298|  1.26k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2920|  12.3k|    {
 2921|  12.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  12.3k|                                      m_count};
 2923|  12.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    228|    {
 3590|    228|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    228|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    228|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 228]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    228|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 12, False: 216]
  ------------------
 3611|     12|            value = T{0};
 3612|     12|            return std::next(prefix_result.iterator);
 3613|     12|        }
 3614|       |
 3615|    216|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    216|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 190, False: 26]
  |  |  ------------------
  ------------------
 3616|    190|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 174, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    174|    }                                                  \
  |  |  |  | 3939|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     16|                    parse_integer_digits_without_thsep(
 3618|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     16|                        prefix_result.parsed_base));
 3620|       |
 3621|     16|            auto buf = make_contiguous_buffer(
 3622|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     16|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     16|                                        prefix_result.parsed_base));
 3626|       |
 3627|     16|            return ranges::next(
 3628|     16|                prefix_result.iterator,
 3629|     16|                ranges::distance(buf.view().begin(), result_it));
 3630|     16|        }
 3631|       |
 3632|     26|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     26|            localized_number_formatting_options<CharT>{loc};
 3637|     26|#endif
 3638|       |
 3639|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|    536|{
 3377|    536|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    536|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    536|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    536|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    536|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|    536|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|    536|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|    536|        parse_integer_base_prefix(
 3382|    536|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|    536|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 18, False: 518]
  ------------------
 3385|     18|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 6, False: 12]
  |  Branch (3385:13): [True: 18, False: 0]
  ------------------
 3386|     18|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 12, False: 0]
  ------------------
 3387|     18|            digits_begin_it = base_prefix_begin_it;
 3388|     18|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|     18|    }
 3393|    518|    else {
 3394|    518|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 518]
  |  Branch (3394:13): [True: 472, False: 46]
  ------------------
 3395|    518|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 472, False: 46]
  ------------------
 3396|    472|            digits_begin_it = base_prefix_begin_it;
 3397|    472|        }
 3398|    518|    }
 3399|       |
 3400|    536|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 536, False: 0]
  ------------------
 3401|    536|        sign = sign_type::plus_sign;
 3402|    536|    }
 3403|    536|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|    536|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|    536|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|    702|{
 3258|    702|    auto r = read_one_of_code_unit(range, "+-");
 3259|    702|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 702, False: 0]
  ------------------
 3260|    702|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 702, False: 0]
  ------------------
 3261|    702|            return std::pair{range.begin(), sign_type::default_sign};
 3262|    702|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|    702|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|    702|{
 2372|    702|    auto it = read_code_unit(range);
 2373|    702|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    702|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 702]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  1.40k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.40k, False: 702]
  ------------------
 2378|  1.40k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 1.40k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  1.40k|    }
 2382|       |
 2383|    702|    return unexpected(parse_error::error);
 2384|    702|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|    536|{
 3344|    536|    switch (base) {
 3345|      8|        case 2:
  ------------------
  |  Branch (3345:9): [True: 8, False: 528]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      8|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      8|                    false};
 3349|       |
 3350|     30|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 30, False: 506]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     30|            bool zero_parsed = false;
 3353|     30|            auto it = apply_opt(
 3354|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     30|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    160|        case 16:
  ------------------
  |  Branch (3358:9): [True: 160, False: 376]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    160|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    160|                    false};
 3362|       |
 3363|     38|        case 0:
  ------------------
  |  Branch (3363:9): [True: 38, False: 498]
  ------------------
 3364|       |            // detect base
 3365|     38|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    300|        default:
  ------------------
  |  Branch (3367:9): [True: 300, False: 236]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    300|            return {range.begin(), base, false};
 3370|    536|    }
 3371|    536|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    198|{
 2391|    198|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 192, False: 6]
  ------------------
 2392|    192|        return range.begin();
 2393|    192|    }
 2394|      6|    return *result;
 2395|    198|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     46|{
 3295|     46|    return read_matching_string_classic_nocase(range, "0b");
 3296|     46|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|    798|{
 2331|    798|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|    798|    else {
 2344|    798|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    798|            if (ch < 'A' || ch > 'Z') {
 2346|    798|                return ch;
 2347|    798|            }
 2348|    798|            return static_cast<char_type>(ch +
 2349|    798|                                          static_cast<char_type>('a' - 'A'));
 2350|    798|        };
 2351|       |
 2352|    798|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    798|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    798|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    798|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    798|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 238, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    238|    }                                                  \
  |  |  |  | 3939|    798|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    560|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    560|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    560|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    560|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 560, False: 0]
  |  |  ------------------
  ------------------
 2357|    560|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    560|                    return ascii_tolower(a) ==
 2359|    560|                           static_cast<detail::char_t<Range>>(b);
 2360|    560|                }))) {
 2361|    560|            return unexpected(parse_error::error);
 2362|    560|        }
 2363|       |
 2364|      0|        return it;
 2365|    560|    }
 2366|    798|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|    798|{
 1956|    798|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    798|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    798|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    798|    else {
 1967|    798|        auto it = range.begin();
 1968|    798|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 798]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  2.42k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.86k, False: 560]
  ------------------
 1973|  1.86k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 238, False: 1.63k]
  ------------------
 1974|    238|                return unexpected(eof_error::eof);
 1975|    238|            }
 1976|  1.86k|        }
 1977|       |
 1978|    560|        return it;
 1979|    798|    }
 1980|    798|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|    798|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    798|    else {
 1116|    798|        return 0;
 1117|    798|    }
 1118|    798|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    608|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    608|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 144, False: 464]
  |  Branch (2345:29): [True: 464, False: 0]
  ------------------
 2346|    608|                return ch;
 2347|    608|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    608|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     68|{
 3309|     68|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 68]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     68|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 18, False: 50]
  ------------------
 3314|     18|        zero_parsed = true;
 3315|     18|        return *r;
 3316|     18|    }
 3317|       |
 3318|     50|    return unexpected(parse_error::error);
 3319|     68|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     90|{
 2246|     90|    auto it = read_code_unit(range);
 2247|     90|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2248|      8|        return unexpected(make_eof_parse_error(it.error()));
 2249|      8|    }
 2250|       |
 2251|     82|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 64, False: 18]
  |  |  ------------------
  ------------------
 2252|     82|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     64|        return unexpected(parse_error::error);
 2254|     64|    }
 2255|       |
 2256|     18|    return *it;
 2257|     82|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|    110|{
 1945|    110|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
 1946|     14|        return unexpected(e);
 1947|     14|    }
 1948|       |
 1949|     96|    return ranges::next(range.begin());
 1950|    110|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    110|{
  951|    110|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
  952|     14|        return eof_error::eof;
  953|     14|    }
  954|     96|    return eof_error::good;
  955|    110|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  9.53k|{
  945|  9.53k|    return is_range_eof(r.begin(), r.end());
  946|  9.53k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    198|{
 3302|    198|    return read_matching_string_classic_nocase(range, "0x");
 3303|    198|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     38|{
 3325|     38|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 38]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     38|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 38]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     38|    {
 3332|     38|        bool zero_parsed{false};
 3333|     38|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 12, False: 26]
  ------------------
 3334|     12|            return {*r, 8, zero_parsed};
 3335|     12|        }
 3336|     38|    }
 3337|     26|    return {range.begin(), 10, false};
 3338|     38|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|    466|{
 3411|    466|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|    466|    else {
 3422|    466|        return read_while1_code_unit(range,
 3423|    466|                                     [&](char_type ch) noexcept {
 3424|    466|                                         return char_to_int(ch) < base;
 3425|    466|                                     })
 3426|    466|            .transform_error(map_parse_error_to_scan_error(
 3427|    466|                scan_error::invalid_scanned_value,
 3428|    466|                "Failed to parse integer: No digits found"));
 3429|    466|    }
 3430|    466|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    654|{
 2095|    654|    auto it = read_while_code_unit(range, pred);
 2096|    654|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 594, False: 60]
  ------------------
 2097|    594|        return unexpected(parse_error::error);
 2098|    594|    }
 2099|     60|    return it;
 2100|    654|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    654|{
 2075|    654|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    654|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    654|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    654|    else {
 2060|    654|        auto first = range.begin();
 2061|    714|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 684, False: 30]
  ------------------
 2062|    684|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 624, False: 60]
  ------------------
 2063|    624|                return first;
 2064|    624|            }
 2065|    684|        }
 2066|     30|        return first;
 2067|    654|    }
 2068|    654|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  19.2k|        {
 2892|  19.2k|            return !(y == x);
 2893|  19.2k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    466|        : m_fptr([](storage fn,
  743|    466|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    466|              cvref<T> obj = *get<T>(fn);
  745|    466|              if constexpr (std::is_void_v<R>) {
  746|    466|                  obj(static_cast<decltype(args)>(args)...);
  747|    466|              }
  748|    466|              else {
  749|    466|                  return obj(static_cast<decltype(args)>(args)...);
  750|    466|              }
  751|    466|          }),
  752|    466|          m_storage(std::addressof(f))
  753|    466|    {
  754|    466|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    490|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    490|        else if constexpr (std::is_object_v<T>) {
  688|    490|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    490|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3423|    490|                                     [&](char_type ch) noexcept {
 3424|    490|                                         return char_to_int(ch) < base;
 3425|    490|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    466|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    466|        {
  662|    466|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     52|{
 3441|     52|    std::basic_string<CharT> output;
 3442|     52|    std::string thsep_indices;
 3443|     52|    auto it = range.begin();
 3444|     52|    bool digit_matched = false;
 3445|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 56, False: 4]
  ------------------
 3446|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 56]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 48, False: 8]
  ------------------
 3451|     48|            break;
 3452|     48|        }
 3453|      8|        else {
 3454|      8|            output.push_back(*it);
 3455|      8|            digit_matched = true;
 3456|      8|        }
 3457|     56|    }
 3458|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3459|     44|        return detail::unexpected_scan_error(
 3460|     44|            scan_error::invalid_scanned_value,
 3461|     44|            "Failed to parse integer: No digits found");
 3462|     44|    }
 3463|      8|    return std::tuple{it, output, thsep_indices};
 3464|     52|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2516|  79.9k|    {
 2517|  79.9k|        return m_count;
 2518|  79.9k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5737|    384|    {
 5738|    384|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 336, False: 48]
  ------------------
 5739|    384|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 48]
  ------------------
 5740|    336|            return read_default(range, value, loc);
 5741|    336|        }
 5742|       |
 5743|     48|        reader_impl_for_int<CharT> reader{};
 5744|     48|        using integer_type =
 5745|     48|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     48|        integer_type tmp_value{};
 5747|     48|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     48|        value = static_cast<integer_type>(value);
 5749|     48|        return ret;
 5750|    384|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5721|    824|    {
 5722|    824|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    824|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|    824|        else {
 5727|    824|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|    824|        }
 5729|    824|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5601|    824|    {
 5602|    824|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    824|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    824|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    824|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 824]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    824|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    824|        ch = *range.begin();
 5604|    824|        return it;
 5605|    824|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.25k|{
 1945|  6.25k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.25k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.25k|    return ranges::next(range.begin());
 1950|  6.25k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  94.9k|    {
  296|  94.9k|        ++x;
  297|  94.9k|        return x;
  298|  94.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    458|    {
 3590|    458|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    458|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    458|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    458|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 458]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    458|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    458|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    458|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    458|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 458]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    458|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 10, False: 448]
  ------------------
 3611|     10|            value = T{0};
 3612|     10|            return std::next(prefix_result.iterator);
 3613|     10|        }
 3614|       |
 3615|    448|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    448|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 424, False: 24]
  |  |  ------------------
  ------------------
 3616|    424|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    424|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    424|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    424|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 424]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    424|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    424|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    424|                    parse_integer_digits_without_thsep(
 3618|    424|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    424|                        prefix_result.parsed_base));
 3620|       |
 3621|    424|            auto buf = make_contiguous_buffer(
 3622|    424|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    424|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    424|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    424|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    424|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 394, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    394|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    394|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    394|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    394|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    394|    }                                                  \
  |  |  |  | 3939|    424|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     30|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     30|                                        prefix_result.parsed_base));
 3626|       |
 3627|     30|            return ranges::next(
 3628|     30|                prefix_result.iterator,
 3629|     30|                ranges::distance(buf.view().begin(), result_it));
 3630|    424|        }
 3631|       |
 3632|     24|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     24|            localized_number_formatting_options<CharT>{loc};
 3637|     24|#endif
 3638|       |
 3639|     24|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  2.67k|{
 3377|  2.67k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  2.67k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  2.67k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  2.67k|        parse_integer_base_prefix(
 3382|  2.67k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  2.67k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 16, False: 2.65k]
  ------------------
 3385|     16|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 16]
  ------------------
 3386|     16|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 16, False: 0]
  ------------------
 3387|     16|            digits_begin_it = base_prefix_begin_it;
 3388|     16|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|     16|    }
 3393|  2.65k|    else {
 3394|  2.65k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 2.65k]
  ------------------
 3395|  2.65k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 2.56k, False: 88]
  ------------------
 3396|  2.56k|            digits_begin_it = base_prefix_begin_it;
 3397|  2.56k|        }
 3398|  2.65k|    }
 3399|       |
 3400|  2.67k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 2.67k, False: 0]
  ------------------
 3401|  2.67k|        sign = sign_type::plus_sign;
 3402|  2.67k|    }
 3403|  2.67k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  2.67k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  2.67k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  3.60k|{
 3258|  3.60k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  3.60k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 3.60k, False: 0]
  ------------------
 3260|  3.60k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 3.60k, False: 0]
  ------------------
 3261|  3.60k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  3.60k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  3.60k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.60k|{
 2372|  3.60k|    auto it = read_code_unit(range);
 2373|  3.60k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.60k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  7.21k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 7.21k, False: 3.60k]
  ------------------
 2378|  7.21k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 7.21k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  7.21k|    }
 2382|       |
 2383|  3.60k|    return unexpected(parse_error::error);
 2384|  3.60k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  2.67k|{
 3344|  2.67k|    switch (base) {
 3345|     60|        case 2:
  ------------------
  |  Branch (3345:9): [True: 60, False: 2.61k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     60|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     60|                    false};
 3349|       |
 3350|     16|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16, False: 2.65k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     16|            bool zero_parsed = false;
 3353|     16|            auto it = apply_opt(
 3354|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     16|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    850|        case 16:
  ------------------
  |  Branch (3358:9): [True: 850, False: 1.82k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    850|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    850|                    false};
 3362|       |
 3363|     32|        case 0:
  ------------------
  |  Branch (3363:9): [True: 32, False: 2.64k]
  ------------------
 3364|       |            // detect base
 3365|     32|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  1.71k|        default:
  ------------------
  |  Branch (3367:9): [True: 1.71k, False: 958]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  1.71k|            return {range.begin(), base, false};
 3370|  2.67k|    }
 3371|  2.67k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    926|{
 2391|    926|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 920, False: 6]
  ------------------
 2392|    920|        return range.begin();
 2393|    920|    }
 2394|      6|    return *result;
 2395|    926|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     92|{
 3295|     92|    return read_matching_string_classic_nocase(range, "0b");
 3296|     92|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.79k|{
 2331|  3.79k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  3.79k|    else {
 2344|  3.79k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.79k|            if (ch < 'A' || ch > 'Z') {
 2346|  3.79k|                return ch;
 2347|  3.79k|            }
 2348|  3.79k|            return static_cast<char_type>(ch +
 2349|  3.79k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.79k|        };
 2351|       |
 2352|  3.79k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  3.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 3.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|  3.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  3.79k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  3.79k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  3.79k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.79k, False: 0]
  |  |  ------------------
  ------------------
 2357|  3.79k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  3.79k|                    return ascii_tolower(a) ==
 2359|  3.79k|                           static_cast<detail::char_t<Range>>(b);
 2360|  3.79k|                }))) {
 2361|  3.79k|            return unexpected(parse_error::error);
 2362|  3.79k|        }
 2363|       |
 2364|      0|        return it;
 2365|  3.79k|    }
 2366|  3.79k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  3.94k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.94k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 506, False: 3.43k]
  |  Branch (2345:29): [True: 3.43k, False: 0]
  ------------------
 2346|  3.94k|                return ch;
 2347|  3.94k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.94k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     48|{
 3309|     48|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 48]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     48|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 16, False: 32]
  ------------------
 3314|     16|        zero_parsed = true;
 3315|     16|        return *r;
 3316|     16|    }
 3317|       |
 3318|     32|    return unexpected(parse_error::error);
 3319|     48|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.81k|{
 2246|  1.81k|    auto it = read_code_unit(range);
 2247|  1.81k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.81k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.81k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.76k, False: 52]
  |  |  ------------------
  ------------------
 2252|  1.81k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.76k|        return unexpected(parse_error::error);
 2254|  1.76k|    }
 2255|       |
 2256|     52|    return *it;
 2257|  1.81k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|    882|{
 3302|    882|    return read_matching_string_classic_nocase(range, "0x");
 3303|    882|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     32|{
 3325|     32|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 32]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     32|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 32]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     32|    {
 3332|     32|        bool zero_parsed{false};
 3333|     32|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 10, False: 22]
  ------------------
 3334|     10|            return {*r, 8, zero_parsed};
 3335|     10|        }
 3336|     32|    }
 3337|     22|    return {range.begin(), 10, false};
 3338|     32|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  2.60k|{
 3411|  2.60k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  2.60k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  2.60k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.60k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  2.60k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  2.60k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     48|{
 3441|     48|    std::basic_string<CharT> output;
 3442|     48|    std::string thsep_indices;
 3443|     48|    auto it = range.begin();
 3444|     48|    bool digit_matched = false;
 3445|     56|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 56, False: 0]
  ------------------
 3446|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 56]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 48, False: 8]
  ------------------
 3451|     48|            break;
 3452|     48|        }
 3453|      8|        else {
 3454|      8|            output.push_back(*it);
 3455|      8|            digit_matched = true;
 3456|      8|        }
 3457|     56|    }
 3458|     48|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 8]
  |  |  ------------------
  ------------------
 3459|     40|        return detail::unexpected_scan_error(
 3460|     40|            scan_error::invalid_scanned_value,
 3461|     40|            "Failed to parse integer: No digits found");
 3462|     40|    }
 3463|      8|    return std::tuple{it, output, thsep_indices};
 3464|     48|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  9.51k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  9.51k|                  ranges::sized_range<Range>) {
 1785|  9.51k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  9.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  9.51k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  9.51k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  9.51k|    {
 1589|  9.51k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  11.2k|    {
 1602|  11.2k|        return sv;
 1603|  11.2k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5989|  1.18k|{
 5990|  1.18k|    using char_type = detail::char_t<Range>;
 5991|  1.18k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|  1.18k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 1.18k, False: 0]
  ------------------
 5994|  1.18k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|  1.18k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|  1.18k|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 984, False: 198]
  ------------------
 5998|    984|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|    984|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 150, False: 834]
  ------------------
 6001|    150|                auto prefix_width =
 6002|    150|                    static_cast<std::ptrdiff_t>(
 6003|    150|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|    150|                    ranges::distance(range.begin(), it);
 6005|    150|                return result_type{it, prefix_width};
 6006|    150|            }
 6007|    834|            return result_type{it, 0};
 6008|    984|        }
 6009|       |
 6010|    198|        auto max_width_view = take_width(range, max_width);
 6011|    198|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    198|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 198, False: 0]
  ------------------
 6014|    198|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    198|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    198|    }
 6018|       |
 6019|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 0, False: 0]
  ------------------
 6021|      0|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 0, False: 0]
  ------------------
 6024|      0|            auto prefix_width =
 6025|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|      0|            return result_type{it, prefix_width};
 6028|      0|        }
 6029|      0|        return result_type{it, 0};
 6030|      0|    }
 6031|       |
 6032|      0|    auto max_width_view = take_width(range, max_width);
 6033|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 0]
  ------------------
 6036|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|      0|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  1.10k|{
 2075|  1.10k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.10k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  1.29k|{
 2056|  1.29k|    if constexpr (ranges::common_range<Range>) {
 2057|  1.29k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  1.29k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.18k|        : m_fptr([](storage fn,
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|  1.18k|              if constexpr (std::is_void_v<R>) {
  746|  1.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18k|              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
  752|  1.18k|          m_storage(std::addressof(f))
  753|  1.18k|    {
  754|  1.18k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.91k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.91k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.91k|              else {
  749|  1.91k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.91k|              }
  751|  1.91k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|  1.91k|    {
  684|  1.91k|        if constexpr (std::is_const_v<T>) {
  685|  1.91k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.91k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5995|  1.91k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.18k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.18k|        {
  667|  1.18k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    288|{
 2075|    288|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    288|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    456|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    456|    else {
 2060|    456|        auto first = range.begin();
 2061|  3.48k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 3.31k, False: 174]
  ------------------
 2062|  3.31k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 282, False: 3.03k]
  ------------------
 2063|    282|                return first;
 2064|    282|            }
 2065|  3.31k|        }
 2066|    174|        return first;
 2067|    456|    }
 2068|    456|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    406|{
 3066|    406|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 406]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    406|    return read_while_classic_space(range);
 3077|    406|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    406|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    406|    else {
 2225|    406|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    406|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    406|            return detail::is_cp_space(cp);
 2238|    406|        });
 2239|    406|    }
 2240|    406|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    562|{
 2181|    562|    return read_until_code_point(range, std::not_fn(pred));
 2182|    562|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    754|{
 2160|    754|    auto it = range.begin();
 2161|  5.41k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 5.23k, False: 180]
  ------------------
 2162|  5.23k|        const auto val =
 2163|  5.23k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  5.23k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  5.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.23k, False: 0]
  |  |  ------------------
  ------------------
 2165|  5.23k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  5.23k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  5.23k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 574, False: 4.65k]
  ------------------
 2168|    574|                return it;
 2169|    574|            }
 2170|  5.23k|        }
 2171|  4.65k|        it = val.iterator;
 2172|  4.65k|    }
 2173|       |
 2174|    180|    return it;
 2175|    754|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  9.42k|{
 1998|  9.42k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  9.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  9.42k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  9.42k|    auto it = range.begin();
 2002|  9.42k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  9.42k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  9.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.42k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  9.42k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 9.42k, False: 0]
  ------------------
 2011|  9.42k|        ++it;
 2012|  9.42k|        return {it, string_type(1, *range.begin())};
 2013|  9.42k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  9.42k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    406|        : m_fptr([](storage fn,
  743|    406|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    406|              cvref<T> obj = *get<T>(fn);
  745|    406|              if constexpr (std::is_void_v<R>) {
  746|    406|                  obj(static_cast<decltype(args)>(args)...);
  747|    406|              }
  748|    406|              else {
  749|    406|                  return obj(static_cast<decltype(args)>(args)...);
  750|    406|              }
  751|    406|          }),
  752|    406|          m_storage(std::addressof(f))
  753|    406|    {
  754|    406|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    732|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    732|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    732|              else {
  749|    732|                  return obj(static_cast<decltype(args)>(args)...);
  750|    732|              }
  751|    732|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    732|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    732|        else if constexpr (std::is_object_v<T>) {
  688|    732|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    732|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|    732|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    732|            return detail::is_cp_space(cp);
 2238|    732|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    406|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    406|        {
  662|    406|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  6.79k|{
 3066|  6.79k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 6.43k, False: 366]
  ------------------
 3067|  6.43k|        auto it = read_while_classic_space(range);
 3068|  6.43k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  6.43k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.43k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  6.43k|        return it;
 3074|  6.43k|    }
 3075|       |
 3076|    366|    return read_while_classic_space(range);
 3077|  6.79k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  11.3k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  11.3k|    else {
 2225|  11.3k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  11.3k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  11.3k|            return detail::is_cp_space(cp);
 2238|  11.3k|        });
 2239|  11.3k|    }
 2240|  11.3k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  11.5k|{
 2181|  11.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  11.5k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  14.3k|{
 2160|  14.3k|    auto it = range.begin();
 2161|  47.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 44.4k, False: 2.93k]
  ------------------
 2162|  44.4k|        const auto val =
 2163|  44.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  44.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  44.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.4k, False: 0]
  |  |  ------------------
  ------------------
 2165|  44.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  44.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  44.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 11.4k, False: 33.0k]
  ------------------
 2168|  11.4k|                return it;
 2169|  11.4k|            }
 2170|  44.4k|        }
 2171|  33.0k|        it = val.iterator;
 2172|  33.0k|    }
 2173|       |
 2174|  2.93k|    return it;
 2175|  14.3k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  11.3k|        : m_fptr([](storage fn,
  743|  11.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.3k|              cvref<T> obj = *get<T>(fn);
  745|  11.3k|              if constexpr (std::is_void_v<R>) {
  746|  11.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.3k|              }
  748|  11.3k|              else {
  749|  11.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.3k|              }
  751|  11.3k|          }),
  752|  11.3k|          m_storage(std::addressof(f))
  753|  11.3k|    {
  754|  11.3k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  16.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.2k|              else {
  749|  16.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.2k|              }
  751|  16.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  16.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.2k|        else if constexpr (std::is_object_v<T>) {
  688|  16.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.2k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  16.2k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  16.2k|            return detail::is_cp_space(cp);
 2238|  16.2k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  11.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.3k|        {
  662|  11.3k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.52k|    {
 3156|  2.52k|        reader_error_handler eh{};
 3157|  2.52k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.52k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.29k, False: 1.22k]
  |  |  ------------------
  ------------------
 3159|  1.29k|            return detail::unexpected_scan_error(
 3160|  1.29k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.29k|        }
 3162|  1.22k|        return {};
 3163|  2.52k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|  2.52k|    {
 3168|  2.52k|        return static_cast<Derived&>(*this);
 3169|  2.52k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  2.52k|    {
 3536|  2.52k|        detail::check_int_type_specs(specs, eh);
 3537|  2.52k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|  2.32k|    {
 3151|  2.32k|        return true;
 3152|  2.32k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    182|    {
 3590|    182|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 182]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    182|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    182|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    182|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 182]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    182|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 6, False: 176]
  ------------------
 3611|      6|            value = T{0};
 3612|      6|            return std::next(prefix_result.iterator);
 3613|      6|        }
 3614|       |
 3615|    176|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    176|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 150, False: 26]
  |  |  ------------------
  ------------------
 3616|    150|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 138, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    138|    }                                                  \
  |  |  |  | 3939|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     12|                    parse_integer_digits_without_thsep(
 3618|     12|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     12|                        prefix_result.parsed_base));
 3620|       |
 3621|     12|            auto buf = make_contiguous_buffer(
 3622|     12|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     12|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     12|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     12|                                        prefix_result.parsed_base));
 3626|       |
 3627|     12|            return ranges::next(
 3628|     12|                prefix_result.iterator,
 3629|     12|                ranges::distance(buf.view().begin(), result_it));
 3630|     12|        }
 3631|       |
 3632|     26|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     26|            localized_number_formatting_options<CharT>{loc};
 3637|     26|#endif
 3638|       |
 3639|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    410|    {
 3590|    410|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    410|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    410|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 410]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    410|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 6, False: 404]
  ------------------
 3611|      6|            value = T{0};
 3612|      6|            return std::next(prefix_result.iterator);
 3613|      6|        }
 3614|       |
 3615|    404|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    404|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 380, False: 24]
  |  |  ------------------
  ------------------
 3616|    380|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    380|                    parse_integer_digits_without_thsep(
 3618|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    380|                        prefix_result.parsed_base));
 3620|       |
 3621|    380|            auto buf = make_contiguous_buffer(
 3622|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 354, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    354|    }                                                  \
  |  |  |  | 3939|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     26|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     26|                                        prefix_result.parsed_base));
 3626|       |
 3627|     26|            return ranges::next(
 3628|     26|                prefix_result.iterator,
 3629|     26|                ranges::distance(buf.view().begin(), result_it));
 3630|    380|        }
 3631|       |
 3632|     24|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     24|            localized_number_formatting_options<CharT>{loc};
 3637|     24|#endif
 3638|       |
 3639|     24|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    126|    {
 3590|    126|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    126|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    126|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 126]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    126|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 126]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    126|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    126|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 126, False: 0]
  |  |  ------------------
  ------------------
 3616|    126|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     10|                    parse_integer_digits_without_thsep(
 3618|     10|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     10|                        prefix_result.parsed_base));
 3620|       |
 3621|     10|            auto buf = make_contiguous_buffer(
 3622|     10|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     10|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     10|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     10|                                        prefix_result.parsed_base));
 3626|       |
 3627|     10|            return ranges::next(
 3628|     10|                prefix_result.iterator,
 3629|     10|                ranges::distance(buf.view().begin(), result_it));
 3630|     10|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    828|    {
 3590|    828|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 828]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    828|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    828|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 828]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    828|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 828]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    828|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    828|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 828, False: 0]
  |  |  ------------------
  ------------------
 3616|    828|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 828]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    828|                    parse_integer_digits_without_thsep(
 3618|    828|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    828|                        prefix_result.parsed_base));
 3620|       |
 3621|    828|            auto buf = make_contiguous_buffer(
 3622|    828|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    828|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 804, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    804|    }                                                  \
  |  |  |  | 3939|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     24|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     24|                                        prefix_result.parsed_base));
 3626|       |
 3627|     24|            return ranges::next(
 3628|     24|                prefix_result.iterator,
 3629|     24|                ranges::distance(buf.view().begin(), result_it));
 3630|    828|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.26k|    {
 3156|  1.26k|        reader_error_handler eh{};
 3157|  1.26k|        get_derived().check_specs_impl(specs, eh);
 3158|  1.26k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 632, False: 630]
  |  |  ------------------
  ------------------
 3159|    632|            return detail::unexpected_scan_error(
 3160|    632|                scan_error::invalid_format_string, eh.m_msg);
 3161|    632|        }
 3162|    630|        return {};
 3163|  1.26k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|  1.26k|    {
 3168|  1.26k|        return static_cast<Derived&>(*this);
 3169|  1.26k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.26k|    {
 4178|  1.26k|        detail::check_float_type_specs(specs, eh);
 4179|  1.26k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  1.21k|    {
 3151|  1.21k|        return true;
 3152|  1.21k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|    610|    {
 4250|    610|        unsigned options{};
 4251|    610|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 32, False: 578]
  ------------------
 4252|     32|            options |= float_reader_base::allow_thsep;
 4253|     32|        }
 4254|       |
 4255|    610|        SCN_GCC_COMPAT_PUSH
 4256|    610|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    610|        switch (specs.type) {
 4259|     20|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 20, False: 590]
  ------------------
 4260|     20|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 10, False: 600]
  ------------------
 4263|     10|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     90|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 90, False: 520]
  ------------------
 4266|     90|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 4, False: 606]
  ------------------
 4269|      4|                return options | float_reader_base::allow_scientific |
 4270|      4|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    486|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 486, False: 124]
  ------------------
 4273|    486|                return options | float_reader_base::allow_scientific |
 4274|    486|                       float_reader_base::allow_fixed |
 4275|    486|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 610]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    610|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    610|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    610|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|    610|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.09k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.19k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|    934|    {
 4090|    934|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 934, False: 0]
  ------------------
 4091|    934|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 934, False: 0]
  ------------------
 4092|    934|            return;
 4093|    934|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    768|    {
 1686|    768|        return m_storage.has_value();
 1687|    768|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    412|    {
 1691|    412|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    412|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    412|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    412|        return *m_storage;
 1693|    412|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    166|    {
  763|    166|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    166|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|     16|    {
 3721|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     16|        return read_source_impl(range);
 3727|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    166|    {
 3747|    166|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    166|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    166|        auto it = sign_result.first;
 3750|    166|        m_sign = sign_result.second;
 3751|       |
 3752|    166|        auto digits_begin = it;
 3753|    166|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    166|        else {
 3780|    166|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 146, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    146|    }                                                  \
  |  | 3939|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|     20|                it,
 3782|     20|                do_read_source_impl(
 3783|     20|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|     20|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|     20|        }
 3786|       |
 3787|    166|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|     20|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 20, False: 0]
  |  Branch (3789:48): [True: 20, False: 0]
  ------------------
 3790|     20|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 20, False: 0]
  ------------------
 3791|     20|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 20, False: 0]
  ------------------
 3792|     20|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|     20|        }
 3794|       |
 3795|     20|        handle_separators();
 3796|       |
 3797|     20|        return it;
 3798|    166|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    166|    {
 4033|    166|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    166|        const bool allowed_nonhex =
 4035|    166|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    166|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    166|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 166, False: 0]
  |  Branch (4038:45): [True: 0, False: 166]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    166|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 166]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    166|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 166, False: 0]
  |  Branch (4047:45): [True: 0, False: 166]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    166|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 166]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    166|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 154, False: 12]
  |  Branch (4054:28): [True: 18, False: 136]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|     18|            auto it = range.begin();
 4058|       |
 4059|     18|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 18]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|     18|            else {
 4064|     18|                m_kind = float_kind::hex_without_prefix;
 4065|     18|            }
 4066|       |
 4067|     18|            return read_hex(ranges::subrange{it, range.end()});
 4068|     18|        }
 4069|    148|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 12, False: 136]
  |  Branch (4069:29): [True: 12, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     12|            m_kind = float_kind::generic;
 4073|     12|            return read_regular_float(range);
 4074|     12|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    136|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    136|        m_kind = float_kind::generic;
 4085|    136|        return read_regular(range);
 4086|    136|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    166|    {
 3841|    166|        auto it = range.begin();
 3842|    166|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 166, False: 0]
  ------------------
 3843|    166|            return unexpected(r.error());
 3844|    166|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    166|    {
 3864|    166|        auto it = range.begin();
 3865|    166|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 166, False: 0]
  ------------------
 3866|    166|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    166|                scan_error::invalid_scanned_value,
 3868|    166|                "Invalid floating-point NaN value"));
 3869|    166|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    154|    {
 3834|    154|        return read_matching_string_classic_nocase(range, "0x");
 3835|    154|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|     18|    {
 3935|     18|        auto it = range.begin();
 3936|       |
 3937|     18|        std::ptrdiff_t digits_count = 0;
 3938|     18|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|     18|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 6]
  |  |  ------------------
  ------------------
 3940|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3941|     12|                scan_error::invalid_scanned_value,
 3942|     12|                "Invalid hexadecimal floating-point value"));
 3943|     12|        }
 3944|      6|        else {
 3945|      6|            digits_count += ranges::distance(it, *r);
 3946|      6|            it = *r;
 3947|      6|        }
 3948|       |
 3949|      6|        m_integral_part_length = digits_count;
 3950|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 6]
  ------------------
 3951|      6|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      6|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 6]
  ------------------
 3956|      6|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      6|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      6|        return it;
 3970|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|     24|    {
 3819|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  Branch (865:45): [True: 0, False: 24]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|     24|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|     24|        return read_while1_code_unit(
 3828|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|     24|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     26|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  688|     26|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     26|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3828|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESM_NSK_17basic_string_viewIcNSK_11char_traitsIcEEEE:
 3906|     20|    {
 3907|     20|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 0, False: 20]
  ------------------
 3908|      0|            auto beg_exp_it = range.begin();
 3909|      0|            auto it = *r;
 3910|       |
 3911|      0|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 0, False: 0]
  ------------------
 3912|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|      0|                it = r_sign->first;
 3914|      0|            }
 3915|       |
 3916|      0|            if (auto r_exp = read_while1_code_unit(
 3917|      0|                    ranges::subrange{it, range.end()},
 3918|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|                it = beg_exp_it;
 3921|      0|            }
 3922|      0|            else {
 3923|      0|                it = *r_exp;
 3924|      0|            }
 3925|       |
 3926|      0|            return it;
 3927|      0|        }
 3928|     20|        return range.begin();
 3929|     20|    }
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2371|     20|{
 2372|     20|    auto it = read_code_unit(range);
 2373|     20|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 14]
  |  |  ------------------
  ------------------
 2374|      6|        return unexpected(make_eof_parse_error(it.error()));
 2375|      6|    }
 2376|       |
 2377|     28|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 28, False: 14]
  ------------------
 2378|     28|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 28]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|     28|    }
 2382|       |
 2383|     14|    return unexpected(parse_error::error);
 2384|     14|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    148|    {
 3976|    148|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    148|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 140, False: 8]
  |  Branch (3977:50): [True: 4, False: 136]
  ------------------
 3978|       |
 3979|    148|        auto it = ranges::begin(range);
 3980|    148|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    148|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    148|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 132, False: 16]
  |  |  ------------------
  ------------------
 3984|    132|            return r.transform_error(
 3985|    132|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    132|                                              "Invalid floating-point value"));
 3987|    132|        }
 3988|     16|        else {
 3989|     16|            digits_count += ranges::distance(it, *r);
 3990|     16|            it = *r;
 3991|     16|        }
 3992|       |
 3993|     16|        m_integral_part_length = digits_count;
 3994|     16|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 16]
  ------------------
 3995|     16|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|     16|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 16]
  ------------------
 4000|     16|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|     16|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|     16|        auto beg_exp_it = it;
 4012|     16|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 14, False: 2]
  ------------------
 4013|     14|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|     14|        }
 4015|     16|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 2, False: 14]
  |  Branch (4015:29): [True: 2, False: 0]
  ------------------
 4016|      2|            return detail::unexpected_scan_error(
 4017|      2|                scan_error::invalid_scanned_value,
 4018|      2|                "No exponent given to scientific float");
 4019|      2|        }
 4020|       |
 4021|     14|        m_kind =
 4022|     14|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 14, False: 0]
  ------------------
 4023|       |
 4024|     14|        return it;
 4025|     16|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    164|    {
 3804|    164|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164]
  |  |  |  Branch (865:45): [True: 0, False: 164]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    164|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    164|        return read_while1_code_unit(
 3813|    164|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    164|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    164|        : m_fptr([](storage fn,
  743|    164|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    164|              cvref<T> obj = *get<T>(fn);
  745|    164|              if constexpr (std::is_void_v<R>) {
  746|    164|                  obj(static_cast<decltype(args)>(args)...);
  747|    164|              }
  748|    164|              else {
  749|    164|                  return obj(static_cast<decltype(args)>(args)...);
  750|    164|              }
  751|    164|          }),
  752|    164|          m_storage(std::addressof(f))
  753|    164|    {
  754|    164|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    168|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    168|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    168|              else {
  749|    168|                  return obj(static_cast<decltype(args)>(args)...);
  750|    168|              }
  751|    168|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    168|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    168|        else if constexpr (std::is_object_v<T>) {
  688|    168|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    168|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3813|    168|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    164|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    164|        {
  662|    164|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSH_:
 1675|     20|    {
 1676|     20|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     20|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    150|    {
 3707|    150|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 150]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    150|        return read_source_impl(range);
 3713|    150|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    932|    {
  763|    932|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    932|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    932|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|     16|    {
 3721|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     16|        return read_source_impl(range);
 3727|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|    932|    {
 3747|    932|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    932|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    932|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    932|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    932|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 932]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    932|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    932|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    932|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    932|        auto it = sign_result.first;
 3750|    932|        m_sign = sign_result.second;
 3751|       |
 3752|    932|        auto digits_begin = it;
 3753|    932|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|    932|                      ranges::sized_range<Range>) {
 3756|    932|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 932]
  |  |  |  Branch (865:45): [True: 0, False: 932]
  |  |  |  Branch (865:45): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 3757|    932|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|    932|            else {
 3766|    932|                auto cb = [&](const auto& rr)
 3767|    932|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    932|                    auto res = read_all(rr);
 3769|    932|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|    932|                        return detail::unexpected_scan_error(
 3771|    932|                            scan_error::invalid_scanned_value,
 3772|    932|                            "Invalid float value");
 3773|    932|                    }
 3774|    932|                    return res;
 3775|    932|                };
 3776|    932|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    932|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    932|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    932|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18, False: 914]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     18|    }                                                  \
  |  | 3939|    932|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    932|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|    914|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|    932|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|    914|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 914, False: 0]
  |  Branch (3789:48): [True: 914, False: 0]
  ------------------
 3790|    914|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 914, False: 0]
  ------------------
 3791|    914|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 914, False: 0]
  ------------------
 3792|    914|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|    914|        }
 3794|       |
 3795|    914|        handle_separators();
 3796|       |
 3797|    914|        return it;
 3798|    932|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|    932|    {
 3841|    932|        auto it = range.begin();
 3842|    932|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 932, False: 0]
  ------------------
 3843|    932|            return unexpected(r.error());
 3844|    932|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|    932|    {
 3864|    932|        auto it = range.begin();
 3865|    932|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 932, False: 0]
  ------------------
 3866|    932|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    932|                scan_error::invalid_scanned_value,
 3868|    932|                "Invalid floating-point NaN value"));
 3869|    932|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    910|    {
 3834|    910|        return read_matching_string_classic_nocase(range, "0x");
 3835|    910|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     28|{
 2095|     28|    auto it = read_while_code_unit(range, pred);
 2096|     28|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 22, False: 6]
  ------------------
 2097|     22|        return unexpected(parse_error::error);
 2098|     22|    }
 2099|      6|    return it;
 2100|     28|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|      4|    {
 3907|      4|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 0, False: 4]
  ------------------
 3908|      0|            auto beg_exp_it = range.begin();
 3909|      0|            auto it = *r;
 3910|       |
 3911|      0|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 0, False: 0]
  ------------------
 3912|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|      0|                it = r_sign->first;
 3914|      0|            }
 3915|       |
 3916|      0|            if (auto r_exp = read_while1_code_unit(
 3917|      0|                    ranges::subrange{it, range.end()},
 3918|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|                it = beg_exp_it;
 3921|      0|            }
 3922|      0|            else {
 3923|      0|                it = *r_exp;
 3924|      0|            }
 3925|       |
 3926|      0|            return it;
 3927|      0|        }
 3928|      4|        return range.begin();
 3929|      4|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|     22|    {
 3976|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 10, False: 12]
  |  Branch (3977:50): [True: 6, False: 4]
  ------------------
 3978|       |
 3979|     22|        auto it = ranges::begin(range);
 3980|     22|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 6]
  |  |  ------------------
  ------------------
 3984|     16|            return r.transform_error(
 3985|     16|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|     16|                                              "Invalid floating-point value"));
 3987|     16|        }
 3988|      6|        else {
 3989|      6|            digits_count += ranges::distance(it, *r);
 3990|      6|            it = *r;
 3991|      6|        }
 3992|       |
 3993|      6|        m_integral_part_length = digits_count;
 3994|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 6]
  ------------------
 3995|      6|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      6|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 6]
  ------------------
 4000|      6|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      6|        auto beg_exp_it = it;
 4012|      6|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 4, False: 2]
  ------------------
 4013|      4|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      4|        }
 4015|      6|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 2, False: 4]
  |  Branch (4015:29): [True: 2, False: 0]
  ------------------
 4016|      2|            return detail::unexpected_scan_error(
 4017|      2|                scan_error::invalid_scanned_value,
 4018|      2|                "No exponent given to scientific float");
 4019|      2|        }
 4020|       |
 4021|      4|        m_kind =
 4022|      4|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 4, False: 0]
  ------------------
 4023|       |
 4024|      4|        return it;
 4025|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|     28|    {
 3804|     28|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28]
  |  |  |  Branch (865:45): [True: 0, False: 28]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|     28|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|     28|        return read_while1_code_unit(
 3813|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|     28|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     34|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     34|        else if constexpr (std::is_object_v<T>) {
  688|     34|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     34|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|     34|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|    932|    {
 4033|    932|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    932|        const bool allowed_nonhex =
 4035|    932|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    932|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    932|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 932, False: 0]
  |  Branch (4038:45): [True: 0, False: 932]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    932|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 932]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    932|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 932, False: 0]
  |  Branch (4047:45): [True: 0, False: 932]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    932|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 932]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    932|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 910, False: 22]
  |  Branch (4054:28): [True: 72, False: 838]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|     72|            auto it = range.begin();
 4058|       |
 4059|     72|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 72]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|     72|            else {
 4064|     72|                m_kind = float_kind::hex_without_prefix;
 4065|     72|            }
 4066|       |
 4067|     72|            return read_hex(ranges::subrange{it, range.end()});
 4068|     72|        }
 4069|    860|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 22, False: 838]
  |  Branch (4069:29): [True: 22, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     22|            m_kind = float_kind::generic;
 4073|     22|            return read_regular_float(range);
 4074|     22|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    838|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    838|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 838]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    838|        m_kind = float_kind::generic;
 4085|    838|        return read_regular(range);
 4086|    838|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|    910|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    910|                    auto res = read_all(rr);
 3769|    910|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 910]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|    910|                    return res;
 3775|    910|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    910|{
 1938|    910|    return ranges::next(range.begin(), range.end());
 1939|    910|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    910|    {
  313|    910|        ranges::advance(x, bound);
  314|    910|        return x;
  315|    910|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    910|    {
  275|    910|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    910|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    914|    {
 1676|    914|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    914|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|    914|    {
 1720|    914|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    914|                      ranges::sized_range<Range>) {
 1725|    914|            m_storage.reset();
 1726|    914|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    914|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|    916|    {
 3707|    916|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 916]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    916|        return read_source_impl(range);
 3713|    916|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|    934|    {
 3733|    934|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|    934|        const std::ptrdiff_t sign_len =
 3736|    934|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 934]
  ------------------
 3737|       |
 3738|    934|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 834, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    834|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    834|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    834|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    834|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    834|    }                                                  \
  |  |  |  | 3939|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|    100|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|    934|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    166|    {
 4203|    166|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    166|#if !SCN_DISABLE_LOCALE
 4206|    166|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 16, False: 150]
  ------------------
 4207|     16|            return read_impl<Range>(
 4208|     16|                range, rd,
 4209|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     16|                },
 4212|     16|                value, loc);
 4213|     16|        }
 4214|    150|#endif
 4215|       |
 4216|    150|        return read_impl<Range>(
 4217|    150|            range, rd,
 4218|    150|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    150|                return r.read_source(SCN_FWD(args)...);
 4220|    150|            },
 4221|    150|            value);
 4222|    166|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    166|    {
 4239|    166|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    166|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 146, False: 20]
  |  |  ------------------
  ------------------
 4241|    146|            return unexpected(r.error());
 4242|    146|        }
 4243|       |
 4244|     20|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|     20|        return ranges::next(range.begin(), n);
 4246|     20|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    150|        : m_fptr([](storage fn,
  743|    150|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    150|              cvref<T> obj = *get<T>(fn);
  745|    150|              if constexpr (std::is_void_v<R>) {
  746|    150|                  obj(static_cast<decltype(args)>(args)...);
  747|    150|              }
  748|    150|              else {
  749|    150|                  return obj(static_cast<decltype(args)>(args)...);
  750|    150|              }
  751|    150|          }),
  752|    150|          m_storage(std::addressof(f))
  753|    150|    {
  754|    150|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    150|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    150|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    150|              else {
  749|    150|                  return obj(static_cast<decltype(args)>(args)...);
  750|    150|              }
  751|    150|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    150|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    150|        else if constexpr (std::is_object_v<T>) {
  688|    150|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    150|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    150|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    150|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    150|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    150|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    150|        {
  662|    150|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    444|    {
 4203|    444|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    444|#if !SCN_DISABLE_LOCALE
 4206|    444|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 16, False: 428]
  ------------------
 4207|     16|            return read_impl<Range>(
 4208|     16|                range, rd,
 4209|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     16|                },
 4212|     16|                value, loc);
 4213|     16|        }
 4214|    428|#endif
 4215|       |
 4216|    428|        return read_impl<Range>(
 4217|    428|            range, rd,
 4218|    428|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    428|                return r.read_source(SCN_FWD(args)...);
 4220|    428|            },
 4221|    428|            value);
 4222|    444|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|    932|    {
 4239|    932|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    932|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    932|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 914]
  |  |  ------------------
  ------------------
 4241|     18|            return unexpected(r.error());
 4242|     18|        }
 4243|       |
 4244|    914|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 834, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    834|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    834|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    834|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    834|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    834|    }                                                  \
  |  |  |  | 3939|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|     80|        return ranges::next(range.begin(), n);
 4246|    914|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    428|        : m_fptr([](storage fn,
  743|    428|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    428|              cvref<T> obj = *get<T>(fn);
  745|    428|              if constexpr (std::is_void_v<R>) {
  746|    428|                  obj(static_cast<decltype(args)>(args)...);
  747|    428|              }
  748|    428|              else {
  749|    428|                  return obj(static_cast<decltype(args)>(args)...);
  750|    428|              }
  751|    428|          }),
  752|    428|          m_storage(std::addressof(f))
  753|    428|    {
  754|    428|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    428|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    428|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    428|              else {
  749|    428|                  return obj(static_cast<decltype(args)>(args)...);
  750|    428|              }
  751|    428|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    428|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    428|        else if constexpr (std::is_object_v<T>) {
  688|    428|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    428|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    428|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    428|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    428|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    428|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    428|        {
  662|    428|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5848|  1.68k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.68k|                       std::is_same_v<T, std::wstring>) {
 5867|  1.68k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.68k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  5.06k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  3.60k|    {
 3156|  3.60k|        reader_error_handler eh{};
 3157|  3.60k|        get_derived().check_specs_impl(specs, eh);
 3158|  3.60k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 708, False: 2.89k]
  |  |  ------------------
  ------------------
 3159|    708|            return detail::unexpected_scan_error(
 3160|    708|                scan_error::invalid_format_string, eh.m_msg);
 3161|    708|        }
 3162|  2.89k|        return {};
 3163|  3.60k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|  3.60k|    {
 3168|  3.60k|        return static_cast<Derived&>(*this);
 3169|  3.60k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  3.60k|    {
 5247|  3.60k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  3.60k|        SCN_GCC_PUSH
 5250|  3.60k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  3.60k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  3.60k|        SCN_CLANG_PUSH
 5254|  3.60k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  3.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  3.60k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 702, False: 2.89k]
  ------------------
 5258|  1.39k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.39k, False: 2.20k]
  ------------------
 5259|  1.39k|                m_type = reader_type::word;
 5260|  1.39k|                break;
 5261|       |
 5262|    306|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 306, False: 3.29k]
  ------------------
 5263|    306|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 72, False: 234]
  ------------------
 5264|    306|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 120, False: 114]
  ------------------
 5265|    192|                    m_type = reader_type::custom_word;
 5266|    192|                }
 5267|    114|                else {
 5268|    114|                    m_type = reader_type::word;
 5269|    114|                }
 5270|    306|                break;
 5271|      0|            }
 5272|       |
 5273|     90|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 90, False: 3.51k]
  ------------------
 5274|     90|                m_type = reader_type::character;
 5275|     90|                break;
 5276|       |
 5277|  1.10k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 1.10k, False: 2.49k]
  ------------------
 5278|  1.10k|                m_type = reader_type::character_set;
 5279|  1.10k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 3.60k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 3.60k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|  3.60k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  3.60k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  5.86k|    {
 5296|  5.86k|        return m_type == reader_type::word;
 5297|  5.86k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  5.35k|{
 1242|  5.35k|    auto it = src.begin();
 1243|  49.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 45.4k, False: 4.49k]
  ------------------
 1244|  45.4k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  45.4k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 45.4k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  45.4k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 45.4k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  45.4k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  45.4k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  45.4k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 858, False: 44.6k]
  ------------------
 1254|    858|            return false;
 1255|    858|        }
 1256|  44.6k|        it += len;
 1257|  44.6k|    }
 1258|  4.49k|    return true;
 1259|  5.35k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    300|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    300|    else {
 3117|    300|        return transcode_impl(source.view(), dest);
 3118|    300|    }
 3119|       |
 3120|      0|    return {};
 3121|    300|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  1.12k|{
 3083|  1.12k|    dst.clear();
 3084|  1.12k|    transcode_valid_to_string(src, dst);
 3085|  1.12k|    return {};
 3086|  1.12k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.12k|{
 1502|  1.12k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.12k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|  1.12k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|  1.12k|        if constexpr (sizeof(DestCharT) == 1) {
 1530|  1.12k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|  1.12k|    }
 1536|       |
 1537|  1.12k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.12k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|  1.12k|{
 1393|  1.12k|    static_assert(sizeof(SourceCharT) == 4);
 1394|  1.12k|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  9.93k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 9.93k, False: 1.12k]
  ------------------
 1397|  9.93k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  9.93k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [Folded - Ignored]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  9.93k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 8.32k, False: 1.60k]
  ------------------
 1405|  8.32k|            dest.push_back(static_cast<char>(cp));
 1406|  8.32k|        }
 1407|  1.60k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 176, False: 1.43k]
  ------------------
 1408|    176|            dest.push_back(
 1409|    176|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    176|            dest.push_back(
 1411|    176|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    176|        }
 1413|  1.43k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 998, False: 434]
  ------------------
 1414|    998|            dest.push_back(
 1415|    998|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|    998|            dest.push_back(static_cast<char>(
 1417|    998|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|    998|            dest.push_back(
 1419|    998|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|    998|        }
 1421|    434|        else {
 1422|    434|            dest.push_back(
 1423|    434|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    434|            dest.push_back(static_cast<char>(
 1425|    434|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    434|            dest.push_back(static_cast<char>(
 1427|    434|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    434|            dest.push_back(
 1429|    434|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    434|        }
 1431|  9.93k|    }
 1432|  1.12k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  1.10k|        {
 5144|  1.10k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 354, False: 750]
  ------------------
 5145|    354|                return {};
 5146|    354|            }
 5147|       |
 5148|    750|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|    750|            auto it = detail::to_address(charset_string.begin());
 5150|    750|            auto set = detail::parse_presentation_set(
 5151|    750|                it, detail::to_address(charset_string.end()), nonascii);
 5152|    750|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|    750|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 750]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|    750|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|    750|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|    750|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|    750|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|    750|            std::sort(nonascii.extra_ranges.begin(),
 5157|    750|                      nonascii.extra_ranges.end());
 5158|    750|            return {};
 5159|    750|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|  9.57k|        {
 5177|  9.57k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 2.48k, False: 7.08k]
  ------------------
 5178|  2.48k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  2.48k|            }
 5180|       |
 5181|  7.08k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|  9.57k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  2.48k|        {
 5127|       |            // TODO: binary search?
 5128|  2.48k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 2.48k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  2.48k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  2.48k|            return std::find_if(
 5134|  2.48k|                       nonascii.extra_ranges.begin(),
 5135|  2.48k|                       nonascii.extra_ranges.end(),
 5136|  2.48k|                       [cp_val](const auto& pair) noexcept {
 5137|  2.48k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  2.48k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  2.48k|                       }) != nonascii.extra_ranges.end();
 5140|  2.48k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  19.9k|                       [cp_val](const auto& pair) noexcept {
 5137|  19.9k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 18.7k, False: 1.20k]
  ------------------
 5138|  19.9k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 2.22k, False: 16.5k]
  ------------------
 5139|  19.9k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  10.6k|        {
 5117|  10.6k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  10.6k|            const auto val =
 5119|  10.6k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  10.6k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  10.6k|                    (val % 8)) &
 5122|  10.6k|                   1u;
 5123|  10.6k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  3.73k|        {
 5168|  3.73k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 150, False: 3.58k]
  ------------------
 5169|    150|                return false;
 5170|    150|            }
 5171|       |
 5172|  3.58k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  3.73k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  1.10k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    358|    {
 5314|    358|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    358|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    358|        return read_impl(range, specs, value);
 5316|    358|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    358|    {
 5332|    358|        SCN_CLANG_PUSH
 5333|    358|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    358|        switch (m_type) {
 5336|    130|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 130, False: 228]
  ------------------
 5337|    130|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     24|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 24, False: 334]
  ------------------
 5340|     24|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     24|                                                                   value);
 5342|       |
 5343|     26|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 26, False: 332]
  ------------------
 5344|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    178|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 178, False: 180]
  ------------------
 5347|    178|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    178|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 358]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 358]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 358]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    358|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    358|        }
 5368|       |
 5369|    358|        SCN_CLANG_POP
 5370|    358|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    130|    {
 4861|    130|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    130|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    180|{
 4795|    180|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    180|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    180|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 46, False: 134]
  ------------------
 4799|     46|        return detail::unexpected_scan_error(
 4800|     46|            scan_error::invalid_scanned_value,
 4801|     46|            "Invalid encoding in scanned string");
 4802|     46|    }
 4803|       |
 4804|    134|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    134|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 134]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    134|    return SCN_MOVE(result);
  ------------------
  |  |  934|    134|    static_cast<    \
  |  |  935|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    134|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    390|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    390|    else {
 2196|    390|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    390|        return read_until_code_point(
 2208|    390|            ranges::subrange{it, range.end()},
 2209|    390|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    390|    }
 2211|    390|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    390|{
 2160|    390|    auto it = range.begin();
 2161|  4.50k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 4.19k, False: 312]
  ------------------
 2162|  4.19k|        const auto val =
 2163|  4.19k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  4.19k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  4.19k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.19k, False: 0]
  |  |  ------------------
  ------------------
 2165|  4.19k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  4.19k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  4.19k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 78, False: 4.11k]
  ------------------
 2168|     78|                return it;
 2169|     78|            }
 2170|  4.19k|        }
 2171|  4.11k|        it = val.iterator;
 2172|  4.11k|    }
 2173|       |
 2174|    312|    return it;
 2175|    390|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    390|        : m_fptr([](storage fn,
  743|    390|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    390|              cvref<T> obj = *get<T>(fn);
  745|    390|              if constexpr (std::is_void_v<R>) {
  746|    390|                  obj(static_cast<decltype(args)>(args)...);
  747|    390|              }
  748|    390|              else {
  749|    390|                  return obj(static_cast<decltype(args)>(args)...);
  750|    390|              }
  751|    390|          }),
  752|    390|          m_storage(std::addressof(f))
  753|    390|    {
  754|    390|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  4.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.19k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.19k|              else {
  749|  4.19k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.19k|              }
  751|  4.19k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  4.19k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.19k|        else if constexpr (std::is_object_v<T>) {
  688|  4.19k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.19k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  4.19k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    390|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    390|        {
  662|    390|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     24|    {
 4882|     24|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 24, False: 0]
  ------------------
 4883|     24|            return read_string_impl(
 4884|     24|                range,
 4885|     24|                read_until_code_unit(
 4886|     24|                    range,
 4887|     24|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     24|                        SourceCharT ch) { return ch == until; }),
 4889|     24|                value);
 4890|     24|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     24|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    402|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    402|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    402|              else {
  749|    402|                  return obj(static_cast<decltype(args)>(args)...);
  750|    402|              }
  751|    402|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    402|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    402|        else if constexpr (std::is_object_v<T>) {
  688|    402|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    402|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|    402|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     26|    {
 4988|     26|        return read_impl(
 4989|     26|            range,
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
 4993|     26|            detail::priority_tag<1>{});
 4994|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     26|    {
 5015|     26|        return read_cb(range);
 5016|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     78|{
 1938|     78|    return ranges::next(range.begin(), range.end());
 1939|     78|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|  1.37k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.29k, False: 78]
  ------------------
  204|  1.29k|            ++i;
  205|  1.29k|        }
  206|     78|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    178|    {
 5089|    178|        auto it = read_source_impl(range, {specs});
 5090|    178|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 170]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    170|        return read_string_impl(range, *it, value);
 5095|    178|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    534|    {
 5192|    534|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    534|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    534|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    534|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 534]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    534|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    534|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 348, False: 186]
  ------------------
 5200|    348|            const auto cb = [&](char32_t cp) {
 5201|    348|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    348|            };
 5203|       |
 5204|    348|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 192, False: 156]
  ------------------
 5205|    192|                auto it = read_until_code_point(range, cb);
 5206|    192|                return check_nonempty(it, range);
 5207|    192|            }
 5208|    156|            auto it = read_while_code_point(range, cb);
 5209|    156|            return check_nonempty(it, range);
 5210|    348|        }
 5211|       |
 5212|    186|        const auto cb = [&](SourceCharT ch) {
 5213|    186|            return cb_wrapper.on_ascii_only(ch);
 5214|    186|        };
 5215|       |
 5216|    186|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 96, False: 90]
  ------------------
 5217|     96|            auto it = read_until_code_unit(range, cb);
 5218|     96|            return check_nonempty(it, range);
 5219|     96|        }
 5220|     90|        auto it = read_while_code_unit(range, cb);
 5221|     90|        return check_nonempty(it, range);
 5222|    186|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    348|        : m_fptr([](storage fn,
  743|    348|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    348|              cvref<T> obj = *get<T>(fn);
  745|    348|              if constexpr (std::is_void_v<R>) {
  746|    348|                  obj(static_cast<decltype(args)>(args)...);
  747|    348|              }
  748|    348|              else {
  749|    348|                  return obj(static_cast<decltype(args)>(args)...);
  750|    348|              }
  751|    348|          }),
  752|    348|          m_storage(std::addressof(f))
  753|    348|    {
  754|    348|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  4.50k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.50k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.50k|              else {
  749|  4.50k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.50k|              }
  751|  4.50k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.50k|    {
  684|  4.50k|        if constexpr (std::is_const_v<T>) {
  685|  4.50k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.50k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  4.50k|            const auto cb = [&](char32_t cp) {
 5201|  4.50k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  4.50k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    348|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    348|        {
  667|    348|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    534|    {
 5228|    534|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 24, False: 510]
  ------------------
 5229|     24|            return detail::unexpected_scan_error(
 5230|     24|                scan_error::invalid_scanned_value,
 5231|     24|                "No characters matched in [character set]");
 5232|     24|        }
 5233|       |
 5234|    510|        return it;
 5235|    534|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    186|        : m_fptr([](storage fn,
  743|    186|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    186|              cvref<T> obj = *get<T>(fn);
  745|    186|              if constexpr (std::is_void_v<R>) {
  746|    186|                  obj(static_cast<decltype(args)>(args)...);
  747|    186|              }
  748|    186|              else {
  749|    186|                  return obj(static_cast<decltype(args)>(args)...);
  750|    186|              }
  751|    186|          }),
  752|    186|          m_storage(std::addressof(f))
  753|    186|    {
  754|    186|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  1.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.73k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.73k|              else {
  749|  1.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.73k|              }
  751|  1.73k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.73k|    {
  684|  1.73k|        if constexpr (std::is_const_v<T>) {
  685|  1.73k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.73k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5212|  1.73k|        const auto cb = [&](SourceCharT ch) {
 5213|  1.73k|            return cb_wrapper.on_ascii_only(ch);
 5214|  1.73k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    186|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    186|        {
  667|    186|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    170|{
 4795|    170|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    170|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    170|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 4, False: 166]
  ------------------
 4799|      4|        return detail::unexpected_scan_error(
 4800|      4|            scan_error::invalid_scanned_value,
 4801|      4|            "Invalid encoding in scanned string");
 4802|      4|    }
 4803|       |
 4804|    166|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    166|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    166|    return SCN_MOVE(result);
  ------------------
  |  |  934|    166|    static_cast<    \
  |  |  935|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    166|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    590|    {
 5314|    590|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    590|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    590|        return read_impl(range, specs, value);
 5316|    590|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    590|    {
 5332|    590|        SCN_CLANG_PUSH
 5333|    590|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    590|        switch (m_type) {
 5336|    362|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 362, False: 228]
  ------------------
 5337|    362|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 38, False: 552]
  ------------------
 5340|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     38|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 590]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    190|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 190, False: 400]
  ------------------
 5347|    190|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    190|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 590]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 590]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 590]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    590|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    590|        }
 5368|       |
 5369|    590|        SCN_CLANG_POP
 5370|    590|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    850|    {
 4861|    850|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    850|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|    888|{
 4795|    888|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    888|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    888|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 230, False: 658]
  ------------------
 4799|    230|        return detail::unexpected_scan_error(
 4800|    230|            scan_error::invalid_scanned_value,
 4801|    230|            "Invalid encoding in scanned string");
 4802|    230|    }
 4803|       |
 4804|    658|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    658|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 658]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    658|    return SCN_MOVE(result);
  ------------------
  |  |  934|    658|    static_cast<    \
  |  |  935|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    658|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|    824|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|    824|    else {
 3132|    824|        return transcode_impl(source.view(), dest);
 3133|    824|    }
 3134|       |
 3135|      0|    return {};
 3136|    824|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.55k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  2.55k|    else {
 2196|  2.55k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  2.55k|        return read_until_code_point(
 2208|  2.55k|            ranges::subrange{it, range.end()},
 2209|  2.55k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  2.55k|    }
 2211|  2.55k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.55k|        : m_fptr([](storage fn,
  743|  2.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.55k|              cvref<T> obj = *get<T>(fn);
  745|  2.55k|              if constexpr (std::is_void_v<R>) {
  746|  2.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.55k|              }
  748|  2.55k|              else {
  749|  2.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.55k|              }
  751|  2.55k|          }),
  752|  2.55k|          m_storage(std::addressof(f))
  753|  2.55k|    {
  754|  2.55k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.4k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  20.4k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.55k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.55k|        {
  662|  2.55k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     38|    {
 4882|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 38, False: 0]
  ------------------
 4883|     38|            return read_string_impl(
 4884|     38|                range,
 4885|     38|                read_until_code_unit(
 4886|     38|                    range,
 4887|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     38|                        SourceCharT ch) { return ch == until; }),
 4889|     38|                value);
 4890|     38|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    488|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    190|    {
 5089|    190|        auto it = read_source_impl(range, {specs});
 5090|    190|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 172]
  |  |  ------------------
  ------------------
 5091|     18|            return unexpected(it.error());
 5092|     18|        }
 5093|       |
 5094|    172|        return read_string_impl(range, *it, value);
 5095|    190|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|    570|    {
 5192|    570|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    570|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    570|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    570|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 570]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    570|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    570|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 402, False: 168]
  ------------------
 5200|    402|            const auto cb = [&](char32_t cp) {
 5201|    402|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    402|            };
 5203|       |
 5204|    402|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 210, False: 192]
  ------------------
 5205|    210|                auto it = read_until_code_point(range, cb);
 5206|    210|                return check_nonempty(it, range);
 5207|    210|            }
 5208|    192|            auto it = read_while_code_point(range, cb);
 5209|    192|            return check_nonempty(it, range);
 5210|    402|        }
 5211|       |
 5212|    168|        const auto cb = [&](SourceCharT ch) {
 5213|    168|            return cb_wrapper.on_ascii_only(ch);
 5214|    168|        };
 5215|       |
 5216|    168|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 72, False: 96]
  ------------------
 5217|     72|            auto it = read_until_code_unit(range, cb);
 5218|     72|            return check_nonempty(it, range);
 5219|     72|        }
 5220|     96|        auto it = read_while_code_unit(range, cb);
 5221|     96|        return check_nonempty(it, range);
 5222|    168|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    402|        : m_fptr([](storage fn,
  743|    402|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    402|              cvref<T> obj = *get<T>(fn);
  745|    402|              if constexpr (std::is_void_v<R>) {
  746|    402|                  obj(static_cast<decltype(args)>(args)...);
  747|    402|              }
  748|    402|              else {
  749|    402|                  return obj(static_cast<decltype(args)>(args)...);
  750|    402|              }
  751|    402|          }),
  752|    402|          m_storage(std::addressof(f))
  753|    402|    {
  754|    402|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  5.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.07k|              else {
  749|  5.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.07k|              }
  751|  5.07k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  5.07k|    {
  684|  5.07k|        if constexpr (std::is_const_v<T>) {
  685|  5.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.07k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  5.07k|            const auto cb = [&](char32_t cp) {
 5201|  5.07k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  5.07k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    402|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    402|        {
  667|    402|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|    570|    {
 5228|    570|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 54, False: 516]
  ------------------
 5229|     54|            return detail::unexpected_scan_error(
 5230|     54|                scan_error::invalid_scanned_value,
 5231|     54|                "No characters matched in [character set]");
 5232|     54|        }
 5233|       |
 5234|    516|        return it;
 5235|    570|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    168|        : m_fptr([](storage fn,
  743|    168|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    168|              cvref<T> obj = *get<T>(fn);
  745|    168|              if constexpr (std::is_void_v<R>) {
  746|    168|                  obj(static_cast<decltype(args)>(args)...);
  747|    168|              }
  748|    168|              else {
  749|    168|                  return obj(static_cast<decltype(args)>(args)...);
  750|    168|              }
  751|    168|          }),
  752|    168|          m_storage(std::addressof(f))
  753|    168|    {
  754|    168|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.00k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.00k|              else {
  749|  2.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.00k|              }
  751|  2.00k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.00k|    {
  684|  2.00k|        if constexpr (std::is_const_v<T>) {
  685|  2.00k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.00k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  2.00k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.00k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.00k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    168|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    168|        {
  667|    168|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    172|{
 4795|    172|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    172|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    172|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6, False: 166]
  ------------------
 4799|      6|        return detail::unexpected_scan_error(
 4800|      6|            scan_error::invalid_scanned_value,
 4801|      6|            "Invalid encoding in scanned string");
 4802|      6|    }
 4803|       |
 4804|    166|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    166|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    166|    return SCN_MOVE(result);
  ------------------
  |  |  934|    166|    static_cast<    \
  |  |  935|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    166|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.68k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.68k|                       std::is_same_v<T, std::wstring>) {
 5867|  1.68k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.68k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    300|{
 3108|    300|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    300|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 300, False: 0]
  ------------------
 3110|    300|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    300|    static_cast<    \
  |  |  935|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    300|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    300|    return {};
 3121|    300|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    358|    {
 5314|    358|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    358|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    358|        return read_impl(range, specs, value);
 5316|    358|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    358|    {
 5332|    358|        SCN_CLANG_PUSH
 5333|    358|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    358|        switch (m_type) {
 5336|    130|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 130, False: 228]
  ------------------
 5337|    130|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     24|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 24, False: 334]
  ------------------
 5340|     24|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     24|                                                                   value);
 5342|       |
 5343|     26|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 26, False: 332]
  ------------------
 5344|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    178|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 178, False: 180]
  ------------------
 5347|    178|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    178|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 358]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 358]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 358]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    358|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    358|        }
 5368|       |
 5369|    358|        SCN_CLANG_POP
 5370|    358|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    130|    {
 4861|    130|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    130|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    180|{
 4795|    180|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    180|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    180|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 46, False: 134]
  ------------------
 4799|     46|        return detail::unexpected_scan_error(
 4800|     46|            scan_error::invalid_scanned_value,
 4801|     46|            "Invalid encoding in scanned string");
 4802|     46|    }
 4803|       |
 4804|    134|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    134|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 134]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    134|    return SCN_MOVE(result);
  ------------------
  |  |  934|    134|    static_cast<    \
  |  |  935|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    134|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     24|    {
 4882|     24|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 24, False: 0]
  ------------------
 4883|     24|            return read_string_impl(
 4884|     24|                range,
 4885|     24|                read_until_code_unit(
 4886|     24|                    range,
 4887|     24|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     24|                        SourceCharT ch) { return ch == until; }),
 4889|     24|                value);
 4890|     24|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     24|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    402|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    402|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    402|              else {
  749|    402|                  return obj(static_cast<decltype(args)>(args)...);
  750|    402|              }
  751|    402|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    402|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    402|        else if constexpr (std::is_object_v<T>) {
  688|    402|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    402|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|    402|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     26|    {
 4988|     26|        return read_impl(
 4989|     26|            range,
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
 4993|     26|            detail::priority_tag<1>{});
 4994|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     26|    {
 5015|     26|        return read_cb(range);
 5016|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    178|    {
 5089|    178|        auto it = read_source_impl(range, {specs});
 5090|    178|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 170]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    170|        return read_string_impl(range, *it, value);
 5095|    178|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    170|{
 4795|    170|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    170|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    170|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 4, False: 166]
  ------------------
 4799|      4|        return detail::unexpected_scan_error(
 4800|      4|            scan_error::invalid_scanned_value,
 4801|      4|            "Invalid encoding in scanned string");
 4802|      4|    }
 4803|       |
 4804|    166|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    166|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    166|    return SCN_MOVE(result);
  ------------------
  |  |  934|    166|    static_cast<    \
  |  |  935|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    166|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    590|    {
 5314|    590|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    590|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    590|        return read_impl(range, specs, value);
 5316|    590|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    590|    {
 5332|    590|        SCN_CLANG_PUSH
 5333|    590|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    590|        switch (m_type) {
 5336|    362|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 362, False: 228]
  ------------------
 5337|    362|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 38, False: 552]
  ------------------
 5340|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     38|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 590]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    190|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 190, False: 400]
  ------------------
 5347|    190|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    190|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 590]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 590]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 590]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    590|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    590|        }
 5368|       |
 5369|    590|        SCN_CLANG_POP
 5370|    590|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    850|    {
 4861|    850|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    850|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|    888|{
 4795|    888|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    888|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    888|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 230, False: 658]
  ------------------
 4799|    230|        return detail::unexpected_scan_error(
 4800|    230|            scan_error::invalid_scanned_value,
 4801|    230|            "Invalid encoding in scanned string");
 4802|    230|    }
 4803|       |
 4804|    658|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    658|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 658]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    658|    return SCN_MOVE(result);
  ------------------
  |  |  934|    658|    static_cast<    \
  |  |  935|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    658|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|    824|{
 3128|    824|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|    824|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|    824|    return {};
 3136|    824|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     38|    {
 4882|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 38, False: 0]
  ------------------
 4883|     38|            return read_string_impl(
 4884|     38|                range,
 4885|     38|                read_until_code_unit(
 4886|     38|                    range,
 4887|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     38|                        SourceCharT ch) { return ch == until; }),
 4889|     38|                value);
 4890|     38|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    488|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    190|    {
 5089|    190|        auto it = read_source_impl(range, {specs});
 5090|    190|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 172]
  |  |  ------------------
  ------------------
 5091|     18|            return unexpected(it.error());
 5092|     18|        }
 5093|       |
 5094|    172|        return read_string_impl(range, *it, value);
 5095|    190|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    172|{
 4795|    172|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    172|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    172|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6, False: 166]
  ------------------
 4799|      6|        return detail::unexpected_scan_error(
 4800|      6|            scan_error::invalid_scanned_value,
 4801|      6|            "Invalid encoding in scanned string");
 4802|      6|    }
 4803|       |
 4804|    166|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    166|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    166|    return SCN_MOVE(result);
  ------------------
  |  |  934|    166|    static_cast<    \
  |  |  935|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    166|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|  1.68k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  1.68k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  1.68k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.68k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    358|    {
 5314|    358|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    358|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    358|        return read_impl(range, specs, value);
 5316|    358|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    358|    {
 5332|    358|        SCN_CLANG_PUSH
 5333|    358|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    358|        switch (m_type) {
 5336|    130|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 130, False: 228]
  ------------------
 5337|    130|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     24|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 24, False: 334]
  ------------------
 5340|     24|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     24|                                                                   value);
 5342|       |
 5343|     26|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 26, False: 332]
  ------------------
 5344|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    178|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 178, False: 180]
  ------------------
 5347|    178|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    178|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 358]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 358]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 358]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    358|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    358|        }
 5368|       |
 5369|    358|        SCN_CLANG_POP
 5370|    358|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    130|    {
 4868|    130|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    130|                                     value);
 4870|    130|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    180|{
 4814|    180|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    180|    auto src = [&]() {
 4817|    180|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    180|            return make_contiguous_buffer(
 4819|    180|                ranges::subrange{range.begin().base(), result.base()});
 4820|    180|        }
 4821|    180|        else {
 4822|    180|            return make_contiguous_buffer(
 4823|    180|                ranges::subrange{range.begin(), result});
 4824|    180|        }
 4825|    180|    }();
 4826|    180|    using src_type = decltype(src);
 4827|       |
 4828|    180|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    180|    else {
 4841|    180|        const auto view = src.view();
 4842|    180|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    180|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 46, False: 134]
  ------------------
 4845|     46|            return detail::unexpected_scan_error(
 4846|     46|                scan_error::invalid_scanned_value,
 4847|     46|                "Invalid encoding in scanned string_view");
 4848|     46|        }
 4849|       |
 4850|    134|        return SCN_MOVE(result);
  ------------------
  |  |  934|    134|    static_cast<    \
  |  |  935|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    180|    }
 4852|    180|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    180|    auto src = [&]() {
 4817|    180|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    180|            return make_contiguous_buffer(
 4819|    180|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    180|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     24|    {
 4904|     24|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 24, False: 0]
  ------------------
 4905|     24|            return read_string_view_impl(
 4906|     24|                range,
 4907|     24|                read_until_code_unit(
 4908|     24|                    range,
 4909|     24|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     24|                        SourceCharT ch) { return ch == until; }),
 4911|     24|                value);
 4912|     24|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     24|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    402|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    402|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    402|              else {
  749|    402|                  return obj(static_cast<decltype(args)>(args)...);
  750|    402|              }
  751|    402|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    402|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    402|        else if constexpr (std::is_object_v<T>) {
  688|    402|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    402|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4910|    402|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     26|    {
 5000|     26|        return read_impl(
 5001|     26|            range,
 5002|     26|            [&](const auto& rng) {
 5003|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     26|            },
 5005|     26|            detail::priority_tag<1>{});
 5006|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     26|    {
 5015|     26|        return read_cb(range);
 5016|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     26|            [&](const auto& rng) {
 5003|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    178|    {
 5103|    178|        auto it = read_source_impl(range, {specs});
 5104|    178|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 170]
  |  |  ------------------
  ------------------
 5105|      8|            return unexpected(it.error());
 5106|      8|        }
 5107|       |
 5108|    170|        return read_string_view_impl(range, *it, value);
 5109|    178|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    170|{
 4814|    170|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    170|    auto src = [&]() {
 4817|    170|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    170|            return make_contiguous_buffer(
 4819|    170|                ranges::subrange{range.begin().base(), result.base()});
 4820|    170|        }
 4821|    170|        else {
 4822|    170|            return make_contiguous_buffer(
 4823|    170|                ranges::subrange{range.begin(), result});
 4824|    170|        }
 4825|    170|    }();
 4826|    170|    using src_type = decltype(src);
 4827|       |
 4828|    170|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    170|    else {
 4841|    170|        const auto view = src.view();
 4842|    170|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    170|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 4, False: 166]
  ------------------
 4845|      4|            return detail::unexpected_scan_error(
 4846|      4|                scan_error::invalid_scanned_value,
 4847|      4|                "Invalid encoding in scanned string_view");
 4848|      4|        }
 4849|       |
 4850|    166|        return SCN_MOVE(result);
  ------------------
  |  |  934|    166|    static_cast<    \
  |  |  935|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    170|    }
 4852|    170|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    170|    auto src = [&]() {
 4817|    170|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    170|            return make_contiguous_buffer(
 4819|    170|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    170|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|    590|    {
 5314|    590|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    590|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    590|        return read_impl(range, specs, value);
 5316|    590|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|    590|    {
 5332|    590|        SCN_CLANG_PUSH
 5333|    590|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    590|        switch (m_type) {
 5336|    362|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 362, False: 228]
  ------------------
 5337|    362|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 38, False: 552]
  ------------------
 5340|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     38|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 590]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    190|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 190, False: 400]
  ------------------
 5347|    190|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    190|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 590]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 590]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 590]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    590|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    590|        }
 5368|       |
 5369|    590|        SCN_CLANG_POP
 5370|    590|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|    850|    {
 4868|    850|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    850|                                     value);
 4870|    850|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|    888|{
 4814|    888|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    888|    auto src = [&]() {
 4817|    888|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    888|            return make_contiguous_buffer(
 4819|    888|                ranges::subrange{range.begin().base(), result.base()});
 4820|    888|        }
 4821|    888|        else {
 4822|    888|            return make_contiguous_buffer(
 4823|    888|                ranges::subrange{range.begin(), result});
 4824|    888|        }
 4825|    888|    }();
 4826|    888|    using src_type = decltype(src);
 4827|       |
 4828|    888|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    888|    else {
 4841|    888|        const auto view = src.view();
 4842|    888|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    888|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 230, False: 658]
  ------------------
 4845|    230|            return detail::unexpected_scan_error(
 4846|    230|                scan_error::invalid_scanned_value,
 4847|    230|                "Invalid encoding in scanned string_view");
 4848|    230|        }
 4849|       |
 4850|    658|        return SCN_MOVE(result);
  ------------------
  |  |  934|    658|    static_cast<    \
  |  |  935|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    888|    }
 4852|    888|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|    888|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    888|        else {
 4822|    888|            return make_contiguous_buffer(
 4823|    888|                ranges::subrange{range.begin(), result});
 4824|    888|        }
 4825|    888|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     38|    {
 4904|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 38, False: 0]
  ------------------
 4905|     38|            return read_string_view_impl(
 4906|     38|                range,
 4907|     38|                read_until_code_unit(
 4908|     38|                    range,
 4909|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     38|                        SourceCharT ch) { return ch == until; }),
 4911|     38|                value);
 4912|     38|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4910|    488|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    190|    {
 5103|    190|        auto it = read_source_impl(range, {specs});
 5104|    190|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 172]
  |  |  ------------------
  ------------------
 5105|     18|            return unexpected(it.error());
 5106|     18|        }
 5107|       |
 5108|    172|        return read_string_view_impl(range, *it, value);
 5109|    190|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    172|{
 4814|    172|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    172|    auto src = [&]() {
 4817|    172|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    172|            return make_contiguous_buffer(
 4819|    172|                ranges::subrange{range.begin().base(), result.base()});
 4820|    172|        }
 4821|    172|        else {
 4822|    172|            return make_contiguous_buffer(
 4823|    172|                ranges::subrange{range.begin(), result});
 4824|    172|        }
 4825|    172|    }();
 4826|    172|    using src_type = decltype(src);
 4827|       |
 4828|    172|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    172|    else {
 4841|    172|        const auto view = src.view();
 4842|    172|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    172|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 6, False: 166]
  ------------------
 4845|      6|            return detail::unexpected_scan_error(
 4846|      6|                scan_error::invalid_scanned_value,
 4847|      6|                "Invalid encoding in scanned string_view");
 4848|      6|        }
 4849|       |
 4850|    166|        return SCN_MOVE(result);
  ------------------
  |  |  934|    166|    static_cast<    \
  |  |  935|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    172|    }
 4852|    172|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    172|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    172|        else {
 4822|    172|            return make_contiguous_buffer(
 4823|    172|                ranges::subrange{range.begin(), result});
 4824|    172|        }
 4825|    172|    }();
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  7.62k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  7.62k|                  ranges::sized_range<Range>) {
 1785|  7.62k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  7.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  7.62k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  7.62k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  7.62k|    {
 1589|  7.62k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|     50|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|     50|    else {
 2196|     50|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|     50|        return read_until_code_point(
 2208|     50|            ranges::subrange{it, range.end()},
 2209|     50|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|     50|    }
 2211|     50|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|     50|        : m_fptr([](storage fn,
  743|     50|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     50|              cvref<T> obj = *get<T>(fn);
  745|     50|              if constexpr (std::is_void_v<R>) {
  746|     50|                  obj(static_cast<decltype(args)>(args)...);
  747|     50|              }
  748|     50|              else {
  749|     50|                  return obj(static_cast<decltype(args)>(args)...);
  750|     50|              }
  751|     50|          }),
  752|     50|          m_storage(std::addressof(f))
  753|     50|    {
  754|     50|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  2.68k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.68k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.68k|              else {
  749|  2.68k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.68k|              }
  751|  2.68k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.68k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.68k|        else if constexpr (std::is_object_v<T>) {
  688|  2.68k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.68k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|  2.68k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|     50|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     50|        {
  662|     50|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|     50|    {
 1676|     50|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     50|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     50|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|     50|    {
 1720|     50|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|     50|                                          std::basic_string<CharT>>) {
 1730|     50|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|     50|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|     50|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|     50|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|    100|    {
 4133|    100|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 0, False: 100]
  ------------------
 4134|      0|            return std::copysign(value, T{-1.0});
 4135|      0|        }
 4136|    100|        return std::copysign(value, T{1.0});
 4137|    100|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  5.59k|{
 5835|  5.59k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.59k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  5.59k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 622, False: 4.97k]
  ------------------
 5840|    622|        return range.begin();
 5841|    622|    }
 5842|       |
 5843|  4.97k|    return skip_classic_whitespace(range);
 5844|  5.59k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    622|    {
 3579|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    622|        return read_default_with_base(range, value, 10);
 3581|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    622|    {
 3579|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    622|        return read_default_with_base(range, value, 10);
 3581|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5786|  1.22k|    {
 5787|  1.22k|        return true;
 5788|  1.22k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|    884|    {
 5805|    884|        detail::format_specs specs{};
 5806|    884|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    884|        std::uintptr_t intvalue{};
 5809|    884|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    884|    }                                                  \
  |  |  |  | 3939|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    884|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3150|  1.55k|    {
 3151|  1.55k|        return true;
 3152|  1.55k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|    622|    {
 5542|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|    622|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|    622|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5385|  1.11k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|  1.03k|    {
 5392|  1.03k|        scan_error err{scan_error::invalid_scanned_value,
 5393|  1.03k|                       "Failed to read boolean"};
 5394|       |
 5395|  1.03k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 902, False: 134]
  ------------------
 5396|    902|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 902]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    902|            else {
 5400|    902|                err = r.error();
 5401|    902|            }
 5402|    902|        }
 5403|       |
 5404|  1.03k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 1.01k, False: 22]
  ------------------
 5405|  1.01k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 1.01k]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|  1.01k|            else {
 5409|  1.01k|                err = r.error();
 5410|  1.01k|            }
 5411|  1.01k|        }
 5412|       |
 5413|  1.03k|        return unexpected(err);
 5414|  1.03k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|    914|    {
 5421|    914|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 914]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    914|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 914]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    914|        return detail::unexpected_scan_error(
 5431|    914|            scan_error::invalid_scanned_value,
 5432|    914|            "Failed to read numeric boolean value: No match");
 5433|    914|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|  1.01k|    {
 5439|  1.01k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 1.01k]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|  1.01k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 1.01k]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|  1.01k|        return detail::unexpected_scan_error(
 5449|  1.01k|            scan_error::invalid_scanned_value,
 5450|  1.01k|            "Failed to read textual boolean value: No match");
 5451|  1.01k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  2.02k|{
 2294|  2.02k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 100, False: 1.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    100|    }                                                  \
  |  |  |  | 3939|  2.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.92k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.92k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|  1.92k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|  1.92k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|  1.92k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 2301|  1.92k|            return unexpected(parse_error::error);
 2302|  1.92k|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|  1.92k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|    622|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|  1.11k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|    622|    {
 4185|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|    622|        float_reader<CharT> rd{};
 4188|    622|        return read_impl<Range>(
 4189|    622|            range, rd,
 4190|    622|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    622|                return r.read_source(SCN_FWD(args)...);
 4192|    622|            },
 4193|    622|            value);
 4194|    622|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    622|        : m_fptr([](storage fn,
  743|    622|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    622|              cvref<T> obj = *get<T>(fn);
  745|    622|              if constexpr (std::is_void_v<R>) {
  746|    622|                  obj(static_cast<decltype(args)>(args)...);
  747|    622|              }
  748|    622|              else {
  749|    622|                  return obj(static_cast<decltype(args)>(args)...);
  750|    622|              }
  751|    622|          }),
  752|    622|          m_storage(std::addressof(f))
  753|    622|    {
  754|    622|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    622|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    622|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    622|              else {
  749|    622|                  return obj(static_cast<decltype(args)>(args)...);
  750|    622|              }
  751|    622|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    622|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    622|        else if constexpr (std::is_object_v<T>) {
  688|    622|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    622|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|    622|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    622|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|    622|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    622|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    622|        {
  662|    622|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|    622|    {
 5303|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    622|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    622|    {
 5303|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    622|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    622|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    622|                          basic_contiguous_scan_context<char_type>>) {
 5915|    622|            auto rd = make_reader<T, char_type>();
 5916|    622|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    622|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    622|    {
 5903|    622|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    622|                        .transform_error(make_eof_scan_error));
 5905|    622|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    622|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    622|    {
 5303|    622|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    622|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    622|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    622|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  49.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  49.2k|    static_cast<    \
  |  |  935|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  49.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  49.2k|          m_current(m_range.begin())
 2988|  49.2k|    {
 2989|  49.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   157k|    {
 2998|   157k|        return m_range.end();
 2999|   157k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  59.6k|{
 1319|       |    // TODO: optimize
 1320|  59.6k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  59.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  59.6k|    auto res = get_next_code_point(str);
 1322|  59.6k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  59.6k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  62.4k|    {
 3013|  62.4k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  62.4k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  62.4k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 62.4k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  62.4k|        }
 3019|  62.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  62.4k|    static_cast<    \
  |  |  935|  62.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  62.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  34.2k|    {
 3003|  34.2k|        return ranges::subrange{begin(), end()};
 3004|  34.2k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  7.62k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  7.62k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  7.62k|        auto buf = make_contiguous_buffer(range);
 2220|  7.62k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  7.62k|        return ranges::next(range.begin(),
 2222|  7.62k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  7.62k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6074|  4.78k|    {
 6075|  4.78k|        const bool need_skipped_width =
 6076|  4.78k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 84, False: 4.70k]
  |  Branch (6076:33): [True: 4.70k, False: 0]
  ------------------
 6077|  4.78k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  4.78k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 246, False: 4.54k]
  ------------------
 6081|  4.78k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 914, False: 3.62k]
  ------------------
 6082|  1.16k|            return skip_fill(rng, specs.precision, specs.fill,
 6083|  1.16k|                             need_skipped_width);
 6084|  1.16k|        }
 6085|  3.62k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 3.43k, False: 196]
  |  Branch (6085:56): [True: 2.23k, False: 1.19k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  2.23k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 2.23k, False: 0]
  ------------------
 6089|  2.23k|                auto max_width_view = take_width(rng, specs.precision);
 6090|  2.23k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|  2.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 238, False: 1.99k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    238|    }                                                  \
  |  |  |  | 3939|  2.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|  1.99k|                                  .transform_error(make_eof_scan_error));
 6092|  1.99k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|  2.23k|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|       |
 6107|  1.39k|        return result_type{rng.begin(), 0};
 6108|  3.62k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5989|  1.16k|{
 5990|  1.16k|    using char_type = detail::char_t<Range>;
 5991|  1.16k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|  1.16k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 466, False: 694]
  ------------------
 5994|    466|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|    466|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|    466|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 0, False: 466]
  ------------------
 5998|      0|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 0, False: 0]
  ------------------
 6001|      0|                auto prefix_width =
 6002|      0|                    static_cast<std::ptrdiff_t>(
 6003|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|      0|                    ranges::distance(range.begin(), it);
 6005|      0|                return result_type{it, prefix_width};
 6006|      0|            }
 6007|      0|            return result_type{it, 0};
 6008|      0|        }
 6009|       |
 6010|    466|        auto max_width_view = take_width(range, max_width);
 6011|    466|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    466|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 466, False: 0]
  ------------------
 6014|    466|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    466|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    466|    }
 6018|       |
 6019|    694|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|    694|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 0, False: 694]
  ------------------
 6021|      0|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 0, False: 0]
  ------------------
 6024|      0|            auto prefix_width =
 6025|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|      0|            return result_type{it, prefix_width};
 6028|      0|        }
 6029|      0|        return result_type{it, 0};
 6030|      0|    }
 6031|       |
 6032|    694|    auto max_width_view = take_width(range, max_width);
 6033|    694|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|    694|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 694, False: 0]
  ------------------
 6036|    694|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|    694|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|    694|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    466|        : m_fptr([](storage fn,
  743|    466|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    466|              cvref<T> obj = *get<T>(fn);
  745|    466|              if constexpr (std::is_void_v<R>) {
  746|    466|                  obj(static_cast<decltype(args)>(args)...);
  747|    466|              }
  748|    466|              else {
  749|    466|                  return obj(static_cast<decltype(args)>(args)...);
  750|    466|              }
  751|    466|          }),
  752|    466|          m_storage(std::addressof(f))
  753|    466|    {
  754|    466|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    682|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    682|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    682|              else {
  749|    682|                  return obj(static_cast<decltype(args)>(args)...);
  750|    682|              }
  751|    682|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    682|    {
  684|    682|        if constexpr (std::is_const_v<T>) {
  685|    682|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    682|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5995|    682|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    466|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    466|        {
  667|    466|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    466|{
 2075|    466|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    466|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    466|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    466|    else {
 2060|    466|        auto first = range.begin();
 2061|    718|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 682, False: 36]
  ------------------
 2062|    682|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 430, False: 252]
  ------------------
 2063|    430|                return first;
 2064|    430|            }
 2065|    682|        }
 2066|     36|        return first;
 2067|    466|    }
 2068|    466|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2920|  5.63k|    {
 2921|  5.63k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  5.63k|                                      m_count};
 2923|  5.63k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2825|  23.9k|    {
 2826|  23.9k|        return view;
 2827|  23.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  5.63k|        : m_current(x), m_end(s), m_count(n)
 2481|  5.63k|    {
 2482|  5.63k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  8.24k|        {
 2892|  8.24k|            return !(y == x);
 2893|  8.24k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  17.7k|        {
 2879|  17.7k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 1.19k, False: 16.5k]
  |  Branch (2879:39): [True: 690, False: 500]
  ------------------
 2880|  17.7k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 34, False: 17.0k]
  ------------------
 2881|  17.7k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 2.20k, False: 14.8k]
  |  Branch (2881:39): [True: 1.56k, False: 640]
  ------------------
 2882|  17.0k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 1.56k]
  ------------------
 2883|  17.7k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|  3.39k|    {
 2521|  3.39k|        return m_multibyte_left;
 2522|  3.39k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|  1.56k|    {
 2526|  1.56k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  1.56k|        return _get_width_at_current_cp_start(
 2528|  1.56k|                   _get_cp_length_at_current()) == 2;
 2529|  1.56k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  9.86k|    {
 2754|  9.86k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  9.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.86k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  9.86k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 4.82k, False: 5.04k]
  ------------------
 2759|  4.82k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  4.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  4.82k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  4.82k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  4.82k|        }
 2763|       |
 2764|  5.04k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  5.04k|                                           cplen);
 2766|  5.04k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  5.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.04k]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|  5.04k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  5.04k|        return static_cast<difference_type>(
 2772|  5.04k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  5.04k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  9.86k|    {
 2748|  9.86k|        return static_cast<difference_type>(
 2749|  9.86k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  9.86k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2926|  12.6k|    {
 2927|  12.6k|        return sentinel<true>{m_base.get().end()};
 2928|  12.6k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  12.6k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  12.6k|    static_cast<    \
  |  |  935|  12.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  11.6k|    {
 2533|  11.6k|        return *m_current;
 2534|  11.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|  15.8k|    {
 2542|  15.8k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  15.8k|        _increment_current();
 2544|  15.8k|        return *this;
 2545|  15.8k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|  15.8k|    {
 2777|  15.8k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 8.30k, False: 7.57k]
  ------------------
 2778|  8.30k|            auto cplen = _get_cp_length_at_current();
 2779|  8.30k|            m_multibyte_left = cplen - 1;
 2780|  8.30k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  8.30k|        }
 2782|  7.57k|        else {
 2783|  7.57k|            --m_multibyte_left;
 2784|  7.57k|        }
 2785|       |
 2786|  15.8k|        ++m_current;
 2787|  15.8k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2135|    694|{
 2136|    694|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    694|    auto it = range.begin();
 2139|  1.27k|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 1.24k, False: 34]
  ------------------
 2140|  1.24k|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|  1.24k|                                           needle.size());
 2142|  1.24k|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 144, False: 1.09k]
  ------------------
 2143|    144|            return it;
 2144|    144|        }
 2145|  1.09k|        static_assert(
 2146|  1.09k|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|  1.09k|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 516, False: 582]
  ------------------
 2148|    516|            return it;
 2149|    516|        }
 2150|    582|        it = *r;
 2151|    582|    }
 2152|     34|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|     34|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     34|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     34|    return it;
 2154|     34|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|  1.24k|{
 1956|  1.24k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.24k|    else {
 1967|  1.24k|        auto it = range.begin();
 1968|  1.24k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.24k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  4.85k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.76k, False: 1.09k]
  ------------------
 1973|  3.76k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 144, False: 3.61k]
  ------------------
 1974|    144|                return unexpected(eof_error::eof);
 1975|    144|            }
 1976|  3.76k|        }
 1977|       |
 1978|  1.09k|        return it;
 1979|  1.24k|    }
 1980|  1.24k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|  1.24k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.24k|    else {
 1116|  1.24k|        return 0;
 1117|  1.24k|    }
 1118|  1.24k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.23k|    {
  268|  2.23k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.23k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.23k|    {
  161|  2.23k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.23k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.23k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.23k|        else {
  169|  2.23k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.23k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.23k|        }
  173|  2.23k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2637|  9.89k|    {
 2638|  9.89k|        return !(a == b);
 2639|  9.89k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2629|  9.89k|    {
 2630|  9.89k|        return a.m_current == b.m_current;
 2631|  9.89k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  3.39k|    {
 2943|  3.39k|        return take_width_view{r, n};
 2944|  3.39k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2910|  3.39k|        : m_base(base), m_count(count)
 2911|  3.39k|    {
 2912|  3.39k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2822|  3.39k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  2.23k|{
 3066|  2.23k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 2.23k, False: 0]
  ------------------
 3067|  2.23k|        auto it = read_while_classic_space(range);
 3068|  2.23k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  2.23k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 238, False: 1.99k]
  |  |  ------------------
  ------------------
 3070|    238|            return unexpected(e);
 3071|    238|        }
 3072|       |
 3073|  1.99k|        return it;
 3074|  2.23k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  2.23k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  2.23k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  2.23k|    else {
 2225|  2.23k|        auto it = range.begin();
 2226|       |
 2227|  2.23k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  2.23k|            auto seg = get_contiguous_beginning(range);
 2229|  2.23k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  2.23k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 2.23k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  2.23k|            ranges::advance(it, seg.size());
 2234|  2.23k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.23k|            return detail::is_cp_space(cp);
 2238|  2.23k|        });
 2239|  2.23k|    }
 2240|  2.23k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  2.23k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  2.23k|    else {
 1059|  2.23k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  2.23k|    }
 1061|  2.23k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  2.23k|{
 2181|  2.23k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  2.23k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  2.23k|{
 2160|  2.23k|    auto it = range.begin();
 2161|  3.71k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 3.47k, False: 238]
  ------------------
 2162|  3.47k|        const auto val =
 2163|  3.47k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  3.47k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  3.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.47k, False: 0]
  |  |  ------------------
  ------------------
 2165|  3.47k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  3.47k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  3.47k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.99k, False: 1.47k]
  ------------------
 2168|  1.99k|                return it;
 2169|  1.99k|            }
 2170|  3.47k|        }
 2171|  1.47k|        it = val.iterator;
 2172|  1.47k|    }
 2173|       |
 2174|    238|    return it;
 2175|  2.23k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  3.47k|{
 1998|  3.47k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  3.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  3.47k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  3.47k|    auto it = range.begin();
 2002|  3.47k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  3.47k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.47k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  3.47k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.54k, False: 934]
  ------------------
 2011|  2.54k|        ++it;
 2012|  2.54k|        return {it, string_type(1, *range.begin())};
 2013|  2.54k|    }
 2014|       |
 2015|    934|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|    934|    return {it, string_type{range.begin(), it}};
 2017|  3.47k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  5.71k|{
  945|  5.71k|    return is_range_eof(r.begin(), r.end());
  946|  5.71k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  5.71k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  5.71k|    {
  938|  5.71k|        return begin == end;
  939|  5.71k|    }
  940|  5.71k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    934|    {
  283|    934|        return n - fn::impl_i_n_s(i, n, bound);
  284|    934|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    934|    {
  227|    934|        constexpr iter_difference_t<I> zero{0};
  228|    934|        iter_difference_t<I> counter{0};
  229|       |
  230|    934|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 934]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    934|        else {
  237|  3.47k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.54k, False: 934]
  |  Branch (237:34): [True: 2.54k, False: 0]
  ------------------
  238|  2.54k|                ++i;
  239|  2.54k|                ++counter;
  240|  2.54k|            }
  241|    934|        }
  242|       |
  243|    934|        return counter;
  244|    934|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  3.47k|    {
 1989|  3.47k|        return !codepoint.empty();
 1990|  3.47k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.23k|        : m_fptr([](storage fn,
  743|  2.23k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.23k|              cvref<T> obj = *get<T>(fn);
  745|  2.23k|              if constexpr (std::is_void_v<R>) {
  746|  2.23k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.23k|              }
  748|  2.23k|              else {
  749|  2.23k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.23k|              }
  751|  2.23k|          }),
  752|  2.23k|          m_storage(std::addressof(f))
  753|  2.23k|    {
  754|  2.23k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.47k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.47k|              else {
  749|  3.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.47k|              }
  751|  3.47k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.47k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.47k|        else if constexpr (std::is_object_v<T>) {
  688|  3.47k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.47k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  3.47k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.47k|            return detail::is_cp_space(cp);
 2238|  3.47k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.23k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.23k|        {
  662|  2.23k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  2.23k|{
  951|  2.23k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 238, False: 1.99k]
  |  |  ------------------
  ------------------
  952|    238|        return eof_error::eof;
  953|    238|    }
  954|  1.99k|    return eof_error::good;
  955|  2.23k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  20.2k|    {
 2513|  20.2k|        return m_current;
 2514|  20.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  39.4k|    {
 2517|  39.4k|        return m_count;
 2518|  39.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  5.86k|    {
 6075|  5.86k|        const bool need_skipped_width =
 6076|  5.86k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 1.92k, False: 3.93k]
  |  Branch (6076:33): [True: 0, False: 3.93k]
  ------------------
 6077|  5.86k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  5.86k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 104, False: 5.75k]
  ------------------
 6081|  5.86k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 376, False: 5.38k]
  ------------------
 6082|    480|            return skip_fill(rng, specs.precision, specs.fill,
 6083|    480|                             need_skipped_width);
 6084|    480|        }
 6085|  5.38k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 4.66k, False: 716]
  |  Branch (6085:56): [True: 1.71k, False: 2.94k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  1.71k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 1.71k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  3.43k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  3.43k|                            make_eof_scan_error));
 6096|       |
 6097|  3.43k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 1.09k, False: 622]
  ------------------
 6098|  1.09k|                return result_type{
 6099|  1.09k|                    it,
 6100|  1.09k|                    calculate_text_width(make_contiguous_buffer(
 6101|  1.09k|                                             ranges::subrange{rng.begin(), it})
 6102|  1.09k|                                             .view())};
 6103|  1.09k|            }
 6104|    622|            return result_type{it, 0};
 6105|  3.43k|        }
 6106|       |
 6107|  3.66k|        return result_type{rng.begin(), 0};
 6108|  5.38k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  3.30k|    {
 6117|  3.30k|        const bool need_skipped_width =
 6118|  3.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 468, False: 2.83k]
  |  Branch (6118:33): [True: 1.40k, False: 1.43k]
  ------------------
 6119|  3.30k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  3.30k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 300, False: 3.00k]
  ------------------
 6122|  3.30k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 502, False: 2.50k]
  ------------------
 6123|    802|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 402, False: 400]
  ------------------
 6124|    802|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 142, False: 260]
  ------------------
 6125|    142|                return result_type{rng.begin(), 0};
 6126|    142|            }
 6127|    660|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|    660|                             specs.fill, need_skipped_width);
 6129|    802|        }
 6130|  2.50k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 2.36k, False: 140]
  ------------------
 6131|  2.50k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 2.03k, False: 330]
  ------------------
 6132|  2.50k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 212, False: 1.82k]
  |  Branch (6132:35): [True: 176, False: 36]
  ------------------
 6133|  2.03k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 676, False: 1.18k]
  ------------------
 6134|  1.85k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 552, False: 124]
  ------------------
 6135|    728|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 552, False: 176]
  ------------------
 6136|    552|                const auto initial_width =
 6137|    552|                    specs.precision - prefix_width - value_width;
 6138|    552|                auto max_width_view = take_width(rng, initial_width);
 6139|    552|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 552]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|    552|                                  .transform_error(make_eof_scan_error));
 6141|    552|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|    552|            }
 6143|    352|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|    352|                            make_eof_scan_error));
 6145|       |
 6146|    352|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 176, False: 0]
  ------------------
 6147|    176|                return result_type{
 6148|    176|                    it,
 6149|    176|                    calculate_text_width(make_contiguous_buffer(
 6150|    176|                                             ranges::subrange{rng.begin(), it})
 6151|    176|                                             .view())};
 6152|    176|            }
 6153|      0|            return result_type{it, 0};
 6154|    352|        }
 6155|  1.77k|        return result_type{rng.begin(), 0};
 6156|  2.50k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  2.33k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.33k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.33k|            auto rd = make_reader<T, char_type>();
 6232|  2.33k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.33k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.66k, False: 674]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.66k|    }
  ------------------
 6233|    674|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.33k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    674|    {
 6162|    674|        const bool need_skipped_width =
 6163|    674|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 202, False: 472]
  |  Branch (6163:33): [True: 380, False: 92]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    674|        auto it = rng.begin();
 6167|    674|        std::ptrdiff_t prefix_width = 0;
 6168|    674|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 384, False: 290]
  ------------------
 6169|    384|            auto max_width_view = take_width(rng, specs.precision);
 6170|    384|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    352|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    352|            it = prefix_result.first.base();
 6173|    352|            prefix_width = prefix_result.second;
 6174|    352|        }
 6175|    290|        else {
 6176|    290|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    290|            std::tie(it, prefix_width) = prefix_result;
 6178|    290|        }
 6179|    642|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    642|        std::ptrdiff_t value_width = 0;
 6183|    642|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 352, False: 290]
  ------------------
 6184|    352|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 346]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    346|            const auto initial_width = specs.precision - prefix_width;
 6192|    346|            auto max_width_view =
 6193|    346|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    346|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 346, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    346|    }                                                  \
  |  |  |  | 3939|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    290|        else {
 6199|    290|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 290, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    290|    }                                                  \
  |  | 3939|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  2.33k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.33k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.33k|            auto rd = make_reader<T, char_type>();
 6232|  2.33k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.33k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.66k, False: 674]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.66k|    }
  ------------------
 6233|    674|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.33k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    674|    {
 6162|    674|        const bool need_skipped_width =
 6163|    674|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 202, False: 472]
  |  Branch (6163:33): [True: 380, False: 92]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    674|        auto it = rng.begin();
 6167|    674|        std::ptrdiff_t prefix_width = 0;
 6168|    674|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 384, False: 290]
  ------------------
 6169|    384|            auto max_width_view = take_width(rng, specs.precision);
 6170|    384|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    352|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    352|            it = prefix_result.first.base();
 6173|    352|            prefix_width = prefix_result.second;
 6174|    352|        }
 6175|    290|        else {
 6176|    290|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 290]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    290|            std::tie(it, prefix_width) = prefix_result;
 6178|    290|        }
 6179|    642|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    642|        std::ptrdiff_t value_width = 0;
 6183|    642|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 352, False: 290]
  ------------------
 6184|    352|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 346]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    346|            const auto initial_width = specs.precision - prefix_width;
 6192|    346|            auto max_width_view =
 6193|    346|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    346|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 346, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    346|    }                                                  \
  |  |  |  | 3939|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    290|        else {
 6199|    290|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 290, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    290|    }                                                  \
  |  | 3939|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6226|  2.28k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.28k|            auto rd = make_reader<T, char_type>();
 6232|  2.28k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.69k, False: 598]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.69k|    }
  ------------------
 6233|    598|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.28k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5791|  2.28k|    {
 5792|  2.28k|        reader_error_handler eh{};
 5793|  2.28k|        detail::check_pointer_type_specs(specs, eh);
 5794|  2.28k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.69k, False: 598]
  |  |  ------------------
  ------------------
 5795|  1.69k|            return detail::unexpected_scan_error(
 5796|  1.69k|                scan_error::invalid_format_string, eh.m_msg);
 5797|  1.69k|        }
 5798|    598|        return {};
 5799|  2.28k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6161|    598|    {
 6162|    598|        const bool need_skipped_width =
 6163|    598|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 194, False: 404]
  |  Branch (6163:33): [True: 334, False: 70]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    598|        auto it = rng.begin();
 6167|    598|        std::ptrdiff_t prefix_width = 0;
 6168|    598|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 336, False: 262]
  ------------------
 6169|    336|            auto max_width_view = take_width(rng, specs.precision);
 6170|    336|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    312|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    312|            it = prefix_result.first.base();
 6173|    312|            prefix_width = prefix_result.second;
 6174|    312|        }
 6175|    262|        else {
 6176|    262|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    262|            std::tie(it, prefix_width) = prefix_result;
 6178|    262|        }
 6179|    574|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    574|        std::ptrdiff_t value_width = 0;
 6183|    574|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 312, False: 262]
  ------------------
 6184|    312|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 4, False: 308]
  ------------------
 6185|      4|                return detail::unexpected_scan_error(
 6186|      4|                    scan_error::invalid_fill,
 6187|      4|                    "Too many fill characters before value, "
 6188|      4|                    "precision exceeded before reading value");
 6189|      4|            }
 6190|       |
 6191|    308|            const auto initial_width = specs.precision - prefix_width;
 6192|    308|            auto max_width_view =
 6193|    308|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    308|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    262|        else {
 6199|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 262, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    262|    }                                                  \
  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    308|    {
 5822|    308|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    308|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    308|        return read_default(range, value, loc);
 5824|    308|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    308|    {
 5805|    308|        detail::format_specs specs{};
 5806|    308|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    308|        std::uintptr_t intvalue{};
 5809|    308|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    308|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    262|    {
 5822|    262|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    262|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    262|        return read_default(range, value, loc);
 5824|    262|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6226|  2.33k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.33k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.33k|            auto rd = make_reader<T, char_type>();
 6232|  2.33k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.33k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.40k, False: 934]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.40k|    }
  ------------------
 6233|    934|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.33k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.33k|    {
 3156|  2.33k|        reader_error_handler eh{};
 3157|  2.33k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.40k, False: 934]
  |  |  ------------------
  ------------------
 3159|  1.40k|            return detail::unexpected_scan_error(
 3160|  1.40k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.40k|        }
 3162|    934|        return {};
 3163|  2.33k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3167|  2.33k|    {
 3168|  2.33k|        return static_cast<Derived&>(*this);
 3169|  2.33k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  2.33k|    {
 5535|  2.33k|        detail::check_bool_type_specs(specs, eh);
 5536|  2.33k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    934|    {
 6162|    934|        const bool need_skipped_width =
 6163|    934|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 212, False: 722]
  |  Branch (6163:33): [True: 490, False: 232]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    934|        auto it = rng.begin();
 6167|    934|        std::ptrdiff_t prefix_width = 0;
 6168|    934|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 496, False: 438]
  ------------------
 6169|    496|            auto max_width_view = take_width(rng, specs.precision);
 6170|    496|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    496|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    496|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    496|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|    496|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    460|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    460|            it = prefix_result.first.base();
 6173|    460|            prefix_width = prefix_result.second;
 6174|    460|        }
 6175|    438|        else {
 6176|    438|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 438]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    438|            std::tie(it, prefix_width) = prefix_result;
 6178|    438|        }
 6179|    898|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    898|        std::ptrdiff_t value_width = 0;
 6183|    898|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 460, False: 438]
  ------------------
 6184|    460|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 450]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|    450|            const auto initial_width = specs.precision - prefix_width;
 6192|    450|            auto max_width_view =
 6193|    450|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    450|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 450, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    450|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    450|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    450|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    450|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    450|    }                                                  \
  |  |  |  | 3939|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    438|        else {
 6199|    438|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 438, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    438|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    438|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    438|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    438|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    438|    }                                                  \
  |  | 3939|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    450|    {
 5554|    450|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    450|#if !SCN_DISABLE_LOCALE
 5557|    450|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 18, False: 432]
  ------------------
 5558|     18|            return rd.read_localized(range, loc, value);
 5559|     18|        }
 5560|    432|#endif
 5561|       |
 5562|    432|        return rd.read_classic(range, value);
 5563|    450|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5566|    888|    {
 5567|    888|        SCN_GCC_COMPAT_PUSH
 5568|    888|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    888|        switch (specs.type) {
 5571|    246|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 246, False: 642]
  ------------------
 5572|    246|                return bool_reader_base::allow_text;
 5573|       |
 5574|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 14, False: 874]
  ------------------
 5575|     26|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 12, False: 876]
  ------------------
 5576|     32|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 6, False: 882]
  ------------------
 5577|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 10, False: 878]
  ------------------
 5578|     56|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 14, False: 874]
  ------------------
 5579|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 6, False: 882]
  ------------------
 5580|     62|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    580|            default:
  ------------------
  |  Branch (5582:13): [True: 580, False: 308]
  ------------------
 5583|    580|                return bool_reader_base::allow_text |
 5584|    580|                       bool_reader_base::allow_numeric;
 5585|    888|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    888|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     18|    {
 5465|     18|        scan_error err{scan_error::invalid_scanned_value,
 5466|     18|                       "Failed to read boolean"};
 5467|       |
 5468|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 16, False: 2]
  ------------------
 5469|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 16]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     16|            else {
 5473|     16|                err = r.error();
 5474|     16|            }
 5475|     16|        }
 5476|       |
 5477|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 14, False: 4]
  ------------------
 5478|     14|            auto stdloc = loc.get<std::locale>();
 5479|     14|            const auto& numpunct =
 5480|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     14|            const auto truename = numpunct.truename();
 5482|     14|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     14|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 14]
  ------------------
 5485|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     14|            else {
 5489|     14|                err = r.error();
 5490|     14|            }
 5491|     14|        }
 5492|       |
 5493|     18|        return unexpected(err);
 5494|     18|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    350|    {
 5421|    350|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 350]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    350|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 350]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    350|        return detail::unexpected_scan_error(
 5431|    350|            scan_error::invalid_scanned_value,
 5432|    350|            "Failed to read numeric boolean value: No match");
 5433|    350|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    700|{
 2246|    700|    auto it = read_code_unit(range);
 2247|    700|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    700|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 700]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    700|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    700|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 700, False: 0]
  |  |  ------------------
  ------------------
 2252|    700|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    700|        return unexpected(parse_error::error);
 2254|    700|    }
 2255|       |
 2256|      0|    return *it;
 2257|    700|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5504|     14|    {
 5505|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     14|        const auto shorter = std::pair{
 5507|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 14, False: 0]
  ------------------
 5508|     14|        const auto longer = std::pair{
 5509|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 14]
  ------------------
 5510|       |
 5511|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 14]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 14]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     14|        return detail::unexpected_scan_error(
 5521|     14|            scan_error::invalid_scanned_value,
 5522|     14|            "Failed to read textual boolean: No match");
 5523|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     28|{
 2279|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     14|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2285|     14|        return unexpected(parse_error::error);
 2286|     14|    }
 2287|      0|    return it;
 2288|     14|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    836|{
 1956|    836|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    836|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    836|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    836|    else {
 1967|    836|        auto it = range.begin();
 1968|    836|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 836]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  4.13k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.48k, False: 654]
  ------------------
 1973|  3.48k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 182, False: 3.30k]
  ------------------
 1974|    182|                return unexpected(eof_error::eof);
 1975|    182|            }
 1976|  3.48k|        }
 1977|       |
 1978|    654|        return it;
 1979|    836|    }
 1980|    836|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|    836|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    836|    else {
 1116|    836|        return 0;
 1117|    836|    }
 1118|    836|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    432|    {
 5392|    432|        scan_error err{scan_error::invalid_scanned_value,
 5393|    432|                       "Failed to read boolean"};
 5394|       |
 5395|    432|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 334, False: 98]
  ------------------
 5396|    334|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 334]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    334|            else {
 5400|    334|                err = r.error();
 5401|    334|            }
 5402|    334|        }
 5403|       |
 5404|    432|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 404, False: 28]
  ------------------
 5405|    404|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 404]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    404|            else {
 5409|    404|                err = r.error();
 5410|    404|            }
 5411|    404|        }
 5412|       |
 5413|    432|        return unexpected(err);
 5414|    432|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    404|    {
 5439|    404|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 404]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    404|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 404]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    404|        return detail::unexpected_scan_error(
 5449|    404|            scan_error::invalid_scanned_value,
 5450|    404|            "Failed to read textual boolean value: No match");
 5451|    404|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    808|{
 2294|    808|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    808|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    808|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    808|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    808|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 168, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    168|    }                                                  \
  |  |  |  | 3939|    808|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    640|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    640|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|    640|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|    640|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|    640|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 640, False: 0]
  |  |  ------------------
  ------------------
 2301|    640|            return unexpected(parse_error::error);
 2302|    640|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|    640|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    438|    {
 5554|    438|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    438|#if !SCN_DISABLE_LOCALE
 5557|    438|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 24, False: 414]
  ------------------
 5558|     24|            return rd.read_localized(range, loc, value);
 5559|     24|        }
 5560|    414|#endif
 5561|       |
 5562|    414|        return rd.read_classic(range, value);
 5563|    438|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     24|    {
 5465|     24|        scan_error err{scan_error::invalid_scanned_value,
 5466|     24|                       "Failed to read boolean"};
 5467|       |
 5468|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 12, False: 12]
  ------------------
 5469|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 12]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     12|            else {
 5473|     12|                err = r.error();
 5474|     12|            }
 5475|     12|        }
 5476|       |
 5477|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 16, False: 8]
  ------------------
 5478|     16|            auto stdloc = loc.get<std::locale>();
 5479|     16|            const auto& numpunct =
 5480|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     16|            const auto truename = numpunct.truename();
 5482|     16|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     16|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 16]
  ------------------
 5485|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     16|            else {
 5489|     16|                err = r.error();
 5490|     16|            }
 5491|     16|        }
 5492|       |
 5493|     24|        return unexpected(err);
 5494|     24|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5504|     16|    {
 5505|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     16|        const auto shorter = std::pair{
 5507|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 16, False: 0]
  ------------------
 5508|     16|        const auto longer = std::pair{
 5509|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 16]
  ------------------
 5510|       |
 5511|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 16]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 16]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     16|        return detail::unexpected_scan_error(
 5521|     16|            scan_error::invalid_scanned_value,
 5522|     16|            "Failed to read textual boolean: No match");
 5523|     16|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     32|{
 2279|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     30|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     30|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     30|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     30|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2285|     30|        return unexpected(parse_error::error);
 2286|     30|    }
 2287|      0|    return it;
 2288|     30|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6226|  2.28k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.28k|            auto rd = make_reader<T, char_type>();
 6232|  2.28k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.63k, False: 652]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.63k|    }
  ------------------
 6233|    652|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.28k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    652|    {
 6162|    652|        const bool need_skipped_width =
 6163|    652|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 198, False: 454]
  |  Branch (6163:33): [True: 368, False: 86]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    652|        auto it = rng.begin();
 6167|    652|        std::ptrdiff_t prefix_width = 0;
 6168|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 372, False: 280]
  ------------------
 6169|    372|            auto max_width_view = take_width(rng, specs.precision);
 6170|    372|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 372]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    372|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    372|            it = prefix_result.first.base();
 6173|    372|            prefix_width = prefix_result.second;
 6174|    372|        }
 6175|    280|        else {
 6176|    280|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    280|            std::tie(it, prefix_width) = prefix_result;
 6178|    280|        }
 6179|    652|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    652|        std::ptrdiff_t value_width = 0;
 6183|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 372, False: 280]
  ------------------
 6184|    372|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 366]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    366|            const auto initial_width = specs.precision - prefix_width;
 6192|    366|            auto max_width_view =
 6193|    366|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    366|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    330|            it = w_it.base();
 6196|    330|            value_width = initial_width - w_it.count();
 6197|    330|        }
 6198|    280|        else {
 6199|    280|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 258]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    258|                                             specs, value, loc));
 6201|       |
 6202|    258|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 190, False: 68]
  ------------------
 6203|    190|                value_width = calculate_text_width(
 6204|    190|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    190|                        .view());
 6206|    190|            }
 6207|    258|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    588|        std::ptrdiff_t postfix_width = 0;
 6211|    588|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 588, False: 0]
  ------------------
 6212|    588|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    588|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    588|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    588|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 588]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    588|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    588|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    588|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    588|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    588|                                 value_width));
 6216|    588|            std::tie(it, postfix_width) = postfix_result;
 6217|    588|        }
 6218|       |
 6219|    588|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    588|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 166, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    166|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    166|    }
  ------------------
 6220|    588|            specs, prefix_width, value_width, postfix_width));
 6221|    422|        return it;
 6222|    588|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|  2.33k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.33k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.33k|            auto rd = make_reader<T, char_type>();
 6232|  2.33k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.33k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 688]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 6233|    688|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.33k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    688|    {
 6162|    688|        const bool need_skipped_width =
 6163|    688|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 200, False: 488]
  |  Branch (6163:33): [True: 392, False: 96]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    688|        auto it = rng.begin();
 6167|    688|        std::ptrdiff_t prefix_width = 0;
 6168|    688|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 396, False: 292]
  ------------------
 6169|    396|            auto max_width_view = take_width(rng, specs.precision);
 6170|    396|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    366|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    366|            it = prefix_result.first.base();
 6173|    366|            prefix_width = prefix_result.second;
 6174|    366|        }
 6175|    292|        else {
 6176|    292|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    292|            std::tie(it, prefix_width) = prefix_result;
 6178|    292|        }
 6179|    658|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    658|        std::ptrdiff_t value_width = 0;
 6183|    658|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 366, False: 292]
  ------------------
 6184|    366|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 8, False: 358]
  ------------------
 6185|      8|                return detail::unexpected_scan_error(
 6186|      8|                    scan_error::invalid_fill,
 6187|      8|                    "Too many fill characters before value, "
 6188|      8|                    "precision exceeded before reading value");
 6189|      8|            }
 6190|       |
 6191|    358|            const auto initial_width = specs.precision - prefix_width;
 6192|    358|            auto max_width_view =
 6193|    358|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    358|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    358|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 358, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    358|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    358|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    358|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    358|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    358|    }                                                  \
  |  |  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    292|        else {
 6199|    292|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 292, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    292|    }                                                  \
  |  | 3939|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  2.28k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.28k|            auto rd = make_reader<T, char_type>();
 6232|  2.28k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 146, False: 2.14k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    146|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    146|    }
  ------------------
 6233|  2.14k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.28k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  2.14k|    {
 6162|  2.14k|        const bool need_skipped_width =
 6163|  2.14k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 268, False: 1.87k]
  |  Branch (6163:33): [True: 786, False: 1.08k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  2.14k|        auto it = rng.begin();
 6167|  2.14k|        std::ptrdiff_t prefix_width = 0;
 6168|  2.14k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 806, False: 1.33k]
  ------------------
 6169|    806|            auto max_width_view = take_width(rng, specs.precision);
 6170|    806|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 778]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    778|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    778|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    778|            it = prefix_result.first.base();
 6173|    778|            prefix_width = prefix_result.second;
 6174|    778|        }
 6175|  1.33k|        else {
 6176|  1.33k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  1.33k|            std::tie(it, prefix_width) = prefix_result;
 6178|  1.33k|        }
 6179|  2.11k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  2.11k|        std::ptrdiff_t value_width = 0;
 6183|  2.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 778, False: 1.33k]
  ------------------
 6184|    778|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 768]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|    768|            const auto initial_width = specs.precision - prefix_width;
 6192|    768|            auto max_width_view =
 6193|    768|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    768|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    768|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    768|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    768|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 306, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    306|    }                                                  \
  |  |  |  | 3939|    768|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    462|            it = w_it.base();
 6196|    462|            value_width = initial_width - w_it.count();
 6197|    462|        }
 6198|  1.33k|        else {
 6199|  1.33k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 550, False: 786]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    550|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    550|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    550|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    550|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    550|    }                                                  \
  |  | 3939|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    786|                                             specs, value, loc));
 6201|       |
 6202|    786|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 218, False: 568]
  ------------------
 6203|    218|                value_width = calculate_text_width(
 6204|    218|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    218|                        .view());
 6206|    218|            }
 6207|    786|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.24k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.24k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 906, False: 342]
  ------------------
 6212|    906|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    906|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    906|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    906|                                 value_width));
 6216|    906|            std::tie(it, postfix_width) = postfix_result;
 6217|    906|        }
 6218|       |
 6219|  1.24k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 88, False: 1.16k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     88|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     88|    }
  ------------------
 6220|  1.24k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.16k|        return it;
 6222|  1.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  2.28k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.28k|            auto rd = make_reader<T, char_type>();
 6232|  2.28k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 146, False: 2.14k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    146|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    146|    }
  ------------------
 6233|  2.14k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.28k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  2.14k|    {
 6162|  2.14k|        const bool need_skipped_width =
 6163|  2.14k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 268, False: 1.87k]
  |  Branch (6163:33): [True: 786, False: 1.08k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  2.14k|        auto it = rng.begin();
 6167|  2.14k|        std::ptrdiff_t prefix_width = 0;
 6168|  2.14k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 806, False: 1.33k]
  ------------------
 6169|    806|            auto max_width_view = take_width(rng, specs.precision);
 6170|    806|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 778]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    778|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    778|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    778|            it = prefix_result.first.base();
 6173|    778|            prefix_width = prefix_result.second;
 6174|    778|        }
 6175|  1.33k|        else {
 6176|  1.33k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  1.33k|            std::tie(it, prefix_width) = prefix_result;
 6178|  1.33k|        }
 6179|  2.11k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  2.11k|        std::ptrdiff_t value_width = 0;
 6183|  2.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 778, False: 1.33k]
  ------------------
 6184|    778|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 768]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|    768|            const auto initial_width = specs.precision - prefix_width;
 6192|    768|            auto max_width_view =
 6193|    768|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    768|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    768|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    768|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    768|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 306, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    306|    }                                                  \
  |  |  |  | 3939|    768|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    462|            it = w_it.base();
 6196|    462|            value_width = initial_width - w_it.count();
 6197|    462|        }
 6198|  1.33k|        else {
 6199|  1.33k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 550, False: 786]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    550|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    550|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    550|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    550|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    550|    }                                                  \
  |  | 3939|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    786|                                             specs, value, loc));
 6201|       |
 6202|    786|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 218, False: 568]
  ------------------
 6203|    218|                value_width = calculate_text_width(
 6204|    218|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    218|                        .view());
 6206|    218|            }
 6207|    786|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.24k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.24k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 906, False: 342]
  ------------------
 6212|    906|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    906|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    906|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    906|                                 value_width));
 6216|    906|            std::tie(it, postfix_width) = postfix_result;
 6217|    906|        }
 6218|       |
 6219|  1.24k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 88, False: 1.16k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     88|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     88|    }
  ------------------
 6220|  1.24k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.16k|        return it;
 6222|  1.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  2.28k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.28k|            auto rd = make_reader<T, char_type>();
 6232|  2.28k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.28k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 146, False: 2.14k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    146|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    146|    }
  ------------------
 6233|  2.14k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.28k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  2.14k|    {
 6162|  2.14k|        const bool need_skipped_width =
 6163|  2.14k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 268, False: 1.87k]
  |  Branch (6163:33): [True: 786, False: 1.08k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  2.14k|        auto it = rng.begin();
 6167|  2.14k|        std::ptrdiff_t prefix_width = 0;
 6168|  2.14k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 806, False: 1.33k]
  ------------------
 6169|    806|            auto max_width_view = take_width(rng, specs.precision);
 6170|    806|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 778]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    778|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    778|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    778|            it = prefix_result.first.base();
 6173|    778|            prefix_width = prefix_result.second;
 6174|    778|        }
 6175|  1.33k|        else {
 6176|  1.33k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  1.33k|            std::tie(it, prefix_width) = prefix_result;
 6178|  1.33k|        }
 6179|  2.11k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  2.11k|        std::ptrdiff_t value_width = 0;
 6183|  2.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 778, False: 1.33k]
  ------------------
 6184|    778|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 768]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|    768|            const auto initial_width = specs.precision - prefix_width;
 6192|    768|            auto max_width_view =
 6193|    768|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    768|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    768|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    768|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    768|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 306, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    306|    }                                                  \
  |  |  |  | 3939|    768|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    462|            it = w_it.base();
 6196|    462|            value_width = initial_width - w_it.count();
 6197|    462|        }
 6198|  1.33k|        else {
 6199|  1.33k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 550, False: 786]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    550|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    550|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    550|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    550|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    550|    }                                                  \
  |  | 3939|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    786|                                             specs, value, loc));
 6201|       |
 6202|    786|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 218, False: 568]
  ------------------
 6203|    218|                value_width = calculate_text_width(
 6204|    218|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    218|                        .view());
 6206|    218|            }
 6207|    786|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.24k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.24k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 906, False: 342]
  ------------------
 6212|    906|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    906|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    906|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    906|                                 value_width));
 6216|    906|            std::tie(it, postfix_width) = postfix_result;
 6217|    906|        }
 6218|       |
 6219|  1.24k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 88, False: 1.16k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     88|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     88|    }
  ------------------
 6220|  1.24k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.16k|        return it;
 6222|  1.24k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  4.39k|{
 5835|  4.39k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.39k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  4.39k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 488, False: 3.90k]
  ------------------
 5840|    488|        return range.begin();
 5841|    488|    }
 5842|       |
 5843|  3.90k|    return skip_classic_whitespace(range);
 5844|  4.39k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    488|    {
 3579|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    488|        return read_default_with_base(range, value, 10);
 3581|    488|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    488|    {
 3543|    488|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    488|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|    488|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 488]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|    976|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|    976|                parse_integer_digits_without_thsep(
 3562|    976|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|    976|                    prefix_result.parsed_base));
 3564|       |
 3565|    976|        auto buf = make_contiguous_buffer(
 3566|    976|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|    976|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 488, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    488|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    488|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    488|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    488|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    488|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|    976|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    488|    {
 3579|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    488|        return read_default_with_base(range, value, 10);
 3581|    488|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    488|    {
 3543|    488|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    488|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|    488|        if constexpr (!std::is_signed_v<T>) {
 3547|    488|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 488]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|    488|        }
 3554|       |
 3555|    488|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 488]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|    976|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|    976|                parse_integer_digits_without_thsep(
 3562|    976|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|    976|                    prefix_result.parsed_base));
 3564|       |
 3565|    976|        auto buf = make_contiguous_buffer(
 3566|    976|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|    976|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 488, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    488|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    488|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    488|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    488|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    488|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|    976|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5786|    998|    {
 5787|    998|        return true;
 5788|    998|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|    828|    {
 5805|    828|        detail::format_specs specs{};
 5806|    828|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    828|        std::uintptr_t intvalue{};
 5809|    828|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 804, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    804|    }                                                  \
  |  |  |  | 3939|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|     24|                                                                intvalue, loc));
 5811|     24|        value = reinterpret_cast<void*>(intvalue);
 5812|     24|        return result;
 5813|    828|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3150|  1.26k|    {
 3151|  1.26k|        return true;
 3152|  1.26k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|    488|    {
 5542|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|    488|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|    488|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|    936|    {
 5392|    936|        scan_error err{scan_error::invalid_scanned_value,
 5393|    936|                       "Failed to read boolean"};
 5394|       |
 5395|    936|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 872, False: 64]
  ------------------
 5396|    872|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 30, False: 842]
  ------------------
 5397|     30|                return *r;
 5398|     30|            }
 5399|    842|            else {
 5400|    842|                err = r.error();
 5401|    842|            }
 5402|    872|        }
 5403|       |
 5404|    906|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 866, False: 40]
  ------------------
 5405|    866|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 866]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    866|            else {
 5409|    866|                err = r.error();
 5410|    866|            }
 5411|    866|        }
 5412|       |
 5413|    906|        return unexpected(err);
 5414|    906|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|    900|    {
 5421|    900|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 36, False: 864]
  ------------------
 5422|     36|            value = false;
 5423|     36|            return *r;
 5424|     36|        }
 5425|    864|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 864]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    864|        return detail::unexpected_scan_error(
 5431|    864|            scan_error::invalid_scanned_value,
 5432|    864|            "Failed to read numeric boolean value: No match");
 5433|    864|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|    866|    {
 5439|    866|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 866]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    866|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 866]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    866|        return detail::unexpected_scan_error(
 5449|    866|            scan_error::invalid_scanned_value,
 5450|    866|            "Failed to read textual boolean value: No match");
 5451|    866|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  1.73k|{
 2294|  1.73k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 166, False: 1.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    166|    }                                                  \
  |  |  |  | 3939|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.56k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.56k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|  1.56k|    else {
 2306|  1.56k|        auto range_it = range.begin();
 2307|  1.56k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 1.56k, False: 0]
  ------------------
 2308|  1.56k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 0]
  |  |  ------------------
  ------------------
 2309|  1.56k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|  1.56k|                return unexpected(parse_error::error);
 2311|  1.56k|            }
 2312|  1.56k|        }
 2313|      0|        return it;
 2314|  1.56k|    }
 2315|  1.56k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|    488|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|    488|    {
 4185|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|    488|        float_reader<CharT> rd{};
 4188|    488|        return read_impl<Range>(
 4189|    488|            range, rd,
 4190|    488|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    488|                return r.read_source(SCN_FWD(args)...);
 4192|    488|            },
 4193|    488|            value);
 4194|    488|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    488|        : m_fptr([](storage fn,
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|    488|              if constexpr (std::is_void_v<R>) {
  746|    488|                  obj(static_cast<decltype(args)>(args)...);
  747|    488|              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
  752|    488|          m_storage(std::addressof(f))
  753|    488|    {
  754|    488|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|    488|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    488|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|    488|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    488|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    488|        {
  662|    488|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    488|    {
 5303|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    488|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|    488|    {
 5303|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    488|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    488|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    488|                          basic_contiguous_scan_context<char_type>>) {
 5915|    488|            auto rd = make_reader<T, char_type>();
 5916|    488|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    488|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    488|    {
 5903|    488|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 488]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    488|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    488|                        .transform_error(make_eof_scan_error));
 5905|    488|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    488|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    488|    {
 5303|    488|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    488|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    488|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    488|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  98.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  98.5k|    static_cast<    \
  |  |  935|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  98.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  98.5k|          m_current(m_range.begin())
 2988|  98.5k|    {
 2989|  98.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   242k|    {
 2998|   242k|        return m_range.end();
 2999|   242k|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|   124k|{
 1319|       |    // TODO: optimize
 1320|   124k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|   124k|    auto res = get_next_code_point(str);
 1322|   124k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|   124k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  97.3k|    {
 3013|  97.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  97.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  97.3k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 97.3k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  97.3k|        }
 3019|  97.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  97.3k|    static_cast<    \
  |  |  935|  97.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  97.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|  20.2k|    {
 3003|  20.2k|        return ranges::subrange{begin(), end()};
 3004|  20.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6074|  2.27k|    {
 6075|  2.27k|        const bool need_skipped_width =
 6076|  2.27k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 34, False: 2.23k]
  |  Branch (6076:33): [True: 2.23k, False: 0]
  ------------------
 6077|  2.27k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  2.27k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 52, False: 2.22k]
  ------------------
 6081|  2.27k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 494, False: 1.72k]
  ------------------
 6082|    546|            return skip_fill(rng, specs.precision, specs.fill,
 6083|    546|                             need_skipped_width);
 6084|    546|        }
 6085|  1.72k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 1.68k, False: 44]
  |  Branch (6085:56): [True: 994, False: 688]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|    994|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 994, False: 0]
  ------------------
 6089|    994|                auto max_width_view = take_width(rng, specs.precision);
 6090|    994|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|    994|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    994|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    994|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 878]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|    994|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    878|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    878|                                  .transform_error(make_eof_scan_error));
 6092|    878|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|    994|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|       |
 6107|    732|        return result_type{rng.begin(), 0};
 6108|  1.72k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5989|    546|{
 5990|    546|    using char_type = detail::char_t<Range>;
 5991|    546|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|    546|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 546, False: 0]
  ------------------
 5994|    546|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|    546|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|    546|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 0, False: 546]
  ------------------
 5998|      0|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 0, False: 0]
  ------------------
 6001|      0|                auto prefix_width =
 6002|      0|                    static_cast<std::ptrdiff_t>(
 6003|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|      0|                    ranges::distance(range.begin(), it);
 6005|      0|                return result_type{it, prefix_width};
 6006|      0|            }
 6007|      0|            return result_type{it, 0};
 6008|      0|        }
 6009|       |
 6010|    546|        auto max_width_view = take_width(range, max_width);
 6011|    546|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    546|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 546, False: 0]
  ------------------
 6014|    546|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    546|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    546|    }
 6018|       |
 6019|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 0, False: 0]
  ------------------
 6021|      0|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 0, False: 0]
  ------------------
 6024|      0|            auto prefix_width =
 6025|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|      0|            return result_type{it, prefix_width};
 6028|      0|        }
 6029|      0|        return result_type{it, 0};
 6030|      0|    }
 6031|       |
 6032|      0|    auto max_width_view = take_width(range, max_width);
 6033|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 0]
  ------------------
 6036|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|      0|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    546|        : m_fptr([](storage fn,
  743|    546|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    546|              cvref<T> obj = *get<T>(fn);
  745|    546|              if constexpr (std::is_void_v<R>) {
  746|    546|                  obj(static_cast<decltype(args)>(args)...);
  747|    546|              }
  748|    546|              else {
  749|    546|                  return obj(static_cast<decltype(args)>(args)...);
  750|    546|              }
  751|    546|          }),
  752|    546|          m_storage(std::addressof(f))
  753|    546|    {
  754|    546|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    810|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    810|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    810|              else {
  749|    810|                  return obj(static_cast<decltype(args)>(args)...);
  750|    810|              }
  751|    810|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    810|    {
  684|    810|        if constexpr (std::is_const_v<T>) {
  685|    810|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    810|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5995|    810|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    546|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    546|        {
  667|    546|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    546|{
 2075|    546|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    546|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    546|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    546|    else {
 2060|    546|        auto first = range.begin();
 2061|    844|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 810, False: 34]
  ------------------
 2062|    810|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 512, False: 298]
  ------------------
 2063|    512|                return first;
 2064|    512|            }
 2065|    810|        }
 2066|     34|        return first;
 2067|    546|    }
 2068|    546|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2920|  2.53k|    {
 2921|  2.53k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  2.53k|                                      m_count};
 2923|  2.53k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2825|  9.54k|    {
 2826|  9.54k|        return view;
 2827|  9.54k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  2.53k|        : m_current(x), m_end(s), m_count(n)
 2481|  2.53k|    {
 2482|  2.53k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  2.22k|        {
 2892|  2.22k|            return !(y == x);
 2893|  2.22k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  4.47k|        {
 2879|  4.47k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 266, False: 4.20k]
  |  Branch (2879:39): [True: 266, False: 0]
  ------------------
 2880|  4.47k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 0, False: 4.20k]
  ------------------
 2881|  4.47k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 630, False: 3.57k]
  |  Branch (2881:39): [True: 630, False: 0]
  ------------------
 2882|  4.20k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 630]
  ------------------
 2883|  4.47k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|    896|    {
 2521|    896|        return m_multibyte_left;
 2522|    896|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|    630|    {
 2526|    630|        assert(count() != 0 || multibyte_left() != 0);
 2527|    630|        return _get_width_at_current_cp_start(
 2528|    630|                   _get_cp_length_at_current()) == 2;
 2529|    630|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  2.18k|    {
 2754|  2.18k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.18k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  2.18k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 2.18k, False: 0]
  ------------------
 2759|  2.18k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  2.18k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  2.18k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  2.18k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  2.18k|    {
 2748|  2.18k|        return static_cast<difference_type>(
 2749|  2.18k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  2.18k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2926|  4.47k|    {
 2927|  4.47k|        return sentinel<true>{m_base.get().end()};
 2928|  4.47k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  4.47k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  4.47k|    static_cast<    \
  |  |  935|  4.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  3.33k|    {
 2533|  3.33k|        return *m_current;
 2534|  3.33k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|  1.55k|    {
 2542|  1.55k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  1.55k|        _increment_current();
 2544|  1.55k|        return *this;
 2545|  1.55k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|  1.55k|    {
 2777|  1.55k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 1.55k, False: 0]
  ------------------
 2778|  1.55k|            auto cplen = _get_cp_length_at_current();
 2779|  1.55k|            m_multibyte_left = cplen - 1;
 2780|  1.55k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  1.55k|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|  1.55k|        ++m_current;
 2787|  1.55k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  1.54k|    {
 2943|  1.54k|        return take_width_view{r, n};
 2944|  1.54k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2910|  1.54k|        : m_base(base), m_count(count)
 2911|  1.54k|    {
 2912|  1.54k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2822|  1.54k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|    994|{
 3066|    994|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 994, False: 0]
  ------------------
 3067|    994|        auto it = read_while_classic_space(range);
 3068|    994|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|    994|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 116, False: 878]
  |  |  ------------------
  ------------------
 3070|    116|            return unexpected(e);
 3071|    116|        }
 3072|       |
 3073|    878|        return it;
 3074|    994|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|    994|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|    994|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    994|    else {
 2225|    994|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    994|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    994|            return detail::is_cp_space(cp);
 2238|    994|        });
 2239|    994|    }
 2240|    994|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|    994|{
 2181|    994|    return read_until_code_point(range, std::not_fn(pred));
 2182|    994|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|    994|{
 2160|    994|    auto it = range.begin();
 2161|  1.37k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.26k, False: 116]
  ------------------
 2162|  1.26k|        const auto val =
 2163|  1.26k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.26k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.26k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.26k, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.26k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.26k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.26k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 878, False: 382]
  ------------------
 2168|    878|                return it;
 2169|    878|            }
 2170|  1.26k|        }
 2171|    382|        it = val.iterator;
 2172|    382|    }
 2173|       |
 2174|    116|    return it;
 2175|    994|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  1.26k|{
 1998|  1.26k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.26k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.26k|    auto it = range.begin();
 2002|  1.26k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.26k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.26k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.26k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.26k, False: 0]
  ------------------
 2011|  1.26k|        ++it;
 2012|  1.26k|        return {it, string_type(1, *range.begin())};
 2013|  1.26k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.26k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  2.25k|{
  945|  2.25k|    return is_range_eof(r.begin(), r.end());
  946|  2.25k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  2.25k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.25k|    {
  938|  2.25k|        return begin == end;
  939|  2.25k|    }
  940|  2.25k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|  1.26k|    {
 1989|  1.26k|        return !codepoint.empty();
 1990|  1.26k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    994|        : m_fptr([](storage fn,
  743|    994|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    994|              cvref<T> obj = *get<T>(fn);
  745|    994|              if constexpr (std::is_void_v<R>) {
  746|    994|                  obj(static_cast<decltype(args)>(args)...);
  747|    994|              }
  748|    994|              else {
  749|    994|                  return obj(static_cast<decltype(args)>(args)...);
  750|    994|              }
  751|    994|          }),
  752|    994|          m_storage(std::addressof(f))
  753|    994|    {
  754|    994|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.26k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.26k|              else {
  749|  1.26k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.26k|              }
  751|  1.26k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.26k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.26k|        else if constexpr (std::is_object_v<T>) {
  688|  1.26k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.26k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.26k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.26k|            return detail::is_cp_space(cp);
 2238|  1.26k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    994|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    994|        {
  662|    994|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    994|{
  951|    994|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 116, False: 878]
  |  |  ------------------
  ------------------
  952|    116|        return eof_error::eof;
  953|    116|    }
  954|    878|    return eof_error::good;
  955|    994|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  5.63k|    {
 2513|  5.63k|        return m_current;
 2514|  5.63k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  10.7k|    {
 2517|  10.7k|        return m_count;
 2518|  10.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  4.23k|    {
 6075|  4.23k|        const bool need_skipped_width =
 6076|  4.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 2.38k, False: 1.85k]
  |  Branch (6076:33): [True: 0, False: 1.85k]
  ------------------
 6077|  4.23k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  4.23k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 168, False: 4.06k]
  ------------------
 6081|  4.23k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 528, False: 3.54k]
  ------------------
 6082|    696|            return skip_fill(rng, specs.precision, specs.fill,
 6083|    696|                             need_skipped_width);
 6084|    696|        }
 6085|  3.54k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 3.33k, False: 208]
  |  Branch (6085:56): [True: 2.52k, False: 804]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  2.52k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 2.52k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  5.05k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  2.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  5.05k|                            make_eof_scan_error));
 6096|       |
 6097|  5.05k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 1.80k, False: 728]
  ------------------
 6098|  1.80k|                return result_type{
 6099|  1.80k|                    it,
 6100|  1.80k|                    calculate_text_width(make_contiguous_buffer(
 6101|  1.80k|                                             ranges::subrange{rng.begin(), it})
 6102|  1.80k|                                             .view())};
 6103|  1.80k|            }
 6104|    728|            return result_type{it, 0};
 6105|  5.05k|        }
 6106|       |
 6107|  1.01k|        return result_type{rng.begin(), 0};
 6108|  3.54k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  2.29k|    {
 6117|  2.29k|        const bool need_skipped_width =
 6118|  2.29k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 610, False: 1.68k]
  |  Branch (6118:33): [True: 964, False: 722]
  ------------------
 6119|  2.29k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  2.29k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 68, False: 2.22k]
  ------------------
 6122|  2.29k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 578, False: 1.65k]
  ------------------
 6123|    646|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 268, False: 378]
  ------------------
 6124|    646|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 160, False: 108]
  ------------------
 6125|    160|                return result_type{rng.begin(), 0};
 6126|    160|            }
 6127|    486|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|    486|                             specs.fill, need_skipped_width);
 6129|    646|        }
 6130|  1.65k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 1.55k, False: 94]
  ------------------
 6131|  1.65k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.25k, False: 306]
  ------------------
 6132|  1.65k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 394, False: 856]
  |  Branch (6132:35): [True: 366, False: 28]
  ------------------
 6133|  1.25k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 558, False: 326]
  ------------------
 6134|    884|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 406, False: 152]
  ------------------
 6135|    772|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 406, False: 366]
  ------------------
 6136|    406|                const auto initial_width =
 6137|    406|                    specs.precision - prefix_width - value_width;
 6138|    406|                auto max_width_view = take_width(rng, initial_width);
 6139|    406|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|    406|                                  .transform_error(make_eof_scan_error));
 6141|    406|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|    406|            }
 6143|    732|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|    732|                            make_eof_scan_error));
 6145|       |
 6146|    732|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 366, False: 0]
  ------------------
 6147|    366|                return result_type{
 6148|    366|                    it,
 6149|    366|                    calculate_text_width(make_contiguous_buffer(
 6150|    366|                                             ranges::subrange{rng.begin(), it})
 6151|    366|                                             .view())};
 6152|    366|            }
 6153|      0|            return result_type{it, 0};
 6154|    732|        }
 6155|    878|        return result_type{rng.begin(), 0};
 6156|  1.65k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  1.26k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.26k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.26k|            auto rd = make_reader<T, char_type>();
 6232|  1.26k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 648, False: 614]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    648|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    648|    }
  ------------------
 6233|    614|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    614|    {
 6162|    614|        const bool need_skipped_width =
 6163|    614|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 244, False: 370]
  |  Branch (6163:33): [True: 202, False: 168]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    614|        auto it = rng.begin();
 6167|    614|        std::ptrdiff_t prefix_width = 0;
 6168|    614|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 204, False: 410]
  ------------------
 6169|    204|            auto max_width_view = take_width(rng, specs.precision);
 6170|    204|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    184|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    184|            it = prefix_result.first.base();
 6173|    184|            prefix_width = prefix_result.second;
 6174|    184|        }
 6175|    410|        else {
 6176|    410|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    410|            std::tie(it, prefix_width) = prefix_result;
 6178|    410|        }
 6179|    594|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    594|        std::ptrdiff_t value_width = 0;
 6183|    594|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 184, False: 410]
  ------------------
 6184|    184|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 182]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    182|            const auto initial_width = specs.precision - prefix_width;
 6192|    182|            auto max_width_view =
 6193|    182|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    182|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 160, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    160|    }                                                  \
  |  |  |  | 3939|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     22|            it = w_it.base();
 6196|     22|            value_width = initial_width - w_it.count();
 6197|     22|        }
 6198|    410|        else {
 6199|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 374, False: 36]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    374|    }                                                  \
  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     36|                                             specs, value, loc));
 6201|       |
 6202|     36|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 28]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     36|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     58|        std::ptrdiff_t postfix_width = 0;
 6211|     58|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 58, False: 0]
  ------------------
 6212|     58|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     58|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     58|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     58|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 58]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     58|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     58|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     58|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     58|                                 value_width));
 6216|     58|            std::tie(it, postfix_width) = postfix_result;
 6217|     58|        }
 6218|       |
 6219|     58|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     58|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      4|    }
  ------------------
 6220|     58|            specs, prefix_width, value_width, postfix_width));
 6221|     54|        return it;
 6222|     58|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  1.26k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.26k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.26k|            auto rd = make_reader<T, char_type>();
 6232|  1.26k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 648, False: 614]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    648|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    648|    }
  ------------------
 6233|    614|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    614|    {
 6162|    614|        const bool need_skipped_width =
 6163|    614|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 244, False: 370]
  |  Branch (6163:33): [True: 202, False: 168]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    614|        auto it = rng.begin();
 6167|    614|        std::ptrdiff_t prefix_width = 0;
 6168|    614|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 204, False: 410]
  ------------------
 6169|    204|            auto max_width_view = take_width(rng, specs.precision);
 6170|    204|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    184|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    184|            it = prefix_result.first.base();
 6173|    184|            prefix_width = prefix_result.second;
 6174|    184|        }
 6175|    410|        else {
 6176|    410|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    410|            std::tie(it, prefix_width) = prefix_result;
 6178|    410|        }
 6179|    594|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    594|        std::ptrdiff_t value_width = 0;
 6183|    594|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 184, False: 410]
  ------------------
 6184|    184|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 182]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    182|            const auto initial_width = specs.precision - prefix_width;
 6192|    182|            auto max_width_view =
 6193|    182|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    182|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 160, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    160|    }                                                  \
  |  |  |  | 3939|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     22|            it = w_it.base();
 6196|     22|            value_width = initial_width - w_it.count();
 6197|     22|        }
 6198|    410|        else {
 6199|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 374, False: 36]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    374|    }                                                  \
  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     36|                                             specs, value, loc));
 6201|       |
 6202|     36|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 28]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     36|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     58|        std::ptrdiff_t postfix_width = 0;
 6211|     58|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 58, False: 0]
  ------------------
 6212|     58|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     58|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     58|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     58|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 58]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     58|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     58|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     58|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     58|                                 value_width));
 6216|     58|            std::tie(it, postfix_width) = postfix_result;
 6217|     58|        }
 6218|       |
 6219|     58|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     58|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      4|    }
  ------------------
 6220|     58|            specs, prefix_width, value_width, postfix_width));
 6221|     54|        return it;
 6222|     58|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6226|  1.20k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.20k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.20k|            auto rd = make_reader<T, char_type>();
 6232|  1.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 724, False: 476]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    724|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    724|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    724|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    724|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    724|    }
  ------------------
 6233|    476|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.20k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5791|  1.20k|    {
 5792|  1.20k|        reader_error_handler eh{};
 5793|  1.20k|        detail::check_pointer_type_specs(specs, eh);
 5794|  1.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 724, False: 476]
  |  |  ------------------
  ------------------
 5795|    724|            return detail::unexpected_scan_error(
 5796|    724|                scan_error::invalid_format_string, eh.m_msg);
 5797|    724|        }
 5798|    476|        return {};
 5799|  1.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6161|    476|    {
 6162|    476|        const bool need_skipped_width =
 6163|    476|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 234, False: 242]
  |  Branch (6163:33): [True: 134, False: 108]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    476|        auto it = rng.begin();
 6167|    476|        std::ptrdiff_t prefix_width = 0;
 6168|    476|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 136, False: 340]
  ------------------
 6169|    136|            auto max_width_view = take_width(rng, specs.precision);
 6170|    136|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    128|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    128|            it = prefix_result.first.base();
 6173|    128|            prefix_width = prefix_result.second;
 6174|    128|        }
 6175|    340|        else {
 6176|    340|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    340|            std::tie(it, prefix_width) = prefix_result;
 6178|    340|        }
 6179|    468|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    468|        std::ptrdiff_t value_width = 0;
 6183|    468|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 128, False: 340]
  ------------------
 6184|    128|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 126]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    126|            const auto initial_width = specs.precision - prefix_width;
 6192|    126|            auto max_width_view =
 6193|    126|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    126|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     10|            it = w_it.base();
 6196|     10|            value_width = initial_width - w_it.count();
 6197|     10|        }
 6198|    340|        else {
 6199|    340|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 316, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    316|    }                                                  \
  |  | 3939|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     24|                                             specs, value, loc));
 6201|       |
 6202|     24|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 16]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     24|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     34|        std::ptrdiff_t postfix_width = 0;
 6211|     34|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 34, False: 0]
  ------------------
 6212|     34|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     34|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     34|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     34|                                 value_width));
 6216|     34|            std::tie(it, postfix_width) = postfix_result;
 6217|     34|        }
 6218|       |
 6219|     34|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     34|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4, False: 30]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      4|    }
  ------------------
 6220|     34|            specs, prefix_width, value_width, postfix_width));
 6221|     30|        return it;
 6222|     34|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    126|    {
 5822|    126|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    126|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    126|        return read_default(range, value, loc);
 5824|    126|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    126|    {
 5805|    126|        detail::format_specs specs{};
 5806|    126|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    126|        std::uintptr_t intvalue{};
 5809|    126|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|     10|                                                                intvalue, loc));
 5811|     10|        value = reinterpret_cast<void*>(intvalue);
 5812|     10|        return result;
 5813|    126|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    340|    {
 5822|    340|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    340|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    340|        return read_default(range, value, loc);
 5824|    340|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6226|  1.26k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.26k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.26k|            auto rd = make_reader<T, char_type>();
 6232|  1.26k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 540, False: 722]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    540|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    540|    }
  ------------------
 6233|    722|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.26k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.26k|    {
 3156|  1.26k|        reader_error_handler eh{};
 3157|  1.26k|        get_derived().check_specs_impl(specs, eh);
 3158|  1.26k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 540, False: 722]
  |  |  ------------------
  ------------------
 3159|    540|            return detail::unexpected_scan_error(
 3160|    540|                scan_error::invalid_format_string, eh.m_msg);
 3161|    540|        }
 3162|    722|        return {};
 3163|  1.26k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3167|  1.26k|    {
 3168|  1.26k|        return static_cast<Derived&>(*this);
 3169|  1.26k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  1.26k|    {
 5535|  1.26k|        detail::check_bool_type_specs(specs, eh);
 5536|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    722|    {
 6162|    722|        const bool need_skipped_width =
 6163|    722|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 262, False: 460]
  |  Branch (6163:33): [True: 240, False: 220]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    722|        auto it = rng.begin();
 6167|    722|        std::ptrdiff_t prefix_width = 0;
 6168|    722|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 244, False: 478]
  ------------------
 6169|    244|            auto max_width_view = take_width(rng, specs.precision);
 6170|    244|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    222|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    222|            it = prefix_result.first.base();
 6173|    222|            prefix_width = prefix_result.second;
 6174|    222|        }
 6175|    478|        else {
 6176|    478|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    478|            std::tie(it, prefix_width) = prefix_result;
 6178|    478|        }
 6179|    700|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    700|        std::ptrdiff_t value_width = 0;
 6183|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 222, False: 478]
  ------------------
 6184|    222|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 4, False: 218]
  ------------------
 6185|      4|                return detail::unexpected_scan_error(
 6186|      4|                    scan_error::invalid_fill,
 6187|      4|                    "Too many fill characters before value, "
 6188|      4|                    "precision exceeded before reading value");
 6189|      4|            }
 6190|       |
 6191|    218|            const auto initial_width = specs.precision - prefix_width;
 6192|    218|            auto max_width_view =
 6193|    218|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    218|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 196, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    196|    }                                                  \
  |  |  |  | 3939|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     22|            it = w_it.base();
 6196|     22|            value_width = initial_width - w_it.count();
 6197|     22|        }
 6198|    478|        else {
 6199|    478|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 442, False: 36]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    442|    }                                                  \
  |  | 3939|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     36|                                             specs, value, loc));
 6201|       |
 6202|     36|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 28]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     36|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     58|        std::ptrdiff_t postfix_width = 0;
 6211|     58|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 58, False: 0]
  ------------------
 6212|     58|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     58|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     58|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     58|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 58]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     58|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     58|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     58|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     58|                                 value_width));
 6216|     58|            std::tie(it, postfix_width) = postfix_result;
 6217|     58|        }
 6218|       |
 6219|     58|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     58|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      4|    }
  ------------------
 6220|     58|            specs, prefix_width, value_width, postfix_width));
 6221|     54|        return it;
 6222|     58|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    218|    {
 5554|    218|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    218|#if !SCN_DISABLE_LOCALE
 5557|    218|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 28, False: 190]
  ------------------
 5558|     28|            return rd.read_localized(range, loc, value);
 5559|     28|        }
 5560|    190|#endif
 5561|       |
 5562|    190|        return rd.read_classic(range, value);
 5563|    218|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5566|    696|    {
 5567|    696|        SCN_GCC_COMPAT_PUSH
 5568|    696|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    696|        switch (specs.type) {
 5571|    102|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 102, False: 594]
  ------------------
 5572|    102|                return bool_reader_base::allow_text;
 5573|       |
 5574|     24|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 24, False: 672]
  ------------------
 5575|     48|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 24, False: 672]
  ------------------
 5576|     56|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 8, False: 688]
  ------------------
 5577|     76|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 20, False: 676]
  ------------------
 5578|     92|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 16, False: 680]
  ------------------
 5579|    108|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 16, False: 680]
  ------------------
 5580|    108|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    486|            default:
  ------------------
  |  Branch (5582:13): [True: 486, False: 210]
  ------------------
 5583|    486|                return bool_reader_base::allow_text |
 5584|    486|                       bool_reader_base::allow_numeric;
 5585|    696|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    696|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     28|    {
 5465|     28|        scan_error err{scan_error::invalid_scanned_value,
 5466|     28|                       "Failed to read boolean"};
 5467|       |
 5468|     28|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 26, False: 2]
  ------------------
 5469|     26|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 4, False: 22]
  ------------------
 5470|      4|                return *r;
 5471|      4|            }
 5472|     22|            else {
 5473|     22|                err = r.error();
 5474|     22|            }
 5475|     26|        }
 5476|       |
 5477|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 14, False: 10]
  ------------------
 5478|     14|            auto stdloc = loc.get<std::locale>();
 5479|     14|            const auto& numpunct =
 5480|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     14|            const auto truename = numpunct.truename();
 5482|     14|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     14|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 14]
  ------------------
 5485|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     14|            else {
 5489|     14|                err = r.error();
 5490|     14|            }
 5491|     14|        }
 5492|       |
 5493|     24|        return unexpected(err);
 5494|     24|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    182|    {
 5421|    182|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 22, False: 160]
  ------------------
 5422|     22|            value = false;
 5423|     22|            return *r;
 5424|     22|        }
 5425|    160|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 160]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    160|        return detail::unexpected_scan_error(
 5431|    160|            scan_error::invalid_scanned_value,
 5432|    160|            "Failed to read numeric boolean value: No match");
 5433|    160|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    342|{
 2246|    342|    auto it = read_code_unit(range);
 2247|    342|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 342]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    342|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 320, False: 22]
  |  |  ------------------
  ------------------
 2252|    342|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    320|        return unexpected(parse_error::error);
 2254|    320|    }
 2255|       |
 2256|     22|    return *it;
 2257|    342|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5504|     14|    {
 5505|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     14|        const auto shorter = std::pair{
 5507|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 14, False: 0]
  ------------------
 5508|     14|        const auto longer = std::pair{
 5509|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 14]
  ------------------
 5510|       |
 5511|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 14]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 14]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     14|        return detail::unexpected_scan_error(
 5521|     14|            scan_error::invalid_scanned_value,
 5522|     14|            "Failed to read textual boolean: No match");
 5523|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     28|{
 2279|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    320|{
 1956|    320|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    320|    else {
 1967|    320|        auto it = range.begin();
 1968|    320|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 320]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.42k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.23k, False: 190]
  ------------------
 1973|  1.23k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 130, False: 1.10k]
  ------------------
 1974|    130|                return unexpected(eof_error::eof);
 1975|    130|            }
 1976|  1.23k|        }
 1977|       |
 1978|    190|        return it;
 1979|    320|    }
 1980|    320|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    320|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    320|    else {
 1116|    320|        return 0;
 1117|    320|    }
 1118|    320|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    190|    {
 5392|    190|        scan_error err{scan_error::invalid_scanned_value,
 5393|    190|                       "Failed to read boolean"};
 5394|       |
 5395|    190|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 156, False: 34]
  ------------------
 5396|    156|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 18, False: 138]
  ------------------
 5397|     18|                return *r;
 5398|     18|            }
 5399|    138|            else {
 5400|    138|                err = r.error();
 5401|    138|            }
 5402|    156|        }
 5403|       |
 5404|    172|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 146, False: 26]
  ------------------
 5405|    146|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 146]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    146|            else {
 5409|    146|                err = r.error();
 5410|    146|            }
 5411|    146|        }
 5412|       |
 5413|    172|        return unexpected(err);
 5414|    172|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    146|    {
 5439|    146|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 146]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    146|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 146]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    146|        return detail::unexpected_scan_error(
 5449|    146|            scan_error::invalid_scanned_value,
 5450|    146|            "Failed to read textual boolean value: No match");
 5451|    146|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    292|{
 2294|    292|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 112, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    112|    }                                                  \
  |  |  |  | 3939|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    180|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    180|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|    180|    else {
 2306|    180|        auto range_it = range.begin();
 2307|    180|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 180, False: 0]
  ------------------
 2308|    180|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 180, False: 0]
  |  |  ------------------
  ------------------
 2309|    180|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|    180|                return unexpected(parse_error::error);
 2311|    180|            }
 2312|    180|        }
 2313|      0|        return it;
 2314|    180|    }
 2315|    180|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    478|    {
 5554|    478|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    478|#if !SCN_DISABLE_LOCALE
 5557|    478|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 30, False: 448]
  ------------------
 5558|     30|            return rd.read_localized(range, loc, value);
 5559|     30|        }
 5560|    448|#endif
 5561|       |
 5562|    448|        return rd.read_classic(range, value);
 5563|    478|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     30|    {
 5465|     30|        scan_error err{scan_error::invalid_scanned_value,
 5466|     30|                       "Failed to read boolean"};
 5467|       |
 5468|     30|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 28, False: 2]
  ------------------
 5469|     28|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 6, False: 22]
  ------------------
 5470|      6|                return *r;
 5471|      6|            }
 5472|     22|            else {
 5473|     22|                err = r.error();
 5474|     22|            }
 5475|     28|        }
 5476|       |
 5477|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 12, False: 12]
  ------------------
 5478|     12|            auto stdloc = loc.get<std::locale>();
 5479|     12|            const auto& numpunct =
 5480|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     12|            const auto truename = numpunct.truename();
 5482|     12|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     12|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 12]
  ------------------
 5485|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     12|            else {
 5489|     12|                err = r.error();
 5490|     12|            }
 5491|     12|        }
 5492|       |
 5493|     24|        return unexpected(err);
 5494|     24|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5504|     12|    {
 5505|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     12|        const auto shorter = std::pair{
 5507|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 12, False: 0]
  ------------------
 5508|     12|        const auto longer = std::pair{
 5509|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 12]
  ------------------
 5510|       |
 5511|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 12]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 12]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     12|        return detail::unexpected_scan_error(
 5521|     12|            scan_error::invalid_scanned_value,
 5522|     12|            "Failed to read textual boolean: No match");
 5523|     12|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     24|{
 2279|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     22|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2285|     22|        return unexpected(parse_error::error);
 2286|     22|    }
 2287|      0|    return it;
 2288|     22|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6226|  1.20k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.20k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.20k|            auto rd = make_reader<T, char_type>();
 6232|  1.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 640, False: 560]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    640|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    640|    }
  ------------------
 6233|    560|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    560|    {
 6162|    560|        const bool need_skipped_width =
 6163|    560|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 240, False: 320]
  |  Branch (6163:33): [True: 174, False: 146]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    560|        auto it = rng.begin();
 6167|    560|        std::ptrdiff_t prefix_width = 0;
 6168|    560|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 176, False: 384]
  ------------------
 6169|    176|            auto max_width_view = take_width(rng, specs.precision);
 6170|    176|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    176|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    176|            it = prefix_result.first.base();
 6173|    176|            prefix_width = prefix_result.second;
 6174|    176|        }
 6175|    384|        else {
 6176|    384|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    384|            std::tie(it, prefix_width) = prefix_result;
 6178|    384|        }
 6179|    560|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    560|        std::ptrdiff_t value_width = 0;
 6183|    560|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 176, False: 384]
  ------------------
 6184|    176|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 174]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    174|            const auto initial_width = specs.precision - prefix_width;
 6192|    174|            auto max_width_view =
 6193|    174|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    174|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    138|            it = w_it.base();
 6196|    138|            value_width = initial_width - w_it.count();
 6197|    138|        }
 6198|    384|        else {
 6199|    384|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 40, False: 344]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     40|    }                                                  \
  |  | 3939|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    344|                                             specs, value, loc));
 6201|       |
 6202|    344|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 232, False: 112]
  ------------------
 6203|    232|                value_width = calculate_text_width(
 6204|    232|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    232|                        .view());
 6206|    232|            }
 6207|    344|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    482|        std::ptrdiff_t postfix_width = 0;
 6211|    482|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 482, False: 0]
  ------------------
 6212|    482|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    482|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 482]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    482|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    482|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    482|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    482|                                 value_width));
 6216|    482|            std::tie(it, postfix_width) = postfix_result;
 6217|    482|        }
 6218|       |
 6219|    482|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    482|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 226, False: 256]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    226|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    226|    }
  ------------------
 6220|    482|            specs, prefix_width, value_width, postfix_width));
 6221|    256|        return it;
 6222|    482|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|  1.26k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.26k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.26k|            auto rd = make_reader<T, char_type>();
 6232|  1.26k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 632, False: 630]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    632|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    632|    }
  ------------------
 6233|    630|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    630|    {
 6162|    630|        const bool need_skipped_width =
 6163|    630|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 248, False: 382]
  |  Branch (6163:33): [True: 182, False: 200]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    630|        auto it = rng.begin();
 6167|    630|        std::ptrdiff_t prefix_width = 0;
 6168|    630|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 186, False: 444]
  ------------------
 6169|    186|            auto max_width_view = take_width(rng, specs.precision);
 6170|    186|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 170]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    170|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    170|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    170|            it = prefix_result.first.base();
 6173|    170|            prefix_width = prefix_result.second;
 6174|    170|        }
 6175|    444|        else {
 6176|    444|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    444|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    444|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    444|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 444]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    444|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    444|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    444|            std::tie(it, prefix_width) = prefix_result;
 6178|    444|        }
 6179|    614|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    614|        std::ptrdiff_t value_width = 0;
 6183|    614|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 170, False: 444]
  ------------------
 6184|    170|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 4, False: 166]
  ------------------
 6185|      4|                return detail::unexpected_scan_error(
 6186|      4|                    scan_error::invalid_fill,
 6187|      4|                    "Too many fill characters before value, "
 6188|      4|                    "precision exceeded before reading value");
 6189|      4|            }
 6190|       |
 6191|    166|            const auto initial_width = specs.precision - prefix_width;
 6192|    166|            auto max_width_view =
 6193|    166|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    166|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 146, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    146|    }                                                  \
  |  |  |  | 3939|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     20|            it = w_it.base();
 6196|     20|            value_width = initial_width - w_it.count();
 6197|     20|        }
 6198|    444|        else {
 6199|    444|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    444|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    444|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 364, False: 80]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    364|    }                                                  \
  |  | 3939|    444|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    444|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     80|                                             specs, value, loc));
 6201|       |
 6202|     80|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 72]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     80|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    100|        std::ptrdiff_t postfix_width = 0;
 6211|    100|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 100, False: 0]
  ------------------
 6212|    100|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    100|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    100|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    100|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    100|                                 value_width));
 6216|    100|            std::tie(it, postfix_width) = postfix_result;
 6217|    100|        }
 6218|       |
 6219|    100|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    100|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4, False: 96]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      4|    }
  ------------------
 6220|    100|            specs, prefix_width, value_width, postfix_width));
 6221|     96|        return it;
 6222|    100|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  1.20k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.20k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.20k|            auto rd = make_reader<T, char_type>();
 6232|  1.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 236, False: 964]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    236|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    236|    }
  ------------------
 6233|    964|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|    964|    {
 6162|    964|        const bool need_skipped_width =
 6163|    964|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 314, False: 650]
  |  Branch (6163:33): [True: 368, False: 282]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    964|        auto it = rng.begin();
 6167|    964|        std::ptrdiff_t prefix_width = 0;
 6168|    964|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 374, False: 590]
  ------------------
 6169|    374|            auto max_width_view = take_width(rng, specs.precision);
 6170|    374|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    364|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    364|            it = prefix_result.first.base();
 6173|    364|            prefix_width = prefix_result.second;
 6174|    364|        }
 6175|    590|        else {
 6176|    590|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 590]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    590|            std::tie(it, prefix_width) = prefix_result;
 6178|    590|        }
 6179|    954|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    954|        std::ptrdiff_t value_width = 0;
 6183|    954|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 364, False: 590]
  ------------------
 6184|    364|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 358]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    358|            const auto initial_width = specs.precision - prefix_width;
 6192|    358|            auto max_width_view =
 6193|    358|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    358|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    358|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    300|            it = w_it.base();
 6196|    300|            value_width = initial_width - w_it.count();
 6197|    300|        }
 6198|    590|        else {
 6199|    590|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 54, False: 536]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     54|    }                                                  \
  |  | 3939|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    536|                                             specs, value, loc));
 6201|       |
 6202|    536|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 306, False: 230]
  ------------------
 6203|    306|                value_width = calculate_text_width(
 6204|    306|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    306|                        .view());
 6206|    306|            }
 6207|    536|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    836|        std::ptrdiff_t postfix_width = 0;
 6211|    836|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 502, False: 334]
  ------------------
 6212|    502|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 502]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    502|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    502|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    502|                                 value_width));
 6216|    502|            std::tie(it, postfix_width) = postfix_result;
 6217|    502|        }
 6218|       |
 6219|    836|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 758]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6220|    836|            specs, prefix_width, value_width, postfix_width));
 6221|    758|        return it;
 6222|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  1.20k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.20k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.20k|            auto rd = make_reader<T, char_type>();
 6232|  1.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 236, False: 964]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    236|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    236|    }
  ------------------
 6233|    964|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|    964|    {
 6162|    964|        const bool need_skipped_width =
 6163|    964|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 314, False: 650]
  |  Branch (6163:33): [True: 368, False: 282]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    964|        auto it = rng.begin();
 6167|    964|        std::ptrdiff_t prefix_width = 0;
 6168|    964|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 374, False: 590]
  ------------------
 6169|    374|            auto max_width_view = take_width(rng, specs.precision);
 6170|    374|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    364|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    364|            it = prefix_result.first.base();
 6173|    364|            prefix_width = prefix_result.second;
 6174|    364|        }
 6175|    590|        else {
 6176|    590|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 590]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    590|            std::tie(it, prefix_width) = prefix_result;
 6178|    590|        }
 6179|    954|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    954|        std::ptrdiff_t value_width = 0;
 6183|    954|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 364, False: 590]
  ------------------
 6184|    364|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 358]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    358|            const auto initial_width = specs.precision - prefix_width;
 6192|    358|            auto max_width_view =
 6193|    358|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    358|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    358|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    300|            it = w_it.base();
 6196|    300|            value_width = initial_width - w_it.count();
 6197|    300|        }
 6198|    590|        else {
 6199|    590|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 54, False: 536]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     54|    }                                                  \
  |  | 3939|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    536|                                             specs, value, loc));
 6201|       |
 6202|    536|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 306, False: 230]
  ------------------
 6203|    306|                value_width = calculate_text_width(
 6204|    306|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    306|                        .view());
 6206|    306|            }
 6207|    536|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    836|        std::ptrdiff_t postfix_width = 0;
 6211|    836|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 502, False: 334]
  ------------------
 6212|    502|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 502]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    502|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    502|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    502|                                 value_width));
 6216|    502|            std::tie(it, postfix_width) = postfix_result;
 6217|    502|        }
 6218|       |
 6219|    836|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 758]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6220|    836|            specs, prefix_width, value_width, postfix_width));
 6221|    758|        return it;
 6222|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  1.20k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.20k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.20k|            auto rd = make_reader<T, char_type>();
 6232|  1.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 236, False: 964]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    236|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    236|    }
  ------------------
 6233|    964|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|    964|    {
 6162|    964|        const bool need_skipped_width =
 6163|    964|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 314, False: 650]
  |  Branch (6163:33): [True: 368, False: 282]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    964|        auto it = rng.begin();
 6167|    964|        std::ptrdiff_t prefix_width = 0;
 6168|    964|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 374, False: 590]
  ------------------
 6169|    374|            auto max_width_view = take_width(rng, specs.precision);
 6170|    374|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    364|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    364|            it = prefix_result.first.base();
 6173|    364|            prefix_width = prefix_result.second;
 6174|    364|        }
 6175|    590|        else {
 6176|    590|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 590]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    590|            std::tie(it, prefix_width) = prefix_result;
 6178|    590|        }
 6179|    954|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    954|        std::ptrdiff_t value_width = 0;
 6183|    954|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 364, False: 590]
  ------------------
 6184|    364|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 358]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    358|            const auto initial_width = specs.precision - prefix_width;
 6192|    358|            auto max_width_view =
 6193|    358|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    358|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    358|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    300|            it = w_it.base();
 6196|    300|            value_width = initial_width - w_it.count();
 6197|    300|        }
 6198|    590|        else {
 6199|    590|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 54, False: 536]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     54|    }                                                  \
  |  | 3939|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    536|                                             specs, value, loc));
 6201|       |
 6202|    536|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 306, False: 230]
  ------------------
 6203|    306|                value_width = calculate_text_width(
 6204|    306|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    306|                        .view());
 6206|    306|            }
 6207|    536|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    836|        std::ptrdiff_t postfix_width = 0;
 6211|    836|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 502, False: 334]
  ------------------
 6212|    502|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 502]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    502|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    502|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    502|                                 value_width));
 6216|    502|            std::tie(it, postfix_width) = postfix_result;
 6217|    502|        }
 6218|       |
 6219|    836|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 78, False: 758]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     78|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     78|    }
  ------------------
 6220|    836|            specs, prefix_width, value_width, postfix_width));
 6221|    758|        return it;
 6222|    836|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    622|    {
 3543|    622|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    622|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|    622|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 622]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.24k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.24k|                parse_integer_digits_without_thsep(
 3562|  1.24k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.24k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.24k|        auto buf = make_contiguous_buffer(
 3566|  1.24k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.24k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 622, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    622|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    622|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    622|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    622|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    622|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.24k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    622|    {
 3543|    622|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    622|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|    622|        if constexpr (!std::is_signed_v<T>) {
 3547|    622|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 622]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|    622|        }
 3554|       |
 3555|    622|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 622]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.24k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.24k|                parse_integer_digits_without_thsep(
 3562|  1.24k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.24k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.24k|        auto buf = make_contiguous_buffer(
 3566|  1.24k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.24k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 622, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    622|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    622|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    622|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    622|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    622|    }                                                  \
  |  |  |  | 3939|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.24k|    }

LLVMFuzzerTestOneInput:
   68|  2.73k|{
   69|  2.73k|    scn::fuzz::run(data, size);
   70|  2.73k|    return 0;
   71|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  2.73k|{
   52|  2.73k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 2.73k]
  |  Branch (52:35): [True: 0, False: 2.73k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  2.73k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  2.73k|    run_for_source(sv);
   59|  2.73k|    run_for_source(wsv_reinterpret);
   60|  2.73k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 2.73k, False: 0]
  ------------------
   61|  2.73k|        run_for_source(wsv_transcode);
   62|  2.73k|    }
   63|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  2.73k|{
   37|  2.73k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  2.73k|    run_for_type<char_type>(source);
   40|  2.73k|    run_for_type<int>(source);
   41|  2.73k|    run_for_type<unsigned>(source);
   42|  2.73k|    run_for_type<double>(source);
   43|  2.73k|    run_for_type<bool>(source);
   44|  2.73k|    run_for_type<void*>(source);
   45|  2.73k|    run_for_type<std::string>(source);
   46|  2.73k|    run_for_type<std::wstring>(source);
   47|  2.73k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  2.73k|{
   25|  2.73k|    {
   26|  2.73k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.73k|    }
   28|  2.73k|    {
   29|  2.73k|        auto _ =
   30|  2.73k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.73k|    }
   32|  2.73k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  5.47k|{
   37|  5.47k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  5.47k|    run_for_type<char_type>(source);
   40|  5.47k|    run_for_type<int>(source);
   41|  5.47k|    run_for_type<unsigned>(source);
   42|  5.47k|    run_for_type<double>(source);
   43|  5.47k|    run_for_type<bool>(source);
   44|  5.47k|    run_for_type<void*>(source);
   45|  5.47k|    run_for_type<std::string>(source);
   46|  5.47k|    run_for_type<std::wstring>(source);
   47|  5.47k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  5.47k|{
   25|  5.47k|    {
   26|  5.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.47k|    }
   28|  5.47k|    {
   29|  5.47k|        auto _ =
   30|  5.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.47k|    }
   32|  5.47k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.73k|{
   53|  2.73k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.73k|    string_buffer.resize(size);
   57|  2.73k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.73k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.73k|    const auto wsv_reinterpret_size =
   62|  2.73k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 91, False: 2.64k]
  ------------------
   63|  2.73k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.73k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.73k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.73k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.73k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.73k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.73k|}

